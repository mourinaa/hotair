
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Wholesaler.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using CONFDB.Entities;
using CONFDB.Entities.Validation;
using Entities = CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace CONFDB.Services
{		
	
	///<summary>
	/// An object representation of the 'Wholesaler' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the Wholesaler.cs file instead.
	/// All custom implementations should be done in the <see cref="Wholesaler"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class WholesalerServiceBase : ServiceBase<Wholesaler, WholesalerKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="Wholesaler"/> instance .
		///</summary>
		public WholesalerServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Wholesaler"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_companyName"></param>
		///<param name="_companyShortName"></param>
		///<param name="_retailPriCustomerNumber"></param>
		///<param name="_retailPriCustomerNumberLikeExp"></param>
		///<param name="_defaultModCodeLength"></param>
		///<param name="_defaultPassCodeLength"></param>
		///<param name="_defaultPasswordLength"></param>
		///<param name="_defaultCapsOk"></param>
		///<param name="_moderatorTxt"></param>
		///<param name="_participantTxt"></param>
		///<param name="_enabled"></param>
		///<param name="_customerNumberExceptionList"></param>
		///<param name="_webProductProviderName"></param>
		///<param name="_webProductProviderBranding"></param>
		///<param name="_webSecProductProvider"></param>
		///<param name="_currencyId"></param>
		///<param name="_billingWholesalerId"></param>
		///<param name="_billingCustomerNumber"></param>
		///<param name="_taxableId"></param>
		///<param name="_webSiteUrl"></param>
		///<param name="_adminSiteUrl"></param>
		///<param name="_adminSiteIp"></param>
		///<param name="_selfServeUrl"></param>
		///<param name="_selfServeIp"></param>
		///<param name="_webConferencingUrl"></param>
		///<param name="_webConferencingIp"></param>
		///<param name="_supportEmail"></param>
		///<param name="_supportPhoneNumber"></param>
		///<param name="_doRetailBilling"></param>
		///<param name="_commissionLockDate"></param>
		///<param name="_portalId">Link to the DNN Portal</param>
		///<param name="_billingAddress1"></param>
		///<param name="_billingAddress2"></param>
		///<param name="_billingCity"></param>
		///<param name="_billingCountry"></param>
		///<param name="_billingRegion">State, Province, etc.</param>
		///<param name="_billingPostalCode"></param>
		public static Wholesaler CreateWholesaler(System.String _id, System.String _companyName, System.String _companyShortName, System.String _retailPriCustomerNumber, System.String _retailPriCustomerNumberLikeExp, System.Byte? _defaultModCodeLength, System.Byte? _defaultPassCodeLength, System.Byte? _defaultPasswordLength, System.Boolean? _defaultCapsOk, System.String _moderatorTxt, System.String _participantTxt, System.Boolean? _enabled, System.String _customerNumberExceptionList, System.String _webProductProviderName, System.String _webProductProviderBranding, System.String _webSecProductProvider, System.String _currencyId, System.String _billingWholesalerId, System.String _billingCustomerNumber, System.Int32 _taxableId, System.String _webSiteUrl, System.String _adminSiteUrl, System.String _adminSiteIp, System.String _selfServeUrl, System.String _selfServeIp, System.String _webConferencingUrl, System.String _webConferencingIp, System.String _supportEmail, System.String _supportPhoneNumber, System.Boolean _doRetailBilling, System.DateTime? _commissionLockDate, System.Int32? _portalId, System.String _billingAddress1, System.String _billingAddress2, System.String _billingCity, System.String _billingCountry, System.String _billingRegion, System.String _billingPostalCode)
		{
			Wholesaler newEntityWholesaler = new Wholesaler();
			newEntityWholesaler.Id  = _id;
			newEntityWholesaler.CompanyName  = _companyName;
			newEntityWholesaler.CompanyShortName  = _companyShortName;
			newEntityWholesaler.RetailPriCustomerNumber  = _retailPriCustomerNumber;
			newEntityWholesaler.RetailPriCustomerNumberLikeExp  = _retailPriCustomerNumberLikeExp;
			newEntityWholesaler.DefaultModCodeLength  = _defaultModCodeLength;
			newEntityWholesaler.DefaultPassCodeLength  = _defaultPassCodeLength;
			newEntityWholesaler.DefaultPasswordLength  = _defaultPasswordLength;
			newEntityWholesaler.DefaultCapsOk  = _defaultCapsOk;
			newEntityWholesaler.ModeratorTxt  = _moderatorTxt;
			newEntityWholesaler.ParticipantTxt  = _participantTxt;
			newEntityWholesaler.Enabled  = _enabled;
			newEntityWholesaler.CustomerNumberExceptionList  = _customerNumberExceptionList;
			newEntityWholesaler.WebProductProviderName  = _webProductProviderName;
			newEntityWholesaler.WebProductProviderBranding  = _webProductProviderBranding;
			newEntityWholesaler.WebSecProductProvider  = _webSecProductProvider;
			newEntityWholesaler.CurrencyId  = _currencyId;
			newEntityWholesaler.BillingWholesalerId  = _billingWholesalerId;
			newEntityWholesaler.BillingCustomerNumber  = _billingCustomerNumber;
			newEntityWholesaler.TaxableId  = _taxableId;
			newEntityWholesaler.WebSiteUrl  = _webSiteUrl;
			newEntityWholesaler.AdminSiteUrl  = _adminSiteUrl;
			newEntityWholesaler.AdminSiteIp  = _adminSiteIp;
			newEntityWholesaler.SelfServeUrl  = _selfServeUrl;
			newEntityWholesaler.SelfServeIp  = _selfServeIp;
			newEntityWholesaler.WebConferencingUrl  = _webConferencingUrl;
			newEntityWholesaler.WebConferencingIp  = _webConferencingIp;
			newEntityWholesaler.SupportEmail  = _supportEmail;
			newEntityWholesaler.SupportPhoneNumber  = _supportPhoneNumber;
			newEntityWholesaler.DoRetailBilling  = _doRetailBilling;
			newEntityWholesaler.CommissionLockDate  = _commissionLockDate;
			newEntityWholesaler.PortalId  = _portalId;
			newEntityWholesaler.BillingAddress1  = _billingAddress1;
			newEntityWholesaler.BillingAddress2  = _billingAddress2;
			newEntityWholesaler.BillingCity  = _billingCity;
			newEntityWholesaler.BillingCountry  = _billingCountry;
			newEntityWholesaler.BillingRegion  = _billingRegion;
			newEntityWholesaler.BillingPostalCode  = _billingPostalCode;
			return newEntityWholesaler;
		}
		#endregion Constructors


		#region Fields
		private static SecurityContext<Wholesaler> securityContext = new SecurityContext<Wholesaler>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<Wholesaler> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the Currency_Wholesaler_FK1 key.
		///		Currency_Wholesaler_FK1 Description: 
		/// </summary>
		/// <param name="_currencyId"></param>
		/// <returns>Returns a generic collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByCurrencyId(System.String _currencyId)
		{
			int totalCount = -1;
			return GetByCurrencyId(_currencyId, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the Currency_Wholesaler_FK1 key.
		///		Currency_Wholesaler_FK1 Description: 
		/// </summary>
		/// <param name="_currencyId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{Wholesaler}" /> of <c>Wholesaler</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByCurrencyId(System.String _currencyId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCurrencyId");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {					
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Access repository
				list = new TList<Wholesaler>(dataProvider.WholesalerProvider.GetByCurrencyId(transactionManager, _currencyId, start, pageLength, out totalCount));
				
				//intentionally leave transaction open on a read operation.
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_Country key.
		///		FK_Wholesaler_Country Description: 
		/// </summary>
		/// <param name="_billingCountry"></param>
		/// <returns>Returns a generic collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByBillingCountry(System.String _billingCountry)
		{
			int totalCount = -1;
			return GetByBillingCountry(_billingCountry, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_Country key.
		///		FK_Wholesaler_Country Description: 
		/// </summary>
		/// <param name="_billingCountry"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{Wholesaler}" /> of <c>Wholesaler</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByBillingCountry(System.String _billingCountry, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByBillingCountry");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {					
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Access repository
				list = new TList<Wholesaler>(dataProvider.WholesalerProvider.GetByBillingCountry(transactionManager, _billingCountry, start, pageLength, out totalCount));
				
				//intentionally leave transaction open on a read operation.
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_State key.
		///		FK_Wholesaler_State Description: 
		/// </summary>
		/// <param name="_billingRegion">State, Province, etc.</param>
		/// <returns>Returns a generic collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByBillingRegion(System.String _billingRegion)
		{
			int totalCount = -1;
			return GetByBillingRegion(_billingRegion, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_State key.
		///		FK_Wholesaler_State Description: 
		/// </summary>
		/// <param name="_billingRegion">State, Province, etc.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{Wholesaler}" /> of <c>Wholesaler</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByBillingRegion(System.String _billingRegion, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByBillingRegion");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {					
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Access repository
				list = new TList<Wholesaler>(dataProvider.WholesalerProvider.GetByBillingRegion(transactionManager, _billingRegion, start, pageLength, out totalCount));
				
				//intentionally leave transaction open on a read operation.
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_Taxable key.
		///		FK_Wholesaler_Taxable Description: 
		/// </summary>
		/// <param name="_taxableId"></param>
		/// <returns>Returns a generic collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByTaxableId(System.Int32 _taxableId)
		{
			int totalCount = -1;
			return GetByTaxableId(_taxableId, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the FK_Wholesaler_Taxable key.
		///		FK_Wholesaler_Taxable Description: 
		/// </summary>
		/// <param name="_taxableId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{Wholesaler}" /> of <c>Wholesaler</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByTaxableId(System.Int32 _taxableId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByTaxableId");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {					
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Access repository
				list = new TList<Wholesaler>(dataProvider.WholesalerProvider.GetByTaxableId(transactionManager, _taxableId, start, pageLength, out totalCount));
				
				//intentionally leave transaction open on a read operation.
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override Wholesaler Get(WholesalerKey key)
		{
			return GetById(key.Id);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the primary key Wholesaler_PK index.
		/// </summary>
		/// <param name="_id"></param>
		/// <returns>Returns an instance of the <see cref="Wholesaler"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Wholesaler GetById(System.String _id)
		{
			int totalCount = -1;
			return GetById(_id, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Wholesaler}" /> from the datasource based on the primary key Wholesaler_PK index.
		/// </summary>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="Wholesaler"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Wholesaler GetById(System.String _id, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetById");
			totalCount = -1;
			
			Wholesaler entity = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				entity = dataProvider.WholesalerProvider.GetById(transactionManager, _id, start, pageLength, out totalCount)   as Wholesaler;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="Wholesaler" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<Wholesaler> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="Wholesaler" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{Wholesaler}"/> </returns>
		public virtual TList<Wholesaler> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.WholesalerProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a  larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{Wholesaler}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public virtual TList<Wholesaler> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{Wholesaler}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public virtual TList<Wholesaler> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{Wholesaler}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public override TList<Wholesaler> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.WholesalerProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<Wholesaler> Find(string whereClause)
		{
			int totalCount = -1;
			return Find(whereClause, 0, defaultMaxRecords, out totalCount);
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{Wholesaler} of <c>Wholesaler</c> objects.</returns>
		public override TList<Wholesaler> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
								
			// get this data
			TList<Wholesaler> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.WholesalerProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public virtual TList<Wholesaler> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public virtual TList<Wholesaler> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>Wholesaler</c> objects.</returns>
		public virtual TList<Wholesaler> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			TList<Wholesaler> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.WholesalerProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// 	public virtualmethod that Inserts a Wholesaler object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Wholesaler object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the Wholesaler object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// Wholesaler entity = new Wholesaler();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		WholesalerService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(Wholesaler entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Insert", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.WholesalerProvider.Insert(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// 	public virtual method that Inserts rows in <see cref="TList{Wholesaler}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Wholesaler</c> objects in a <see cref="TList{Wholesaler}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>Wholesaler</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of Wholesaler.
        /// <code><![CDATA[
		/// TList<Wholesaler> list = new TList<Wholesaler>();
		/// Wholesaler entity = new Wholesaler();
		/// entity.StringProperty = "foo";
		/// Wholesaler entity2 = new Wholesaler();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	WholesalerService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<Wholesaler> Insert(TList<Wholesaler> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<Wholesaler>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Insert
				dataProvider.WholesalerProvider.Insert(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// 	public virtualmethod that Updates a Wholesaler object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Wholesaler object to Update.</param>
		/// <remarks>After Updateing into the datasource, the Wholesaler object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	Wholesaler entity = WholesalerService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		WholesalerService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(Wholesaler entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Update", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.WholesalerProvider.Update(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// 	public virtual method that Updates rows in <see cref="TList{Wholesaler}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Wholesaler</c> objects in a <see cref="TList{Wholesaler}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>Wholesaler</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of Wholesaler.
        /// <code><![CDATA[
		/// TList<Wholesaler> list = new TList<Wholesaler>();
		/// Wholesaler entity = new Wholesaler();
		/// entity.StringProperty = "foo";
		/// Wholesaler entity2 = new Wholesaler();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	WholesalerService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<Wholesaler> Update(TList<Wholesaler> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<Wholesaler>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Update
				dataProvider.WholesalerProvider.Update(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// 	public virtualmethod that Saves a Wholesaler object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Wholesaler object to Save.</param>
		/// <remarks>After Saveing into the datasource, the Wholesaler object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	Wholesaler entity = WholesalerService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		WholesalerService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override Wholesaler Save(Wholesaler entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Save", entity.Error);
			
			TransactionManager transactionManager = null; 
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				dataProvider.WholesalerProvider.Save(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// 	public virtual method that Saves rows in <see cref="TList{Wholesaler}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Wholesaler</c> objects in a <see cref="TList{Wholesaler}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>Wholesaler</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of Wholesaler.
        /// <code><![CDATA[
		/// TList<Wholesaler> list = new TList<Wholesaler>();
		/// Wholesaler entity = new Wholesaler();
		/// entity.StringProperty = "foo";
		/// Wholesaler entity2 = new Wholesaler();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	WholesalerService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<Wholesaler> Save(TList<Wholesaler> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<Wholesaler>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Save
				dataProvider.WholesalerProvider.Save(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// 	public virtualmethod that Deletes a Wholesaler object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Wholesaler object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the Wholesaler object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	Wholesaler entity = WholesalerService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		WholesalerService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(Wholesaler entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Delete", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.WholesalerProvider.Delete(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// 	public virtual method that Deletes rows in <see cref="TList{Wholesaler}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Wholesaler</c> objects in a <see cref="TList{Wholesaler}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>Wholesaler</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of Wholesaler.
        /// <code><![CDATA[
		/// TList<Wholesaler> list = new TList<Wholesaler>();
		/// Wholesaler entity = new Wholesaler();
		/// entity.StringProperty = "foo";
		/// Wholesaler entity2 = new Wholesaler();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	WholesalerService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<Wholesaler> Delete(TList<Wholesaler> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<Wholesaler>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Delete
				dataProvider.WholesalerProvider.Delete(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(WholesalerKey key)
		{
			return Delete(key.Id );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.String _id
		/// </summary>
		/// <param name="_id">Wholesaler pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.String _id)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");

			bool result = false;
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Delete
				result = dataProvider.WholesalerProvider.Delete(transactionManager, _id);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#region GetByLanguageIdFromIrWholesaler
		/// <summary>
		///		Gets Wholesaler objects from the datasource by LanguageID in the
		///		IRWholesaler table. Table Wholesaler is related to table Language
		///		through the (M:N) relationship defined in the IRWholesaler table.
		/// </summary>
		/// <param name="_languageId"></param>
		/// <returns>Returns a typed collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByLanguageIdFromIrWholesaler(System.String _languageId)
		{
			int totalRecords = -1;
			return GetByLanguageIdFromIrWholesaler(_languageId, 0, defaultMaxRecords, out totalRecords);
		}
		
		/// <summary>
		///		Gets Wholesaler objects from the datasource by LanguageID in the
		///		IRWholesaler table. Table Wholesaler is related to table Language
		///		through the (M:N) relationship defined in the IRWholesaler table.
		/// </summary>
		/// <param name="_languageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out param: Total Number of results returned.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Wholesaler objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Wholesaler> GetByLanguageIdFromIrWholesaler(System.String _languageId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLanguageIdFromIrWholesaler");
			TList<Wholesaler> list = null;
			TransactionManager transactionManager = null; 
			totalCount = -1;
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//call data provider
				list = dataProvider.WholesalerProvider.GetByLanguageIdFromIrWholesaler(transactionManager, _languageId, start,  pageLength, out totalCount);
	        
				//This is read only transaction, let tran go if open 
            	
			}
            catch (Exception exc)
            {
				//if open, rollback if there was an error.
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return list;			
		}
		#endregion GetByLanguageIdFromIrWholesaler
		
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region p_Wholesaler_Product_InstallDefaults
		/// <summary>
		///	This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
		/// </summary>
		/// <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="productId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Product_InstallDefaults(System.Int32? wholesaler_ProductId, System.Int32? productId, System.String wholesalerId)
		{
			 Product_InstallDefaults( wholesaler_ProductId, productId, wholesalerId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
		/// </summary>
		/// <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="productId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Product_InstallDefaults( System.Int32? wholesaler_ProductId, System.Int32? productId, System.String wholesalerId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Product_InstallDefaults");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.WholesalerProvider.Product_InstallDefaults(transactionManager, start, pageLength , wholesaler_ProductId, productId, wholesalerId);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Wholesaler_UpdateProductFeature
		/// <summary>
		///	This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
		/// <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateProductFeature(System.String wholesalerId, System.Int32? wholesaler_Product_FeatureId, System.Int32? featureId, System.Int32? featureOptionId, System.String featureOptionValue, System.Boolean? updateCustomers, System.Boolean? updateModerators)
		{
			 UpdateProductFeature( wholesalerId, wholesaler_Product_FeatureId, featureId, featureOptionId, featureOptionValue, updateCustomers, updateModerators, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
		/// <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateProductFeature( System.String wholesalerId, System.Int32? wholesaler_Product_FeatureId, System.Int32? featureId, System.Int32? featureOptionId, System.String featureOptionValue, System.Boolean? updateCustomers, System.Boolean? updateModerators, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateProductFeature");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.WholesalerProvider.UpdateProductFeature(transactionManager, start, pageLength , wholesalerId, wholesaler_Product_FeatureId, featureId, featureOptionId, featureOptionValue, updateCustomers, updateModerators);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Wholesaler_GetProductRates
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductRates(System.String wholesalerId)
		{
			return GetProductRates( wholesalerId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductRates( System.String wholesalerId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetProductRates");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.WholesalerProvider.GetProductRates(transactionManager, start, pageLength , wholesalerId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region p_Wholesaler_GetProductFeatures
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductFeatures(System.String wholesalerId)
		{
			return GetProductFeatures( wholesalerId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductFeatures( System.String wholesalerId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetProductFeatures");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.WholesalerProvider.GetProductFeatures(transactionManager, start, pageLength , wholesalerId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="Wholesaler"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_id"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Wholesaler Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="Wholesaler"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Wholesaler DeepLoadById(System.String _id, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadById");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			Wholesaler entity = GetById(_id);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">Wholesaler Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(Wholesaler)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Wholesaler entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Wholesaler)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">Wholesaler Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Wholesaler entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="Wholesaler"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Wholesaler Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Wholesaler entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			TransactionManager transactionManager = null; 

			try
            {
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Call Deep Load from the Repository
				dataProvider.WholesalerProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
	        
				//leave tran open if used
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{Wholesaler}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Wholesaler)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{Wholesaler}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<Wholesaler> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{Wholesaler}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Wholesaler)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{Wholesaler}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<Wholesaler> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{Wholesaler}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{Wholesaler}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="Wholesaler"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<Wholesaler> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			TransactionManager transactionManager = null; 

			try
            {
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Call Deep Load from the Repository
				dataProvider.WholesalerProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
	        
				//leave transaction open if used, this read is part of a larger transaction
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="Wholesaler"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">Wholesaler Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(Wholesaler entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the Wholesaler object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">Wholesaler Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>Wholesaler</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(Wholesaler entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new Entities.EntityNotValidException(entity, "DeepSave");
			}
			
			bool result = false;
			TransactionManager transactionManager = null; 
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Save
				result = dataProvider.WholesalerProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
				
				//If success, Commit
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;

            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{Wholesaler}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{Wholesaler} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<Wholesaler> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{Wholesaler}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{Wholesaler}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">Wholesaler Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<Wholesaler> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{				
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "DeepSave");
			}
			
			bool result = false;
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.WholesalerProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
				
				//If success and not borrowed, Commit
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                    transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;

            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace





