
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file Vw_CustomerTransactionList.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using CONFDB.Entities;
using CONFDB.Entities.Validation;
using Entities = CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace CONFDB.Services
{		
	
	///<summary>
	/// An object representation of the 'vw_CustomerTransactionList' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the Vw_CustomerTransactionList.cs file instead.
	/// All custom implementations should be done in the <see cref="Vw_CustomerTransactionList"/> class.
	/// </remarks>
	[DataObject]
	public partial class Vw_CustomerTransactionListServiceBase : ServiceViewBase<Vw_CustomerTransactionList>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="Vw_CustomerTransactionList"/> instance .
		///</summary>
		public Vw_CustomerTransactionListServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vw_CustomerTransactionList"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_customerTransactionTypeId"></param>
		///<param name="_customerTransactionTypeDisplayName"></param>
		///<param name="_transactionDescription"></param>
		///<param name="_transactionDate"></param>
		///<param name="_transactionAmount"></param>
		///<param name="_localTaxRate"></param>
		///<param name="_federalTaxRate"></param>
		///<param name="_localTaxAmount"></param>
		///<param name="_federalTaxAmount"></param>
		///<param name="_transactionTotal"></param>
		///<param name="_customerBalance"></param>
		///<param name="_wholesaler_ProductId"></param>
		///<param name="_productRateId"></param>
		///<param name="_quantity"></param>
		///<param name="_sellRate"></param>
		///<param name="_buyRate"></param>
		///<param name="_wsTransactionAmount"></param>
		///<param name="_referenceNumber"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_postedDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_postedToInvoice"></param>
		///<param name="_postedToInvoiceDate"></param>
		///<param name="_elapsedTimeSeconds"></param>
		///<param name="_productRateDisplayName"></param>
		///<param name="_wholesaler_ProductName"></param>
		///<param name="_moderatorName"></param>
		///<param name="_conferenceName"></param>
		///<param name="_moderatorConferenceName"></param>
		public static Vw_CustomerTransactionList CreateVw_CustomerTransactionList(System.Int64 _id, System.String _wholesalerId, System.Int32 _customerId, System.Int32? _moderatorId, System.String _priCustomerNumber, System.String _secCustomerNumber, System.Int32 _customerTransactionTypeId, System.String _customerTransactionTypeDisplayName, System.String _transactionDescription, System.DateTime _transactionDate, System.Decimal? _transactionAmount, System.Decimal? _localTaxRate, System.Decimal? _federalTaxRate, System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, System.Decimal? _transactionTotal, System.Decimal? _customerBalance, System.Int32? _wholesaler_ProductId, System.Int32? _productRateId, System.Int32? _quantity, System.Decimal? _sellRate, System.Decimal? _buyRate, System.Decimal? _wsTransactionAmount, System.String _referenceNumber, System.String _uniqueConferenceId, System.DateTime _postedDate, System.String _modifiedBy, System.DateTime? _createdDate, System.Boolean? _postedToInvoice, System.DateTime? _postedToInvoiceDate, System.Int32? _elapsedTimeSeconds, System.String _productRateDisplayName, System.String _wholesaler_ProductName, System.String _moderatorName, System.String _conferenceName, System.String _moderatorConferenceName)
		{
			Vw_CustomerTransactionList newEntityVw_CustomerTransactionList = new Vw_CustomerTransactionList();
			newEntityVw_CustomerTransactionList.Id  = _id;
			newEntityVw_CustomerTransactionList.WholesalerId  = _wholesalerId;
			newEntityVw_CustomerTransactionList.CustomerId  = _customerId;
			newEntityVw_CustomerTransactionList.ModeratorId  = _moderatorId;
			newEntityVw_CustomerTransactionList.PriCustomerNumber  = _priCustomerNumber;
			newEntityVw_CustomerTransactionList.SecCustomerNumber  = _secCustomerNumber;
			newEntityVw_CustomerTransactionList.CustomerTransactionTypeId  = _customerTransactionTypeId;
			newEntityVw_CustomerTransactionList.CustomerTransactionTypeDisplayName  = _customerTransactionTypeDisplayName;
			newEntityVw_CustomerTransactionList.TransactionDescription  = _transactionDescription;
			newEntityVw_CustomerTransactionList.TransactionDate  = _transactionDate;
			newEntityVw_CustomerTransactionList.TransactionAmount  = _transactionAmount;
			newEntityVw_CustomerTransactionList.LocalTaxRate  = _localTaxRate;
			newEntityVw_CustomerTransactionList.FederalTaxRate  = _federalTaxRate;
			newEntityVw_CustomerTransactionList.LocalTaxAmount  = _localTaxAmount;
			newEntityVw_CustomerTransactionList.FederalTaxAmount  = _federalTaxAmount;
			newEntityVw_CustomerTransactionList.TransactionTotal  = _transactionTotal;
			newEntityVw_CustomerTransactionList.CustomerBalance  = _customerBalance;
			newEntityVw_CustomerTransactionList.Wholesaler_ProductId  = _wholesaler_ProductId;
			newEntityVw_CustomerTransactionList.ProductRateId  = _productRateId;
			newEntityVw_CustomerTransactionList.Quantity  = _quantity;
			newEntityVw_CustomerTransactionList.SellRate  = _sellRate;
			newEntityVw_CustomerTransactionList.BuyRate  = _buyRate;
			newEntityVw_CustomerTransactionList.WsTransactionAmount  = _wsTransactionAmount;
			newEntityVw_CustomerTransactionList.ReferenceNumber  = _referenceNumber;
			newEntityVw_CustomerTransactionList.UniqueConferenceId  = _uniqueConferenceId;
			newEntityVw_CustomerTransactionList.PostedDate  = _postedDate;
			newEntityVw_CustomerTransactionList.ModifiedBy  = _modifiedBy;
			newEntityVw_CustomerTransactionList.CreatedDate  = _createdDate;
			newEntityVw_CustomerTransactionList.PostedToInvoice  = _postedToInvoice;
			newEntityVw_CustomerTransactionList.PostedToInvoiceDate  = _postedToInvoiceDate;
			newEntityVw_CustomerTransactionList.ElapsedTimeSeconds  = _elapsedTimeSeconds;
			newEntityVw_CustomerTransactionList.ProductRateDisplayName  = _productRateDisplayName;
			newEntityVw_CustomerTransactionList.Wholesaler_ProductName  = _wholesaler_ProductName;
			newEntityVw_CustomerTransactionList.ModeratorName  = _moderatorName;
			newEntityVw_CustomerTransactionList.ConferenceName  = _conferenceName;
			newEntityVw_CustomerTransactionList.ModeratorConferenceName  = _moderatorConferenceName;
			return newEntityVw_CustomerTransactionList;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<Vw_CustomerTransactionList> securityContext = new SecurityContext<Vw_CustomerTransactionList>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<Vw_CustomerTransactionList> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{Vw_CustomerTransactionList} of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public override VList<Vw_CustomerTransactionList> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<Vw_CustomerTransactionList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_CustomerTransactionListProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="Vw_CustomerTransactionList" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<Vw_CustomerTransactionList> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="Vw_CustomerTransactionList" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{Vw_CustomerTransactionList}"/> </returns>
		public override VList<Vw_CustomerTransactionList> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<Vw_CustomerTransactionList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.Vw_CustomerTransactionListProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_CustomerTransactionList}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public virtual VList<Vw_CustomerTransactionList> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_CustomerTransactionList}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public virtual VList<Vw_CustomerTransactionList> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{Vw_CustomerTransactionList}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public override VList<Vw_CustomerTransactionList> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<Vw_CustomerTransactionList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_CustomerTransactionListProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public virtual VList<Vw_CustomerTransactionList> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public virtual VList<Vw_CustomerTransactionList> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>Vw_CustomerTransactionList</c> objects.</returns>
		public override VList<Vw_CustomerTransactionList> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<Vw_CustomerTransactionList> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_CustomerTransactionListProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



