
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file Vw_FeatureOptionsForModerators.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using CONFDB.Entities;
using CONFDB.Entities.Validation;
using Entities = CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace CONFDB.Services
{		
	
	///<summary>
	/// An object representation of the 'vw_FeatureOptionsForModerators' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the Vw_FeatureOptionsForModerators.cs file instead.
	/// All custom implementations should be done in the <see cref="Vw_FeatureOptionsForModerators"/> class.
	/// </remarks>
	[DataObject]
	public partial class Vw_FeatureOptionsForModeratorsServiceBase : ServiceViewBase<Vw_FeatureOptionsForModerators>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="Vw_FeatureOptionsForModerators"/> instance .
		///</summary>
		public Vw_FeatureOptionsForModeratorsServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vw_FeatureOptionsForModerators"/> instance.
		///</summary>
		///<param name="_moderatorId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_moderator_FeatureId"></param>
		///<param name="_moderator_FeatureFeatureId"></param>
		///<param name="_moderator_FeatureFeatureOptionId"></param>
		///<param name="_moderator_FeatureEnabled"></param>
		///<param name="_moderator_FeatureFeatureOptionValue"></param>
		///<param name="_featureId"></param>
		///<param name="_featureProductId"></param>
		///<param name="_featureName"></param>
		///<param name="_featureDisplayName"></param>
		///<param name="_featureDescription"></param>
		///<param name="_featureDisplayNameAlt"></param>
		///<param name="_featureDescriptionAlt"></param>
		///<param name="_featureDefaultOption"></param>
		///<param name="_featureEnabled"></param>
		///<param name="_featureDisplayOrder"></param>
		///<param name="_featureDisplayOnlyToCustomer"></param>
		///<param name="_featureDisplayInAmpSite"></param>
		///<param name="_featureDisplayToCustomer"></param>
		///<param name="_featureDisplayToModerator"></param>
		///<param name="_featureOptionId"></param>
		///<param name="_featureOptionFeatureId"></param>
		///<param name="_featureOptionName"></param>
		///<param name="_featureOptionDisplayName"></param>
		///<param name="_featureOptionDescription"></param>
		///<param name="_featureOptionDisplayNameAlt"></param>
		///<param name="_featureOptionDescriptionAlt"></param>
		///<param name="_featureOptionValue"></param>
		///<param name="_featureOptionDisplayOrder"></param>
		///<param name="_featureOptionDefaultOption"></param>
		///<param name="_featureOptionEnabled"></param>
		///<param name="_featureOptionFeatureOptionTypeId"></param>
		///<param name="_featureOptionRegularExpression"></param>
		///<param name="_featureOptionTypeId"></param>
		///<param name="_featureOptionTypeName"></param>
		///<param name="_featureOptionTypeDescription"></param>
		///<param name="_featureOptionTypeDisplayOrder"></param>
		///<param name="_wholesaler_ProductProductId"></param>
		///<param name="_wholesaler_ProductName"></param>
		///<param name="_wholesaler_ProductDescription"></param>
		///<param name="_wholesaler_ProductDisplayNameAlt"></param>
		///<param name="_wholesaler_ProductDescriptionAlt"></param>
		///<param name="_wholesaler_ProductDisplayOrder"></param>
		///<param name="_wholesaler_ProductEnabled"></param>
		public static Vw_FeatureOptionsForModerators CreateVw_FeatureOptionsForModerators(System.Int32 _moderatorId, System.String _wholesalerId, System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber, System.String _externalModeratorNumber, System.Int32 _moderator_FeatureId, System.Int32 _moderator_FeatureFeatureId, System.Int32 _moderator_FeatureFeatureOptionId, System.Boolean _moderator_FeatureEnabled, System.String _moderator_FeatureFeatureOptionValue, System.Int32 _featureId, System.Int32 _featureProductId, System.String _featureName, System.String _featureDisplayName, System.String _featureDescription, System.String _featureDisplayNameAlt, System.String _featureDescriptionAlt, System.Boolean _featureDefaultOption, System.Boolean _featureEnabled, System.Int32 _featureDisplayOrder, System.Boolean _featureDisplayOnlyToCustomer, System.Boolean _featureDisplayInAmpSite, System.Boolean _featureDisplayToCustomer, System.Boolean _featureDisplayToModerator, System.Int32 _featureOptionId, System.Int32 _featureOptionFeatureId, System.String _featureOptionName, System.String _featureOptionDisplayName, System.String _featureOptionDescription, System.String _featureOptionDisplayNameAlt, System.String _featureOptionDescriptionAlt, System.String _featureOptionValue, System.Int32 _featureOptionDisplayOrder, System.Boolean _featureOptionDefaultOption, System.Boolean _featureOptionEnabled, System.Int32? _featureOptionFeatureOptionTypeId, System.String _featureOptionRegularExpression, System.Int32? _featureOptionTypeId, System.String _featureOptionTypeName, System.String _featureOptionTypeDescription, System.Int16? _featureOptionTypeDisplayOrder, System.Int32 _wholesaler_ProductProductId, System.String _wholesaler_ProductName, System.String _wholesaler_ProductDescription, System.String _wholesaler_ProductDisplayNameAlt, System.String _wholesaler_ProductDescriptionAlt, System.Int32? _wholesaler_ProductDisplayOrder, System.Boolean? _wholesaler_ProductEnabled)
		{
			Vw_FeatureOptionsForModerators newEntityVw_FeatureOptionsForModerators = new Vw_FeatureOptionsForModerators();
			newEntityVw_FeatureOptionsForModerators.ModeratorId  = _moderatorId;
			newEntityVw_FeatureOptionsForModerators.WholesalerId  = _wholesalerId;
			newEntityVw_FeatureOptionsForModerators.CustomerId  = _customerId;
			newEntityVw_FeatureOptionsForModerators.PriCustomerNumber  = _priCustomerNumber;
			newEntityVw_FeatureOptionsForModerators.SecCustomerNumber  = _secCustomerNumber;
			newEntityVw_FeatureOptionsForModerators.ExternalModeratorNumber  = _externalModeratorNumber;
			newEntityVw_FeatureOptionsForModerators.Moderator_FeatureId  = _moderator_FeatureId;
			newEntityVw_FeatureOptionsForModerators.Moderator_FeatureFeatureId  = _moderator_FeatureFeatureId;
			newEntityVw_FeatureOptionsForModerators.Moderator_FeatureFeatureOptionId  = _moderator_FeatureFeatureOptionId;
			newEntityVw_FeatureOptionsForModerators.Moderator_FeatureEnabled  = _moderator_FeatureEnabled;
			newEntityVw_FeatureOptionsForModerators.Moderator_FeatureFeatureOptionValue  = _moderator_FeatureFeatureOptionValue;
			newEntityVw_FeatureOptionsForModerators.FeatureId  = _featureId;
			newEntityVw_FeatureOptionsForModerators.FeatureProductId  = _featureProductId;
			newEntityVw_FeatureOptionsForModerators.FeatureName  = _featureName;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayName  = _featureDisplayName;
			newEntityVw_FeatureOptionsForModerators.FeatureDescription  = _featureDescription;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayNameAlt  = _featureDisplayNameAlt;
			newEntityVw_FeatureOptionsForModerators.FeatureDescriptionAlt  = _featureDescriptionAlt;
			newEntityVw_FeatureOptionsForModerators.FeatureDefaultOption  = _featureDefaultOption;
			newEntityVw_FeatureOptionsForModerators.FeatureEnabled  = _featureEnabled;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayOrder  = _featureDisplayOrder;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayOnlyToCustomer  = _featureDisplayOnlyToCustomer;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayInAmpSite  = _featureDisplayInAmpSite;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayToCustomer  = _featureDisplayToCustomer;
			newEntityVw_FeatureOptionsForModerators.FeatureDisplayToModerator  = _featureDisplayToModerator;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionId  = _featureOptionId;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionFeatureId  = _featureOptionFeatureId;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionName  = _featureOptionName;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDisplayName  = _featureOptionDisplayName;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDescription  = _featureOptionDescription;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDisplayNameAlt  = _featureOptionDisplayNameAlt;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDescriptionAlt  = _featureOptionDescriptionAlt;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionValue  = _featureOptionValue;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDisplayOrder  = _featureOptionDisplayOrder;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionDefaultOption  = _featureOptionDefaultOption;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionEnabled  = _featureOptionEnabled;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionFeatureOptionTypeId  = _featureOptionFeatureOptionTypeId;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionRegularExpression  = _featureOptionRegularExpression;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionTypeId  = _featureOptionTypeId;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionTypeName  = _featureOptionTypeName;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionTypeDescription  = _featureOptionTypeDescription;
			newEntityVw_FeatureOptionsForModerators.FeatureOptionTypeDisplayOrder  = _featureOptionTypeDisplayOrder;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductProductId  = _wholesaler_ProductProductId;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductName  = _wholesaler_ProductName;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductDescription  = _wholesaler_ProductDescription;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductDisplayNameAlt  = _wholesaler_ProductDisplayNameAlt;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductDescriptionAlt  = _wholesaler_ProductDescriptionAlt;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductDisplayOrder  = _wholesaler_ProductDisplayOrder;
			newEntityVw_FeatureOptionsForModerators.Wholesaler_ProductEnabled  = _wholesaler_ProductEnabled;
			return newEntityVw_FeatureOptionsForModerators;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<Vw_FeatureOptionsForModerators> securityContext = new SecurityContext<Vw_FeatureOptionsForModerators>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<Vw_FeatureOptionsForModerators> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{Vw_FeatureOptionsForModerators} of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public override VList<Vw_FeatureOptionsForModerators> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<Vw_FeatureOptionsForModerators> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_FeatureOptionsForModeratorsProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="Vw_FeatureOptionsForModerators" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<Vw_FeatureOptionsForModerators> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="Vw_FeatureOptionsForModerators" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{Vw_FeatureOptionsForModerators}"/> </returns>
		public override VList<Vw_FeatureOptionsForModerators> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<Vw_FeatureOptionsForModerators> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.Vw_FeatureOptionsForModeratorsProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_FeatureOptionsForModerators}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public virtual VList<Vw_FeatureOptionsForModerators> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_FeatureOptionsForModerators}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public virtual VList<Vw_FeatureOptionsForModerators> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{Vw_FeatureOptionsForModerators}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public override VList<Vw_FeatureOptionsForModerators> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<Vw_FeatureOptionsForModerators> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_FeatureOptionsForModeratorsProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public virtual VList<Vw_FeatureOptionsForModerators> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public virtual VList<Vw_FeatureOptionsForModerators> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>Vw_FeatureOptionsForModerators</c> objects.</returns>
		public override VList<Vw_FeatureOptionsForModerators> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<Vw_FeatureOptionsForModerators> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_FeatureOptionsForModeratorsProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



