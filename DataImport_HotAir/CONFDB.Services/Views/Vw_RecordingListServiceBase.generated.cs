
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file Vw_RecordingList.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using CONFDB.Entities;
using CONFDB.Entities.Validation;
using Entities = CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace CONFDB.Services
{		
	
	///<summary>
	/// An object representation of the 'vw_RecordingList' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the Vw_RecordingList.cs file instead.
	/// All custom implementations should be done in the <see cref="Vw_RecordingList"/> class.
	/// </remarks>
	[DataObject]
	public partial class Vw_RecordingListServiceBase : ServiceViewBase<Vw_RecordingList>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="Vw_RecordingList"/> instance .
		///</summary>
		public Vw_RecordingListServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vw_RecordingList"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_bridgeId"></param>
		///<param name="_recordingStartTime"></param>
		///<param name="_recordingEndTime"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_replayCode"></param>
		///<param name="_createdDate"></param>
		///<param name="_processFlag"></param>
		///<param name="_emailSent"></param>
		///<param name="_rpFileNumber"></param>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_mp3Flag"></param>
		///<param name="_mp3SizeInKb"></param>
		///<param name="_enabled"></param>
		///<param name="_storageDuration"></param>
		///<param name="_billingDuration"></param>
		///<param name="_billingId"></param>
		///<param name="_durationSec"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_mediaType"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_conferenceName"></param>
		///<param name="_username"></param>
		///<param name="_displayName"></param>
		///<param name="_extendRecordingDate"></param>
		///<param name="_userId"></param>
		///<param name="_hostedLinkType"></param>
		///<param name="_hostedLinkUrl"></param>
		///<param name="_recordingGuid"></param>
		public static Vw_RecordingList CreateVw_RecordingList(System.Int32 _id, System.String _wholesalerId, System.Int32? _bridgeId, System.DateTime? _recordingStartTime, System.DateTime? _recordingEndTime, System.String _moderatorCode, System.String _passCode, System.String _priCustomerNumber, System.String _secCustomerNumber, System.String _recordingDirectory, System.String _uniqueConferenceId, System.String _replayCode, System.DateTime? _createdDate, System.String _processFlag, System.Boolean? _emailSent, System.String _rpFileNumber, System.Int32? _moderatorId, System.String _notes, System.String _mp3Flag, System.Int32? _mp3SizeInKb, System.Boolean? _enabled, System.Int16? _storageDuration, System.Int16? _billingDuration, System.String _billingId, System.Int32? _durationSec, System.String _auxiliaryConferenceId, System.String _mediaType, System.DateTime? _hostedLinkExpiryDate, System.String _conferenceName, System.String _username, System.String _displayName, System.DateTime? _extendRecordingDate, System.Int32 _userId, System.String _hostedLinkType, System.String _hostedLinkUrl, System.String _recordingGuid)
		{
			Vw_RecordingList newEntityVw_RecordingList = new Vw_RecordingList();
			newEntityVw_RecordingList.Id  = _id;
			newEntityVw_RecordingList.WholesalerId  = _wholesalerId;
			newEntityVw_RecordingList.BridgeId  = _bridgeId;
			newEntityVw_RecordingList.RecordingStartTime  = _recordingStartTime;
			newEntityVw_RecordingList.RecordingEndTime  = _recordingEndTime;
			newEntityVw_RecordingList.ModeratorCode  = _moderatorCode;
			newEntityVw_RecordingList.PassCode  = _passCode;
			newEntityVw_RecordingList.PriCustomerNumber  = _priCustomerNumber;
			newEntityVw_RecordingList.SecCustomerNumber  = _secCustomerNumber;
			newEntityVw_RecordingList.RecordingDirectory  = _recordingDirectory;
			newEntityVw_RecordingList.UniqueConferenceId  = _uniqueConferenceId;
			newEntityVw_RecordingList.ReplayCode  = _replayCode;
			newEntityVw_RecordingList.CreatedDate  = _createdDate;
			newEntityVw_RecordingList.ProcessFlag  = _processFlag;
			newEntityVw_RecordingList.EmailSent  = _emailSent;
			newEntityVw_RecordingList.RpFileNumber  = _rpFileNumber;
			newEntityVw_RecordingList.ModeratorId  = _moderatorId;
			newEntityVw_RecordingList.Notes  = _notes;
			newEntityVw_RecordingList.Mp3Flag  = _mp3Flag;
			newEntityVw_RecordingList.Mp3SizeInKb  = _mp3SizeInKb;
			newEntityVw_RecordingList.Enabled  = _enabled;
			newEntityVw_RecordingList.StorageDuration  = _storageDuration;
			newEntityVw_RecordingList.BillingDuration  = _billingDuration;
			newEntityVw_RecordingList.BillingId  = _billingId;
			newEntityVw_RecordingList.DurationSec  = _durationSec;
			newEntityVw_RecordingList.AuxiliaryConferenceId  = _auxiliaryConferenceId;
			newEntityVw_RecordingList.MediaType  = _mediaType;
			newEntityVw_RecordingList.HostedLinkExpiryDate  = _hostedLinkExpiryDate;
			newEntityVw_RecordingList.ConferenceName  = _conferenceName;
			newEntityVw_RecordingList.Username  = _username;
			newEntityVw_RecordingList.DisplayName  = _displayName;
			newEntityVw_RecordingList.ExtendRecordingDate  = _extendRecordingDate;
			newEntityVw_RecordingList.UserId  = _userId;
			newEntityVw_RecordingList.HostedLinkType  = _hostedLinkType;
			newEntityVw_RecordingList.HostedLinkUrl  = _hostedLinkUrl;
			newEntityVw_RecordingList.RecordingGuid  = _recordingGuid;
			return newEntityVw_RecordingList;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<Vw_RecordingList> securityContext = new SecurityContext<Vw_RecordingList>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<Vw_RecordingList> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{Vw_RecordingList} of <c>Vw_RecordingList</c> objects.</returns>
		public override VList<Vw_RecordingList> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<Vw_RecordingList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_RecordingListProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="Vw_RecordingList" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<Vw_RecordingList> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="Vw_RecordingList" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{Vw_RecordingList}"/> </returns>
		public override VList<Vw_RecordingList> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<Vw_RecordingList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.Vw_RecordingListProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_RecordingList}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public virtual VList<Vw_RecordingList> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{Vw_RecordingList}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public virtual VList<Vw_RecordingList> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{Vw_RecordingList}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public override VList<Vw_RecordingList> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<Vw_RecordingList> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_RecordingListProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public virtual VList<Vw_RecordingList> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public virtual VList<Vw_RecordingList> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>Vw_RecordingList</c> objects.</returns>
		public override VList<Vw_RecordingList> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<Vw_RecordingList> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.Vw_RecordingListProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



