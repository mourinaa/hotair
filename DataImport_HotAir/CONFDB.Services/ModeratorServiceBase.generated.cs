
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Moderator.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using CONFDB.Entities;
using CONFDB.Entities.Validation;
using Entities = CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace CONFDB.Services
{		
	
	///<summary>
	/// An object representation of the 'Moderator' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the Moderator.cs file instead.
	/// All custom implementations should be done in the <see cref="Moderator"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class ModeratorServiceBase : ServiceBase<Moderator, ModeratorKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="Moderator"/> instance .
		///</summary>
		public ModeratorServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Moderator"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_description">The description of the conference, like a title.</param>
		///<param name="_departmentId"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_enabled"></param>
		///<param name="_uniqueModeratorId"></param>
		///<param name="_userId"></param>
		///<param name="_webMeetingId">Used to reference a Persony meeting id.</param>
		///<param name="_omnovia_Room_Id"></param>
		///<param name="_seevogh_Meeting_Url"></param>
		///<param name="_seeVoghMeetingId"></param>
		public static Moderator CreateModerator(System.String _wholesalerId, System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber, System.String _externalModeratorNumber, System.String _moderatorCode, System.String _passCode, System.String _description, System.Int32 _departmentId, System.String _modifiedBy, System.DateTime _createdDate, System.DateTime _lastModified, System.Boolean? _enabled, System.Guid _uniqueModeratorId, System.Int32? _userId, System.String _webMeetingId, System.Int32? _omnovia_Room_Id, System.String _seevogh_Meeting_Url, System.String _seeVoghMeetingId)
		{
			Moderator newEntityModerator = new Moderator();
			newEntityModerator.WholesalerId  = _wholesalerId;
			newEntityModerator.CustomerId  = _customerId;
			newEntityModerator.PriCustomerNumber  = _priCustomerNumber;
			newEntityModerator.SecCustomerNumber  = _secCustomerNumber;
			newEntityModerator.ExternalModeratorNumber  = _externalModeratorNumber;
			newEntityModerator.ModeratorCode  = _moderatorCode;
			newEntityModerator.PassCode  = _passCode;
			newEntityModerator.Description  = _description;
			newEntityModerator.DepartmentId  = _departmentId;
			newEntityModerator.ModifiedBy  = _modifiedBy;
			newEntityModerator.CreatedDate  = _createdDate;
			newEntityModerator.LastModified  = _lastModified;
			newEntityModerator.Enabled  = _enabled;
			newEntityModerator.UniqueModeratorId  = _uniqueModeratorId;
			newEntityModerator.UserId  = _userId;
			newEntityModerator.WebMeetingId  = _webMeetingId;
			newEntityModerator.Omnovia_Room_Id  = _omnovia_Room_Id;
			newEntityModerator.Seevogh_Meeting_Url  = _seevogh_Meeting_Url;
			newEntityModerator.SeeVoghMeetingId  = _seeVoghMeetingId;
			return newEntityModerator;
		}
		#endregion Constructors


		#region Fields
		private static SecurityContext<Moderator> securityContext = new SecurityContext<Moderator>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 50000;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<Moderator> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override Moderator Get(ModeratorKey key)
		{
			return GetById(key.Id);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key Moderator_PK index.
		/// </summary>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetById(System.Int32 _id)
		{
			int totalCount = -1;
			return GetById(_id, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key Moderator_PK index.
		/// </summary>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetById(System.Int32 _id, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetById");
			totalCount = -1;
			
			Moderator entity = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				entity = dataProvider.ModeratorProvider.GetById(transactionManager, _id, start, pageLength, out totalCount)   as Moderator;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key UI_Moderator_AcctID_PriAcct_SecAcct index.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber)
		{
			int totalCount = -1;
			return GetByCustomerIdPriCustomerNumberSecCustomerNumber(_customerId, _priCustomerNumber, _secCustomerNumber, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key UI_Moderator_AcctID_PriAcct_SecAcct index.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCustomerIdPriCustomerNumberSecCustomerNumber");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByCustomerIdPriCustomerNumberSecCustomerNumber(transactionManager, _customerId, _priCustomerNumber, _secCustomerNumber, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String _wholesalerId, System.String _priCustomerNumber, System.String _secCustomerNumber)
		{
			int totalCount = -1;
			return GetByWholesalerIdPriCustomerNumberSecCustomerNumber(_wholesalerId, _priCustomerNumber, _secCustomerNumber, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String _wholesalerId, System.String _priCustomerNumber, System.String _secCustomerNumber, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWholesalerIdPriCustomerNumberSecCustomerNumber");
			totalCount = -1;
			
			Moderator entity = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				entity = dataProvider.ModeratorProvider.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(transactionManager, _wholesalerId, _priCustomerNumber, _secCustomerNumber, start, pageLength, out totalCount)   as Moderator;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_CustomerID index.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByCustomerId(System.Int32 _customerId)
		{
			int totalCount = -1;
			return GetByCustomerId(_customerId, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_CustomerID index.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByCustomerId(System.Int32 _customerId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCustomerId");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByCustomerId(transactionManager, _customerId, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_WholesalerID_ModeratorID index.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByWholesalerIdId(System.String _wholesalerId, System.Int32 _id)
		{
			int totalCount = -1;
			return GetByWholesalerIdId(_wholesalerId, _id, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_WholesalerID_ModeratorID index.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByWholesalerIdId(System.String _wholesalerId, System.Int32 _id, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWholesalerIdId");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByWholesalerIdId(transactionManager, _wholesalerId, _id, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_ModeratorCode index.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByModeratorCode(System.String _moderatorCode)
		{
			int totalCount = -1;
			return GetByModeratorCode(_moderatorCode, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_ModeratorCode index.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByModeratorCode(System.String _moderatorCode, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByModeratorCode");
			totalCount = -1;
			
			Moderator entity = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				entity = dataProvider.ModeratorProvider.GetByModeratorCode(transactionManager, _moderatorCode, start, pageLength, out totalCount)   as Moderator;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_ModeratorCode_PassCode index.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <param name="_passCode"></param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByModeratorCodePassCode(System.String _moderatorCode, System.String _passCode)
		{
			int totalCount = -1;
			return GetByModeratorCodePassCode(_moderatorCode, _passCode, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_ModeratorCode_PassCode index.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <param name="_passCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByModeratorCodePassCode(System.String _moderatorCode, System.String _passCode, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByModeratorCodePassCode");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByModeratorCodePassCode(transactionManager, _moderatorCode, _passCode, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_PassCode index.
		/// </summary>
		/// <param name="_passCode"></param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByPassCode(System.String _passCode)
		{
			int totalCount = -1;
			return GetByPassCode(_passCode, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_PassCode index.
		/// </summary>
		/// <param name="_passCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator GetByPassCode(System.String _passCode, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByPassCode");
			totalCount = -1;
			
			Moderator entity = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				entity = dataProvider.ModeratorProvider.GetByPassCode(transactionManager, _passCode, start, pageLength, out totalCount)   as Moderator;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_DepartmentID index.
		/// </summary>
		/// <param name="_departmentId"></param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByDepartmentId(System.Int32 _departmentId)
		{
			int totalCount = -1;
			return GetByDepartmentId(_departmentId, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_DepartmentID index.
		/// </summary>
		/// <param name="_departmentId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByDepartmentId(System.Int32 _departmentId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDepartmentId");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByDepartmentId(transactionManager, _departmentId, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_UserID index.
		/// </summary>
		/// <param name="_userId"></param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByUserId(System.Int32? _userId)
		{
			int totalCount = -1;
			return GetByUserId(_userId, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{Moderator}" /> from the datasource based on the primary key IX_Moderator_UserID index.
		/// </summary>
		/// <param name="_userId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{Moderator}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByUserId(System.Int32? _userId, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserId");
			totalCount = -1;
			
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				 transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					
				
				//Access Repository
				list = dataProvider.ModeratorProvider.GetByUserId(transactionManager, _userId, start, pageLength, out totalCount)  ;
			
				//if borrowed tran, leave open for next call
				
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="Moderator" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<Moderator> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="Moderator" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{Moderator}"/> </returns>
		public virtual TList<Moderator> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			TList<Moderator> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ModeratorProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a  larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{Moderator}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public virtual TList<Moderator> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{Moderator}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public virtual TList<Moderator> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{Moderator}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public override TList<Moderator> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			TList<Moderator> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ModeratorProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<Moderator> Find(string whereClause)
		{
			int totalCount = -1;
			return Find(whereClause, 0, defaultMaxRecords, out totalCount);
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{Moderator} of <c>Moderator</c> objects.</returns>
		public override TList<Moderator> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
								
			// get this data
			TList<Moderator> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ModeratorProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public virtual TList<Moderator> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public virtual TList<Moderator> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>Moderator</c> objects.</returns>
		public virtual TList<Moderator> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			TList<Moderator> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ModeratorProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// 	public virtualmethod that Inserts a Moderator object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Moderator object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the Moderator object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// Moderator entity = new Moderator();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		ModeratorService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(Moderator entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Insert", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.ModeratorProvider.Insert(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// 	public virtual method that Inserts rows in <see cref="TList{Moderator}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Moderator</c> objects in a <see cref="TList{Moderator}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>Moderator</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of Moderator.
        /// <code><![CDATA[
		/// TList<Moderator> list = new TList<Moderator>();
		/// Moderator entity = new Moderator();
		/// entity.StringProperty = "foo";
		/// Moderator entity2 = new Moderator();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	ModeratorService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<Moderator> Insert(TList<Moderator> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<Moderator>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Insert
				dataProvider.ModeratorProvider.Insert(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// 	public virtualmethod that Updates a Moderator object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Moderator object to Update.</param>
		/// <remarks>After Updateing into the datasource, the Moderator object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	Moderator entity = ModeratorService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		ModeratorService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(Moderator entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Update", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.ModeratorProvider.Update(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// 	public virtual method that Updates rows in <see cref="TList{Moderator}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Moderator</c> objects in a <see cref="TList{Moderator}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>Moderator</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of Moderator.
        /// <code><![CDATA[
		/// TList<Moderator> list = new TList<Moderator>();
		/// Moderator entity = new Moderator();
		/// entity.StringProperty = "foo";
		/// Moderator entity2 = new Moderator();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	ModeratorService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<Moderator> Update(TList<Moderator> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<Moderator>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Update
				dataProvider.ModeratorProvider.Update(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// 	public virtualmethod that Saves a Moderator object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Moderator object to Save.</param>
		/// <remarks>After Saveing into the datasource, the Moderator object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	Moderator entity = ModeratorService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		ModeratorService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override Moderator Save(Moderator entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Save", entity.Error);
			
			TransactionManager transactionManager = null; 
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				dataProvider.ModeratorProvider.Save(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// 	public virtual method that Saves rows in <see cref="TList{Moderator}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Moderator</c> objects in a <see cref="TList{Moderator}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>Moderator</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of Moderator.
        /// <code><![CDATA[
		/// TList<Moderator> list = new TList<Moderator>();
		/// Moderator entity = new Moderator();
		/// entity.StringProperty = "foo";
		/// Moderator entity2 = new Moderator();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	ModeratorService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<Moderator> Save(TList<Moderator> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<Moderator>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Save
				dataProvider.ModeratorProvider.Save(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// 	public virtualmethod that Deletes a Moderator object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">Moderator object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the Moderator object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	Moderator entity = ModeratorService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		ModeratorService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(Moderator entity)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new Entities.EntityNotValidException(entity, "Delete", entity.Error);
			
			TransactionManager transactionManager = null; 
			bool result = false;
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Persist Entity
				result = dataProvider.ModeratorProvider.Delete(transactionManager, entity); 
				
				//if persisted and tran not borrowed, commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// 	public virtual method that Deletes rows in <see cref="TList{Moderator}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>Moderator</c> objects in a <see cref="TList{Moderator}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>Moderator</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of Moderator.
        /// <code><![CDATA[
		/// TList<Moderator> list = new TList<Moderator>();
		/// Moderator entity = new Moderator();
		/// entity.StringProperty = "foo";
		/// Moderator entity2 = new Moderator();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	ModeratorService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<Moderator> Delete(TList<Moderator> entityCollection)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<Moderator>(entityCollection));
			}
			
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Persist Delete
				dataProvider.ModeratorProvider.Delete(transactionManager, entityCollection); 
                
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(ModeratorKey key)
		{
			return Delete(key.Id );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _id
		/// </summary>
		/// <param name="_id">Moderator pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _id)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");

			bool result = false;
			TransactionManager transactionManager = null; 
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Delete
				result = dataProvider.ModeratorProvider.Delete(transactionManager, _id);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#region GetByDnisidFromModerator_Dnis
		/// <summary>
		///		Gets Moderator objects from the datasource by DNISID in the
		///		Moderator_DNIS table. Table Moderator is related to table DNIS
		///		through the (M:N) relationship defined in the Moderator_DNIS table.
		/// </summary>
		/// <param name="_dnisid"></param>
		/// <returns>Returns a typed collection of Moderator objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByDnisidFromModerator_Dnis(System.Int32 _dnisid)
		{
			int totalRecords = -1;
			return GetByDnisidFromModerator_Dnis(_dnisid, 0, defaultMaxRecords, out totalRecords);
		}
		
		/// <summary>
		///		Gets Moderator objects from the datasource by DNISID in the
		///		Moderator_DNIS table. Table Moderator is related to table DNIS
		///		through the (M:N) relationship defined in the Moderator_DNIS table.
		/// </summary>
		/// <param name="_dnisid"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out param: Total Number of results returned.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Moderator objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> GetByDnisidFromModerator_Dnis(System.Int32 _dnisid, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDnisidFromModerator_Dnis");
			TList<Moderator> list = null;
			TransactionManager transactionManager = null; 
			totalCount = -1;
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//call data provider
				list = dataProvider.ModeratorProvider.GetByDnisidFromModerator_Dnis(transactionManager, _dnisid, start,  pageLength, out totalCount);
	        
				//This is read only transaction, let tran go if open 
            	
			}
            catch (Exception exc)
            {
				//if open, rollback if there was an error.
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return list;			
		}
		#endregion GetByDnisidFromModerator_Dnis
		
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region p_Moderator_CreateUser
		/// <summary>
		///	This method wrap the 'p_Moderator_CreateUser' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="displayName"> A <c>System.String</c> instance.</param>
		/// <param name="telephone"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="city"> A <c>System.String</c> instance.</param>
		/// <param name="country"> A <c>System.String</c> instance.</param>
		/// <param name="region"> A <c>System.String</c> instance.</param>
		/// <param name="postalCode"> A <c>System.String</c> instance.</param>
		/// <param name="charityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="userId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CreateUser(System.Int32? moderatorId, System.String userName, System.String password, System.String displayName, System.String telephone, System.String address1, System.String address2, System.String city, System.String country, System.String region, System.String postalCode, System.Int32? charityId, System.Boolean? enabled, System.Boolean? mustChangePassword, ref System.Int32? userId)
		{
			 CreateUser( moderatorId, userName, password, displayName, telephone, address1, address2, city, country, region, postalCode, charityId, enabled, mustChangePassword, ref userId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_CreateUser' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="displayName"> A <c>System.String</c> instance.</param>
		/// <param name="telephone"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="city"> A <c>System.String</c> instance.</param>
		/// <param name="country"> A <c>System.String</c> instance.</param>
		/// <param name="region"> A <c>System.String</c> instance.</param>
		/// <param name="postalCode"> A <c>System.String</c> instance.</param>
		/// <param name="charityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="userId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CreateUser( System.Int32? moderatorId, System.String userName, System.String password, System.String displayName, System.String telephone, System.String address1, System.String address2, System.String city, System.String country, System.String region, System.String postalCode, System.Int32? charityId, System.Boolean? enabled, System.Boolean? mustChangePassword, ref System.Int32? userId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CreateUser");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.CreateUser(transactionManager, start, pageLength , moderatorId, userName, password, displayName, telephone, address1, address2, city, country, region, postalCode, charityId, enabled, mustChangePassword, ref userId);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_InstallDefaults
		/// <summary>
		///	This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void InstallDefaults(System.Int32? id)
		{
			 InstallDefaults( id, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void InstallDefaults( System.Int32? id, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("InstallDefaults");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.InstallDefaults(transactionManager, start, pageLength , id);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_GetNextSecCustomerNumber
		/// <summary>
		///	This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
		/// </summary>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetNextSecCustomerNumber(System.Int32? customerId, ref System.String secCustomerNumber)
		{
			 GetNextSecCustomerNumber( customerId, ref secCustomerNumber, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
		/// </summary>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetNextSecCustomerNumber( System.Int32? customerId, ref System.String secCustomerNumber, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNextSecCustomerNumber");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.GetNextSecCustomerNumber(transactionManager, start, pageLength , customerId, ref secCustomerNumber);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_DisableModerator
		/// <summary>
		///	This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DisableModerator(System.Int32? moderatorId)
		{
			 DisableModerator( moderatorId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DisableModerator( System.Int32? moderatorId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DisableModerator");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.DisableModerator(transactionManager, start, pageLength , moderatorId);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_Omnovia_GetRecordings
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Omnovia_GetRecordings(System.Int32? moderatorId)
		{
			return Omnovia_GetRecordings( moderatorId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Omnovia_GetRecordings( System.Int32? moderatorId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Omnovia_GetRecordings");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ModeratorProvider.Omnovia_GetRecordings(transactionManager, start, pageLength , moderatorId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region p_Moderator_Omnovia_GetCompanyLogin
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Omnovia_GetCompanyLogin(System.Int32? moderatorId)
		{
			return Omnovia_GetCompanyLogin( moderatorId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Omnovia_GetCompanyLogin( System.Int32? moderatorId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Omnovia_GetCompanyLogin");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ModeratorProvider.Omnovia_GetCompanyLogin(transactionManager, start, pageLength , moderatorId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region p_Moderator_UpdateDNIS
		/// <summary>
		///	This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateDNIS(System.Int32? moderatorId, System.Int32? dnisid, System.Int32? dnisTypeId)
		{
			 UpdateDNIS( moderatorId, dnisid, dnisTypeId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateDNIS( System.Int32? moderatorId, System.Int32? dnisid, System.Int32? dnisTypeId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateDNIS");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.UpdateDNIS(transactionManager, start, pageLength , moderatorId, dnisid, dnisTypeId);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_DeleteModerator
		/// <summary>
		///	This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DeleteModerator(System.Int32? moderatorId)
		{
			 DeleteModerator( moderatorId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DeleteModerator( System.Int32? moderatorId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeleteModerator");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.DeleteModerator(transactionManager, start, pageLength , moderatorId);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_GenerateCodes
		/// <summary>
		///	This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
		/// <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
			/// <param name="moderatorCode"> A <c>System.String</c> instance.</param>
			/// <param name="passCode"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GenerateCodes(System.String wholesalerId, System.Int32? customerId, System.Int32? moderatorId, System.Int32? modCodeLength, System.Int32? passCodeLength, ref System.String moderatorCode, ref System.String passCode)
		{
			 GenerateCodes( wholesalerId, customerId, moderatorId, modCodeLength, passCodeLength, ref moderatorCode, ref passCode, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
		/// </summary>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
		/// <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
			/// <param name="moderatorCode"> A <c>System.String</c> instance.</param>
			/// <param name="passCode"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GenerateCodes( System.String wholesalerId, System.Int32? customerId, System.Int32? moderatorId, System.Int32? modCodeLength, System.Int32? passCodeLength, ref System.String moderatorCode, ref System.String passCode, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GenerateCodes");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ModeratorProvider.GenerateCodes(transactionManager, start, pageLength , wholesalerId, customerId, moderatorId, modCodeLength, passCodeLength, ref moderatorCode, ref passCode);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region p_Moderator_GetProductFeatures
		/// <summary>
		///	This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductFeatures(System.Int32? moderatorId)
		{
			return GetProductFeatures( moderatorId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
		/// </summary>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetProductFeatures( System.Int32? moderatorId, int start, int pageLength)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetProductFeatures");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ModeratorProvider.GetProductFeatures(transactionManager, start, pageLength , moderatorId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="Moderator"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator DeepLoadById(System.Int32 _id, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadById");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			Moderator entity = GetById(_id);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByCustomerIdPriCustomerNumberSecCustomerNumber");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByCustomerIdPriCustomerNumberSecCustomerNumber(_customerId, _priCustomerNumber, _secCustomerNumber);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="Moderator"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator DeepLoadByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String _wholesalerId, System.String _priCustomerNumber, System.String _secCustomerNumber, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByWholesalerIdPriCustomerNumberSecCustomerNumber");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			Moderator entity = GetByWholesalerIdPriCustomerNumberSecCustomerNumber(_wholesalerId, _priCustomerNumber, _secCustomerNumber);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_customerId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByCustomerId(System.Int32 _customerId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByCustomerId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByCustomerId(_customerId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_wholesalerId"></param>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByWholesalerIdId(System.String _wholesalerId, System.Int32 _id, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByWholesalerIdId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByWholesalerIdId(_wholesalerId, _id);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="Moderator"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator DeepLoadByModeratorCode(System.String _moderatorCode, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByModeratorCode");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			Moderator entity = GetByModeratorCode(_moderatorCode);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_moderatorCode"></param>
		/// <param name="_passCode"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByModeratorCodePassCode(System.String _moderatorCode, System.String _passCode, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByModeratorCodePassCode");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByModeratorCodePassCode(_moderatorCode, _passCode);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="Moderator"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_passCode"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="Moderator"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual Moderator DeepLoadByPassCode(System.String _passCode, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByPassCode");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			Moderator entity = GetByPassCode(_passCode);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_departmentId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByDepartmentId(System.Int32 _departmentId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByDepartmentId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByDepartmentId(_departmentId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;Moderator&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_userId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Moderator&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<Moderator> DeepLoadByUserId(System.Int32? _userId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByUserId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<Moderator> list = GetByUserId(_userId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">Moderator Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(Moderator)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Moderator entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Moderator)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">Moderator Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Moderator entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="Moderator"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(Moderator entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			TransactionManager transactionManager = null; 

			try
            {
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Call Deep Load from the Repository
				dataProvider.ModeratorProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
	        
				//leave tran open if used
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{Moderator}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Moderator)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{Moderator}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<Moderator> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{Moderator}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(Moderator)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{Moderator}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<Moderator> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{Moderator}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{Moderator}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="Moderator"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<Moderator> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			TransactionManager transactionManager = null; 

			try
            {
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Call Deep Load from the Repository
				dataProvider.ModeratorProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
	        
				//leave transaction open if used, this read is part of a larger transaction
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="Moderator"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">Moderator Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(Moderator entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the Moderator object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">Moderator Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>Moderator</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(Moderator entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new Entities.EntityNotValidException(entity, "DeepSave");
			}
			
			bool result = false;
			TransactionManager transactionManager = null; 
			
			try
            {	
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				
				//Save
				result = dataProvider.ModeratorProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
				
				//If success, Commit
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;

            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{Moderator}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{Moderator} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<Moderator> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{Moderator}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{Moderator}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">Moderator Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<Moderator> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{				
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new Entities.EntityNotValidException(entityCollection, "DeepSave");
			}
			
			bool result = false;
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.ModeratorProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
				
				//If success and not borrowed, Commit
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                    transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;

            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace





