
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlCustomerProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Customer"/> entity.
	///</summary>
	public abstract partial class SqlCustomerProviderBase : CustomerProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlCustomerProviderBase"/> instance.
		/// </summary>
		public SqlCustomerProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlCustomerProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlCustomerProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByDnisidFromCustomer_Dnis
		/// <summary>
		///		Gets Customer objects from the datasource by DNISID in the
		///		Customer_DNIS table. Table Customer is related to table DNIS
		///		through the (M:N) relationship defined in the Customer_DNIS table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_dnisid"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns a <c>TList</c> of Customer objects.</returns>
		public override TList<Customer> GetByDnisidFromCustomer_Dnis(TransactionManager transactionManager, System.Int32 _dnisid, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByDnisidFromCustomer_Dnis", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Dnisid", DbType.Int32, _dnisid);
			
			IDataReader reader = null;
			//Create collection and fill
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDnisidFromCustomer_Dnis", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDnisidFromCustomer_Dnis", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByDnisidFromCustomer_Dnis
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Customer)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
		public override CONFDB.Entities.TList<Customer> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<Customer>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactEmailAddress", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactAddress1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactAddress2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactRegion", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryContactFaxNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactEmailAddress", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactAddress1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactAddress2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactRegion", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingContactFaxNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VerticalId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardNameOnCard", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardVerCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardTypeName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UniqueCustomerId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebGroupId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountManagerId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesalerid ") || clause.Trim().StartsWith("wholesalerid="))
				{
					database.SetParameterValue(commandWrapper, "@WholesalerId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pricustomernumber ") || clause.Trim().StartsWith("pricustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@PriCustomerNumber", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalcustomernumber ") || clause.Trim().StartsWith("externalcustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalCustomerNumber", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactname ") || clause.Trim().StartsWith("primarycontactname="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactName", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactphonenumber ") || clause.Trim().StartsWith("primarycontactphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactPhoneNumber", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactemailaddress ") || clause.Trim().StartsWith("primarycontactemailaddress="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactEmailAddress", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactaddress1 ") || clause.Trim().StartsWith("primarycontactaddress1="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactAddress1", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactaddress2 ") || clause.Trim().StartsWith("primarycontactaddress2="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactAddress2", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactcity ") || clause.Trim().StartsWith("primarycontactcity="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactCity", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactcountry ") || clause.Trim().StartsWith("primarycontactcountry="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactCountry", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactregion ") || clause.Trim().StartsWith("primarycontactregion="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactRegion", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactpostalcode ") || clause.Trim().StartsWith("primarycontactpostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactPostalCode", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primarycontactfaxnumber ") || clause.Trim().StartsWith("primarycontactfaxnumber="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryContactFaxNumber", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactname ") || clause.Trim().StartsWith("billingcontactname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactName", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactphonenumber ") || clause.Trim().StartsWith("billingcontactphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactPhoneNumber", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactemailaddress ") || clause.Trim().StartsWith("billingcontactemailaddress="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactEmailAddress", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactaddress1 ") || clause.Trim().StartsWith("billingcontactaddress1="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactAddress1", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactaddress2 ") || clause.Trim().StartsWith("billingcontactaddress2="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactAddress2", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactcity ") || clause.Trim().StartsWith("billingcontactcity="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactCity", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactcountry ") || clause.Trim().StartsWith("billingcontactcountry="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactCountry", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactregion ") || clause.Trim().StartsWith("billingcontactregion="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactRegion", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactpostalcode ") || clause.Trim().StartsWith("billingcontactpostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactPostalCode", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcontactfaxnumber ") || clause.Trim().StartsWith("billingcontactfaxnumber="))
				{
					database.SetParameterValue(commandWrapper, "@BillingContactFaxNumber", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("websiteurl ") || clause.Trim().StartsWith("websiteurl="))
				{
					database.SetParameterValue(commandWrapper, "@WebsiteUrl", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salespersonid ") || clause.Trim().StartsWith("salespersonid="))
				{
					database.SetParameterValue(commandWrapper, "@SalesPersonId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("verticalid ") || clause.Trim().StartsWith("verticalid="))
				{
					database.SetParameterValue(commandWrapper, "@VerticalId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyid ") || clause.Trim().StartsWith("companyid="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingperiodcutoff ") || clause.Trim().StartsWith("billingperiodcutoff="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPeriodCutoff", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("taxableid ") || clause.Trim().StartsWith("taxableid="))
				{
					database.SetParameterValue(commandWrapper, "@TaxableId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardnameoncard ") || clause.Trim().StartsWith("creditcardnameoncard="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardNameOnCard", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardnumber ") || clause.Trim().StartsWith("creditcardnumber="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardNumber", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardexp ") || clause.Trim().StartsWith("creditcardexp="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardExp", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardvercode ") || clause.Trim().StartsWith("creditcardvercode="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardVerCode", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardtypename ") || clause.Trim().StartsWith("creditcardtypename="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardTypeName", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createddate ") || clause.Trim().StartsWith("createddate="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("uniquecustomerid ") || clause.Trim().StartsWith("uniquecustomerid="))
				{
					database.SetParameterValue(commandWrapper, "@UniqueCustomerId", new Guid(
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("enabled ") || clause.Trim().StartsWith("enabled="))
				{
					database.SetParameterValue(commandWrapper, "@Enabled", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("userid ") || clause.Trim().StartsWith("userid="))
				{
					database.SetParameterValue(commandWrapper, "@UserId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webgroupid ") || clause.Trim().StartsWith("webgroupid="))
				{
					database.SetParameterValue(commandWrapper, "@WebGroupId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accountmanagerid ") || clause.Trim().StartsWith("accountmanagerid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountManagerId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
		public override CONFDB.Entities.TList<Customer> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Find_Dynamic", typeof(CustomerColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
		public override CONFDB.Entities.TList<Customer> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCurrencyId
		/// <summary>
		/// 	Gets rows from the datasource based on the Currency_Customer_FK1 key.
		///		Currency_Customer_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_currencyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByCurrencyId(TransactionManager transactionManager, System.String _currencyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByCurrencyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, _currencyId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAccountManagerId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Customer_AccountManager key.
		///		FK_Customer_AccountManager Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_accountManagerId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByAccountManagerId(TransactionManager transactionManager, System.Int32 _accountManagerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByAccountManagerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountManagerId", DbType.Int32, _accountManagerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAccountManagerId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAccountManagerId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByBillingContactCountry
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
		///		FK_Customer_BillingContactCountry Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billingContactCountry"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByBillingContactCountry(TransactionManager transactionManager, System.String _billingContactCountry, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByBillingContactCountry", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@BillingContactCountry", DbType.AnsiString, _billingContactCountry);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBillingContactCountry", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBillingContactCountry", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByBillingContactRegion
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
		///		FK_Customer_BillingContactRegion Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billingContactRegion"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByBillingContactRegion(TransactionManager transactionManager, System.String _billingContactRegion, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByBillingContactRegion", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@BillingContactRegion", DbType.AnsiString, _billingContactRegion);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBillingContactRegion", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBillingContactRegion", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByPrimaryContactCountry
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
		///		FK_Customer_PrimaryContactCountry Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_primaryContactCountry"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByPrimaryContactCountry(TransactionManager transactionManager, System.String _primaryContactCountry, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByPrimaryContactCountry", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PrimaryContactCountry", DbType.AnsiString, _primaryContactCountry);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPrimaryContactCountry", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPrimaryContactCountry", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByPrimaryContactRegion
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
		///		FK_Customer_PrimaryContactRegion Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_primaryContactRegion"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByPrimaryContactRegion(TransactionManager transactionManager, System.String _primaryContactRegion, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByPrimaryContactRegion", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PrimaryContactRegion", DbType.AnsiString, _primaryContactRegion);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPrimaryContactRegion", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPrimaryContactRegion", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByTaxableId
		/// <summary>
		/// 	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
		///		Taxable_Customer_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_taxableId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByTaxableId(TransactionManager transactionManager, System.Int32 _taxableId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByTaxableId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, _taxableId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByTaxableId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByTaxableId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByVerticalId
		/// <summary>
		/// 	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
		///		Verticals_Customer_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_verticalId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByVerticalId(TransactionManager transactionManager, System.Int32 _verticalId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByVerticalId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@VerticalId", DbType.Int32, _verticalId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> rows = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByVerticalId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByVerticalId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the Customer_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Customer"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Customer GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerIdPriCustomerNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Customer"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Customer GetByWholesalerIdPriCustomerNumber(TransactionManager transactionManager, System.String _wholesalerId, System.String _priCustomerNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByWholesalerIdPriCustomerNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
				database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, _priCustomerNumber);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerIdPriCustomerNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerIdPriCustomerNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Customer&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByWholesalerId(TransactionManager transactionManager, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetBySalesPersonId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_salesPersonId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Customer&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetBySalesPersonId(TransactionManager transactionManager, System.Int32 _salesPersonId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetBySalesPersonId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, _salesPersonId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalesPersonId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalesPersonId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByCompanyId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Customer_CompanyID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_companyId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Customer&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByCompanyId(TransactionManager transactionManager, System.Int32 _companyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByCompanyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, _companyId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCompanyId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCompanyId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByLastModified
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_lastModified"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Customer&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByLastModified(TransactionManager transactionManager, System.DateTime _lastModified, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByLastModified", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, _lastModified);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModified", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModified", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByUserId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Customer_UserID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_userId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Customer&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Customer> GetByUserId(TransactionManager transactionManager, System.Int32? _userId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_GetByUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, _userId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Customer> tmp = new CONFDB.Entities.TList<Customer>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUserId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUserId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Customer object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.Customer> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Customer";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("WholesalerID", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("PriCustomerNumber", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("Description", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("ExternalCustomerNumber", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("PrimaryContactName", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("PrimaryContactPhoneNumber", typeof(System.String));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("PrimaryContactEmailAddress", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("PrimaryContactAddress1", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("PrimaryContactAddress2", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("PrimaryContactCity", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("PrimaryContactCountry", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("PrimaryContactRegion", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("PrimaryContactPostalCode", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("PrimaryContactFaxNumber", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("BillingContactName", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("BillingContactPhoneNumber", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("BillingContactEmailAddress", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("BillingContactAddress1", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("BillingContactAddress2", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("BillingContactCity", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("BillingContactCountry", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("BillingContactRegion", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("BillingContactPostalCode", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("BillingContactFaxNumber", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("WebsiteURL", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("SalesPersonID", typeof(System.Int32));
			col26.AllowDBNull = false;		
			DataColumn col27 = dataTable.Columns.Add("VerticalID", typeof(System.Int32));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("CompanyID", typeof(System.Int32));
			col28.AllowDBNull = false;		
			DataColumn col29 = dataTable.Columns.Add("CurrencyID", typeof(System.String));
			col29.AllowDBNull = false;		
			DataColumn col30 = dataTable.Columns.Add("BillingPeriodCutoff", typeof(System.Int32));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("TaxableID", typeof(System.Int32));
			col31.AllowDBNull = false;		
			DataColumn col32 = dataTable.Columns.Add("CreditCardNameOnCard", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("CreditCardNumber", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("CreditCardExp", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("CreditCardVerCode", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("CreditCardTypeName", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("CreatedDate", typeof(System.DateTime));
			col37.AllowDBNull = false;		
			DataColumn col38 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col38.AllowDBNull = false;		
			DataColumn col39 = dataTable.Columns.Add("UniqueCustomerID", typeof(System.Guid));
			col39.AllowDBNull = false;		
			DataColumn col40 = dataTable.Columns.Add("Enabled", typeof(System.Boolean));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("UserID", typeof(System.Int32));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("WebGroupID", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("AccountManagerID", typeof(System.Int32));
			col43.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			bulkCopy.ColumnMappings.Add("WholesalerID", "WholesalerID");
			bulkCopy.ColumnMappings.Add("PriCustomerNumber", "PriCustomerNumber");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("ExternalCustomerNumber", "ExternalCustomerNumber");
			bulkCopy.ColumnMappings.Add("PrimaryContactName", "PrimaryContactName");
			bulkCopy.ColumnMappings.Add("PrimaryContactPhoneNumber", "PrimaryContactPhoneNumber");
			bulkCopy.ColumnMappings.Add("PrimaryContactEmailAddress", "PrimaryContactEmailAddress");
			bulkCopy.ColumnMappings.Add("PrimaryContactAddress1", "PrimaryContactAddress1");
			bulkCopy.ColumnMappings.Add("PrimaryContactAddress2", "PrimaryContactAddress2");
			bulkCopy.ColumnMappings.Add("PrimaryContactCity", "PrimaryContactCity");
			bulkCopy.ColumnMappings.Add("PrimaryContactCountry", "PrimaryContactCountry");
			bulkCopy.ColumnMappings.Add("PrimaryContactRegion", "PrimaryContactRegion");
			bulkCopy.ColumnMappings.Add("PrimaryContactPostalCode", "PrimaryContactPostalCode");
			bulkCopy.ColumnMappings.Add("PrimaryContactFaxNumber", "PrimaryContactFaxNumber");
			bulkCopy.ColumnMappings.Add("BillingContactName", "BillingContactName");
			bulkCopy.ColumnMappings.Add("BillingContactPhoneNumber", "BillingContactPhoneNumber");
			bulkCopy.ColumnMappings.Add("BillingContactEmailAddress", "BillingContactEmailAddress");
			bulkCopy.ColumnMappings.Add("BillingContactAddress1", "BillingContactAddress1");
			bulkCopy.ColumnMappings.Add("BillingContactAddress2", "BillingContactAddress2");
			bulkCopy.ColumnMappings.Add("BillingContactCity", "BillingContactCity");
			bulkCopy.ColumnMappings.Add("BillingContactCountry", "BillingContactCountry");
			bulkCopy.ColumnMappings.Add("BillingContactRegion", "BillingContactRegion");
			bulkCopy.ColumnMappings.Add("BillingContactPostalCode", "BillingContactPostalCode");
			bulkCopy.ColumnMappings.Add("BillingContactFaxNumber", "BillingContactFaxNumber");
			bulkCopy.ColumnMappings.Add("WebsiteURL", "WebsiteURL");
			bulkCopy.ColumnMappings.Add("SalesPersonID", "SalesPersonID");
			bulkCopy.ColumnMappings.Add("VerticalID", "VerticalID");
			bulkCopy.ColumnMappings.Add("CompanyID", "CompanyID");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("BillingPeriodCutoff", "BillingPeriodCutoff");
			bulkCopy.ColumnMappings.Add("TaxableID", "TaxableID");
			bulkCopy.ColumnMappings.Add("CreditCardNameOnCard", "CreditCardNameOnCard");
			bulkCopy.ColumnMappings.Add("CreditCardNumber", "CreditCardNumber");
			bulkCopy.ColumnMappings.Add("CreditCardExp", "CreditCardExp");
			bulkCopy.ColumnMappings.Add("CreditCardVerCode", "CreditCardVerCode");
			bulkCopy.ColumnMappings.Add("CreditCardTypeName", "CreditCardTypeName");
			bulkCopy.ColumnMappings.Add("CreatedDate", "CreatedDate");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("UniqueCustomerID", "UniqueCustomerID");
			bulkCopy.ColumnMappings.Add("Enabled", "Enabled");
			bulkCopy.ColumnMappings.Add("UserID", "UserID");
			bulkCopy.ColumnMappings.Add("WebGroupID", "WebGroupID");
			bulkCopy.ColumnMappings.Add("AccountManagerID", "AccountManagerID");
			
			foreach(CONFDB.Entities.Customer entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
					row["WholesalerID"] = entity.WholesalerId;
							
				
					row["PriCustomerNumber"] = entity.PriCustomerNumber;
							
				
					row["Description"] = entity.Description;
							
				
					row["ExternalCustomerNumber"] = entity.ExternalCustomerNumber;
							
				
					row["PrimaryContactName"] = entity.PrimaryContactName;
							
				
					row["PrimaryContactPhoneNumber"] = entity.PrimaryContactPhoneNumber;
							
				
					row["PrimaryContactEmailAddress"] = entity.PrimaryContactEmailAddress;
							
				
					row["PrimaryContactAddress1"] = entity.PrimaryContactAddress1;
							
				
					row["PrimaryContactAddress2"] = entity.PrimaryContactAddress2;
							
				
					row["PrimaryContactCity"] = entity.PrimaryContactCity;
							
				
					row["PrimaryContactCountry"] = entity.PrimaryContactCountry;
							
				
					row["PrimaryContactRegion"] = entity.PrimaryContactRegion;
							
				
					row["PrimaryContactPostalCode"] = entity.PrimaryContactPostalCode;
							
				
					row["PrimaryContactFaxNumber"] = entity.PrimaryContactFaxNumber;
							
				
					row["BillingContactName"] = entity.BillingContactName;
							
				
					row["BillingContactPhoneNumber"] = entity.BillingContactPhoneNumber;
							
				
					row["BillingContactEmailAddress"] = entity.BillingContactEmailAddress;
							
				
					row["BillingContactAddress1"] = entity.BillingContactAddress1;
							
				
					row["BillingContactAddress2"] = entity.BillingContactAddress2;
							
				
					row["BillingContactCity"] = entity.BillingContactCity;
							
				
					row["BillingContactCountry"] = entity.BillingContactCountry;
							
				
					row["BillingContactRegion"] = entity.BillingContactRegion;
							
				
					row["BillingContactPostalCode"] = entity.BillingContactPostalCode;
							
				
					row["BillingContactFaxNumber"] = entity.BillingContactFaxNumber;
							
				
					row["WebsiteURL"] = entity.WebsiteUrl;
							
				
					row["SalesPersonID"] = entity.SalesPersonId;
							
				
					row["VerticalID"] = entity.VerticalId;
							
				
					row["CompanyID"] = entity.CompanyId;
							
				
					row["CurrencyID"] = entity.CurrencyId;
							
				
					row["BillingPeriodCutoff"] = entity.BillingPeriodCutoff;
							
				
					row["TaxableID"] = entity.TaxableId;
							
				
					row["CreditCardNameOnCard"] = entity.CreditCardNameOnCard;
							
				
					row["CreditCardNumber"] = entity.CreditCardNumber;
							
				
					row["CreditCardExp"] = entity.CreditCardExp;
							
				
					row["CreditCardVerCode"] = entity.CreditCardVerCode;
							
				
					row["CreditCardTypeName"] = entity.CreditCardTypeName;
							
				
					row["CreatedDate"] = entity.CreatedDate;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["UniqueCustomerID"] = entity.UniqueCustomerId;
							
				
					row["Enabled"] = entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value;
							
				
					row["UserID"] = entity.UserId.HasValue ? (object) entity.UserId  : System.DBNull.Value;
							
				
					row["WebGroupID"] = entity.WebGroupId;
							
				
					row["AccountManagerID"] = entity.AccountManagerId;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.Customer entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.Customer object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Customer object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Customer object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.Customer entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, entity.ExternalCustomerNumber );
			database.AddInParameter(commandWrapper, "@PrimaryContactName", DbType.AnsiString, entity.PrimaryContactName );
			database.AddInParameter(commandWrapper, "@PrimaryContactPhoneNumber", DbType.AnsiString, entity.PrimaryContactPhoneNumber );
			database.AddInParameter(commandWrapper, "@PrimaryContactEmailAddress", DbType.AnsiString, entity.PrimaryContactEmailAddress );
			database.AddInParameter(commandWrapper, "@PrimaryContactAddress1", DbType.AnsiString, entity.PrimaryContactAddress1 );
			database.AddInParameter(commandWrapper, "@PrimaryContactAddress2", DbType.AnsiString, entity.PrimaryContactAddress2 );
			database.AddInParameter(commandWrapper, "@PrimaryContactCity", DbType.AnsiString, entity.PrimaryContactCity );
			database.AddInParameter(commandWrapper, "@PrimaryContactCountry", DbType.AnsiString, entity.PrimaryContactCountry );
			database.AddInParameter(commandWrapper, "@PrimaryContactRegion", DbType.AnsiString, entity.PrimaryContactRegion );
			database.AddInParameter(commandWrapper, "@PrimaryContactPostalCode", DbType.AnsiString, entity.PrimaryContactPostalCode );
			database.AddInParameter(commandWrapper, "@PrimaryContactFaxNumber", DbType.AnsiString, entity.PrimaryContactFaxNumber );
			database.AddInParameter(commandWrapper, "@BillingContactName", DbType.AnsiString, entity.BillingContactName );
			database.AddInParameter(commandWrapper, "@BillingContactPhoneNumber", DbType.AnsiString, entity.BillingContactPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingContactEmailAddress", DbType.AnsiString, entity.BillingContactEmailAddress );
			database.AddInParameter(commandWrapper, "@BillingContactAddress1", DbType.AnsiString, entity.BillingContactAddress1 );
			database.AddInParameter(commandWrapper, "@BillingContactAddress2", DbType.AnsiString, entity.BillingContactAddress2 );
			database.AddInParameter(commandWrapper, "@BillingContactCity", DbType.AnsiString, entity.BillingContactCity );
			database.AddInParameter(commandWrapper, "@BillingContactCountry", DbType.AnsiString, entity.BillingContactCountry );
			database.AddInParameter(commandWrapper, "@BillingContactRegion", DbType.AnsiString, entity.BillingContactRegion );
			database.AddInParameter(commandWrapper, "@BillingContactPostalCode", DbType.AnsiString, entity.BillingContactPostalCode );
			database.AddInParameter(commandWrapper, "@BillingContactFaxNumber", DbType.AnsiString, entity.BillingContactFaxNumber );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, entity.WebsiteUrl );
			database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, entity.SalesPersonId );
			database.AddInParameter(commandWrapper, "@VerticalId", DbType.Int32, entity.VerticalId );
			database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, entity.CompanyId );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32, entity.BillingPeriodCutoff );
			database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, entity.TaxableId );
			database.AddInParameter(commandWrapper, "@CreditCardNameOnCard", DbType.AnsiString, entity.CreditCardNameOnCard );
			database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, entity.CreditCardNumber );
			database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, entity.CreditCardExp );
			database.AddInParameter(commandWrapper, "@CreditCardVerCode", DbType.AnsiString, entity.CreditCardVerCode );
			database.AddInParameter(commandWrapper, "@CreditCardTypeName", DbType.AnsiString, entity.CreditCardTypeName );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@UniqueCustomerId", DbType.Guid, entity.UniqueCustomerId );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, (entity.UserId.HasValue ? (object) entity.UserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WebGroupId", DbType.AnsiString, entity.WebGroupId );
			database.AddInParameter(commandWrapper, "@AccountManagerId", DbType.Int32, entity.AccountManagerId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Customer object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.Customer object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.Customer entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomer_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, entity.ExternalCustomerNumber );
			database.AddInParameter(commandWrapper, "@PrimaryContactName", DbType.AnsiString, entity.PrimaryContactName );
			database.AddInParameter(commandWrapper, "@PrimaryContactPhoneNumber", DbType.AnsiString, entity.PrimaryContactPhoneNumber );
			database.AddInParameter(commandWrapper, "@PrimaryContactEmailAddress", DbType.AnsiString, entity.PrimaryContactEmailAddress );
			database.AddInParameter(commandWrapper, "@PrimaryContactAddress1", DbType.AnsiString, entity.PrimaryContactAddress1 );
			database.AddInParameter(commandWrapper, "@PrimaryContactAddress2", DbType.AnsiString, entity.PrimaryContactAddress2 );
			database.AddInParameter(commandWrapper, "@PrimaryContactCity", DbType.AnsiString, entity.PrimaryContactCity );
			database.AddInParameter(commandWrapper, "@PrimaryContactCountry", DbType.AnsiString, entity.PrimaryContactCountry );
			database.AddInParameter(commandWrapper, "@PrimaryContactRegion", DbType.AnsiString, entity.PrimaryContactRegion );
			database.AddInParameter(commandWrapper, "@PrimaryContactPostalCode", DbType.AnsiString, entity.PrimaryContactPostalCode );
			database.AddInParameter(commandWrapper, "@PrimaryContactFaxNumber", DbType.AnsiString, entity.PrimaryContactFaxNumber );
			database.AddInParameter(commandWrapper, "@BillingContactName", DbType.AnsiString, entity.BillingContactName );
			database.AddInParameter(commandWrapper, "@BillingContactPhoneNumber", DbType.AnsiString, entity.BillingContactPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingContactEmailAddress", DbType.AnsiString, entity.BillingContactEmailAddress );
			database.AddInParameter(commandWrapper, "@BillingContactAddress1", DbType.AnsiString, entity.BillingContactAddress1 );
			database.AddInParameter(commandWrapper, "@BillingContactAddress2", DbType.AnsiString, entity.BillingContactAddress2 );
			database.AddInParameter(commandWrapper, "@BillingContactCity", DbType.AnsiString, entity.BillingContactCity );
			database.AddInParameter(commandWrapper, "@BillingContactCountry", DbType.AnsiString, entity.BillingContactCountry );
			database.AddInParameter(commandWrapper, "@BillingContactRegion", DbType.AnsiString, entity.BillingContactRegion );
			database.AddInParameter(commandWrapper, "@BillingContactPostalCode", DbType.AnsiString, entity.BillingContactPostalCode );
			database.AddInParameter(commandWrapper, "@BillingContactFaxNumber", DbType.AnsiString, entity.BillingContactFaxNumber );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, entity.WebsiteUrl );
			database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, entity.SalesPersonId );
			database.AddInParameter(commandWrapper, "@VerticalId", DbType.Int32, entity.VerticalId );
			database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, entity.CompanyId );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32, entity.BillingPeriodCutoff );
			database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, entity.TaxableId );
			database.AddInParameter(commandWrapper, "@CreditCardNameOnCard", DbType.AnsiString, entity.CreditCardNameOnCard );
			database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, entity.CreditCardNumber );
			database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, entity.CreditCardExp );
			database.AddInParameter(commandWrapper, "@CreditCardVerCode", DbType.AnsiString, entity.CreditCardVerCode );
			database.AddInParameter(commandWrapper, "@CreditCardTypeName", DbType.AnsiString, entity.CreditCardTypeName );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@UniqueCustomerId", DbType.Guid, entity.UniqueCustomerId );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, (entity.UserId.HasValue ? (object) entity.UserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WebGroupId", DbType.AnsiString, entity.WebGroupId );
			database.AddInParameter(commandWrapper, "@AccountManagerId", DbType.Int32, entity.AccountManagerId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_Customer_Omnovia_GetCompanyLogin
					
		/// <summary>
		///	This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
		/// </summary>	
		/// <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Omnovia_GetCompanyLogin(TransactionManager transactionManager, int start, int pageLength , System.Int32? omnoviaCustomerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_Omnovia_GetCompanyLogin");
			
			database.AddInParameter(commandWrapper, "@OmnoviaCustomerID", DbType.Int32,  omnoviaCustomerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_GetCompanyLogin", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_GetCompanyLogin", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_InstallDefaults
					
		/// <summary>
		///	This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void InstallDefaults(TransactionManager transactionManager, int start, int pageLength , System.Int32? id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_InstallDefaults");
			
			database.AddInParameter(commandWrapper, "@ID", DbType.Int32,  id );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "InstallDefaults", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "InstallDefaults", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Customer_GetProductRates
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetProductRates' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductRates(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetProductRates");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductRates", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductRates", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_GetSeeVoghOverageCharges
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetSeeVoghOverageCharges(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.DateTime? billedDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetSeeVoghOverageCharges");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime,  billedDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSeeVoghOverageCharges", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSeeVoghOverageCharges", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_UpdateDNIS
					
		/// <summary>
		///	This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void UpdateDNIS(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.Int32? dnisid, System.Int32? dnisTypeId, System.Boolean? updateModerators)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_UpdateDNIS");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@DNISID", DbType.Int32,  dnisid );
			database.AddInParameter(commandWrapper, "@DNISTypeID", DbType.Int32,  dnisTypeId );
			database.AddInParameter(commandWrapper, "@UpdateModerators", DbType.Boolean,  updateModerators );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdateDNIS", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdateDNIS", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Customer_Omnovia_addArchiveDetails
					
		/// <summary>
		///	This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
		/// </summary>	
		/// <param name="movieId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="movieTitle"> A <c>System.String</c> instance.</param>
		/// <param name="roomId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roomName"> A <c>System.String</c> instance.</param>
		/// <param name="companyShortLink"> A <c>System.String</c> instance.</param>
		/// <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void Omnovia_addArchiveDetails(TransactionManager transactionManager, int start, int pageLength , System.Int32? movieId, System.String movieTitle, System.Int32? roomId, System.DateTime? movieDate, System.DateTime? movieDateAdded, System.Int32? movieLength, System.String roomName, System.String companyShortLink, System.Int32? omnoviaCustomerId, ref System.Int32? archiveHostedId, ref System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_Omnovia_addArchiveDetails");
			
			database.AddInParameter(commandWrapper, "@MovieID", DbType.Int32,  movieId );
			database.AddInParameter(commandWrapper, "@MovieTitle", DbType.AnsiString,  movieTitle );
			database.AddInParameter(commandWrapper, "@RoomID", DbType.Int32,  roomId );
			database.AddInParameter(commandWrapper, "@MovieDate", DbType.DateTime,  movieDate );
			database.AddInParameter(commandWrapper, "@MovieDateAdded", DbType.DateTime,  movieDateAdded );
			database.AddInParameter(commandWrapper, "@MovieLength", DbType.Int32,  movieLength );
			database.AddInParameter(commandWrapper, "@RoomName", DbType.AnsiString,  roomName );
			database.AddInParameter(commandWrapper, "@CompanyShortLink", DbType.AnsiString,  companyShortLink );
			database.AddInParameter(commandWrapper, "@OmnoviaCustomerID", DbType.Int32,  omnoviaCustomerId );
	
			database.AddParameter(commandWrapper, "@ArchiveHostedID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, archiveHostedId);
			database.AddParameter(commandWrapper, "@ModeratorID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, moderatorId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_addArchiveDetails", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_addArchiveDetails", (IEntity)null));

			archiveHostedId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@ArchiveHostedID"]);
			moderatorId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@ModeratorID"]);

				
				return;
		}
		#endregion

		#region p_Customer_GetSeeVoghMonthlySummary
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetSeeVoghMonthlySummary(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.DateTime? billedDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetSeeVoghMonthlySummary");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime,  billedDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSeeVoghMonthlySummary", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSeeVoghMonthlySummary", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_Omnovia_GetRecordings
					
		/// <summary>
		///	This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
		/// </summary>	
		/// <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Omnovia_GetRecordings(TransactionManager transactionManager, int start, int pageLength , System.Int32? omnoviaCustomerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_Omnovia_GetRecordings");
			
			database.AddInParameter(commandWrapper, "@OmnoviaCustomerID", DbType.Int32,  omnoviaCustomerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_GetRecordings", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_GetRecordings", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_DisableCustomer
					
		/// <summary>
		///	This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void DisableCustomer(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_DisableCustomer");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DisableCustomer", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DisableCustomer", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Customer_GetRecordingRates
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetRecordingRates(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetRecordingRates");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetRecordingRates", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetRecordingRates", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_GetBalanceInfoDataSet
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBalanceInfoDataSet(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Int32? customerId, System.String priCustomerNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetBalanceInfoDataSet");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiStringFixedLength,  priCustomerNumber );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBalanceInfoDataSet", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBalanceInfoDataSet", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_CreateUser
					
		/// <summary>
		///	This method wrap the 'p_Customer_CreateUser' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="userId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void CreateUser(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.String userName, System.String password, System.Boolean? mustChangePassword, ref System.Int32? userId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_CreateUser");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@UserName", DbType.AnsiString,  userName );
			database.AddInParameter(commandWrapper, "@Password", DbType.AnsiString,  password );
			database.AddInParameter(commandWrapper, "@MustChangePassword", DbType.Boolean,  mustChangePassword );
	
			database.AddParameter(commandWrapper, "@UserID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, userId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CreateUser", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CreateUser", (IEntity)null));

			userId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@UserID"]);

				
				return;
		}
		#endregion

		#region p_Customer_GetBalanceInfo
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
			/// <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
			/// <param name="currencyId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBalanceInfo(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Boolean? returnRowSet, ref System.Int32? customerId, ref System.String priCustomerNumber, ref System.Decimal? currentBalance, ref System.String currencyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetBalanceInfo");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
			database.AddInParameter(commandWrapper, "@ReturnRowSet", DbType.Boolean,  returnRowSet );
	
			database.AddParameter(commandWrapper, "@CustomerID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, customerId);
			database.AddParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiStringFixedLength, 10, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, priCustomerNumber);
			database.AddParameter(commandWrapper, "@CurrentBalance", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 10, 2, string.Empty, DataRowVersion.Current, currentBalance);
			database.AddParameter(commandWrapper, "@CurrencyID", DbType.AnsiString, 3, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, currencyId);
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBalanceInfo", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBalanceInfo", (IEntity)null));

			
			customerId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@CustomerID"]);
			priCustomerNumber =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@PriCustomerNumber"]);
			currentBalance =  Utility.GetParameterValue<System.Decimal?>(commandWrapper.Parameters["@CurrentBalance"]);
			currencyId =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CurrencyID"]);

			
			return ds;	
		}
		#endregion

		#region p_Customer_GetProductRatesByProductRateTypeDisplayName
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductRatesByProductRateTypeDisplayName(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.String productRateTypeDisplayName)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetProductRatesByProductRateTypeDisplayName");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@ProductRateTypeDisplayName", DbType.AnsiString,  productRateTypeDisplayName );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductRatesByProductRateTypeDisplayName", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductRatesByProductRateTypeDisplayName", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_GetWebconferenceRecordingRates
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetWebconferenceRecordingRates(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetWebconferenceRecordingRates");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetWebconferenceRecordingRates", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetWebconferenceRecordingRates", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Customer_Omnovia_RequestMP4
					
		/// <summary>
		///	This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
		/// </summary>	
		/// <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="requestedBy"> A <c>System.String</c> instance.</param>
		/// <param name="extraInfo"> A <c>System.String</c> instance.</param>
			/// <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="message"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void Omnovia_RequestMP4(TransactionManager transactionManager, int start, int pageLength , System.Int32? omnoviaCustomerId, System.Int32? hostedId, System.String requestedBy, System.String extraInfo, ref System.Int32? mp4RequestId, ref System.String message)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_Omnovia_RequestMP4");
			
			database.AddInParameter(commandWrapper, "@OmnoviaCustomerID", DbType.Int32,  omnoviaCustomerId );
			database.AddInParameter(commandWrapper, "@HostedID", DbType.Int32,  hostedId );
			database.AddInParameter(commandWrapper, "@RequestedBy", DbType.AnsiString,  requestedBy );
			database.AddInParameter(commandWrapper, "@ExtraInfo", DbType.AnsiString,  extraInfo );
	
			database.AddParameter(commandWrapper, "@MP4RequestID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, mp4RequestId);
			database.AddParameter(commandWrapper, "@Message", DbType.AnsiString, 255, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, message);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_RequestMP4", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_RequestMP4", (IEntity)null));

			mp4RequestId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@MP4RequestID"]);
			message =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@Message"]);

				
				return;
		}
		#endregion

		#region p_Customer_UpdateFeature
					
		/// <summary>
		///	This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
		/// <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void UpdateFeature(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.Int32? featureId, System.Int32? featureOptionId, System.String featureOptionValue, System.Boolean? updateModerators)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_UpdateFeature");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@FeatureID", DbType.Int32,  featureId );
			database.AddInParameter(commandWrapper, "@FeatureOptionID", DbType.Int32,  featureOptionId );
			database.AddInParameter(commandWrapper, "@FeatureOptionValue", DbType.AnsiString,  featureOptionValue );
			database.AddInParameter(commandWrapper, "@UpdateModerators", DbType.Boolean,  updateModerators );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdateFeature", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdateFeature", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Customer_GetNextCustomerNumber
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
			/// <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void GetNextCustomerNumber(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, ref System.String priCustomerNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetNextCustomerNumber");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
	
			database.AddParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, 10, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, priCustomerNumber);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNextCustomerNumber", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNextCustomerNumber", (IEntity)null));

			priCustomerNumber =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@PriCustomerNumber"]);

				
				return;
		}
		#endregion

		#region p_Customer_DeleteCustomer
					
		/// <summary>
		///	This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void DeleteCustomer(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_DeleteCustomer");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteCustomer", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteCustomer", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Customer_GetProductFeatures
					
		/// <summary>
		///	This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductFeatures(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Customer_GetProductFeatures");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace
