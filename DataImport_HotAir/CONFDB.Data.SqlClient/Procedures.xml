<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">CONFDB</database>
<procedures>
		
		<procedure owner="dbo" name="pAccessType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccessType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAccessType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [RetailLDApplicable]'
				SET @SQL = @SQL + ', [WholesaleLDApplicable]'
				SET @SQL = @SQL + ', [Billable]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [RetailLDApplicable],'
				SET @SQL = @SQL + ' [WholesaleLDApplicable],'
				SET @SQL = @SQL + ' [Billable],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAccessType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccessType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesaleLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Billable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AccessType]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					,[RetailLDApplicable]
					,[WholesaleLDApplicable]
					,[Billable]
					,[Enabled]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					,@RetailLdApplicable
					,@WholesaleLdApplicable
					,@Billable
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccessType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesaleLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Billable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccessType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
					,[RetailLDApplicable] = @RetailLdApplicable
					,[WholesaleLDApplicable] = @WholesaleLdApplicable
					,[Billable] = @Billable
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccessType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AccessType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_GetByIdNameValue" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[ID] = @Id
					AND [Name] = @Name
					AND [Value] = @Value
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_GetByValueName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[Value] = @Value
					AND [Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccessType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesaleLdApplicable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Billable" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [RetailLDApplicable]
	, [WholesaleLDApplicable]
	, [Billable]
	, [Enabled]
    FROM
	[dbo].[AccessType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([RetailLDApplicable] = @RetailLdApplicable OR @RetailLdApplicable IS NULL)
	AND ([WholesaleLDApplicable] = @WholesaleLdApplicable OR @WholesaleLdApplicable IS NULL)
	AND ([Billable] = @Billable OR @Billable IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [RetailLDApplicable]
	, [WholesaleLDApplicable]
	, [Billable]
	, [Enabled]
    FROM
	[dbo].[AccessType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([RetailLDApplicable] = @RetailLdApplicable AND @RetailLdApplicable is not null)
	OR ([WholesaleLDApplicable] = @WholesaleLdApplicable AND @WholesaleLdApplicable is not null)
	OR ([Billable] = @Billable AND @Billable is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAccessType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [Value]
					, [RetailLDApplicable]
					, [WholesaleLDApplicable]
					, [Billable]
					, [Enabled]
					FROM [dbo].[AccessType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [Value],
				       [RetailLDApplicable],
				       [WholesaleLDApplicable],
				       [Billable],
				       [Enabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AccessType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRecording_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Recording table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRecording_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Recording table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [RecordingStartTime]'
				SET @SQL = @SQL + ', [RecordingEndTime]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ReplayCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [RPFileNumber]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Mp3Flag]'
				SET @SQL = @SQL + ', [Mp3SizeInKB]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [BillingID]'
				SET @SQL = @SQL + ', [DurationSec]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [MediaType]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [HostedLinkType]'
				SET @SQL = @SQL + ', [HostedLinkURL]'
				SET @SQL = @SQL + ', [ExtendRecordingDate]'
				SET @SQL = @SQL + ', [RecordingGuid]'
				SET @SQL = @SQL + ' FROM [dbo].[Recording]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [RecordingStartTime],'
				SET @SQL = @SQL + ' [RecordingEndTime],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ReplayCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [RPFileNumber],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Mp3Flag],'
				SET @SQL = @SQL + ' [Mp3SizeInKB],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [BillingID],'
				SET @SQL = @SQL + ' [DurationSec],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [MediaType],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [HostedLinkType],'
				SET @SQL = @SQL + ' [HostedLinkURL],'
				SET @SQL = @SQL + ' [ExtendRecordingDate],'
				SET @SQL = @SQL + ' [RecordingGuid]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Recording]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pRecording_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Recording table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RecordingStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RecordingEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ReplayCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@RpFileNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Mp3Flag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Mp3SizeInKb" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DurationSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@MediaType" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkType" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@HostedLinkUrl" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@ExtendRecordingDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RecordingGuid" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Recording]
					(
					[WholesalerID]
					,[BridgeID]
					,[RecordingStartTime]
					,[RecordingEndTime]
					,[ModeratorCode]
					,[PassCode]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[RecordingDirectory]
					,[UniqueConferenceID]
					,[ReplayCode]
					,[CreatedDate]
					,[ProcessFlag]
					,[EmailSent]
					,[RPFileNumber]
					,[ModeratorID]
					,[Notes]
					,[Mp3Flag]
					,[Mp3SizeInKB]
					,[Enabled]
					,[StorageDuration]
					,[BillingDuration]
					,[BillingID]
					,[DurationSec]
					,[AuxiliaryConferenceID]
					,[MediaType]
					,[HostedLinkExpiryDate]
					,[HostedLinkType]
					,[HostedLinkURL]
					,[ExtendRecordingDate]
					,[RecordingGuid]
					)
				VALUES
					(
					@WholesalerId
					,@BridgeId
					,@RecordingStartTime
					,@RecordingEndTime
					,@ModeratorCode
					,@PassCode
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@RecordingDirectory
					,@UniqueConferenceId
					,@ReplayCode
					,@CreatedDate
					,@ProcessFlag
					,@EmailSent
					,@RpFileNumber
					,@ModeratorId
					,@Notes
					,@Mp3Flag
					,@Mp3SizeInKb
					,@Enabled
					,@StorageDuration
					,@BillingDuration
					,@BillingId
					,@DurationSec
					,@AuxiliaryConferenceId
					,@MediaType
					,@HostedLinkExpiryDate
					,@HostedLinkType
					,@HostedLinkUrl
					,@ExtendRecordingDate
					,@RecordingGuid
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecording_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Recording table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RecordingStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RecordingEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ReplayCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@RpFileNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Mp3Flag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Mp3SizeInKb" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DurationSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@MediaType" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkType" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@HostedLinkUrl" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@ExtendRecordingDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RecordingGuid" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Recording]
				SET
					[WholesalerID] = @WholesalerId
					,[BridgeID] = @BridgeId
					,[RecordingStartTime] = @RecordingStartTime
					,[RecordingEndTime] = @RecordingEndTime
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[RecordingDirectory] = @RecordingDirectory
					,[UniqueConferenceID] = @UniqueConferenceId
					,[ReplayCode] = @ReplayCode
					,[CreatedDate] = @CreatedDate
					,[ProcessFlag] = @ProcessFlag
					,[EmailSent] = @EmailSent
					,[RPFileNumber] = @RpFileNumber
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[Mp3Flag] = @Mp3Flag
					,[Mp3SizeInKB] = @Mp3SizeInKb
					,[Enabled] = @Enabled
					,[StorageDuration] = @StorageDuration
					,[BillingDuration] = @BillingDuration
					,[BillingID] = @BillingId
					,[DurationSec] = @DurationSec
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[MediaType] = @MediaType
					,[HostedLinkExpiryDate] = @HostedLinkExpiryDate
					,[HostedLinkType] = @HostedLinkType
					,[HostedLinkURL] = @HostedLinkUrl
					,[ExtendRecordingDate] = @ExtendRecordingDate
					,[RecordingGuid] = @RecordingGuid
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecording_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Recording table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Recording] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecording_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRecording_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRecording_GetByReplayCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReplayCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ReplayCode] = @ReplayCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRecording_GetByRecordingGuid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RecordingGuid" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[RecordingGuid] = @RecordingGuid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRecording_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Recording table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RecordingStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RecordingEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@ReplayCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@RpFileNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Mp3Flag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@Mp3SizeInKb" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@BillingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DurationSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@MediaType" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@HostedLinkType" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@HostedLinkUrl" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@ExtendRecordingDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RecordingGuid" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [BridgeID]
	, [RecordingStartTime]
	, [RecordingEndTime]
	, [ModeratorCode]
	, [PassCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [ReplayCode]
	, [CreatedDate]
	, [ProcessFlag]
	, [EmailSent]
	, [RPFileNumber]
	, [ModeratorID]
	, [Notes]
	, [Mp3Flag]
	, [Mp3SizeInKB]
	, [Enabled]
	, [StorageDuration]
	, [BillingDuration]
	, [BillingID]
	, [DurationSec]
	, [AuxiliaryConferenceID]
	, [MediaType]
	, [HostedLinkExpiryDate]
	, [HostedLinkType]
	, [HostedLinkURL]
	, [ExtendRecordingDate]
	, [RecordingGuid]
    FROM
	[dbo].[Recording]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([RecordingStartTime] = @RecordingStartTime OR @RecordingStartTime IS NULL)
	AND ([RecordingEndTime] = @RecordingEndTime OR @RecordingEndTime IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([RecordingDirectory] = @RecordingDirectory OR @RecordingDirectory IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([ReplayCode] = @ReplayCode OR @ReplayCode IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
	AND ([EmailSent] = @EmailSent OR @EmailSent IS NULL)
	AND ([RPFileNumber] = @RpFileNumber OR @RpFileNumber IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([Mp3Flag] = @Mp3Flag OR @Mp3Flag IS NULL)
	AND ([Mp3SizeInKB] = @Mp3SizeInKb OR @Mp3SizeInKb IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([StorageDuration] = @StorageDuration OR @StorageDuration IS NULL)
	AND ([BillingDuration] = @BillingDuration OR @BillingDuration IS NULL)
	AND ([BillingID] = @BillingId OR @BillingId IS NULL)
	AND ([DurationSec] = @DurationSec OR @DurationSec IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([MediaType] = @MediaType OR @MediaType IS NULL)
	AND ([HostedLinkExpiryDate] = @HostedLinkExpiryDate OR @HostedLinkExpiryDate IS NULL)
	AND ([HostedLinkType] = @HostedLinkType OR @HostedLinkType IS NULL)
	AND ([HostedLinkURL] = @HostedLinkUrl OR @HostedLinkUrl IS NULL)
	AND ([ExtendRecordingDate] = @ExtendRecordingDate OR @ExtendRecordingDate IS NULL)
	AND ([RecordingGuid] = @RecordingGuid OR @RecordingGuid IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [BridgeID]
	, [RecordingStartTime]
	, [RecordingEndTime]
	, [ModeratorCode]
	, [PassCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [ReplayCode]
	, [CreatedDate]
	, [ProcessFlag]
	, [EmailSent]
	, [RPFileNumber]
	, [ModeratorID]
	, [Notes]
	, [Mp3Flag]
	, [Mp3SizeInKB]
	, [Enabled]
	, [StorageDuration]
	, [BillingDuration]
	, [BillingID]
	, [DurationSec]
	, [AuxiliaryConferenceID]
	, [MediaType]
	, [HostedLinkExpiryDate]
	, [HostedLinkType]
	, [HostedLinkURL]
	, [ExtendRecordingDate]
	, [RecordingGuid]
    FROM
	[dbo].[Recording]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([RecordingStartTime] = @RecordingStartTime AND @RecordingStartTime is not null)
	OR ([RecordingEndTime] = @RecordingEndTime AND @RecordingEndTime is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([RecordingDirectory] = @RecordingDirectory AND @RecordingDirectory is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([ReplayCode] = @ReplayCode AND @ReplayCode is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	OR ([EmailSent] = @EmailSent AND @EmailSent is not null)
	OR ([RPFileNumber] = @RpFileNumber AND @RpFileNumber is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([Mp3Flag] = @Mp3Flag AND @Mp3Flag is not null)
	OR ([Mp3SizeInKB] = @Mp3SizeInKb AND @Mp3SizeInKb is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([StorageDuration] = @StorageDuration AND @StorageDuration is not null)
	OR ([BillingDuration] = @BillingDuration AND @BillingDuration is not null)
	OR ([BillingID] = @BillingId AND @BillingId is not null)
	OR ([DurationSec] = @DurationSec AND @DurationSec is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([MediaType] = @MediaType AND @MediaType is not null)
	OR ([HostedLinkExpiryDate] = @HostedLinkExpiryDate AND @HostedLinkExpiryDate is not null)
	OR ([HostedLinkType] = @HostedLinkType AND @HostedLinkType is not null)
	OR ([HostedLinkURL] = @HostedLinkUrl AND @HostedLinkUrl is not null)
	OR ([ExtendRecordingDate] = @ExtendRecordingDate AND @ExtendRecordingDate is not null)
	OR ([RecordingGuid] = @RecordingGuid AND @RecordingGuid is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pRecording_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Recording table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [BridgeID]
					, [RecordingStartTime]
					, [RecordingEndTime]
					, [ModeratorCode]
					, [PassCode]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [RecordingDirectory]
					, [UniqueConferenceID]
					, [ReplayCode]
					, [CreatedDate]
					, [ProcessFlag]
					, [EmailSent]
					, [RPFileNumber]
					, [ModeratorID]
					, [Notes]
					, [Mp3Flag]
					, [Mp3SizeInKB]
					, [Enabled]
					, [StorageDuration]
					, [BillingDuration]
					, [BillingID]
					, [DurationSec]
					, [AuxiliaryConferenceID]
					, [MediaType]
					, [HostedLinkExpiryDate]
					, [HostedLinkType]
					, [HostedLinkURL]
					, [ExtendRecordingDate]
					, [RecordingGuid]
					FROM [dbo].[Recording] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [BridgeID],
				       [RecordingStartTime],
				       [RecordingEndTime],
				       [ModeratorCode],
				       [PassCode],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [RecordingDirectory],
				       [UniqueConferenceID],
				       [ReplayCode],
				       [CreatedDate],
				       [ProcessFlag],
				       [EmailSent],
				       [RPFileNumber],
				       [ModeratorID],
				       [Notes],
				       [Mp3Flag],
				       [Mp3SizeInKB],
				       [Enabled],
				       [StorageDuration],
				       [BillingDuration],
				       [BillingID],
				       [DurationSec],
				       [AuxiliaryConferenceID],
				       [MediaType],
				       [HostedLinkExpiryDate],
				       [HostedLinkType],
				       [HostedLinkURL],
				       [ExtendRecordingDate],
				       [RecordingGuid]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Recording] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Recording_GetParticipantList"  skip="true">
			<comment><![CDATA[-- =============================================
-- Proc to get participant list for a recording 
-- =============================================
]]></comment>
			<parameters>
				<parameter name="@RecordingID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select ID, RecordingID,ParticipantName,ParticipantCompanyName,ParticipantEmail,DownloadDate from RecordingParticipantUsage
    where RecordingID = @RecordingID
END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pRecordingParticipantUsage_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRecordingParticipantUsage_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RecordingParticipantUsage table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [RecordingID]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [ParticipantCompanyName]'
				SET @SQL = @SQL + ', [ParticipantEmail]'
				SET @SQL = @SQL + ', [DownloadDate]'
				SET @SQL = @SQL + ' FROM [dbo].[RecordingParticipantUsage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [RecordingID],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [ParticipantCompanyName],'
				SET @SQL = @SQL + ' [ParticipantEmail],'
				SET @SQL = @SQL + ' [DownloadDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RecordingParticipantUsage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pRecordingParticipantUsage_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RecordingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParticipantName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ParticipantCompanyName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ParticipantEmail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DownloadDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[RecordingParticipantUsage]
					(
					[RecordingID]
					,[ParticipantName]
					,[ParticipantCompanyName]
					,[ParticipantEmail]
					,[DownloadDate]
					)
				VALUES
					(
					@RecordingId
					,@ParticipantName
					,@ParticipantCompanyName
					,@ParticipantEmail
					,@DownloadDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecordingParticipantUsage_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RecordingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParticipantName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ParticipantCompanyName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ParticipantEmail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DownloadDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RecordingParticipantUsage]
				SET
					[RecordingID] = @RecordingId
					,[ParticipantName] = @ParticipantName
					,[ParticipantCompanyName] = @ParticipantCompanyName
					,[ParticipantEmail] = @ParticipantEmail
					,[DownloadDate] = @DownloadDate
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecordingParticipantUsage_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[RecordingParticipantUsage] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecordingParticipantUsage_GetByRecordingId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RecordingParticipantUsage table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RecordingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
				WHERE
					[RecordingID] = @RecordingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRecordingParticipantUsage_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RecordingParticipantUsage table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRecordingParticipantUsage_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RecordingParticipantUsage table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RecordingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ParticipantName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ParticipantCompanyName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ParticipantEmail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DownloadDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [RecordingID]
	, [ParticipantName]
	, [ParticipantCompanyName]
	, [ParticipantEmail]
	, [DownloadDate]
    FROM
	[dbo].[RecordingParticipantUsage]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([RecordingID] = @RecordingId OR @RecordingId IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([ParticipantCompanyName] = @ParticipantCompanyName OR @ParticipantCompanyName IS NULL)
	AND ([ParticipantEmail] = @ParticipantEmail OR @ParticipantEmail IS NULL)
	AND ([DownloadDate] = @DownloadDate OR @DownloadDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [RecordingID]
	, [ParticipantName]
	, [ParticipantCompanyName]
	, [ParticipantEmail]
	, [DownloadDate]
    FROM
	[dbo].[RecordingParticipantUsage]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([RecordingID] = @RecordingId AND @RecordingId is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([ParticipantCompanyName] = @ParticipantCompanyName AND @ParticipantCompanyName is not null)
	OR ([ParticipantEmail] = @ParticipantEmail AND @ParticipantEmail is not null)
	OR ([DownloadDate] = @DownloadDate AND @DownloadDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pRecordingParticipantUsage_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RecordingParticipantUsage table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [RecordingID]
					, [ParticipantName]
					, [ParticipantCompanyName]
					, [ParticipantEmail]
					, [DownloadDate]
					FROM [dbo].[RecordingParticipantUsage] {0}
				)
				SELECT
				       [ID],
				       [RecordingID],
				       [ParticipantName],
				       [ParticipantCompanyName],
				       [ParticipantEmail],
				       [DownloadDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[RecordingParticipantUsage] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRatingType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RatingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName]
				FROM
					[dbo].[RatingType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRatingType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatingType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ' FROM [dbo].[RatingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RatingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pRatingType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RatingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[RatingType]
					(
					[Name]
					,[DisplayName]
					)
				VALUES
					(
					@Name
					,@DisplayName
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatingType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RatingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RatingType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatingType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RatingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[RatingType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatingType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatingType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName]
				FROM
					[dbo].[RatingType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatingType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RatingType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
    FROM
	[dbo].[RatingType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
    FROM
	[dbo].[RatingType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pRatingType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatingType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					FROM [dbo].[RatingType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[RatingType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pPromptSet_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the PromptSet table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[PromptSet]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pPromptSet_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PromptSet table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[PromptSet]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[PromptSet]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pPromptSet_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the PromptSet table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[PromptSet]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPromptSet_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the PromptSet table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[PromptSet]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPromptSet_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the PromptSet table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[PromptSet] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPromptSet_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the PromptSet table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[PromptSet]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pPromptSet_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the PromptSet table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[PromptSet]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[PromptSet]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pPromptSet_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PromptSet table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					FROM [dbo].[PromptSet] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[PromptSet] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRole_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Role table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[UserLevel]
				FROM
					[dbo].[Role]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRole_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Role table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [UserLevel]'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [UserLevel]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pRole_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Role table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UserLevel" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Role]
					(
					[Name]
					,[UserLevel]
					)
				VALUES
					(
					@Name
					,@UserLevel
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRole_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Role table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UserLevel" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Role]
				SET
					[Name] = @Name
					,[UserLevel] = @UserLevel
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRole_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Role table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Role] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRole_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Role table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[UserLevel]
				FROM
					[dbo].[Role]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRole_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Role table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@UserLevel" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [UserLevel]
    FROM
	[dbo].[Role]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([UserLevel] = @UserLevel OR @UserLevel IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [UserLevel]
    FROM
	[dbo].[Role]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([UserLevel] = @UserLevel AND @UserLevel is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pRole_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Role table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [UserLevel]
					FROM [dbo].[Role] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [UserLevel]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Role] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[MeetingID],
					[Status],
					[ModeratorID],
					[ModeratorCode],
					[ModeratorJoined],
					[MeetingURL],
					[MobileMeetingURL],
					[CreatedDate],
					[LastModified],
					[Notes],
					[CreatedDateUTC]
				FROM
					[dbo].[SeeVoghMeetingTracker]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SeeVoghMeetingTracker table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [MeetingID]'
				SET @SQL = @SQL + ', [Status]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [ModeratorJoined]'
				SET @SQL = @SQL + ', [MeetingURL]'
				SET @SQL = @SQL + ', [MobileMeetingURL]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [CreatedDateUTC]'
				SET @SQL = @SQL + ' FROM [dbo].[SeeVoghMeetingTracker]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [MeetingID],'
				SET @SQL = @SQL + ' [Status],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [ModeratorJoined],'
				SET @SQL = @SQL + ' [MeetingURL],'
				SET @SQL = @SQL + ' [MobileMeetingURL],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [CreatedDateUTC]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SeeVoghMeetingTracker]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Status" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ModeratorJoined" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@MeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
				<parameter name="@MobileMeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" nulldefault=""/>
				<parameter name="@CreatedDateUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[SeeVoghMeetingTracker]
					(
					[MeetingID]
					,[Status]
					,[ModeratorID]
					,[ModeratorCode]
					,[ModeratorJoined]
					,[MeetingURL]
					,[MobileMeetingURL]
					,[CreatedDate]
					,[LastModified]
					,[Notes]
					,[CreatedDateUTC]
					)
				VALUES
					(
					@MeetingId
					,@Status
					,@ModeratorId
					,@ModeratorCode
					,@ModeratorJoined
					,@MeetingUrl
					,@MobileMeetingUrl
					,@CreatedDate
					,@LastModified
					,@Notes
					,@CreatedDateUtc
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Status" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ModeratorJoined" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@MeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
				<parameter name="@MobileMeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" nulldefault=""/>
				<parameter name="@CreatedDateUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SeeVoghMeetingTracker]
				SET
					[MeetingID] = @MeetingId
					,[Status] = @Status
					,[ModeratorID] = @ModeratorId
					,[ModeratorCode] = @ModeratorCode
					,[ModeratorJoined] = @ModeratorJoined
					,[MeetingURL] = @MeetingUrl
					,[MobileMeetingURL] = @MobileMeetingUrl
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[Notes] = @Notes
					,[CreatedDateUTC] = @CreatedDateUtc
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[SeeVoghMeetingTracker] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SeeVoghMeetingTracker table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[MeetingID],
					[Status],
					[ModeratorID],
					[ModeratorCode],
					[ModeratorJoined],
					[MeetingURL],
					[MobileMeetingURL],
					[CreatedDate],
					[LastModified],
					[Notes],
					[CreatedDateUTC]
				FROM
					[dbo].[SeeVoghMeetingTracker]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SeeVoghMeetingTracker table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Status" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@ModeratorJoined" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@MeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null"/>
				<parameter name="@MobileMeetingUrl" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" nulldefault="null"/>
				<parameter name="@CreatedDateUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [MeetingID]
	, [Status]
	, [ModeratorID]
	, [ModeratorCode]
	, [ModeratorJoined]
	, [MeetingURL]
	, [MobileMeetingURL]
	, [CreatedDate]
	, [LastModified]
	, [Notes]
	, [CreatedDateUTC]
    FROM
	[dbo].[SeeVoghMeetingTracker]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([MeetingID] = @MeetingId OR @MeetingId IS NULL)
	AND ([Status] = @Status OR @Status IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([ModeratorJoined] = @ModeratorJoined OR @ModeratorJoined IS NULL)
	AND ([MeetingURL] = @MeetingUrl OR @MeetingUrl IS NULL)
	AND ([MobileMeetingURL] = @MobileMeetingUrl OR @MobileMeetingUrl IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([CreatedDateUTC] = @CreatedDateUtc OR @CreatedDateUtc IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [MeetingID]
	, [Status]
	, [ModeratorID]
	, [ModeratorCode]
	, [ModeratorJoined]
	, [MeetingURL]
	, [MobileMeetingURL]
	, [CreatedDate]
	, [LastModified]
	, [Notes]
	, [CreatedDateUTC]
    FROM
	[dbo].[SeeVoghMeetingTracker]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([MeetingID] = @MeetingId AND @MeetingId is not null)
	OR ([Status] = @Status AND @Status is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([ModeratorJoined] = @ModeratorJoined AND @ModeratorJoined is not null)
	OR ([MeetingURL] = @MeetingUrl AND @MeetingUrl is not null)
	OR ([MobileMeetingURL] = @MobileMeetingUrl AND @MobileMeetingUrl is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([CreatedDateUTC] = @CreatedDateUtc AND @CreatedDateUtc is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pSeeVoghMeetingTracker_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SeeVoghMeetingTracker table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [MeetingID]
					, [Status]
					, [ModeratorID]
					, [ModeratorCode]
					, [ModeratorJoined]
					, [MeetingURL]
					, [MobileMeetingURL]
					, [CreatedDate]
					, [LastModified]
					, [Notes]
					, [CreatedDateUTC]
					FROM [dbo].[SeeVoghMeetingTracker] {0}
				)
				SELECT
				       [ID],
				       [MeetingID],
				       [Status],
				       [ModeratorID],
				       [ModeratorCode],
				       [ModeratorJoined],
				       [MeetingURL],
				       [MobileMeetingURL],
				       [CreatedDate],
				       [LastModified],
				       [Notes],
				       [CreatedDateUTC]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SeeVoghMeetingTracker] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCountry_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Country table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCountry_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Country table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CountryDialingCode]'
				SET @SQL = @SQL + ', [CountryAreaCode]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Country]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CountryDialingCode],'
				SET @SQL = @SQL + ' [CountryAreaCode],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Country]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCountry_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Country table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CountryDialingCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryAreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Country]
					(
					[ID]
					,[Description]
					,[CountryDialingCode]
					,[CountryAreaCode]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Description
					,@CountryDialingCode
					,@CountryAreaCode
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCountry_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Country table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CountryDialingCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryAreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Country]
				SET
					[ID] = @Id
					,[Description] = @Description
					,[CountryDialingCode] = @CountryDialingCode
					,[CountryAreaCode] = @CountryAreaCode
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCountry_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Country table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Country] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCountry_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Country table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCountry_GetByCountryAreaCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Country table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryAreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
				WHERE
					[CountryAreaCode] = @CountryAreaCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCountry_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Country table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CountryDialingCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@CountryAreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
	, [CountryDialingCode]
	, [CountryAreaCode]
	, [DisplayOrder]
    FROM
	[dbo].[Country]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([CountryDialingCode] = @CountryDialingCode OR @CountryDialingCode IS NULL)
	AND ([CountryAreaCode] = @CountryAreaCode OR @CountryAreaCode IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
	, [CountryDialingCode]
	, [CountryAreaCode]
	, [DisplayOrder]
    FROM
	[dbo].[Country]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([CountryDialingCode] = @CountryDialingCode AND @CountryDialingCode is not null)
	OR ([CountryAreaCode] = @CountryAreaCode AND @CountryAreaCode is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCountry_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Country table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Description]
					, [CountryDialingCode]
					, [CountryAreaCode]
					, [DisplayOrder]
					FROM [dbo].[Country] {0}
				)
				SELECT
				       [ID],
				       [Description],
				       [CountryDialingCode],
				       [CountryAreaCode],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Country] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCurrency_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Currency table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[LongName],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[Currency]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCurrency_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Currency table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [LongName]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [LongName],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCurrency_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Currency table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LongName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Currency]
					(
					[ID]
					,[LongName]
					,[Enabled]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@LongName
					,@Enabled
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurrency_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Currency table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LongName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Currency]
				SET
					[ID] = @Id
					,[LongName] = @LongName
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurrency_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Currency table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Currency] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurrency_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Currency table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[LongName],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[Currency]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCurrency_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Currency table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@LongName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [LongName]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[Currency]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([LongName] = @LongName OR @LongName IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [LongName]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[Currency]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([LongName] = @LongName AND @LongName is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCurrency_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Currency table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [LongName]
					, [Enabled]
					, [DisplayOrder]
					FROM [dbo].[Currency] {0}
				)
				SELECT
				       [ID],
				       [LongName],
				       [Enabled],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Currency] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemExtension_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemExtension table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemExtension_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtension table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [TableID]'
				SET @SQL = @SQL + ', [ReferenceValue]'
				SET @SQL = @SQL + ', [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtension]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [TableID],'
				SET @SQL = @SQL + ' [ReferenceValue],'
				SET @SQL = @SQL + ' [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtension]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pSystemExtension_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemExtension table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SystemExtensionLabelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[SystemExtension]
					(
					[TableID]
					,[ReferenceValue]
					,[SystemExtensionLabelID]
					)
				VALUES
					(
					@TableId
					,@ReferenceValue
					,@SystemExtensionLabelId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemExtension table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SystemExtensionLabelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemExtension]
				SET
					[TableID] = @TableId
					,[ReferenceValue] = @ReferenceValue
					,[SystemExtensionLabelID] = @SystemExtensionLabelId
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemExtension table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[SystemExtension] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_GetBySystemExtensionLabelId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemExtensionLabelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[SystemExtensionLabelID] = @SystemExtensionLabelId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_GetBySystemExtensionLabelIdTableId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemExtensionLabelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[SystemExtensionLabelID] = @SystemExtensionLabelId
					AND [TableID] = @TableId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtension_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemExtension table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SystemExtensionLabelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [TableID]
	, [ReferenceValue]
	, [SystemExtensionLabelID]
    FROM
	[dbo].[SystemExtension]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([TableID] = @TableId OR @TableId IS NULL)
	AND ([ReferenceValue] = @ReferenceValue OR @ReferenceValue IS NULL)
	AND ([SystemExtensionLabelID] = @SystemExtensionLabelId OR @SystemExtensionLabelId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [TableID]
	, [ReferenceValue]
	, [SystemExtensionLabelID]
    FROM
	[dbo].[SystemExtension]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([TableID] = @TableId AND @TableId is not null)
	OR ([ReferenceValue] = @ReferenceValue AND @ReferenceValue is not null)
	OR ([SystemExtensionLabelID] = @SystemExtensionLabelId AND @SystemExtensionLabelId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pSystemExtension_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtension table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [TableID]
					, [ReferenceValue]
					, [SystemExtensionLabelID]
					FROM [dbo].[SystemExtension] {0}
				)
				SELECT
				       [id],
				       [TableID],
				       [ReferenceValue],
				       [SystemExtensionLabelID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SystemExtension] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_SystemExtension_AddSystemExtension"  skip="true">
			<comment><![CDATA[-- IN AMP: As Admin user, I want to create a new user:
--	1. When creating new user, add User system extensions
--	2. When creating new conference, add Moderator system extension 

-- IN AMP: As Admin user, for existing user, I want to create a new conference:
--	2. When creating new conference, add Moderator system extension 
								
-- IN AMP: As Moderator user, I want to create a new conference:
--	2. When creating new conference, add Moderator system extension 
]]></comment>
			<parameters>
				<parameter name="@ExtensionTypeCategoryID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TableID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	INSERT INTO SystemExtension(tableid,SystemExtensionLabelID)
		SELECT @TableID,SystemExtensionLabel.ID FROM SystemExtensionLabel INNER JOIN ExtensionType on ExtensionTypeID= ExtensionType.id 
		WHERE CustomerID=@CustomerID and ExtensionTypeCategoryID=@ExtensionTypeCategoryID

	-- this is a backend stored procedure to fill out existing users and their conferences
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_SystemExtension_EditReferenceValueByID"  skip="true">
			<comment><![CDATA[]]></comment>
			<parameters>
				<parameter name="@SystemExtensionID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	UPDATE SytemExtension SET ReferenceValue=@ReferenceValue where id=@SystemExtensionID
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_SystemExtension_GetSystemExtensionForModerator"  skip="true">
			<comment><![CDATA[--p_SystemExtension_GetSystemExtensionForModerator 8,5097
--p_SystemExtension_GetSystemExtensionForModerator 8,5086
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExtensionTypeID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExtensionTypeCategoryID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Get user references: find viewable user by moderatorid and get user references 
	-- UNION
	-- find viewable moderator references
	-- UNION
	-- To get customer admin references: find user customerid and get viewable customer references
	Declare @UserID int
	select @UserID=UserID from Moderator where id=@ModeratorID

	select * from vw_SystemExtension_All where CustomerID=@CustomerID and TableID=@UserID and ExtensionTypeCategoryID=1 -- User references
	UNION
	select * from vw_SystemExtension_All where CustomerID=@CustomerID and TableID=@ModeratorID and ExtensionTypeCategoryID=2 -- Moderator references
	ORDER BY DisplayName

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pState_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the State table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pState_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the State table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [LongName]'
				SET @SQL = @SQL + ', [FederalTax]'
				SET @SQL = @SQL + ', [LocalTax]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [LocalOnFederalTax]'
				SET @SQL = @SQL + ' FROM [dbo].[State]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [LongName],'
				SET @SQL = @SQL + ' [FederalTax],'
				SET @SQL = @SQL + ' [LocalTax],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [LocalOnFederalTax]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[State]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pState_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the State table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LongName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@FederalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@LocalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@LocalOnFederalTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[State]
					(
					[ID]
					,[CountryID]
					,[LongName]
					,[FederalTax]
					,[LocalTax]
					,[DisplayOrder]
					,[LocalOnFederalTax]
					)
				VALUES
					(
					@Id
					,@CountryId
					,@LongName
					,@FederalTax
					,@LocalTax
					,@DisplayOrder
					,@LocalOnFederalTax
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pState_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the State table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LongName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@FederalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@LocalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@LocalOnFederalTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[State]
				SET
					[ID] = @Id
					,[CountryID] = @CountryId
					,[LongName] = @LongName
					,[FederalTax] = @FederalTax
					,[LocalTax] = @LocalTax
					,[DisplayOrder] = @DisplayOrder
					,[LocalOnFederalTax] = @LocalOnFederalTax
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pState_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the State table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[State] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pState_GetByCountryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pState_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pState_GetByIdCountryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[ID] = @Id
					AND [CountryID] = @CountryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pState_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the State table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@LongName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@FederalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@LocalTax" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@LocalOnFederalTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CountryID]
	, [LongName]
	, [FederalTax]
	, [LocalTax]
	, [DisplayOrder]
	, [LocalOnFederalTax]
    FROM
	[dbo].[State]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([LongName] = @LongName OR @LongName IS NULL)
	AND ([FederalTax] = @FederalTax OR @FederalTax IS NULL)
	AND ([LocalTax] = @LocalTax OR @LocalTax IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([LocalOnFederalTax] = @LocalOnFederalTax OR @LocalOnFederalTax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CountryID]
	, [LongName]
	, [FederalTax]
	, [LocalTax]
	, [DisplayOrder]
	, [LocalOnFederalTax]
    FROM
	[dbo].[State]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([LongName] = @LongName AND @LongName is not null)
	OR ([FederalTax] = @FederalTax AND @FederalTax is not null)
	OR ([LocalTax] = @LocalTax AND @LocalTax is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([LocalOnFederalTax] = @LocalOnFederalTax AND @LocalOnFederalTax is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pState_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the State table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CountryID]
					, [LongName]
					, [FederalTax]
					, [LocalTax]
					, [DisplayOrder]
					, [LocalOnFederalTax]
					FROM [dbo].[State] {0}
				)
				SELECT
				       [ID],
				       [CountryID],
				       [LongName],
				       [FederalTax],
				       [LocalTax],
				       [DisplayOrder],
				       [LocalOnFederalTax]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[State] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProductType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ProductType]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ProductType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
    FROM
	[dbo].[ProductType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
    FROM
	[dbo].[ProductType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProductType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [DisplayNameAlt]
					, [DescriptionAlt]
					, [DisplayOrder]
					FROM [dbo].[ProductType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [DisplayNameAlt],
				       [DescriptionAlt],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ProductType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[ProductRateType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProductRateType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ProductRateType]
					(
					[Name]
					,[Description]
					,[DisplayName]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayName
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ProductRateType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[ProductRateType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[ProductRateType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[ProductRateType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProductRateType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayName]
					, [DisplayOrder]
					FROM [dbo].[ProductRateType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayName],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ProductRateType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateInterval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value]
				FROM
					[dbo].[ProductRateInterval]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateInterval_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateInterval table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateInterval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateInterval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProductRateInterval_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ProductRateInterval]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateInterval_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateInterval]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateInterval_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ProductRateInterval] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateInterval_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateInterval table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value]
				FROM
					[dbo].[ProductRateInterval]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateInterval_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateInterval table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Value" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
    FROM
	[dbo].[ProductRateInterval]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
    FROM
	[dbo].[ProductRateInterval]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProductRateInterval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateInterval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [Value]
					FROM [dbo].[ProductRateInterval] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [Value]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ProductRateInterval] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModeratorXTimeUser_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModeratorXTimeUser_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ModeratorXTimeUser table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [FirstCallDate]'
				SET @SQL = @SQL + ', [FirstCallProductID]'
				SET @SQL = @SQL + ', [FirstCallNotes]'
				SET @SQL = @SQL + ', [ThirdCallDate]'
				SET @SQL = @SQL + ', [ThirdCallProductID]'
				SET @SQL = @SQL + ', [ThirdCallNotes]'
				SET @SQL = @SQL + ', [SecondCallDate]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ' FROM [dbo].[ModeratorXTimeUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [FirstCallDate],'
				SET @SQL = @SQL + ' [FirstCallProductID],'
				SET @SQL = @SQL + ' [FirstCallNotes],'
				SET @SQL = @SQL + ' [ThirdCallDate],'
				SET @SQL = @SQL + ' [ThirdCallProductID],'
				SET @SQL = @SQL + ' [ThirdCallNotes],'
				SET @SQL = @SQL + ' [SecondCallDate],'
				SET @SQL = @SQL + ' [UserID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ModeratorXTimeUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pModeratorXTimeUser_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FirstCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FirstCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FirstCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@ThirdCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ThirdCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ThirdCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SecondCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ModeratorXTimeUser]
					(
					[ModeratorID]
					,[FirstCallDate]
					,[FirstCallProductID]
					,[FirstCallNotes]
					,[ThirdCallDate]
					,[ThirdCallProductID]
					,[ThirdCallNotes]
					,[SecondCallDate]
					,[UserID]
					)
				VALUES
					(
					@ModeratorId
					,@FirstCallDate
					,@FirstCallProductId
					,@FirstCallNotes
					,@ThirdCallDate
					,@ThirdCallProductId
					,@ThirdCallNotes
					,@SecondCallDate
					,@UserId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FirstCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FirstCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FirstCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@ThirdCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ThirdCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ThirdCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SecondCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ModeratorXTimeUser]
				SET
					[ModeratorID] = @ModeratorId
					,[FirstCallDate] = @FirstCallDate
					,[FirstCallProductID] = @FirstCallProductId
					,[FirstCallNotes] = @FirstCallNotes
					,[ThirdCallDate] = @ThirdCallDate
					,[ThirdCallProductID] = @ThirdCallProductId
					,[ThirdCallNotes] = @ThirdCallNotes
					,[SecondCallDate] = @SecondCallDate
					,[UserID] = @UserId
				WHERE
[ModeratorID] = @OriginalModeratorId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ModeratorXTimeUser] WITH (ROWLOCK) 
				WHERE
					[ModeratorID] = @ModeratorId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_GetByFirstCallDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FirstCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[FirstCallDate] = @FirstCallDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_GetByThirdCallDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ThirdCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[ThirdCallDate] = @ThirdCallDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModeratorXTimeUser_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ModeratorXTimeUser table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FirstCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@FirstCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FirstCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@ThirdCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ThirdCallProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ThirdCallNotes" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@SecondCallDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ModeratorID]
	, [FirstCallDate]
	, [FirstCallProductID]
	, [FirstCallNotes]
	, [ThirdCallDate]
	, [ThirdCallProductID]
	, [ThirdCallNotes]
	, [SecondCallDate]
	, [UserID]
    FROM
	[dbo].[ModeratorXTimeUser]
    WHERE 
	 ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([FirstCallDate] = @FirstCallDate OR @FirstCallDate IS NULL)
	AND ([FirstCallProductID] = @FirstCallProductId OR @FirstCallProductId IS NULL)
	AND ([FirstCallNotes] = @FirstCallNotes OR @FirstCallNotes IS NULL)
	AND ([ThirdCallDate] = @ThirdCallDate OR @ThirdCallDate IS NULL)
	AND ([ThirdCallProductID] = @ThirdCallProductId OR @ThirdCallProductId IS NULL)
	AND ([ThirdCallNotes] = @ThirdCallNotes OR @ThirdCallNotes IS NULL)
	AND ([SecondCallDate] = @SecondCallDate OR @SecondCallDate IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ModeratorID]
	, [FirstCallDate]
	, [FirstCallProductID]
	, [FirstCallNotes]
	, [ThirdCallDate]
	, [ThirdCallProductID]
	, [ThirdCallNotes]
	, [SecondCallDate]
	, [UserID]
    FROM
	[dbo].[ModeratorXTimeUser]
    WHERE 
	 ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([FirstCallDate] = @FirstCallDate AND @FirstCallDate is not null)
	OR ([FirstCallProductID] = @FirstCallProductId AND @FirstCallProductId is not null)
	OR ([FirstCallNotes] = @FirstCallNotes AND @FirstCallNotes is not null)
	OR ([ThirdCallDate] = @ThirdCallDate AND @ThirdCallDate is not null)
	OR ([ThirdCallProductID] = @ThirdCallProductId AND @ThirdCallProductId is not null)
	OR ([ThirdCallNotes] = @ThirdCallNotes AND @ThirdCallNotes is not null)
	OR ([SecondCallDate] = @SecondCallDate AND @SecondCallDate is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pModeratorXTimeUser_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ModeratorXTimeUser table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ModeratorID]
					, [FirstCallDate]
					, [FirstCallProductID]
					, [FirstCallNotes]
					, [ThirdCallDate]
					, [ThirdCallProductID]
					, [ThirdCallNotes]
					, [SecondCallDate]
					, [UserID]
					FROM [dbo].[ModeratorXTimeUser] {0}
				)
				SELECT
				       [ModeratorID],
				       [FirstCallDate],
				       [FirstCallProductID],
				       [FirstCallNotes],
				       [ThirdCallDate],
				       [ThirdCallProductID],
				       [ThirdCallNotes],
				       [SecondCallDate],
				       [UserID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ModeratorXTimeUser] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_ModeratorXTimeUser_XTimeReport"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns the ModeratorXTimeUser Report for either the first or thrid
time usage.

July 2013 - added Account Manager fields
March/2014 - added Customer CreatedDate - known as Date Provisioned

EXAMPLES:
	--first time
	EXEC [p_ModeratorXTimeUser_XTimeReport] '0000000001','jan 1 2009', 'feb 1 2009', 1
	--3rd time
	EXEC [p_ModeratorXTimeUser_XTimeReport] '0000000001','jan 1 2009', 'feb 1 2009', 2
	--first time, with Sales Person
	EXEC [p_ModeratorXTimeUser_XTimeReport] '0000000001','jan 1 2009', 'feb 1 2009', 1, 6
	--3rd time, with Sales Person
	EXEC [p_ModeratorXTimeUser_XTimeReport] '0000000001','jan 1 2009', 'feb 1 2009', 2, 6

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReportNumber" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


IF @ReportNumber = 1
BEGIN
	SELECT     TOP (100) PERCENT dbo.vw_ModeratorList_AdminSite.CompanyName, dbo.vw_ModeratorList_AdminSite.ModeratorName, 
						  dbo.vw_ModeratorList_AdminSite.Email, dbo.vw_ModeratorList_AdminSite.Address1, dbo.vw_ModeratorList_AdminSite.Address2, 
						  dbo.vw_ModeratorList_AdminSite.City, dbo.vw_ModeratorList_AdminSite.Country, dbo.vw_ModeratorList_AdminSite.Region, 
						  dbo.vw_ModeratorList_AdminSite.PostalCode, dbo.vw_ModeratorList_AdminSite.Telephone, dbo.vw_ModeratorList_AdminSite.SalesPerson, 
						  dbo.vw_ModeratorList_AdminSite.SalesPersonID, dbo.ModeratorXTimeUser.UserID, MIN(dbo.ModeratorXTimeUser.FirstCallDate) 
						  AS CallDate, vw_ModeratorList_AdminSite.AccountManager, vw_ModeratorList_AdminSite.DateProvisioned
	FROM         dbo.ModeratorXTimeUser INNER JOIN
						  dbo.vw_ModeratorList_AdminSite ON dbo.ModeratorXTimeUser.UserID = dbo.vw_ModeratorList_AdminSite.UserID
	WHERE WholesalerID = @WholesalerID AND 
		dbo.ModeratorXTimeUser.FirstCallDate BETWEEN @StartDate AND @EndDate
		AND (@SalesPersonID IS NULL OR dbo.vw_ModeratorList_AdminSite.SalesPersonID = @SalesPersonID)
	GROUP BY dbo.vw_ModeratorList_AdminSite.ModeratorName, dbo.vw_ModeratorList_AdminSite.Email, dbo.vw_ModeratorList_AdminSite.Address1, 
						  dbo.vw_ModeratorList_AdminSite.Address2, dbo.vw_ModeratorList_AdminSite.City, dbo.vw_ModeratorList_AdminSite.Country, 
						  dbo.vw_ModeratorList_AdminSite.Region, dbo.vw_ModeratorList_AdminSite.PostalCode, dbo.vw_ModeratorList_AdminSite.Telephone, 
						  dbo.vw_ModeratorList_AdminSite.SalesPerson, dbo.vw_ModeratorList_AdminSite.SalesPersonID, dbo.ModeratorXTimeUser.UserID, 
						  dbo.vw_ModeratorList_AdminSite.CompanyName, vw_ModeratorList_AdminSite.AccountManager, vw_ModeratorList_AdminSite.DateProvisioned
	HAVING      (MIN(dbo.ModeratorXTimeUser.FirstCallDate) IS NOT NULL)
	ORDER BY dbo.vw_ModeratorList_AdminSite.CompanyName, dbo.vw_ModeratorList_AdminSite.ModeratorName
END
ELSE
BEGIN
	SELECT     TOP (100) PERCENT dbo.vw_ModeratorList_AdminSite.CompanyName, dbo.vw_ModeratorList_AdminSite.ModeratorName, 
						  dbo.vw_ModeratorList_AdminSite.Email, dbo.vw_ModeratorList_AdminSite.Address1, dbo.vw_ModeratorList_AdminSite.Address2, 
						  dbo.vw_ModeratorList_AdminSite.City, dbo.vw_ModeratorList_AdminSite.Country, dbo.vw_ModeratorList_AdminSite.Region, 
						  dbo.vw_ModeratorList_AdminSite.PostalCode, dbo.vw_ModeratorList_AdminSite.Telephone, dbo.vw_ModeratorList_AdminSite.SalesPerson, 
						  dbo.vw_ModeratorList_AdminSite.SalesPersonID, dbo.ModeratorXTimeUser.UserID, MIN(dbo.ModeratorXTimeUser.ThirdCallDate) 
						  AS CallDate, vw_ModeratorList_AdminSite.AccountManager, vw_ModeratorList_AdminSite.DateProvisioned
	FROM         dbo.ModeratorXTimeUser INNER JOIN
						  dbo.vw_ModeratorList_AdminSite ON dbo.ModeratorXTimeUser.UserID = dbo.vw_ModeratorList_AdminSite.UserID
	WHERE WholesalerID = @WholesalerID AND 
		dbo.ModeratorXTimeUser.ThirdCallDate BETWEEN @StartDate AND @EndDate
		AND (@SalesPersonID IS NULL OR dbo.vw_ModeratorList_AdminSite.SalesPersonID = @SalesPersonID)
	GROUP BY dbo.vw_ModeratorList_AdminSite.ModeratorName, dbo.vw_ModeratorList_AdminSite.Email, dbo.vw_ModeratorList_AdminSite.Address1, 
						  dbo.vw_ModeratorList_AdminSite.Address2, dbo.vw_ModeratorList_AdminSite.City, dbo.vw_ModeratorList_AdminSite.Country, 
						  dbo.vw_ModeratorList_AdminSite.Region, dbo.vw_ModeratorList_AdminSite.PostalCode, dbo.vw_ModeratorList_AdminSite.Telephone, 
						  dbo.vw_ModeratorList_AdminSite.SalesPerson, dbo.vw_ModeratorList_AdminSite.SalesPersonID, dbo.ModeratorXTimeUser.UserID, 
						  dbo.vw_ModeratorList_AdminSite.CompanyName, vw_ModeratorList_AdminSite.AccountManager, vw_ModeratorList_AdminSite.DateProvisioned
	HAVING      (MIN(dbo.ModeratorXTimeUser.ThirdCallDate) IS NOT NULL)
	ORDER BY dbo.vw_ModeratorList_AdminSite.CompanyName, dbo.vw_ModeratorList_AdminSite.ModeratorName
END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pLeadStage_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadStage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadStage]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadStage_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadStage table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadStage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadStage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLeadStage_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadStage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[LeadStage]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadStage_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadStage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadStage]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadStage_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadStage table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[LeadStage] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadStage_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadStage table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadStage]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLeadStage_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadStage table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadStage]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadStage]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLeadStage_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadStage table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[LeadStage] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[LeadStage] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadSource_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadSource table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadSource]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadSource_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadSource table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadSource]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadSource]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLeadSource_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadSource table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[LeadSource]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadSource_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadSource table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadSource]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadSource_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadSource table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[LeadSource] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadSource_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadSource table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadSource]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLeadSource_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadSource table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadSource]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadSource]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLeadSource_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadSource table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[LeadSource] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[LeadSource] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadProduct_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadProduct]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadProduct_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLeadProduct_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[LeadProduct]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadProduct_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadProduct]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadProduct_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[LeadProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadProduct_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLeadProduct_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLeadProduct_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadProduct table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[LeadProduct] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[LeadProduct] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[OmnoviaCustomerID],
					[ModeratorID],
					[MovieID],
					[RoomName],
					[MovieTitle],
					[MovieDateAdded],
					[MovieLength],
					[MovieRoomID],
					[MovieDate],
					[CompanyShortLink],
					[created],
					[HostedLinkExpiryDate],
					[HostedLinkShortened],
					[HostedLinkAlias],
					[RecordingDirectory],
					[UniqueConferenceID],
					[HostingPeriod],
					[HostingAutoRenew],
					[Event_ID]
				FROM
					[dbo].[OmnoviaHostedArchive]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pOmnoviaHostedArchive_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchive table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [OmnoviaCustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [MovieID]'
				SET @SQL = @SQL + ', [RoomName]'
				SET @SQL = @SQL + ', [MovieTitle]'
				SET @SQL = @SQL + ', [MovieDateAdded]'
				SET @SQL = @SQL + ', [MovieLength]'
				SET @SQL = @SQL + ', [MovieRoomID]'
				SET @SQL = @SQL + ', [MovieDate]'
				SET @SQL = @SQL + ', [CompanyShortLink]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [HostedLinkShortened]'
				SET @SQL = @SQL + ', [HostedLinkAlias]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [HostingPeriod]'
				SET @SQL = @SQL + ', [HostingAutoRenew]'
				SET @SQL = @SQL + ', [Event_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [OmnoviaCustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [MovieID],'
				SET @SQL = @SQL + ' [RoomName],'
				SET @SQL = @SQL + ' [MovieTitle],'
				SET @SQL = @SQL + ' [MovieDateAdded],'
				SET @SQL = @SQL + ' [MovieLength],'
				SET @SQL = @SQL + ' [MovieRoomID],'
				SET @SQL = @SQL + ' [MovieDate],'
				SET @SQL = @SQL + ' [CompanyShortLink],'
				SET @SQL = @SQL + ' [created],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [HostedLinkShortened],'
				SET @SQL = @SQL + ' [HostedLinkAlias],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [HostingPeriod],'
				SET @SQL = @SQL + ' [HostingAutoRenew],'
				SET @SQL = @SQL + ' [Event_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OmnoviaCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RoomName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MovieTitle" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MovieDateAdded" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MovieLength" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieRoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CompanyShortLink" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkShortened" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@HostedLinkAlias" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@HostingPeriod" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostingAutoRenew" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Event_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[OmnoviaHostedArchive]
					(
					[OmnoviaCustomerID]
					,[ModeratorID]
					,[MovieID]
					,[RoomName]
					,[MovieTitle]
					,[MovieDateAdded]
					,[MovieLength]
					,[MovieRoomID]
					,[MovieDate]
					,[CompanyShortLink]
					,[created]
					,[HostedLinkExpiryDate]
					,[HostedLinkShortened]
					,[HostedLinkAlias]
					,[RecordingDirectory]
					,[UniqueConferenceID]
					,[HostingPeriod]
					,[HostingAutoRenew]
					,[Event_ID]
					)
				VALUES
					(
					@OmnoviaCustomerId
					,@ModeratorId
					,@MovieId
					,@RoomName
					,@MovieTitle
					,@MovieDateAdded
					,@MovieLength
					,@MovieRoomId
					,@MovieDate
					,@CompanyShortLink
					,@Created
					,@HostedLinkExpiryDate
					,@HostedLinkShortened
					,@HostedLinkAlias
					,@RecordingDirectory
					,@UniqueConferenceId
					,@HostingPeriod
					,@HostingAutoRenew
					,@Event_Id
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OmnoviaCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RoomName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MovieTitle" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MovieDateAdded" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MovieLength" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieRoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MovieDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CompanyShortLink" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HostedLinkShortened" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@HostedLinkAlias" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@HostingPeriod" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostingAutoRenew" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Event_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaHostedArchive]
				SET
					[OmnoviaCustomerID] = @OmnoviaCustomerId
					,[ModeratorID] = @ModeratorId
					,[MovieID] = @MovieId
					,[RoomName] = @RoomName
					,[MovieTitle] = @MovieTitle
					,[MovieDateAdded] = @MovieDateAdded
					,[MovieLength] = @MovieLength
					,[MovieRoomID] = @MovieRoomId
					,[MovieDate] = @MovieDate
					,[CompanyShortLink] = @CompanyShortLink
					,[created] = @Created
					,[HostedLinkExpiryDate] = @HostedLinkExpiryDate
					,[HostedLinkShortened] = @HostedLinkShortened
					,[HostedLinkAlias] = @HostedLinkAlias
					,[RecordingDirectory] = @RecordingDirectory
					,[UniqueConferenceID] = @UniqueConferenceId
					,[HostingPeriod] = @HostingPeriod
					,[HostingAutoRenew] = @HostingAutoRenew
					,[Event_ID] = @Event_Id
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[OmnoviaHostedArchive] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchive_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaHostedArchive table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[OmnoviaCustomerID],
					[ModeratorID],
					[MovieID],
					[RoomName],
					[MovieTitle],
					[MovieDateAdded],
					[MovieLength],
					[MovieRoomID],
					[MovieDate],
					[CompanyShortLink],
					[created],
					[HostedLinkExpiryDate],
					[HostedLinkShortened],
					[HostedLinkAlias],
					[RecordingDirectory],
					[UniqueConferenceID],
					[HostingPeriod],
					[HostingAutoRenew],
					[Event_ID]
				FROM
					[dbo].[OmnoviaHostedArchive]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaHostedArchive table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OmnoviaCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoomName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MovieTitle" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MovieDateAdded" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@MovieLength" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieRoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CompanyShortLink" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@HostedLinkExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@HostedLinkShortened" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@HostedLinkAlias" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RecordingDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@HostingPeriod" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostingAutoRenew" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Event_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [OmnoviaCustomerID]
	, [ModeratorID]
	, [MovieID]
	, [RoomName]
	, [MovieTitle]
	, [MovieDateAdded]
	, [MovieLength]
	, [MovieRoomID]
	, [MovieDate]
	, [CompanyShortLink]
	, [created]
	, [HostedLinkExpiryDate]
	, [HostedLinkShortened]
	, [HostedLinkAlias]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [HostingPeriod]
	, [HostingAutoRenew]
	, [Event_ID]
    FROM
	[dbo].[OmnoviaHostedArchive]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([OmnoviaCustomerID] = @OmnoviaCustomerId OR @OmnoviaCustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([MovieID] = @MovieId OR @MovieId IS NULL)
	AND ([RoomName] = @RoomName OR @RoomName IS NULL)
	AND ([MovieTitle] = @MovieTitle OR @MovieTitle IS NULL)
	AND ([MovieDateAdded] = @MovieDateAdded OR @MovieDateAdded IS NULL)
	AND ([MovieLength] = @MovieLength OR @MovieLength IS NULL)
	AND ([MovieRoomID] = @MovieRoomId OR @MovieRoomId IS NULL)
	AND ([MovieDate] = @MovieDate OR @MovieDate IS NULL)
	AND ([CompanyShortLink] = @CompanyShortLink OR @CompanyShortLink IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
	AND ([HostedLinkExpiryDate] = @HostedLinkExpiryDate OR @HostedLinkExpiryDate IS NULL)
	AND ([HostedLinkShortened] = @HostedLinkShortened OR @HostedLinkShortened IS NULL)
	AND ([HostedLinkAlias] = @HostedLinkAlias OR @HostedLinkAlias IS NULL)
	AND ([RecordingDirectory] = @RecordingDirectory OR @RecordingDirectory IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([HostingPeriod] = @HostingPeriod OR @HostingPeriod IS NULL)
	AND ([HostingAutoRenew] = @HostingAutoRenew OR @HostingAutoRenew IS NULL)
	AND ([Event_ID] = @Event_Id OR @Event_Id IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [OmnoviaCustomerID]
	, [ModeratorID]
	, [MovieID]
	, [RoomName]
	, [MovieTitle]
	, [MovieDateAdded]
	, [MovieLength]
	, [MovieRoomID]
	, [MovieDate]
	, [CompanyShortLink]
	, [created]
	, [HostedLinkExpiryDate]
	, [HostedLinkShortened]
	, [HostedLinkAlias]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [HostingPeriod]
	, [HostingAutoRenew]
	, [Event_ID]
    FROM
	[dbo].[OmnoviaHostedArchive]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([OmnoviaCustomerID] = @OmnoviaCustomerId AND @OmnoviaCustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([MovieID] = @MovieId AND @MovieId is not null)
	OR ([RoomName] = @RoomName AND @RoomName is not null)
	OR ([MovieTitle] = @MovieTitle AND @MovieTitle is not null)
	OR ([MovieDateAdded] = @MovieDateAdded AND @MovieDateAdded is not null)
	OR ([MovieLength] = @MovieLength AND @MovieLength is not null)
	OR ([MovieRoomID] = @MovieRoomId AND @MovieRoomId is not null)
	OR ([MovieDate] = @MovieDate AND @MovieDate is not null)
	OR ([CompanyShortLink] = @CompanyShortLink AND @CompanyShortLink is not null)
	OR ([created] = @Created AND @Created is not null)
	OR ([HostedLinkExpiryDate] = @HostedLinkExpiryDate AND @HostedLinkExpiryDate is not null)
	OR ([HostedLinkShortened] = @HostedLinkShortened AND @HostedLinkShortened is not null)
	OR ([HostedLinkAlias] = @HostedLinkAlias AND @HostedLinkAlias is not null)
	OR ([RecordingDirectory] = @RecordingDirectory AND @RecordingDirectory is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([HostingPeriod] = @HostingPeriod AND @HostingPeriod is not null)
	OR ([HostingAutoRenew] = @HostingAutoRenew AND @HostingAutoRenew is not null)
	OR ([Event_ID] = @Event_Id AND @Event_Id is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pOmnoviaHostedArchive_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchive table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [OmnoviaCustomerID]
					, [ModeratorID]
					, [MovieID]
					, [RoomName]
					, [MovieTitle]
					, [MovieDateAdded]
					, [MovieLength]
					, [MovieRoomID]
					, [MovieDate]
					, [CompanyShortLink]
					, [created]
					, [HostedLinkExpiryDate]
					, [HostedLinkShortened]
					, [HostedLinkAlias]
					, [RecordingDirectory]
					, [UniqueConferenceID]
					, [HostingPeriod]
					, [HostingAutoRenew]
					, [Event_ID]
					FROM [dbo].[OmnoviaHostedArchive] {0}
				)
				SELECT
				       [id],
				       [OmnoviaCustomerID],
				       [ModeratorID],
				       [MovieID],
				       [RoomName],
				       [MovieTitle],
				       [MovieDateAdded],
				       [MovieLength],
				       [MovieRoomID],
				       [MovieDate],
				       [CompanyShortLink],
				       [created],
				       [HostedLinkExpiryDate],
				       [HostedLinkShortened],
				       [HostedLinkAlias],
				       [RecordingDirectory],
				       [UniqueConferenceID],
				       [HostingPeriod],
				       [HostingAutoRenew],
				       [Event_ID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[OmnoviaHostedArchive] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchive_RenewHostedLink"  skip="true">
			<comment><![CDATA[/*
DESCRIPTION

LOG
2015/03/10 | Topo | ADD | Init
2015/03/26 | Topo | MOD | 1. Remove @ModeratorID parameter
						  2. Add @NEWID to save new id from insert
						  3. Add new @HostingAutoRenew parameter and update
2015/03/30 | Topo | ADD | 

2015/03/30 | James| MOD | Adding "Action" to trigger billing
				    | Add logic to update non-expired recordings
				    | Change to use OmnoviaHostedArchive ID as not sure if MovieID is unique across customers
2015/04/17 | Topo | MOD | Remove Create hosting scenario
							TODO: @ArchiveCacheID must be removed
2015/04/29 | Topo | MOD | Rename stored procedure from [p_OmnoviaHostedArchive_addHostedLink] to [p_OmnoviaHostedArchive_RenewHostedLink]
						  Rename ActionFrom log tracker	
2015/05/11 | Topo | FIX | change to 30 day expiry instead of 1 month
2015/05/15 | Topo | ADD | add number of participant
2015/05/28 | Topo | FIX | replace RedbackCustomerID with OmnoviaCustomerID

Error code
1xx Parameters
2xx Access Denied
3xx Misc / Application 

EXAMPLE
SELECT TOP 100 * FROM OmnoviaArchive WHERE RedbackCustomerID IS NOT NULL
SELECT TOP 100 * FROM OmnoviaHostedArchive
SELECT TOP 100 * FROM [Action] ORDER BY 1 DESC

Fail Test
[p_OmnoviaHostedArchive_RenewHostedLink] 240,3912,2390,1
[p_OmnoviaHostedArchive_RenewHostedLink] 241,3912,2390,1

Good Test
BEGIN TRANSACTION
EXEC [p_OmnoviaHostedArchive_RenewHostedLink] 240,15623,65,1		--Renewal 1 month
EXEC [p_OmnoviaHostedArchive_RenewHostedLink] 240,15623,65,12		--Renewal 12 months on top of existing for 13 month
SELECT TOP 100 * FROM OmnoviaHostedArchive
SELECT TOP 100 * FROM [Action] ORDER BY 1 DESC
--COMMIT
ROLLBACK
*/

]]></comment>
			<parameters>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostedArchiveID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@NoMonthHostingPeriod" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @MOVIEID int,@HostedLinkExpiryDate datetime, @HostedLinkShortened as varchar(20)
	DECLARE @ActionFrom VARCHAR(100),@ActionTypeIDCreate1Month INT,@ActionTypeIDCreate12Month INT
			,@ActionTypeIDRenewal1Month INT,@ActionTypeIDRenewal12Month INT

	SET @ActionFrom = 'p_OmnoviaHostedArchive_RenewHostedLink' --Name used to track Action's in Queue
	--TODO: Add a lookup for these values, if worth it
	-- Denotes the billing action, 7 - Create 1 month, 8 - Create 12 month, 9 - Renew 1 month, 10 - Renew 12 month, 
	SET @ActionTypeIDCreate1Month = 7 
	SET @ActionTypeIDCreate12Month = 8 
	SET @ActionTypeIDRenewal1Month = 9 
	SET @ActionTypeIDRenewal12Month = 10 

	IF (ISNULL(@OmnoviaCustomerID, 0) = 0)
	BEGIN
	    SELECT err = 11
		    ,msg = 'CustomerID is a required parameter'

	    RETURN
	END
	IF (ISNULL(@HostedArchiveID, 0) = 0)
	BEGIN
	    SELECT err = 12,msg = 'HostedArchiveID is a required parameter'
	    RETURN
	END

	IF (@NoMonthHostingPeriod = 1)
		SET @HostedLinkExpiryDate = DATEADD(DAY, 30, @HostedLinkExpiryDate)
	ELSE	
		SET @HostedLinkExpiryDate = DATEADD(MONTH, @NoMonthHostingPeriod, @HostedLinkExpiryDate)

/*
	--CREATE SCENARIO
	IF ISNULL(@ArchiveCacheID,0) > 0
	BEGIN

	   IF dbo.[fn_OmnoviaArchiveCheckAccess](@RedbackCustomerID, @ModeratorID, @ArchiveCacheID)=0
	   BEGIN
		  SELECT err=21, msg='cache archive - access denied'
		  RETURN
	   END

	   --avoid duplicate entry for new hosted recording
	   SELECT @MovieID=MovieID FROM OmnoviaHostedArchive WHERE MovieID IN (SELECT movieid FROM OmnoviaArchive WHERE id=@ArchiveCacheID)
	   IF @MovieID>0 
	   BEGIN
		  SELECT err=3, msg='duplicate movieID - abort'
		  RETURN
	   END
	   --Calculate the ExpiryDate
	   SET @HostedLinkExpiryDate = DATEADD(MONTH, @NoMonthHostingPeriod, GETDATE())

	   BEGIN TRANSACTION
	   SET @HostedLinkShortened = dbo.[fn_GetOmnoviaUniqueHostedRecordingURLShortened](5)
	   
	   INSERT INTO OmnoviaHostedArchive(OmnoviaCustomerID,OmnoviaCompanyID,RedbackCustomerID,ModeratorID,MovieID,MovieDateAdded,MovieDate,MovieLength, RoomName, MovieRoomID, MovieTitle, CompanyShortLink, HostedLinkShortened, HostedLinkExpiryDate,HostingPeriod) 
		  SELECT OmnoviaCustomerID,OmnoviaCompanyID,RedbackCustomerID,ModeratorID,MovieID,MovieDateAdded,MovieDate,MovieLength,RoomName,MovieRoomID, MovieTitle, CompanyShortLink, @HostedLinkShortened,@HostedLinkExpiryDate,@NoMonthHostingPeriod FROM OmnoviaArchive 
		  WHERE id=@ArchiveCacheID --and ModeratorID=@ModeratorID
	   SET @HostedArchiveID=@@IDENTITY

	   --Add to Action Queue for Billing	   
	   IF (@NoMonthHostingPeriod = 12)
	   BEGIN
		  EXEC dbo.usp_ActionInsert @ActionTypeID = @ActionTypeIDCreate12Month, @ActionFrom = @ActionFrom,@ExtraInfo = @HostedArchiveID
	   END
	   ELSE
	   BEGIN
		  EXEC dbo.usp_ActionInsert @ActionTypeID = @ActionTypeIDCreate1Month, @ActionFrom = @ActionFrom,@ExtraInfo = @HostedArchiveID
	   END
	   COMMIT
	END
	ELSE
*/
	BEGIN
	   --RENEWAL SCENARIO
	   IF dbo.[fn_OmnoviaHostedArchiveCheckAccess](@OmnoviaCustomerID, @ModeratorID, @HostedArchiveID)=0
	   BEGIN
   		   SELECT err=22, msg='hosted archive - access denied'
	   RETURN
	   END
	   
	   --Get the ExpiryDate
	   SELECT TOP 1 @HostedLinkExpiryDate= HostedLinkExpiryDate 
	   FROM OmnoviaHostedArchive WHERE ID = @HostedArchiveID
	   --Calculate the ExpiryDate
	   IF (@HostedLinkExpiryDate >= GETDATE())
	   BEGIN
		  --ExpiryDate still active so add on to the Date
		  IF (@NoMonthHostingPeriod = 1)
			SET @HostedLinkExpiryDate = DATEADD(DAY, 30, @HostedLinkExpiryDate)
		  ELSE	
			SET @HostedLinkExpiryDate = DATEADD(MONTH, @NoMonthHostingPeriod, @HostedLinkExpiryDate)
	   END
	   ELSE
	   BEGIN
		  --Reset ExpiryDate based on today
		  IF (@NoMonthHostingPeriod = 1)
			SET @HostedLinkExpiryDate = DATEADD(DAY, 30, GETDATE())
		  ELSE
			SET @HostedLinkExpiryDate = DATEADD(MONTH, @NoMonthHostingPeriod, GETDATE())
	   END
	   
	   UPDATE OmnoviaHostedArchive 
	   SET HostedLinkExpiryDate=@HostedLinkExpiryDate, HostingPeriod	= @NoMonthHostingPeriod
	   WHERE ID=@HostedArchiveID

	   --Add to Action Queue for Billing	   
	   IF (@NoMonthHostingPeriod = 12)
	   BEGIN
		  EXEC dbo.usp_ActionInsert @ActionTypeID = @ActionTypeIDRenewal12Month, @ActionFrom = @ActionFrom,@ExtraInfo = @HostedArchiveID
	   END
	   ELSE
	   BEGIN
		  EXEC dbo.usp_ActionInsert @ActionTypeID = @ActionTypeIDRenewal1Month, @ActionFrom = @ActionFrom,@ExtraInfo = @HostedArchiveID
	   END
	END
	
	--case sensitive
	SELECT id=a.id,title=a.MovieTitle,movieDateAdded=a.MovieDateAdded,roomName=a.RoomName,conferenceName=m.description,moderatorName=u.displayname, movieLength=a.MovieLength, movieDate=a.MovieDate, url=a.HostedLinkShortened, urlAlias=a.HostedLinkAlias, urlExpiry=a.HostedLinkExpiryDate,
			isMP4Requested=req.id,
			numOfParticipant=(SELECT count(*) FROM OmnoviaHostedArchiveParticipant WHERE HostedArchiveID=a.id)
			FROM OmnoviaHostedArchive a
				inner join moderator m on a.moderatorid = m.id
				inner join [user] u on u.userid=m.userid
				left join [OmnoviaMP4Request] req on req.hostedID=a.id
		WHERE a.id=@HostedArchiveID --and ModeratorID=@ModeratorID
END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchive_checkURL"  skip="true">
			<comment><![CDATA[
]]></comment>
			<parameters>
				<parameter name="@URL" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 1 from OmnoviaHostedArchive 
		where (HostedLinkShortened = @URL or HostedLinkAlias = @URL) and HostedLinkExpiryDate>getdate()	
END




			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin"  skip="true">
			<comment><![CDATA[/*
DESCRIPTION

LOG
2015/04/14 | Topo | ADD | Init
2015/04/27 | Topo | MOD | Rename stored procedure
2015/05/08 | Topo | FIX | limit company, query active used company only
					ADD | add row number to help with pagination to prevent session timeout
2015/05/11 | Topo | FIX | order by min(cust.id)
2015/05/12 | Topo | FIX | query ALL company with cid and cpw cause they might have recast

*/

]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				

BEGIN
	--case sensitive
	-- event
	SELECT ROW_NUMBER() 
        OVER (ORDER BY min(cust.id)) AS row,id=co.id,cID=co.cID,cPW=co.cPW, customerID=min(cust.id) from LaunchDB.dbo.Company co
			inner join Customer cust on cust.companyid=co.id
			WHERE cid is not null and cpw is not null 
		group by co.id,co.cid,co.cpw
	order by customerID
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchive_addRegistration"  skip="true">
			<comment><![CDATA[
]]></comment>
			<parameters>
				<parameter name="@URL" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Firstname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Lastname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Company" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Email" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CompanyShortLink" type="varchar" direction="InputOutput" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@MovieID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Declare @HostedArchiveID	int

	set @HostedArchiveID=0

	select @HostedArchiveID=id, @CompanyShortLink=CompanyShortLink, @MovieID=MovieID from OmnoviaHostedArchive 
		where (HostedLinkShortened = @URL or HostedLinkAlias = @URL) and HostedLinkExpiryDate>getdate()
	
	if @HostedArchiveID=0 
		RETURN
	
	INSERT INTO OmnoviaHostedArchiveParticipant(HostedArchiveID, Firstname, Lastname, Company, Email) 
										Values (@HostedArchiveID, @Firstname, @Lastname, @Company, @Email)

	--ArchiveURL
	--https://{0}.omnovia.com/archives/{1}
	--SET @ArchiveURL='https://'+@CompanyShortLink+'.omnovia.com/archives/'+CAST(@MovieID as varchar(20))
	
END




			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchive_GetCompanyLoginByURL"  skip="true">
			<comment><![CDATA[

/*
DO NOT USE MODERATOR ID to find company details
Some times, redback tech admin choose a moderator that is the company's moderator

example:
[p_Omnovia_GetCompanyLoginByURL] 'v3wq26'
*/

]]></comment>
			<parameters>
				<parameter name="@URL" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select top 100 co.cid as cID,co.cpw as cPW from launchdb.dbo.company co
											inner join customer cust on cust.companyid=co.id
											inner join OmnoviaHostedArchive ha on cust.id=ha.OmnoviaCustomerid
	WHERE ha.hostedlinkshortened=@URL or ha.hostedlinkalias=@URL
END


			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[HostedArchiveID],
					[Firstname],
					[Lastname],
					[Company],
					[Email],
					[created]
				FROM
					[dbo].[OmnoviaHostedArchiveParticipant]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchiveParticipant table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [HostedArchiveID]'
				SET @SQL = @SQL + ', [Firstname]'
				SET @SQL = @SQL + ', [Lastname]'
				SET @SQL = @SQL + ', [Company]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchiveParticipant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [HostedArchiveID],'
				SET @SQL = @SQL + ' [Firstname],'
				SET @SQL = @SQL + ' [Lastname],'
				SET @SQL = @SQL + ' [Company],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchiveParticipant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostedArchiveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Firstname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Lastname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Company" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[OmnoviaHostedArchiveParticipant]
					(
					[HostedArchiveID]
					,[Firstname]
					,[Lastname]
					,[Company]
					,[Email]
					,[created]
					)
				VALUES
					(
					@HostedArchiveId
					,@Firstname
					,@Lastname
					,@Company
					,@Email
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostedArchiveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Firstname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Lastname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Company" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaHostedArchiveParticipant]
				SET
					[HostedArchiveID] = @HostedArchiveId
					,[Firstname] = @Firstname
					,[Lastname] = @Lastname
					,[Company] = @Company
					,[Email] = @Email
					,[created] = @Created
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[OmnoviaHostedArchiveParticipant] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaHostedArchiveParticipant table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[HostedArchiveID],
					[Firstname],
					[Lastname],
					[Company],
					[Email],
					[created]
				FROM
					[dbo].[OmnoviaHostedArchiveParticipant]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaHostedArchiveParticipant table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostedArchiveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Firstname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Lastname" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Company" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Email" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [HostedArchiveID]
	, [Firstname]
	, [Lastname]
	, [Company]
	, [Email]
	, [created]
    FROM
	[dbo].[OmnoviaHostedArchiveParticipant]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([HostedArchiveID] = @HostedArchiveId OR @HostedArchiveId IS NULL)
	AND ([Firstname] = @Firstname OR @Firstname IS NULL)
	AND ([Lastname] = @Lastname OR @Lastname IS NULL)
	AND ([Company] = @Company OR @Company IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [HostedArchiveID]
	, [Firstname]
	, [Lastname]
	, [Company]
	, [Email]
	, [created]
    FROM
	[dbo].[OmnoviaHostedArchiveParticipant]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([HostedArchiveID] = @HostedArchiveId AND @HostedArchiveId is not null)
	OR ([Firstname] = @Firstname AND @Firstname is not null)
	OR ([Lastname] = @Lastname AND @Lastname is not null)
	OR ([Company] = @Company AND @Company is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pOmnoviaHostedArchiveParticipant_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchiveParticipant table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [HostedArchiveID]
					, [Firstname]
					, [Lastname]
					, [Company]
					, [Email]
					, [created]
					FROM [dbo].[OmnoviaHostedArchiveParticipant] {0}
				)
				SELECT
				       [id],
				       [HostedArchiveID],
				       [Firstname],
				       [Lastname],
				       [Company],
				       [Email],
				       [created]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[OmnoviaHostedArchiveParticipant] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID"  skip="true">
			<comment><![CDATA[/*
	2015/05/12 | Topo | MOD | add email, check customer id and moderator id
	2015/05/13 | Topo | FIX | switch customer and moderator query
							  add date
	2015/05/15 | Topo | ADD | add movietitle in summary
	2015/05/19 | Topo | ADD | add event details in summary for Event webinar
	2015/05/28 | Topo | FIX | replace RedbackCustomerID with OmnoviaCustomerID
	
DESCRIPTIONS
This stored procedure returns TWO query: 
	1. Participant List
	2. Report Summary
The order of the query is important!
 */
]]></comment>
			<parameters>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostedArchiveID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	IF @ModeratorID > 0	-- moderator query
	BEGIN
		--case sensitive
		SELECT hostedID=@HostedArchiveID, firstName=p.firstname, lastName=p.lastname, company=p.company, email=p.email, date=p.created
			FROM OmnoviaHostedArchiveParticipant p
					INNER JOIN OmnoviaHostedArchive a on a.id=p.hostedArchiveID
			WHERE p.HostedArchiveID=@HostedArchiveID and a.OmnoviaCustomerID=@OmnoviaCustomerID and a.moderatorid=@ModeratorID
	END
	ELSE				-- customer query
	BEGIN
		--case sensitive
		SELECT hostedID=@HostedArchiveID, firstName=p.firstname, lastName=p.lastname, company=p.company, email=p.email, date=p.created
			FROM OmnoviaHostedArchiveParticipant p
					INNER JOIN OmnoviaHostedArchive a on a.id=p.hostedArchiveID
			WHERE p.HostedArchiveID=@HostedArchiveID and a.OmnoviaCustomerID=@OmnoviaCustomerID 
	END

	--NOTE: ORDER OF SELECT statement is important for the UI front end
	--case sensitive
	SELECT url=a.HostedLinkShortened, movieTitle=a.MovieTitle, eventCustomID=e.customid, eventTitle=e.title
	FROM OmnoviaHostedArchive a
		LEFT JOIN Launchdb.dbo.event e on a.event_id=e.id
	WHERE a.id=@HostedArchiveID

END
			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pProduct_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProduct_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Product table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [SupportsExternalProvisioning]'
				SET @SQL = @SQL + ' FROM [dbo].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [SupportsExternalProvisioning]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProduct_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SupportsExternalProvisioning" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Product]
					(
					[ProductTypeID]
					,[Name]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DefaultOption]
					,[DisplayOrder]
					,[SupportsExternalProvisioning]
					)
				VALUES
					(
					@ProductTypeId
					,@Name
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DefaultOption
					,@DisplayOrder
					,@SupportsExternalProvisioning
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProduct_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SupportsExternalProvisioning" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Product]
				SET
					[ProductTypeID] = @ProductTypeId
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DefaultOption] = @DefaultOption
					,[DisplayOrder] = @DisplayOrder
					,[SupportsExternalProvisioning] = @SupportsExternalProvisioning
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProduct_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Product] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProduct_GetByProductTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[ProductTypeID] = @ProductTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProduct_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProduct_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProduct_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Product table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SupportsExternalProvisioning" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductTypeID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [DisplayOrder]
	, [SupportsExternalProvisioning]
    FROM
	[dbo].[Product]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductTypeID] = @ProductTypeId OR @ProductTypeId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([SupportsExternalProvisioning] = @SupportsExternalProvisioning OR @SupportsExternalProvisioning IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductTypeID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [DisplayOrder]
	, [SupportsExternalProvisioning]
    FROM
	[dbo].[Product]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductTypeID] = @ProductTypeId AND @ProductTypeId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([SupportsExternalProvisioning] = @SupportsExternalProvisioning AND @SupportsExternalProvisioning is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProduct_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Product table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ProductTypeID]
					, [Name]
					, [Description]
					, [DisplayNameAlt]
					, [DescriptionAlt]
					, [DefaultOption]
					, [DisplayOrder]
					, [SupportsExternalProvisioning]
					FROM [dbo].[Product] {0}
				)
				SELECT
				       [ID],
				       [ProductTypeID],
				       [Name],
				       [Description],
				       [DisplayNameAlt],
				       [DescriptionAlt],
				       [DefaultOption],
				       [DisplayOrder],
				       [SupportsExternalProvisioning]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Product] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductRateIntervalID]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [MinimumTimeBeforeChargedSec]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductRateIntervalID],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [MinimumTimeBeforeChargedSec],'
				SET @SQL = @SQL + ' [RatingTypeID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProductRate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateIntervalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MinimumTimeBeforeChargedSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RatingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ProductRate]
					(
					[ProductID]
					,[ProductRateTypeID]
					,[ProductRateIntervalID]
					,[TaxableID]
					,[CountryID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayOrder]
					,[MinimumTimeBeforeChargedSec]
					,[RatingTypeID]
					)
				VALUES
					(
					@ProductId
					,@ProductRateTypeId
					,@ProductRateIntervalId
					,@TaxableId
					,@CountryId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayOrder
					,@MinimumTimeBeforeChargedSec
					,@RatingTypeId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateIntervalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MinimumTimeBeforeChargedSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RatingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRate]
				SET
					[ProductID] = @ProductId
					,[ProductRateTypeID] = @ProductRateTypeId
					,[ProductRateIntervalID] = @ProductRateIntervalId
					,[TaxableID] = @TaxableId
					,[CountryID] = @CountryId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec
					,[RatingTypeID] = @RatingTypeId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ProductRate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByCountryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByRatingTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RatingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[RatingTypeID] = @RatingTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByProductRateIntervalId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateIntervalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductRateIntervalID] = @ProductRateIntervalId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByProductRateTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductRateTypeID] = @ProductRateTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByTaxableId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByProductIdProductRateTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductID] = @ProductId
					AND [ProductRateTypeID] = @ProductRateTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRate_GetByNameProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[Name] = @Name
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateIntervalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MinimumTimeBeforeChargedSec" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RatingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [ProductRateTypeID]
	, [ProductRateIntervalID]
	, [TaxableID]
	, [CountryID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayOrder]
	, [MinimumTimeBeforeChargedSec]
	, [RatingTypeID]
    FROM
	[dbo].[ProductRate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ProductRateTypeID] = @ProductRateTypeId OR @ProductRateTypeId IS NULL)
	AND ([ProductRateIntervalID] = @ProductRateIntervalId OR @ProductRateIntervalId IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec OR @MinimumTimeBeforeChargedSec IS NULL)
	AND ([RatingTypeID] = @RatingTypeId OR @RatingTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [ProductRateTypeID]
	, [ProductRateIntervalID]
	, [TaxableID]
	, [CountryID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayOrder]
	, [MinimumTimeBeforeChargedSec]
	, [RatingTypeID]
    FROM
	[dbo].[ProductRate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ProductRateTypeID] = @ProductRateTypeId AND @ProductRateTypeId is not null)
	OR ([ProductRateIntervalID] = @ProductRateIntervalId AND @ProductRateIntervalId is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec AND @MinimumTimeBeforeChargedSec is not null)
	OR ([RatingTypeID] = @RatingTypeId AND @RatingTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProductRate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRate table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ProductID]
					, [ProductRateTypeID]
					, [ProductRateIntervalID]
					, [TaxableID]
					, [CountryID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [DisplayOrder]
					, [MinimumTimeBeforeChargedSec]
					, [RatingTypeID]
					FROM [dbo].[ProductRate] {0}
				)
				SELECT
				       [ID],
				       [ProductID],
				       [ProductRateTypeID],
				       [ProductRateIntervalID],
				       [TaxableID],
				       [CountryID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [DisplayOrder],
				       [MinimumTimeBeforeChargedSec],
				       [RatingTypeID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ProductRate] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pPrevInvoices_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PrevBal],
					[PrevPerStart],
					[PrevPerEnd]
				FROM
					[dbo].[PrevInvoices]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pPrevInvoices_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PrevInvoices table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PrevBal]'
				SET @SQL = @SQL + ', [PrevPerStart]'
				SET @SQL = @SQL + ', [PrevPerEnd]'
				SET @SQL = @SQL + ' FROM [dbo].[PrevInvoices]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PrevBal],'
				SET @SQL = @SQL + ' [PrevPerStart],'
				SET @SQL = @SQL + ' [PrevPerEnd]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[PrevInvoices]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pPrevInvoices_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PrevBal" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@PrevPerStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PrevPerEnd" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[PrevInvoices]
					(
					[WholesalerID]
					,[CustomerID]
					,[PrevBal]
					,[PrevPerStart]
					,[PrevPerEnd]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PrevBal
					,@PrevPerStart
					,@PrevPerEnd
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPrevInvoices_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PrevBal" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@PrevPerStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PrevPerEnd" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[PrevInvoices]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PrevBal] = @PrevBal
					,[PrevPerStart] = @PrevPerStart
					,[PrevPerEnd] = @PrevPerEnd
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPrevInvoices_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[PrevInvoices] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pPrevInvoices_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the PrevInvoices table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PrevBal],
					[PrevPerStart],
					[PrevPerEnd]
				FROM
					[dbo].[PrevInvoices]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pPrevInvoices_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the PrevInvoices table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PrevBal" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@PrevPerStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@PrevPerEnd" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PrevBal]
	, [PrevPerStart]
	, [PrevPerEnd]
    FROM
	[dbo].[PrevInvoices]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PrevBal] = @PrevBal OR @PrevBal IS NULL)
	AND ([PrevPerStart] = @PrevPerStart OR @PrevPerStart IS NULL)
	AND ([PrevPerEnd] = @PrevPerEnd OR @PrevPerEnd IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PrevBal]
	, [PrevPerStart]
	, [PrevPerEnd]
    FROM
	[dbo].[PrevInvoices]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PrevBal] = @PrevBal AND @PrevBal is not null)
	OR ([PrevPerStart] = @PrevPerStart AND @PrevPerStart is not null)
	OR ([PrevPerEnd] = @PrevPerEnd AND @PrevPerEnd is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pPrevInvoices_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PrevInvoices table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [PrevBal]
					, [PrevPerStart]
					, [PrevPerEnd]
					FROM [dbo].[PrevInvoices] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [PrevBal],
				       [PrevPerStart],
				       [PrevPerEnd]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[PrevInvoices] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pOmnoviaMP4Request_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[HostedID],
					[RequestedBy],
					[EstimatedTime],
					[ExtraInfo],
					[OmnoviaHostedURL],
					[RedbackHostedURL],
					[OmnoviaHostedURLExpiryDate],
					[created]
				FROM
					[dbo].[OmnoviaMP4Request]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pOmnoviaMP4Request_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaMP4Request table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [HostedID]'
				SET @SQL = @SQL + ', [RequestedBy]'
				SET @SQL = @SQL + ', [EstimatedTime]'
				SET @SQL = @SQL + ', [ExtraInfo]'
				SET @SQL = @SQL + ', [OmnoviaHostedURL]'
				SET @SQL = @SQL + ', [RedbackHostedURL]'
				SET @SQL = @SQL + ', [OmnoviaHostedURLExpiryDate]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaMP4Request]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [HostedID],'
				SET @SQL = @SQL + ' [RequestedBy],'
				SET @SQL = @SQL + ' [EstimatedTime],'
				SET @SQL = @SQL + ' [ExtraInfo],'
				SET @SQL = @SQL + ' [OmnoviaHostedURL],'
				SET @SQL = @SQL + ' [RedbackHostedURL],'
				SET @SQL = @SQL + ' [OmnoviaHostedURLExpiryDate],'
				SET @SQL = @SQL + ' [created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaMP4Request]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pOmnoviaMP4Request_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostedId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@EstimatedTime" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@OmnoviaHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@RedbackHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@OmnoviaHostedUrlExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[OmnoviaMP4Request]
					(
					[HostedID]
					,[RequestedBy]
					,[EstimatedTime]
					,[ExtraInfo]
					,[OmnoviaHostedURL]
					,[RedbackHostedURL]
					,[OmnoviaHostedURLExpiryDate]
					,[created]
					)
				VALUES
					(
					@HostedId
					,@RequestedBy
					,@EstimatedTime
					,@ExtraInfo
					,@OmnoviaHostedUrl
					,@RedbackHostedUrl
					,@OmnoviaHostedUrlExpiryDate
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaMP4Request_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@HostedId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@EstimatedTime" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@OmnoviaHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@RedbackHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@OmnoviaHostedUrlExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaMP4Request]
				SET
					[HostedID] = @HostedId
					,[RequestedBy] = @RequestedBy
					,[EstimatedTime] = @EstimatedTime
					,[ExtraInfo] = @ExtraInfo
					,[OmnoviaHostedURL] = @OmnoviaHostedUrl
					,[RedbackHostedURL] = @RedbackHostedUrl
					,[OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate
					,[created] = @Created
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaMP4Request_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[OmnoviaMP4Request] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pOmnoviaMP4Request_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaMP4Request table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[HostedID],
					[RequestedBy],
					[EstimatedTime],
					[ExtraInfo],
					[OmnoviaHostedURL],
					[RedbackHostedURL],
					[OmnoviaHostedURLExpiryDate],
					[created]
				FROM
					[dbo].[OmnoviaMP4Request]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pOmnoviaMP4Request_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaMP4Request table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostedId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@EstimatedTime" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@OmnoviaHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@RedbackHostedUrl" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@OmnoviaHostedUrlExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [HostedID]
	, [RequestedBy]
	, [EstimatedTime]
	, [ExtraInfo]
	, [OmnoviaHostedURL]
	, [RedbackHostedURL]
	, [OmnoviaHostedURLExpiryDate]
	, [created]
    FROM
	[dbo].[OmnoviaMP4Request]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([HostedID] = @HostedId OR @HostedId IS NULL)
	AND ([RequestedBy] = @RequestedBy OR @RequestedBy IS NULL)
	AND ([EstimatedTime] = @EstimatedTime OR @EstimatedTime IS NULL)
	AND ([ExtraInfo] = @ExtraInfo OR @ExtraInfo IS NULL)
	AND ([OmnoviaHostedURL] = @OmnoviaHostedUrl OR @OmnoviaHostedUrl IS NULL)
	AND ([RedbackHostedURL] = @RedbackHostedUrl OR @RedbackHostedUrl IS NULL)
	AND ([OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate OR @OmnoviaHostedUrlExpiryDate IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [HostedID]
	, [RequestedBy]
	, [EstimatedTime]
	, [ExtraInfo]
	, [OmnoviaHostedURL]
	, [RedbackHostedURL]
	, [OmnoviaHostedURLExpiryDate]
	, [created]
    FROM
	[dbo].[OmnoviaMP4Request]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([HostedID] = @HostedId AND @HostedId is not null)
	OR ([RequestedBy] = @RequestedBy AND @RequestedBy is not null)
	OR ([EstimatedTime] = @EstimatedTime AND @EstimatedTime is not null)
	OR ([ExtraInfo] = @ExtraInfo AND @ExtraInfo is not null)
	OR ([OmnoviaHostedURL] = @OmnoviaHostedUrl AND @OmnoviaHostedUrl is not null)
	OR ([RedbackHostedURL] = @RedbackHostedUrl AND @RedbackHostedUrl is not null)
	OR ([OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate AND @OmnoviaHostedUrlExpiryDate is not null)
	OR ([created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pOmnoviaMP4Request_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaMP4Request table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [HostedID]
					, [RequestedBy]
					, [EstimatedTime]
					, [ExtraInfo]
					, [OmnoviaHostedURL]
					, [RedbackHostedURL]
					, [OmnoviaHostedURLExpiryDate]
					, [created]
					FROM [dbo].[OmnoviaMP4Request] {0}
				)
				SELECT
				       [id],
				       [HostedID],
				       [RequestedBy],
				       [EstimatedTime],
				       [ExtraInfo],
				       [OmnoviaHostedURL],
				       [RedbackHostedURL],
				       [OmnoviaHostedURLExpiryDate],
				       [created]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[OmnoviaMP4Request] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemExtensionLabel_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemExtensionLabel_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtensionLabel table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtensionLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtensionLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pSystemExtensionLabel_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExtensionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExtensionTypeLabel" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CustomerCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[SystemExtensionLabel]
					(
					[CustomerID]
					,[ExtensionTypeID]
					,[ExtensionTypeLabel]
					,[CustomerCanView]
					,[ModeratorCanView]
					,[CustomerCanEdit]
					,[ModeratorCanEdit]
					)
				VALUES
					(
					@CustomerId
					,@ExtensionTypeId
					,@ExtensionTypeLabel
					,@CustomerCanView
					,@ModeratorCanView
					,@CustomerCanEdit
					,@ModeratorCanEdit
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExtensionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExtensionTypeLabel" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CustomerCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemExtensionLabel]
				SET
					[CustomerID] = @CustomerId
					,[ExtensionTypeID] = @ExtensionTypeId
					,[ExtensionTypeLabel] = @ExtensionTypeLabel
					,[CustomerCanView] = @CustomerCanView
					,[ModeratorCanView] = @ModeratorCanView
					,[CustomerCanEdit] = @CustomerCanEdit
					,[ModeratorCanEdit] = @ModeratorCanEdit
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[SystemExtensionLabel] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_GetByExtensionTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ExtensionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[ExtensionTypeID] = @ExtensionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_GetByCustomerIdCustomerCanView" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
					AND [CustomerCanView] = @CustomerCanView
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_GetByCustomerIdModeratorCanView" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
					AND [ModeratorCanView] = @ModeratorCanView
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemExtensionLabel_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemExtensionLabel table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExtensionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExtensionTypeLabel" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CustomerCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorCanView" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorCanEdit" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [ExtensionTypeID]
	, [ExtensionTypeLabel]
	, [CustomerCanView]
	, [ModeratorCanView]
	, [CustomerCanEdit]
	, [ModeratorCanEdit]
    FROM
	[dbo].[SystemExtensionLabel]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ExtensionTypeID] = @ExtensionTypeId OR @ExtensionTypeId IS NULL)
	AND ([ExtensionTypeLabel] = @ExtensionTypeLabel OR @ExtensionTypeLabel IS NULL)
	AND ([CustomerCanView] = @CustomerCanView OR @CustomerCanView IS NULL)
	AND ([ModeratorCanView] = @ModeratorCanView OR @ModeratorCanView IS NULL)
	AND ([CustomerCanEdit] = @CustomerCanEdit OR @CustomerCanEdit IS NULL)
	AND ([ModeratorCanEdit] = @ModeratorCanEdit OR @ModeratorCanEdit IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [ExtensionTypeID]
	, [ExtensionTypeLabel]
	, [CustomerCanView]
	, [ModeratorCanView]
	, [CustomerCanEdit]
	, [ModeratorCanEdit]
    FROM
	[dbo].[SystemExtensionLabel]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ExtensionTypeID] = @ExtensionTypeId AND @ExtensionTypeId is not null)
	OR ([ExtensionTypeLabel] = @ExtensionTypeLabel AND @ExtensionTypeLabel is not null)
	OR ([CustomerCanView] = @CustomerCanView AND @CustomerCanView is not null)
	OR ([ModeratorCanView] = @ModeratorCanView AND @ModeratorCanView is not null)
	OR ([CustomerCanEdit] = @CustomerCanEdit AND @CustomerCanEdit is not null)
	OR ([ModeratorCanEdit] = @ModeratorCanEdit AND @ModeratorCanEdit is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pSystemExtensionLabel_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtensionLabel table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [CustomerID]
					, [ExtensionTypeID]
					, [ExtensionTypeLabel]
					, [CustomerCanView]
					, [ModeratorCanView]
					, [CustomerCanEdit]
					, [ModeratorCanEdit]
					FROM [dbo].[SystemExtensionLabel] {0}
				)
				SELECT
				       [id],
				       [CustomerID],
				       [ExtensionTypeID],
				       [ExtensionTypeLabel],
				       [CustomerCanView],
				       [ModeratorCanView],
				       [CustomerCanEdit],
				       [ModeratorCanEdit]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SystemExtensionLabel] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pVertical_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Vertical table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pVertical_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Vertical table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Vertical]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Vertical]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pVertical_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Vertical table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Vertical]
					(
					[WholesalerID]
					,[Description]
					)
				VALUES
					(
					@WholesalerId
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pVertical_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Vertical table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Vertical]
				SET
					[WholesalerID] = @WholesalerId
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pVertical_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Vertical table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Vertical] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pVertical_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pVertical_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pVertical_GetByDescription" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[Description] = @Description
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pVertical_GetByWholesalerIdDescription" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [Description] = @Description
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pVertical_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Vertical table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Vertical]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Vertical]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pVertical_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Vertical table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [Description]
					FROM [dbo].[Vertical] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Vertical] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemSettings_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemSettings table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Name],
					[Value]
				FROM
					[dbo].[SystemSettings]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSystemSettings_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemSettings table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Name]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemSettings]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemSettings]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pSystemSettings_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemSettings table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[SystemSettings]
					(
					[Name]
					,[Value]
					)
				VALUES
					(
					@Name
					,@Value
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemSettings_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemSettings table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemSettings]
				SET
					[Name] = @Name
					,[Value] = @Value
				WHERE
[Name] = @OriginalName 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemSettings_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemSettings table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[SystemSettings] WITH (ROWLOCK) 
				WHERE
					[Name] = @Name
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSystemSettings_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemSettings table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Name],
					[Value]
				FROM
					[dbo].[SystemSettings]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSystemSettings_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemSettings table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Name]
	, [Value]
    FROM
	[dbo].[SystemSettings]
    WHERE 
	 ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Name]
	, [Value]
    FROM
	[dbo].[SystemSettings]
    WHERE 
	 ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pSystemSettings_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemSettings table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [Name]
					, [Value]
					FROM [dbo].[SystemSettings] {0}
				)
				SELECT
				       [Name],
				       [Value]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SystemSettings] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketProduct_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketProduct]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketProduct_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketProduct_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketProduct]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketProduct_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketProduct]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketProduct_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketProduct_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketProduct_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketProduct_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketProduct table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayOrder]
					, [Deleted]
					FROM [dbo].[TicketProduct] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayOrder],
				       [Deleted]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketProduct] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketStatus_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Abbreviation],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketStatus]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketStatus_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatus table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Abbreviation]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Abbreviation],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketStatus_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Abbreviation" type="varchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketStatus]
					(
					[ID]
					,[Abbreviation]
					,[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@Abbreviation
					,@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Abbreviation" type="varchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketStatus]
				SET
					[ID] = @Id
					,[Abbreviation] = @Abbreviation
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketStatus] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatus table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Abbreviation],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketStatus]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_GetByToStatusIdFromValidTicketStateChanges" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[TicketStatus].[ID]
       ,dbo.[TicketStatus].[Abbreviation]
       ,dbo.[TicketStatus].[Name]
       ,dbo.[TicketStatus].[Description]
       ,dbo.[TicketStatus].[DisplayOrder]
       ,dbo.[TicketStatus].[Deleted]
  FROM dbo.[TicketStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ValidTicketStateChanges] 
                WHERE dbo.[ValidTicketStateChanges].[ToStatusID] = @ToStatusId
                  AND dbo.[ValidTicketStateChanges].[FromStatusID] = dbo.[TicketStatus].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_GetByFromStatusIdFromValidTicketStateChanges" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[TicketStatus].[ID]
       ,dbo.[TicketStatus].[Abbreviation]
       ,dbo.[TicketStatus].[Name]
       ,dbo.[TicketStatus].[Description]
       ,dbo.[TicketStatus].[DisplayOrder]
       ,dbo.[TicketStatus].[Deleted]
  FROM dbo.[TicketStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ValidTicketStateChanges] 
                WHERE dbo.[ValidTicketStateChanges].[FromStatusID] = @FromStatusId
                  AND dbo.[ValidTicketStateChanges].[ToStatusID] = dbo.[TicketStatus].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatus_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketStatus table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Abbreviation" type="varchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Abbreviation]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketStatus]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Abbreviation] = @Abbreviation OR @Abbreviation IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Abbreviation]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketStatus]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Abbreviation] = @Abbreviation AND @Abbreviation is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketStatus_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatus table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Abbreviation]
					, [Name]
					, [Description]
					, [DisplayOrder]
					, [Deleted]
					FROM [dbo].[TicketStatus] {0}
				)
				SELECT
				       [ID],
				       [Abbreviation],
				       [Name],
				       [Description],
				       [DisplayOrder],
				       [Deleted]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketStatus] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketPriority_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketPriority table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketPriority]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketPriority_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketPriority table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketPriority]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketPriority]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketPriority_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketPriority table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketPriority]
					(
					[ID]
					,[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketPriority_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketPriority table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketPriority]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketPriority_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketPriority table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketPriority] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketPriority_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketPriority table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketPriority]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketPriority_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketPriority table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketPriority]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketPriority]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketPriority_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketPriority table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayOrder]
					, [Deleted]
					FROM [dbo].[TicketPriority] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayOrder],
				       [Deleted]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketPriority] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUser_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUser_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [UserUniqueID]'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [UserUniqueID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pUser_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Telephone" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MustChangePassword" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Address1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Address2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Country" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Region" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CharityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebMemberId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UserUniqueId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[User]
					(
					[Username]
					,[Password]
					,[DisplayName]
					,[Email]
					,[Telephone]
					,[Enabled]
					,[CompanyID]
					,[SalesPersonID]
					,[RoleID]
					,[MustChangePassword]
					,[Address1]
					,[Address2]
					,[City]
					,[Country]
					,[Region]
					,[PostalCode]
					,[CharityID]
					,[WebMemberID]
					,[UserUniqueID]
					)
				VALUES
					(
					@Username
					,@Password
					,@DisplayName
					,@Email
					,@Telephone
					,@Enabled
					,@CompanyId
					,@SalesPersonId
					,@RoleId
					,@MustChangePassword
					,@Address1
					,@Address2
					,@City
					,@Country
					,@Region
					,@PostalCode
					,@CharityId
					,@WebMemberId
					,@UserUniqueId
					)
				
				-- Get the identity value
				SET @UserId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Telephone" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MustChangePassword" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Address1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Address2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Country" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Region" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CharityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebMemberId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UserUniqueId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[User]
				SET
					[Username] = @Username
					,[Password] = @Password
					,[DisplayName] = @DisplayName
					,[Email] = @Email
					,[Telephone] = @Telephone
					,[Enabled] = @Enabled
					,[CompanyID] = @CompanyId
					,[SalesPersonID] = @SalesPersonId
					,[RoleID] = @RoleId
					,[MustChangePassword] = @MustChangePassword
					,[Address1] = @Address1
					,[Address2] = @Address2
					,[City] = @City
					,[Country] = @Country
					,[Region] = @Region
					,[PostalCode] = @PostalCode
					,[CharityID] = @CharityId
					,[WebMemberID] = @WebMemberId
					,[UserUniqueID] = @UserUniqueId
				WHERE
[UserID] = @UserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[User] WITH (ROWLOCK) 
				WHERE
					[UserID] = @UserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByCharityId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CharityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[CharityID] = @CharityId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByCountry" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Country" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Country] = @Country
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[RoleID] = @RoleId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByRegion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Region" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Region] = @Region
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByCompanyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[CompanyID] = @CompanyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pUser_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Username] = @Username
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pUser_GetByMarketingServiceIdFromUser_MarketingService" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[User].[UserID]
       ,dbo.[User].[Username]
       ,dbo.[User].[Password]
       ,dbo.[User].[DisplayName]
       ,dbo.[User].[Email]
       ,dbo.[User].[Telephone]
       ,dbo.[User].[Enabled]
       ,dbo.[User].[CompanyID]
       ,dbo.[User].[SalesPersonID]
       ,dbo.[User].[RoleID]
       ,dbo.[User].[MustChangePassword]
       ,dbo.[User].[Address1]
       ,dbo.[User].[Address2]
       ,dbo.[User].[City]
       ,dbo.[User].[Country]
       ,dbo.[User].[Region]
       ,dbo.[User].[PostalCode]
       ,dbo.[User].[CharityID]
       ,dbo.[User].[WebMemberID]
       ,dbo.[User].[UserUniqueID]
  FROM dbo.[User]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[User_MarketingService] 
                WHERE dbo.[User_MarketingService].[MarketingServiceID] = @MarketingServiceId
                  AND dbo.[User_MarketingService].[UserID] = dbo.[User].[UserID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the User table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Username" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Telephone" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MustChangePassword" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Address1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Address2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Country" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Region" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@PostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@CharityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WebMemberId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@UserUniqueId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [Username]
	, [Password]
	, [DisplayName]
	, [Email]
	, [Telephone]
	, [Enabled]
	, [CompanyID]
	, [SalesPersonID]
	, [RoleID]
	, [MustChangePassword]
	, [Address1]
	, [Address2]
	, [City]
	, [Country]
	, [Region]
	, [PostalCode]
	, [CharityID]
	, [WebMemberID]
	, [UserUniqueID]
    FROM
	[dbo].[User]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([Telephone] = @Telephone OR @Telephone IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([RoleID] = @RoleId OR @RoleId IS NULL)
	AND ([MustChangePassword] = @MustChangePassword OR @MustChangePassword IS NULL)
	AND ([Address1] = @Address1 OR @Address1 IS NULL)
	AND ([Address2] = @Address2 OR @Address2 IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([Region] = @Region OR @Region IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([CharityID] = @CharityId OR @CharityId IS NULL)
	AND ([WebMemberID] = @WebMemberId OR @WebMemberId IS NULL)
	AND ([UserUniqueID] = @UserUniqueId OR @UserUniqueId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [Username]
	, [Password]
	, [DisplayName]
	, [Email]
	, [Telephone]
	, [Enabled]
	, [CompanyID]
	, [SalesPersonID]
	, [RoleID]
	, [MustChangePassword]
	, [Address1]
	, [Address2]
	, [City]
	, [Country]
	, [Region]
	, [PostalCode]
	, [CharityID]
	, [WebMemberID]
	, [UserUniqueID]
    FROM
	[dbo].[User]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([Telephone] = @Telephone AND @Telephone is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([RoleID] = @RoleId AND @RoleId is not null)
	OR ([MustChangePassword] = @MustChangePassword AND @MustChangePassword is not null)
	OR ([Address1] = @Address1 AND @Address1 is not null)
	OR ([Address2] = @Address2 AND @Address2 is not null)
	OR ([City] = @City AND @City is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([Region] = @Region AND @Region is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([CharityID] = @CharityId AND @CharityId is not null)
	OR ([WebMemberID] = @WebMemberId AND @WebMemberId is not null)
	OR ([UserUniqueID] = @UserUniqueId AND @UserUniqueId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pUser_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UserID]
					, [Username]
					, [Password]
					, [DisplayName]
					, [Email]
					, [Telephone]
					, [Enabled]
					, [CompanyID]
					, [SalesPersonID]
					, [RoleID]
					, [MustChangePassword]
					, [Address1]
					, [Address2]
					, [City]
					, [Country]
					, [Region]
					, [PostalCode]
					, [CharityID]
					, [WebMemberID]
					, [UserUniqueID]
					FROM [dbo].[User] {0}
				)
				SELECT
				       [UserID],
				       [Username],
				       [Password],
				       [DisplayName],
				       [Email],
				       [Telephone],
				       [Enabled],
				       [CompanyID],
				       [SalesPersonID],
				       [RoleID],
				       [MustChangePassword],
				       [Address1],
				       [Address2],
				       [City],
				       [Country],
				       [Region],
				       [PostalCode],
				       [CharityID],
				       [WebMemberID],
				       [UserUniqueID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[User] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_User_GetAllModeratorsByCustomerID"  skip="true">
			<comment><![CDATA[/**************************
Purpose: Returns User info that are Moderators (Moderator role) 
based on the CustomerID.

Examples:
    EXEC p_User_GetAllModeratorsByCustomerID 8
***************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
                -- SET NOCOUNT ON added to prevent extra result sets from
                -- interfering with SELECT statements.
                SET NOCOUNT ON;

                SELECT   DISTINCT  dbo.[User].*
                FROM         dbo.Moderator INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.Role ON dbo.[User].RoleID = dbo.Role.ID
                WHERE
                                dbo.[User].Enabled = 1 AND
                                dbo.[Role].[Name] = 'Moderator' AND
                                dbo.[Moderator].[CustomerID] = @CustomerID
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_User_CheckUserName"  skip="true">
			<comment><![CDATA[
/* =============================================
	Checks and enforces the rules of uniqueiness on the User logins. All UserNames must be unique.

RETURN:
	@UserNameOK = True - the username is unique, False - its not.

Example:
	Select * from [User]
	Declare @UserNameOK bit
	EXEC p_User_CheckUserName 'asdf',null, @UserNameOK OUTPUT
	PRINT @UserNameOK
	EXEC p_User_CheckUserName 'NewModerator8',null, @UserNameOK OUTPUT -- One that exists, no userid, false return
	PRINT @UserNameOK
	EXEC p_User_CheckUserName 'NewModerator8',5, @UserNameOK OUTPUT -- One that exists, w/userid, true returned
	PRINT @UserNameOK
*/
]]></comment>
			<parameters>
				<parameter name="@UserName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserNameOK" type="bit" direction="InputOutput" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	DECLARE @TempUserID int
	SET @TempUserID = -1
	SELECT @TempUserID=UserID FROM [USER] WHERE UserName = @UserName
	--PRINT @TempUserID

	--User against passed in UserID, if they match then ok as its the same user
	IF @UserID IS NOT NULL
	BEGIN
		IF @TempUserID = @UserID
			SET @UserNameOK = 1 -- OKAY
			GOTO SP_END
	END	

	IF @TempUserID >= 1-- UserName exist return false
		SET @UserNameOK = 0
	ELSE
		SET @UserNameOK = 1 -- OKAY
SP_END: --Jump out of here

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pValidTicketStateChanges_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pValidTicketStateChanges_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ValidTicketStateChanges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[FromStatusID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [FromStatusID]'
				SET @SQL = @SQL + ', [ToStatusID]'
				SET @SQL = @SQL + ', [Reason]'
				SET @SQL = @SQL + ' FROM [dbo].[ValidTicketStateChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [FromStatusID],'
				SET @SQL = @SQL + ' [ToStatusID],'
				SET @SQL = @SQL + ' [Reason]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ValidTicketStateChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pValidTicketStateChanges_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Reason" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ValidTicketStateChanges]
					(
					[FromStatusID]
					,[ToStatusID]
					,[Reason]
					)
				VALUES
					(
					@FromStatusId
					,@ToStatusId
					,@Reason
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalFromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Reason" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ValidTicketStateChanges]
				SET
					[FromStatusID] = @FromStatusId
					,[ToStatusID] = @ToStatusId
					,[Reason] = @Reason
				WHERE
[FromStatusID] = @OriginalFromStatusId 
AND [ToStatusID] = @OriginalToStatusId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ValidTicketStateChanges] WITH (ROWLOCK) 
				WHERE
					[FromStatusID] = @FromStatusId
					AND [ToStatusID] = @ToStatusId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_GetByFromStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[FromStatusID] = @FromStatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_GetByToStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[ToStatusID] = @ToStatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_GetByFromStatusIdToStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[FromStatusID] = @FromStatusId
					AND [ToStatusID] = @ToStatusId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pValidTicketStateChanges_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ValidTicketStateChanges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FromStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ToStatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Reason" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [FromStatusID]
	, [ToStatusID]
	, [Reason]
    FROM
	[dbo].[ValidTicketStateChanges]
    WHERE 
	 ([FromStatusID] = @FromStatusId OR @FromStatusId IS NULL)
	AND ([ToStatusID] = @ToStatusId OR @ToStatusId IS NULL)
	AND ([Reason] = @Reason OR @Reason IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [FromStatusID]
	, [ToStatusID]
	, [Reason]
    FROM
	[dbo].[ValidTicketStateChanges]
    WHERE 
	 ([FromStatusID] = @FromStatusId AND @FromStatusId is not null)
	OR ([ToStatusID] = @ToStatusId AND @ToStatusId is not null)
	OR ([Reason] = @Reason AND @Reason is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pValidTicketStateChanges_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ValidTicketStateChanges table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [FromStatusID]
					, [ToStatusID]
					, [Reason]
					FROM [dbo].[ValidTicketStateChanges] {0}
				)
				SELECT
				       [FromStatusID],
				       [ToStatusID],
				       [Reason]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ValidTicketStateChanges] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUser_MarketingService_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUser_MarketingService_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User_MarketingService table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [MarketingServiceID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [LastModifiedBy]'
				SET @SQL = @SQL + ', [LastContactDate]'
				SET @SQL = @SQL + ', [NextContactDate]'
				SET @SQL = @SQL + ' FROM [dbo].[User_MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [MarketingServiceID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [LastModifiedBy],'
				SET @SQL = @SQL + ' [LastContactDate],'
				SET @SQL = @SQL + ' [NextContactDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[User_MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pUser_MarketingService_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@NextContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[User_MarketingService]
					(
					[UserID]
					,[MarketingServiceID]
					,[CreatedDate]
					,[LastModified]
					,[LastModifiedBy]
					,[LastContactDate]
					,[NextContactDate]
					)
				VALUES
					(
					@UserId
					,@MarketingServiceId
					,@CreatedDate
					,@LastModified
					,@LastModifiedBy
					,@LastContactDate
					,@NextContactDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalMarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@NextContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[User_MarketingService]
				SET
					[UserID] = @UserId
					,[MarketingServiceID] = @MarketingServiceId
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[LastModifiedBy] = @LastModifiedBy
					,[LastContactDate] = @LastContactDate
					,[NextContactDate] = @NextContactDate
				WHERE
[MarketingServiceID] = @OriginalMarketingServiceId 
AND [UserID] = @OriginalUserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[User_MarketingService] WITH (ROWLOCK) 
				WHERE
					[MarketingServiceID] = @MarketingServiceId
					AND [UserID] = @UserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[UserID] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_GetByMarketingServiceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[MarketingServiceID] = @MarketingServiceId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_GetByMarketingServiceIdUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[MarketingServiceID] = @MarketingServiceId
					AND [UserID] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pUser_MarketingService_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the User_MarketingService table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MarketingServiceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@LastContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@NextContactDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [MarketingServiceID]
	, [CreatedDate]
	, [LastModified]
	, [LastModifiedBy]
	, [LastContactDate]
	, [NextContactDate]
    FROM
	[dbo].[User_MarketingService]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([MarketingServiceID] = @MarketingServiceId OR @MarketingServiceId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([LastModifiedBy] = @LastModifiedBy OR @LastModifiedBy IS NULL)
	AND ([LastContactDate] = @LastContactDate OR @LastContactDate IS NULL)
	AND ([NextContactDate] = @NextContactDate OR @NextContactDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [MarketingServiceID]
	, [CreatedDate]
	, [LastModified]
	, [LastModifiedBy]
	, [LastContactDate]
	, [NextContactDate]
    FROM
	[dbo].[User_MarketingService]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([MarketingServiceID] = @MarketingServiceId AND @MarketingServiceId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([LastModifiedBy] = @LastModifiedBy AND @LastModifiedBy is not null)
	OR ([LastContactDate] = @LastContactDate AND @LastContactDate is not null)
	OR ([NextContactDate] = @NextContactDate AND @NextContactDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pUser_MarketingService_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User_MarketingService table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UserID]
					, [MarketingServiceID]
					, [CreatedDate]
					, [LastModified]
					, [LastModifiedBy]
					, [LastContactDate]
					, [NextContactDate]
					FROM [dbo].[User_MarketingService] {0}
				)
				SELECT
				       [UserID],
				       [MarketingServiceID],
				       [CreatedDate],
				       [LastModified],
				       [LastModifiedBy],
				       [LastContactDate],
				       [NextContactDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[User_MarketingService] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_Feature_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_Feature_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pModerator_Feature_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Moderator_Feature]
					(
					[ModeratorID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@ModeratorId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator_Feature]
				SET
					[ModeratorID] = @ModeratorId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Moderator_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetByFeatureIdModeratorIdFeatureOptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [ModeratorID] = @ModeratorId
					AND [FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetByFeatureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetByFeatureIdModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_GetByFeatureOptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_Feature_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Moderator_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Moderator_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pModerator_Feature_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_Feature table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ModeratorID]
					, [FeatureID]
					, [FeatureOptionID]
					, [Enabled]
					, [FeatureOptionValue]
					FROM [dbo].[Moderator_Feature] {0}
				)
				SELECT
				       [ID],
				       [ModeratorID],
				       [FeatureID],
				       [FeatureOptionID],
				       [Enabled],
				       [FeatureOptionValue]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Moderator_Feature] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUTIL_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the UTIL table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID]
				FROM
					[dbo].[UTIL]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pUTIL_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UTIL table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ' FROM [dbo].[UTIL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[UTIL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pUTIL_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the UTIL table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[UTIL]
					(
					[ID]
					)
				VALUES
					(
					@Id
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUTIL_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the UTIL table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[UTIL]
				SET
					[ID] = @Id
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUTIL_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the UTIL table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[UTIL] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pUTIL_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UTIL table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID]
				FROM
					[dbo].[UTIL]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pUTIL_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the UTIL table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
    FROM
	[dbo].[UTIL]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
    FROM
	[dbo].[UTIL]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pUTIL_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UTIL table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					FROM [dbo].[UTIL] {0}
				)
				SELECT
				       [ID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[UTIL] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_UTIL_BulkEditProductFeatures"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: To update the Product Features for items selected by the Bulk Edits screen. 
Parameters:
- @FeatureID - The ID of the Feature in the Feature table.
- @FeatureOptionID - The FeatureOptions ID in the FeatureOptions table.
- @BulkEditType - 1 = All Customers and Moderators, 2 = Wholesaler Only, 3 = Wholesaler and All Customers
- @CustomerID - Effect all BulkEditTypes where they match this CustomerID
- @CompanyID - CompanyID entered, Effect all BulkEditTypes where they match this Company ID
- @SalesPersonID - SalesPersonID entered, Effect all BulkEditTypes where they match this SalesPersonID
- @WholesalerID - Used to limit the affected records to the current Wholesaler

Examples:
Select * from Feature where ID IN (24,25)
Select * from FeatureOption where FeatureID IN (24,25)

	EXEC p_UTIL_BulkEditProductFeatures 24,198,3,null,null,null,'0000000001'
	EXEC p_UTIL_BulkEditProductFeatures 25,203,3,null,null,null,'0000000001'

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@FeatureID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BulkEditType" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN TRANSACTION
IF (@CompanyID is NOT null) OR (@SalesPersonID is NOT null)
BEGIN
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer and Moderator
    BEGIN
		--Updates all Customer Features
		UPDATE    Customer_Feature
		SET              FeatureOptionID = @FeatureOptionID
		FROM         Customer_Feature (NOLOCK) INNER JOIN
		                      Customer (NOLOCK) ON Customer_Feature.CustomerID = Customer.ID
		WHERE     (Customer_Feature.FeatureID = @FeatureID) AND (Customer.WholesalerID = @WholesalerID) AND (@CompanyID IS NULL OR
		                      Customer.CompanyID = @CompanyID) AND (@SalesPersonID IS NULL OR Customer.SalesPersonID = @SalesPersonID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

		--Updates all Moderator Features
		UPDATE    Moderator_Feature
		SET              FeatureOptionID = @FeatureOptionID
		FROM         Moderator_Feature (NOLOCK) INNER JOIN
		                      Moderator (NOLOCK) ON Moderator_Feature.ModeratorID = Moderator.ID INNER JOIN
		                      Customer (NOLOCK) ON Moderator.CustomerID = Customer.ID
		WHERE     (Moderator_Feature.FeatureID = @FeatureID) AND (Customer.WholesalerID = @WholesalerID) AND (@CompanyID IS NULL OR
		                      Customer.CompanyID = @CompanyID) AND (@SalesPersonID IS NULL OR
		                      Customer.SalesPersonID = @SalesPersonID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
END
-- ************** CustomerID Passed in *****************

IF (@CustomerID is NOT null)
BEGIN
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer and Moderator
    BEGIN
		--Updates all Customer Features
		UPDATE    Customer_Feature
		SET              FeatureOptionID = @FeatureOptionID
		FROM         Customer_Feature (NOLOCK) INNER JOIN
		                      Customer (NOLOCK) ON Customer_Feature.CustomerID = Customer.ID
		WHERE     (Customer_Feature.FeatureID = @FeatureID) AND (Customer.WholesalerID = @WholesalerID) AND (Customer.ID = @CustomerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

		--Updates all Moderator Features
		UPDATE    Moderator_Feature
		SET       FeatureOptionID = @FeatureOptionID
		FROM         Moderator_Feature (NOLOCK) INNER JOIN
		                      Moderator (NOLOCK) ON Moderator_Feature.ModeratorID = Moderator.ID
		WHERE     (Moderator_Feature.FeatureID = @FeatureID) AND (Moderator.WholesalerID = @WholesalerID) AND (Moderator.CustomerID = @CustomerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END

END

--WHOLESALER UPDATES
IF (@BulkEditType = 2 OR @BulkEditType = 3)
BEGIN
		UPDATE    Wholesaler_Product_Feature
		SET       FeatureOptionID = @FeatureOptionID
		FROM         Wholesaler_Product_Feature (NOLOCK) INNER JOIN
			Wholesaler_Product (NOLOCK) ON Wholesaler_Product_Feature.Wholesaler_ProductID = Wholesaler_Product.ID
		WHERE     (Wholesaler_Product_Feature.FeatureID = @FeatureID) AND (Wholesaler_Product.WholesalerID = @WholesalerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
END

-- Update Customer associated with Wholesaler
IF (@BulkEditType = 3)
BEGIN
		--Updates all Customer Features
		UPDATE    Customer_Feature
		SET        FeatureOptionID = @FeatureOptionID
		FROM         Customer_Feature (NOLOCK) INNER JOIN
		                      Customer (NOLOCK) ON Customer_Feature.CustomerID = Customer.ID
		WHERE     (Customer_Feature.FeatureID = @FeatureID) AND (Customer.WholesalerID = @WholesalerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

		--Updates all Moderator Features
		UPDATE    Moderator_Feature
		SET       FeatureOptionID = @FeatureOptionID
		FROM         Moderator_Feature (NOLOCK) INNER JOIN
		                      Moderator (NOLOCK) ON Moderator_Feature.ModeratorID = Moderator.ID 
		WHERE     (Moderator_Feature.FeatureID = @FeatureID) AND (Moderator.WholesalerID = @WholesalerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

END


GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_Accounting_ExportPaymentReversals"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns Quickbooks Payment Reversals in IIF format
NOTEs: 
	DOCNUM = InvoiceNumber
	MEMO = Customer PriNumber + Desciption

-- SAMPLE Format
!TRNS	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	CLASS
!SPL	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	CLASS
!ENDTRNS								
TRNS	GENERAL JOURNAL	01/14/2010	Accounts Receivable	Hadrians Wall Company	500	1	Hadrians Wall Company	Brisbane
SPL	GENERAL JOURNAL		ABC Bank	Hadrians Wall Company	-500	1	Hadrians Wall Company	Brisbane
ENDTRNS		

EXAMPLES:
	EXEC [p_UTIL_Accounting_ExportPaymentReversals] '0000000001','dec 1 2009'

****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @ARAcctName varchar(50),@BankAcctName varchar(50)
,@TransTypeName varchar(50)
--Variables for Cursor
, @CustomerID int, @TransDate varchar(50), @TransactionAmount Decimal(9,2)
, @CompanyName varchar(100),@InvoiceNumber varchar(50),@Memo varchar(100)
, @CustomerTransactionID int

SET @ARAcctName = 'Accounts Receivable'
SET @BankAcctName = 'Bank Account:ANZ Cheque Account - 6115'
SET @TransTypeName = 'GENERAL JOURNAL'

--Table matches the IIF standard for Payments for Columns in row #1 but has the same number of colums for both rows
-- This is critical as the logic builds the individual rows one at a time so needs the same number of columns.
-- In other words, the Temp Table column names could be anything but just used the name from the first column
--DROP TABLE #TempPMTRevExport
	CREATE TABLE #TempPMTRevExport (
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[TRNS] varchar(50),
		[TRNSID] varchar(50),
		[TRNSTYPE] varchar(50),
		[DATE] varchar(50), --Transaction Date
		[ACCNT] varchar(50), --QB Account Name
		[NAME] varchar(200), --Company Name, can only be 41 chars
		[AMOUNT] varchar(50), --Full Trans. Amt
		DOCNUM varchar(50), --Invoice Number
		MEMO varchar(100), --Just text fill of item
		CLASS varchar(50), -- Y or N if the customer is taxable or not
	) ON [PRIMARY]

--1st row
	INSERT INTO #TempPMTRevExport
	SELECT '!TRNS','TRNSID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','CLASS'
--2nd row
	INSERT INTO #TempPMTRevExport
	SELECT '!SPL','SPLID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','CLASS'
--3nd row
	INSERT INTO #TempPMTRevExport
	SELECT '!ENDTRNS','','','','','','','','',''

/* Debugging:
Select * from customertransaction where PostedToInvoiceDate = 'dec 1 2009' and customertransactiontypeid = 5
select * from customertransactiontype

 SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS [Date]
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = '0000000001' 
	AND T1.PostedToInvoiceDate = 'Dec 1 2009' AND INV.StartDate = 'dec 1 2009'
	--PAYMENT REVERSALS ONLY
	AND T1.CustomerTransactionTypeID = 5
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber
*/

/*
This SQL is used to setup the main items that will be looped over. In this case, each
payment for a customer is iterated over and used to create a QB payment item, this way
each payment can be tracked.	
*/
DECLARE temp_cursor CURSOR FAST_FORWARD
FOR SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS [Date]
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
--	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = @WholesalerID
	AND T1.PostedToInvoiceDate = @InvoiceDate AND INV.StartDate = @InvoiceDate
	--PAYMENT REVERSALS ONLY
	AND T1.CustomerTransactionTypeID = 5
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber
OPEN temp_cursor

FETCH NEXT FROM temp_cursor 
INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo
	WHILE @@FETCH_STATUS = 0
	BEGIN
	-- Generate the different types of rows, Leave TRNSID, and SPLID blank
	--1st  row
	INSERT INTO #TempPMTRevExport		
	SELECT 'TRNS','',@TransTypeName,@TransDate,@ARAcctName,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,''

	--2nd row
	INSERT INTO #TempPMTRevExport
	SELECT 'SPL','',@TransTypeName,@TransDate,@BankAcctName,@CompanyName,(@TransactionAmount * -1),@InvoiceNumber,@Memo,''

	--END Row
	INSERT INTO #TempPMTRevExport
	SELECT 'ENDTRNS','','','','','','','','',''

	FETCH NEXT FROM temp_cursor 
	INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo
	END
CLOSE temp_cursor
DEALLOCATE temp_cursor

-- Clean up the data a bit
	UPDATE #TempPMTRevExport SET TRNSID = ID --REMOVED, [TIMESTAMP] = ID
	FROM #TempPMTRevExport WHERE TRNS = 'TRNS'

	UPDATE #TempPMTRevExport SET TRNSID = ID
	FROM #TempPMTRevExport WHERE TRNS = 'SPL'

SELECT [TRNS],[TRNSID],[TRNSTYPE] ,[DATE] ,[ACCNT] ,[NAME] ,[AMOUNT],DOCNUM, MEMO, CLASS
FROM #TempPMTRevExport

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_DoBillingRun"  skip="true">
			<comment><![CDATA[
/*****************************************************************************
Purpose: To execute all the billing run processes.

JS: Oct/2014 - added call to post SeeVogh Overage Data

EXAMPLES:
	EXEC [p_UTIL_INV_DoBillingRun] @StartDate = 'jan 1 2013',@EndDate = 'Fab 1 2013'
	,@WholesalerID = '0000000001',@BillingPeriodCutoff = 31

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


--EVERYTHING NEEDS TO BE PASSED IN.
	IF (@StartDate IS NULL) OR (@EndDate IS NULL) OR (@WholesalerID IS NULL) OR (@BillingPeriodCutoff IS NULL)
	BEGIN
		RAISERROR ('Billing Run Error: One or more values passed into the Billing Run procedure was invalid. Billing Run process 
		cancelled. Please signout and login to try your request again. If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
		RETURN @@ERROR 
		GOTO END_SP -- ??jump over every thing?
	END

--Test if Billing Run already done for the same period, Just test if 1 customer of the BillingPeriodCutoff has an invoice. If so, then don't do it again.
-- If there is an issue than a Rollback needs to be done.
	Declare @invoicecount int
	SET @invoicecount = -1
	Select @invoicecount=count(*) FROM dbo.InvoiceSummary WHERE StartDate = @StartDate AND CustomerID IN (Select TOP 1 ID FROM Customer WHERE Enabled = 1 AND @BillingPeriodCutoff = 31)
	--Select * FROM dbo.InvoiceSummary WHERE StartDate = 'jan 1 2013' AND CustomerID IN (Select TOP 1 ID FROM Customer WHERE Enabled = 1 AND BillingPeriodCutOff = 31)
	--PRINT @invoicecount
	IF @invoicecount >= 1
	BEGIN
		RAISERROR ('Billing Run Error: Billing run is already done for this billing period. Billing Run process 
		cancelled. If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
		RETURN @@ERROR 
		GOTO END_SP -- ??jump over every thing?
	END

BEGIN TRANSACTION

	/*
	Step 1. Import all payments and charge files, usually done via a web page which posts items right away.
		The command below just forces all the items to be posted for the specific data range. This Dates must match
		the BillingCutoff Period for the customers if you have more then one billing cycle per month.
	*/	
	EXEC CONFDB.dbo.p_CustomerTransactionImport_PostCustomerTransactionCharges 'techadmin', null, null, @StartDate, @EndDate  --Process all between these dates.
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	--JS: Oct/2014 - added call to post SeeVogh Overage Data
	/*
	Step 1.1 Post all the SeeVogh Montly Charges for Per Port Customer to their account. This is in the RAWCDRS database.
	*/	
	EXEC RAWCDRS.dbo.p_UTIL_ProcessSeeVoghMonthlyCharges @StartDate, @EndDate  --Process any charges between these dates.
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	--JS: Oct/2014 - added call to post SeeVogh Overage Data
	/*
	Step 1.2 Post all the SeeVogh Overage Charges to the Customer's account. This is in the RAWCDRS database.
	*/	
	EXEC RAWCDRS.dbo.p_UTIL_ProcessSeeVoghOverageCharges @StartDate, @EndDate  --Process any charges between these dates.
	IF (@@ERROR <> 0)
		GOTO RollBackTrans
	
	/*
	Step 2. Mark the current CDRs for this BILLING RUN. This is done to MARK all the CDRs that must be billed
		for the current BILLING RUN. If not done then nothing will get billed.
	*/	
	EXEC CONFDB.dbo.p_UTIL_INV_Mark_BillableCDRSStart @StartDate, @EndDate,@WholesalerID,@BillingPeriodCutoff  --Marks all the CDRs to BillingStatus = 1 for specific Customers with Billing period Cut Off
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	/*
	Step 3. Gets the monthly Service charges (ie. Audio, Web, Video, etc.) and posts them to the 
		CustomerTransaction table for Invoicing purposes. This is usually done at the end of the month.
	NOTE: If you add new service charges that need to be posted then this SP MUST BE CHANGED.
	NOTE 2: The post date, Should be the last date minus 1 day from the end date of the invoice period. e.g. billing period is March, 
		so either mar 15 2008, mar 31 2008 depending on PeriodCutOff. This ensures that the items get processed 
		in the current billing run.
	*/	
	Declare @posteddate datetime
	Set @posteddate = DATEADD(d, -1,@EndDate)
	EXEC [p_UTIL_INV_PostMonthlyCharges] @WholesalerID, @posteddate -- The date to post the charges. 
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	/*
	Step 4. Generates the Invoice Summary info for the customer invoices and fills the other invoice tables with 
		data which is used to generate PDF or online invoices. Gets the ALL the monthly changes, payments, etc.
		(all types) AND post them to the correct tables of information for Invoicing purposes. 
		This is done prior to running the generation of the PDF invoices.
	The tables updated are:
		- PrevInvoices, InvoiceSummary, InvoiceCharges
	*/	
	EXEC [p_UTIL_INV_GenerateInvoices] @StartDate, @EndDate, @WholesalerID, @BillingPeriodCutoff
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	/*
	Step 5. Generate the Commissions. The first 12 invoices where the amount in new product charges is greater then zero
		count for a 10% commission. After this, it is 1%.
	The tables updated are:
		- Commission, CommissionCustomer
	*/	
	EXEC [p_UTIL_INV_GenerateCommissions] @StartDate, @WholesalerID, @BillingPeriodCutoff
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	/*
	Step Last Step. If we rolled back that billing run then there maybe have been transactions that need to be 
		reposted from after the billing run period. Call this to restore them.
	*/	
	EXEC [p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK] @WholesalerID
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

GOTO CommitTrans

RollBackTrans:
ROLLBACK TRANSACTION
	RAISERROR ('Billing Run Error: [p_UTIL_INV_DoBillingRun] had an error. Please signout and login to try your request again. 
		If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:




			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_GeneratePassword"  skip="true">
			<comment><![CDATA[/* 
Generates a Password
- Supports passing in different Lengths for Mod and Part Codes.
Parameters:	

Return:
@Password - varchar(50)

Examples:
DECLARE @RC int
DECLARE @Password varchar(50)
DECLARE @WholesalerID char(10)
DECLARE @CustomerID int
DECLARE @ModeratorID int
DECLARE @PasswordLength int

-- TODO: Set parameter values here.
	SET @WholesalerID = '0000000001'
	SET @CustomerID = NULL
	SET @ModeratorID = NULL
	SET @PasswordLength = 18

	EXECUTE @RC = p_UTIL_GeneratePassword @Password OUTPUT,@WholesalerID,@CustomerID,@ModeratorID,@PasswordLength
	PRINT @Password
*/
]]></comment>
			<parameters>
				<parameter name="@Password" type="varchar" direction="InputOutput" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PasswordLength" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	DECLARE @Random int
	DECLARE @Upper int
	DECLARE @Lower int
	DECLARE @counter int
	DECLARE @LoopCounter int
	DECLARE @LoopValue int
	DECLARE @Result varchar(20)
	DECLARE @NumChars int -- Used to store the number of characters to generate
	DECLARE @CapsOK bit 

	SET @CapsOK = 1 --Default of upper or lower case passwords

--  Get the default values for the Wholesaler if the value passed in
	IF @WholesalerID IS NOT NULL
	BEGIN
		SELECT @NumChars=ISNULL(DefaultPasswordLength,@PasswordLength), @CapsOK=ISNULL(DefaultCapsOK,@CapsOK) FROM Wholesaler WHERE ID = @WholesalerID 
	END

/* No features yet but left in for future use.
--  Get the default values for the Customer if the CustomerID value passed in
	IF @CustomerID IS NOT NULL
	BEGIN
		Select @NumChars=ISNULL(FeatureOptionValue,@PasswordLength) from vw_FeatureOptionsForCustomers T1 where T1.FeatureID = ? and  T1.CustomerID = @CustomerID 
	END

--  Get the default values for the Moderator if the ModeratorID value passed in
	IF @ModeratorID IS NOT NULL
	BEGIN
		Select @NumChars=ISNULL(FeatureOptionValue,@PasswordLength) from vw_FeatureOptionsForModerators T1 where T1.FeatureID = ?  and  T1.ModeratorID = @ModeratorID 
	END
*/

--TRY_AGAIN:
-- Gen. ASCII Values used are from 48 to 122 (ie. 0 to z), but this includes non-usable numbers.
	-- Set the Upper and Lower limits depending on the GenType
	--Password, all characters
	SET @Lower = 48 -- The lowest random number
	SET @Upper = 122 -- The highest random number
	SET @LoopValue = 1
	--MOD LR: Add the initial setting for NumChars
	SET @NumChars = ISNULL(@NumChars,@PasswordLength)
	--PRINT '@NumChars:' + CAST(@NumChars as varchar)

	SET @counter = 1
	SET @Result = ''
	SET @LoopCounter = 1
	SET @Password = ''
	
	WHILE @counter <= @NumChars -- For each Character
	BEGIN
		--Get Random number
		SELECT @Random = Round(((@Upper - @Lower -1) * Rand() + @Lower), 0)
		-- The IF is used to filter out the ranges non-usable range, 58 to 64, 91 to 96
		IF (@Random >= 58 and @Random <= 64) or (@Random >= 91 and @Random <= 96)
		BEGIN
			SET @Random = -1
		END
		--PRINT 'Counter:' + CAST(@counter as varchar)
		--PRINT 'Random Num:' + CAST(@Random as varchar)
		IF (@Random <> -1)
		BEGIN
			--Convert number and increment counter
			SET @Result = @Result + CHAR(@Random)
			SET @counter = @counter + 1
		END
	END
	-- Determine if Capital chars are OK, if not lower case them
	IF (@CapsOK = 0)
		SET @Password = LOWER(@Result)
	ELSE
		--Set the Password
		SET @Password = @Result

--RETURN @Result' 
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_Mark_BillableCDRSEnd"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: Used during the INVOICE RUN to mark the CDRS for the specific Customer, based on their BillingPeriodCut settings
and the date range passed in, as completed for billing. This done by setting the BillingStatus = 2

NOTE: Before running this, Run [p_UTIL_INV_Mark_BillableCDRSStart] to set the BillingStatus = 1 to start the process. 

Examples: 	
	-- Required no parameters as this looks for BillingStatus=1 items and changes them.
	EXEC [p_UTIL_INV_Mark_BillableCDRSEnd]

*****************************************************************************/
]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				

BEGIN TRANSACTION

	UPDATE RatedCDR SET BillingStatus = 2 WHERE BillingStatus = 1
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

GOTO CommitTrans

RollBackTrans:
ROLLBACK TRANSACTION
	RAISERROR ('Billing Run Error: [p_UTIL_INV_Mark_BillableCDRSEnd] had an error. Please signout and login to try your request again. 
		If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:
	
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_PostMonthlyCharges"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Get the monthly Service charges (ie. Audio, Web, Video, etc.) and posts them to the 
	CustomerTransaction table for Invoicing purposes. This is usually done at the end of the month.
	
	**** NO TAXES ARE CALCULATED HERE BUT ARE TAKEN FROM THE CALL DETAILS
	**** Must Run [p_UTIL_INV_Mark_BillableCDRSStart] BEFORE RUNNING THIS SP AS IT MARKS THE CDRS TO BE BILLED.
	EXEC [p_UTIL_INV_Mark_BillableCDRSStart] 'mar 1 2008', 'apr 1 2008','0000000001',31 
	**** Call this SP before creating the invoices.

NOTE: 
	1. Figures out the Free Credits by calling an SP which tweaks the RatedCDR's
	2. Groups all CDR based Product charges together and posts them to the CustomerTransaction table. Thus all Conference Charges are grouped. ie. Audio, Web, and Video.
	3. Uses the tax amounts that are stored at the call detail level.
	4. The SP sets the Wholesaler_ProductID and ProductRateID in the CustomerTransaction which can be used for descriptions.

EXAMPLES: 

	EXEC [p_UTIL_INV_PostMonthlyCharges] '0000000001', 'apr 30 2008' -- The date to post the charges. Should be the last date within the invoice period. e.g. mar 15 2008, mar 31 2008

HISTORY:

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@PostedDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- Var's to store TransactionType Values and Descriptions
	DECLARE @TransactionTypeValue int
	DECLARE @TempPostedDate datetime --used to pass the posted date to several SP's, keeps it consistent
	DECLARE @UserName varchar(50) -- Used to pass in the name of the SP for the ModifiedBy field
		SET @UserName = 'p_UTIL_INV_PostMonthlyCharges'
	
	SET @TempPostedDate = @PostedDate -- Post everything at the same time to make it easier to find procedure runs

	-- Calculate Free Conferencing Credits
	EXEC [p_UTIL_INV_CalculateFreeCredits]

BEGIN TRANSACTION

	--POST CONFERENCING SERVICES CHARGE
-- Select * from CustomerTransaction
-- Select * from RatedCDR

		-- PRODUCT BRIDGE CHARGE, Change this to match what you are Summarizing by, current Bridge, LD, and Free Credit
		Set @TransactionTypeValue = 1 --See CustomerTransactionType Table for more info

		INSERT INTO CustomerTransactionImport ([WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate]
		,[TransactionAmount],[TransactionDescription],[CustomerTransactionTypeID],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate]
		,[BuyRate],[WSTransactionAmount],[ModifiedBy]
		--,[CreatedDate],[PostedToCustTrans],[PostedToCustTransDate]
		,[ImportType],[ErrorCodesID],[ReferenceNumber],[UniqueConferenceID]
		,[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[ElapsedTimeSeconds])
		SELECT CDR.[WholesalerID],CDR.CustomerID AS [CustomerID],CDR.[ModeratorID],M.[PriCustomerNumber],M.[SecCustomerNumber]
		,@TempPostedDate AS [TransactionDate],[TransactionAmount], NULL AS [TransactionDescription], @TransactionTypeValue AS [CustomerTransactionTypeID]
		,(SELECT TOP 1 Wholesaler_ProductID FROM dbo.vw_ProductRatesForWholesaler WHERE ProductRateID = CDR.ProductRateID) AS [Wholesaler_ProductID]
		,[ProductRateID], NULL AS [Quantity],[SellRate],[BuyRate],[WSTransactionAmount],@UserName AS ModifiedBy
		,@UserName AS [ImportType], 0 AS [ErrorCodesID]
		,[ReferenceNumber],[UniqueConferenceID],[LocalTaxRate],[FederalTaxRate]
		-- Need to correct the taxes to only reflex the Bridge Rate portion, as audio could be the FreeCredit Service
		,(TransactionAmount * LocalTaxRate) AS [LocalTaxAmount]
		,(TransactionAmount * FederalTaxRate) AS [FederalTaxAmount]
		,[ElapsedTimeSeconds] 
		FROM 
		--Derived Table, ***NOTE:Change the TransactionAmount and ProductRateID to match either Bridge, LD or Free Credit Retail Total items
		(SELECT     WholesalerID, ModeratorID, CustomerID,
			  SUM(RetailTotalBridge) AS TransactionAmount,MAX(DISTINCT RetailLocalTaxRate) AS LocalTaxRate, MAX(DISTINCT RetailFederalTaxRate) AS FederalTaxRate,
			  SUM(RetailLocalTax) AS LocalTaxAmount, SUM(RetailFederalTax) AS FederalTaxAmount, BridgeProductRateID AS ProductRateID,
			  MAX(DISTINCT RetailBridgeRate) AS SellRate, MAX(DISTINCT WSBridgeRate) AS BuyRate, SUM(WSTotalBridge) AS WSTransactionAmount,
			  ReferenceNumber, UniqueConferenceID, SUM(ElapsedTime) AS ElapsedTimeSeconds
		FROM         dbo.RatedCDR (NOLOCK)
		WHERE     (BillingStatus = 1) AND BridgeProductRateID <> 0 AND WholesalerID = @WholesalerID
		GROUP BY WholesalerID, CustomerID, ModeratorID, BridgeProductRateID, UniqueConferenceID, ReferenceNumber --Update this for Rate ID
		) CDR INNER JOIN Moderator M (NOLOCK) ON CDR.ModeratorID = M.ID INNER JOIN Customer C (NOLOCK) ON C.ID = M.CustomerID
		WHERE CDR.WholesalerID = @WholesalerID AND M.WholesalerID = @WholesalerID AND C.WholesalerID = @WholesalerID
		--Amount can't be zero
		AND TransactionAmount <> 0
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
			
		--PRODUCT LD CHARGES, Change this to match what you are Summarizing by, current Bridge, LD, and Free Credit
		SET @TransactionTypeValue = 12 --See Select * from CustomerTransactionType Table for more info

		INSERT INTO CustomerTransactionImport ([WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate]
		,[TransactionAmount],[TransactionDescription],[CustomerTransactionTypeID],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate]
		,[BuyRate],[WSTransactionAmount],[ModifiedBy]
		--,[CreatedDate],[PostedToCustTrans],[PostedToCustTransDate]
		,[ImportType],[ErrorCodesID],[ReferenceNumber],[UniqueConferenceID]
		,[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[ElapsedTimeSeconds])
		SELECT CDR.[WholesalerID],CDR.CustomerID AS [CustomerID],CDR.[ModeratorID],M.[PriCustomerNumber],M.[SecCustomerNumber]
		,@TempPostedDate AS [TransactionDate],[TransactionAmount], NULL AS [TransactionDescription], @TransactionTypeValue AS [CustomerTransactionTypeID]
		,(SELECT TOP 1 Wholesaler_ProductID FROM dbo.vw_ProductRatesForWholesaler WHERE ProductRateID = CDR.ProductRateID) AS [Wholesaler_ProductID]
		,[ProductRateID], NULL AS [Quantity],[SellRate],[BuyRate],[WSTransactionAmount],@UserName AS ModifiedBy
		,@UserName AS [ImportType], 0 AS [ErrorCodesID]
		,[ReferenceNumber],[UniqueConferenceID], [LocalTaxRate], [FederalTaxRate]
		-- Need to correct the taxes to only reflex the LD Rate portion, as audio could be the FreeCredit Service
		,(TransactionAmount * LocalTaxRate) AS [LocalTaxAmount]
		,(TransactionAmount * FederalTaxRate) AS [FederalTaxAmount]
		,[ElapsedTimeSeconds] 
		FROM 
		--Derived Table, ***NOTE:Change the TransactionAmount and ProductRateID to match either Bridge, LD or Free Credit Retail Total items
		(SELECT     WholesalerID, ModeratorID, CustomerID,
			  SUM(RetailTotalLD) AS TransactionAmount,MAX(DISTINCT RetailLocalTaxRate) AS LocalTaxRate, MAX(DISTINCT RetailFederalTaxRate) AS FederalTaxRate,
			  SUM(RetailLocalTax) AS LocalTaxAmount, SUM(RetailFederalTax) AS FederalTaxAmount, LDProductRateID AS ProductRateID,
			  MAX(DISTINCT RetailBridgeRate) AS SellRate, MAX(DISTINCT WSBridgeRate) AS BuyRate, SUM(WSTotalBridge) AS WSTransactionAmount,
			  ReferenceNumber, UniqueConferenceID, SUM(ElapsedTime) AS ElapsedTimeSeconds
		FROM         dbo.RatedCDR
		WHERE     (BillingStatus = 1) AND LDProductRateID <> 0 AND WholesalerID = @WholesalerID
		GROUP BY WholesalerID,CustomerID, ModeratorID, LDProductRateID, UniqueConferenceID, ReferenceNumber --Update this for Rate ID
		) CDR INNER JOIN Moderator M (NOLOCK) ON CDR.ModeratorID = M.ID INNER JOIN Customer C (NOLOCK) ON C.ID = M.CustomerID
		WHERE CDR.WholesalerID = @WholesalerID AND M.WholesalerID = @WholesalerID
		--Amount can't be zero
		AND TransactionAmount <> 0
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

/***********************************
NOTE: For Free credit, it is the lesser of mins of Audio product vs. Web product but only the bridge charges are credited back.
The SP: [p_UTIL_INV_CalculateFreeCredits] contains the logic so all we have to do is post the items where the 
	BillingStatus = 1 and the amount is not zero.
***********************************/
		--FREE CONFERENCING CREDIT - Bridge Rate, Change this to match what you are Summarizing by, current Bridge, LD, and Free Credit
		SET @TransactionTypeValue = 11 --See Select * from CustomerTransactionType Table for more info

		INSERT INTO CustomerTransactionImport ([WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate]
		,[TransactionAmount],[TransactionDescription],[CustomerTransactionTypeID],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate]
		,[BuyRate],[WSTransactionAmount],[ModifiedBy]
		--,[CreatedDate],[PostedToCustTrans],[PostedToCustTransDate]
		,[ImportType],[ErrorCodesID],[ReferenceNumber],[UniqueConferenceID]
		,[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[ElapsedTimeSeconds])
		SELECT CDR.[WholesalerID],CDR.CustomerID AS [CustomerID],CDR.[ModeratorID],M.[PriCustomerNumber],M.[SecCustomerNumber]
		,@TempPostedDate AS [TransactionDate],[TransactionAmount], NULL AS [TransactionDescription], @TransactionTypeValue AS [CustomerTransactionTypeID]
		,(SELECT TOP 1 Wholesaler_ProductID FROM dbo.vw_ProductRatesForWholesaler WHERE ProductRateID = CDR.ProductRateID) AS [Wholesaler_ProductID]
		,[ProductRateID], NULL AS [Quantity],[SellRate],[BuyRate],[WSTransactionAmount],@UserName AS ModifiedBy
		,@UserName AS [ImportType], 0 AS [ErrorCodesID]
		,[ReferenceNumber],[UniqueConferenceID],[LocalTaxRate],[FederalTaxRate]
		-- Need to correct the taxes to only reflex the Retail Credit portion, as either audio or web could be the FreeCredit Service
		,(TransactionAmount * LocalTaxRate) AS [LocalTaxAmount]
		,(TransactionAmount * FederalTaxRate) AS [FederalTaxAmount]
		,[ElapsedTimeSeconds] 
		FROM 
		--Derived Table, ***NOTE:Change the TransactionAmount and ProductRateID to match either Bridge, LD or Free Credit Retail Total items
		(SELECT     WholesalerID, ModeratorID, CustomerID,
			  SUM(RetailTotalCredit) AS TransactionAmount,MAX(DISTINCT RetailLocalTaxRate) AS LocalTaxRate, MAX(DISTINCT RetailFederalTaxRate) AS FederalTaxRate,
			  SUM(RetailLocalTax) AS LocalTaxAmount, SUM(RetailFederalTax) AS FederalTaxAmount, BridgeProductRateID AS ProductRateID,
			  MAX(DISTINCT RetailBridgeRate) AS SellRate, MAX(DISTINCT WSBridgeRate) AS BuyRate, SUM(WSTotalBridge) AS WSTransactionAmount,
			  ReferenceNumber, UniqueConferenceID, SUM(ElapsedTime) AS ElapsedTimeSeconds
		FROM         dbo.RatedCDR
		WHERE     (BillingStatus = 1) AND BridgeProductRateID <> 0 AND WholesalerID = @WholesalerID
		GROUP BY WholesalerID,CustomerID, ModeratorID,BridgeProductRateID, UniqueConferenceID, ReferenceNumber --Update this for Rate ID
		) CDR INNER JOIN Moderator M (NOLOCK) ON CDR.ModeratorID = M.ID INNER JOIN Customer C (NOLOCK) ON C.ID = M.CustomerID
		WHERE CDR.WholesalerID = @WholesalerID AND M.WholesalerID = @WholesalerID
		--Amount can't be zero
		AND TransactionAmount <> 0
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

	--POST TRANSACTIONS, ONLY ID 1, 12, 11 --See Select * from CustomerTransactionType Table for more info
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges @UserName, null, 1 --Process all records with the specific CustomerTransactionType value
	IF (@@ERROR <> 0) GOTO RollBackTrans
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges @UserName, null, 12 --Process all records with the specific CustomerTransactionType value
	IF (@@ERROR <> 0) GOTO RollBackTrans
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges @UserName, null, 11 --Process all records with the specific CustomerTransactionType value
	IF (@@ERROR <> 0) GOTO RollBackTrans

	GOTO	CommitTrans

RollBackTrans:
ROLLBACK TRANSACTION
	RAISERROR ('Billing Run Error: [p_UTIL_INV_PostMonthlyCharges] had an error. Please signout and login to try your request again. 
		If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_PopulateTrends"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Rebuilds the Trend table which is a 12 month moving history of the conferencing
usage per Company

NOTES:
March/2013 - updated to take into account credits and misc. charges

EXAMPLES: 
	 EXEC p_UTIL_PopulateTrends

Select * from Trend order by CompanyName
*****************************************************************************/
]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				


DECLARE @StartDate AS DateTime
DECLARE @EndDate AS DateTime
SET @EndDate = LTRIM(RTRIM(STR(datepart(yyyy, GetDate())))) +  '-' + LTRIM(RTRIM(STR(datepart(mm, GetDate())))) + '-' + '01' + ' 00:00:00'
SET @StartDate = DateAdd(yy, -1, @EndDate)
/*
print @EndDate
print @StartDate
*/
TRUNCATE Table Trend

INSERT Trend
SELECT
	C.ID, --companyid
	INV.WholesalerID,
	INV.CustomerID,
	Cust.SalesPersonID,
	INV.CurrencyID,
	C.Description AS CompanyName,
--NOTE: MAKE SURE TO Minus out the FreeConferencing credit
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 0 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth01,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 1 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth02,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 2 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth03,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 3 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth04,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 4 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth05,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 5 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth06,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 6 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth07,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 7 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth08,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 8 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth09,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 9 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth10,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 10 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth11,
	SUM(CASE WHEN DateDiff(mm, @StartDate, INV.StartDate) = 11 THEN INV.ProductCharges + INV.MiscCharges + TotalCredits ELSE 0 END) AS TotalRevenueMonth012,
	NULL,@StartDate,@EndDate
FROM 
	InvoiceSummary INV (NOLOCK)
	INNER JOIN Customer Cust (NOLOCK) ON INV.CustomerID = Cust.ID
	INNER JOIN Company C (NOLOCK) ON Cust.CompanyID = C.ID
WHERE
	INV.StartDate >= @StartDate
	AND INV.StartDate < @EndDate
--REMOVE Customers that shouldn't Effect Revenue
	AND Cust.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
GROUP BY 
	C.ID,
	INV.WholesalerID,
	INV.CustomerID,
	Cust.SalesPersonID,
	INV.CurrencyID,
	C.Description

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_TestUserCodes"  skip="true">
			<comment><![CDATA[/* 
This SP tests to see if the moderator or pass codes are unique. If not it returns 
	which one isn't. The ModeratorID is used to make sure the values passed in are 
	only used for the specific SubAccount.

BASIC RULES: 
1. Mod code can not match Pass code and viceversa
2. Zero (0) can not be the first character as when converting to a number the zero is dropped

Parameters:	
@ModeratorCode - Moderator code to test
@PassCode - Passcode to test
@ModeratorID - ModeratorID to test against.
Return:
@ModCodeValid - True or False - 1 or 0 - if the Mod code is unique
@PartCodeVaild - True or False - 1 or 0 - if the Pass code is unique

Examples:
	DECLARE @ModCodeValid bit
	DECLARE @PartCodeVaild bit
	EXECUTE p_UTIL_TestUserCodes
	   @ModeratorCode = '1111' --too easy
	  ,@PassCode = '2222123' -- ok -- '02222123' -- starts with zero
	  ,@ModeratorID = NULL
	  ,@ModCodeValid = @ModCodeValid OUTPUT
	  ,@PartCodeVaild = @PartCodeVaild OUTPUT
	PRINT @ModCodeValid
	PRINT @PartCodeVaild
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModCodeValid" type="bit" direction="InputOutput" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PartCodeVaild" type="bit" direction="InputOutput" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


DECLARE @Result int
DECLARE @strResult varchar(10) --hold test string for zero value
-- Init. ModeratorID to a value we can test for where it is passed in or not
SET @ModeratorID = ISNULL(@ModeratorID,'0')

-- TEST IF THE CODE MATCH.
IF  @ModeratorCode IS NOT NULL AND @PassCode IS NOT NULL
BEGIN 
	IF @ModeratorCode = @PassCode
	BEGIN
		SET @ModCodeValid = 0 -- False
		SET @PartCodeVaild = 0 --False
		RETURN 0
	END
END
-- Test Moderator Code
IF @ModeratorCode IS NOT NULL
BEGIN
	-- Test if first character is zero, not allowed
	Set @strResult = ''
	Set @strResult = LEFT(CAST(@ModeratorCode AS varchar(10)), 1)
	IF @strResult = '0'
		SET @ModCodeValid = 0 -- False
	ELSE 
	BEGIN
		-- Test if Unqiue in the database, across Moderator code or Pass code
		SET @Result = 0
		--Universal Check
		SELECT TOP 1 @Result = ID FROM vw_UTIL_MOD_PART_CODES WHERE (ModeratorCode = @ModeratorCode) OR (PassCode = @ModeratorCode) ORDER BY ID Desc
		SET @Result = ISNULL(@Result,'0')
		IF @Result = @ModeratorID OR @Result = 0 --Match Not Found, Unique, or used for the current SubAccount
			SET @ModCodeValid = 1
		ELSE
			SET @ModCodeValid = 0 -- False
	END
END
ELSE
BEGIN
	SET @ModCodeValid = 0
END

-- Test Pass Code
IF @PassCode IS NOT NULL
BEGIN
	-- Test if first character is zero, not allowed
	Set @strResult = ''
	Set @strResult = LEFT(CAST(@PassCode AS varchar(10)), 1)
	IF @strResult = '0'
		SET @PartCodeVaild = 0 -- False
	ELSE 
	BEGIN
		-- Test if Unqiue in the database, across Moderator code or Pass code
		SET @Result = 0
		--Universal Check
		SELECT TOP 1 @Result = ID FROM vw_UTIL_MOD_PART_CODES WHERE (PassCode = @PassCode) OR (ModeratorCode = @PassCode) ORDER BY ID Desc
		SET @Result = ISNULL(@Result,'0')
		IF @Result = @ModeratorID OR @Result = 0 --Match Not Found, Unique, or used for the current SubAccount
			SET @PartCodeVaild = 1
		ELSE
			SET @PartCodeVaild = 0 --False
	END
END
ELSE
BEGIN
	SET @PartCodeVaild = 0
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_CalculateFreeCredits"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Calculate the RetailTotalCredit for the Customer based on the following:
	- Calc mins of Web and Audio per Customer and which every is lower give the bridge amount as a Credit.

NOTE: 
	1. Run [p_UTIL_INV_Mark_BillableCDRSStart] BEFORE RUNNING THIS SP AS IT MARKS THE CDRS TO BE BILLED.
	EXEC [p_UTIL_INV_Mark_BillableCDRSStart] 'mar 1 2008', 'apr 1 2008','0000000001',31 

	2. Run this before doing the billing run, this SP uses the BillingStatus = 1 setting from the SP ran in #1

Select * from RatedCDR where RetailTotalCredit <> 0

EXAMPLES: 
	
	EXEC [p_UTIL_INV_CalculateFreeCredits]

HISTORY:

*****************************************************************************/
]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				


	--Calculate the Free Service Credit and copy the value into the RetailTotalCredit
	UPDATE RatedCDR SET RetailTotalCredit = CDR.RetailTotalBridge
--	Select DISTINCT FC.*
	FROM RatedCDR CDR (NOLOCK) INNER JOIN dbo.vw_AccessType_ProductRates ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND CDR.BridgeProductRateID = ATPR.ProductRateID
		INNER JOIN 	--Derived Table
--	Select * FROM
		(SELECT T1.ProductID, T1.CustomerID
			FROM (
			--July 22/2010 - Sum the amount of Bridge Charges by CustomerID for each service
			SELECT     TOP (100) PERCENT SUM(CDR.RetailTotalBridge) AS ServiceAMT, CDR.CustomerID, ATPR.ProductID
			FROM  dbo.RatedCDR AS CDR WITH (NOLOCK) INNER JOIN
				  dbo.vw_AccessType_ProductRates AS ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND 
				  CDR.BridgeProductRateID = ATPR.ProductRateID
			WHERE     (CDR.BillingStatus = 1) AND (ATPR.ProductID IN (1, 4))
			GROUP BY CDR.CustomerID, ATPR.ProductID
			) T1  INNER JOIN
			(SELECT     TOP (100) PERCENT SUM(CDR.RetailTotalBridge) AS ServiceAMT, CDR.CustomerID, ATPR.ProductID
			FROM  dbo.RatedCDR AS CDR WITH (NOLOCK) INNER JOIN
				  dbo.vw_AccessType_ProductRates AS ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND 
				  CDR.BridgeProductRateID = ATPR.ProductRateID
			WHERE     (CDR.BillingStatus = 1) AND (ATPR.ProductID IN (1, 4))
			GROUP BY CDR.CustomerID, ATPR.ProductID
			) T2 ON T1.CustomerID = T2.CustomerID
		WHERE T1.ServiceAMT < T2.ServiceAMT
		) FC
	ON ATPR.ProductID = FC.ProductID AND CDR.CustomerID = FC.CustomerID
	WHERE CDR.BillingStatus = 1
--	ORDER by CustomerID

	--Handle the case where they are equal
	UPDATE RatedCDR SET RetailTotalCredit = CDR.RetailTotalBridge
--	Select DISTINCT FC.*
	FROM RatedCDR CDR (NOLOCK) INNER JOIN dbo.vw_AccessType_ProductRates ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND CDR.BridgeProductRateID = ATPR.ProductRateID
		INNER JOIN 	--Derived Table
--	Select * FROM
		(SELECT T1.ProductID, T1.CustomerID
			FROM (
			--July 22/2010 - Sum the amount of Bridge Charges by CustomerID for each service
			SELECT     TOP (100) PERCENT SUM(CDR.RetailTotalBridge) AS ServiceAMT, CDR.CustomerID, ATPR.ProductID
			FROM  dbo.RatedCDR AS CDR WITH (NOLOCK) INNER JOIN
				  dbo.vw_AccessType_ProductRates AS ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND 
				  CDR.BridgeProductRateID = ATPR.ProductRateID
			WHERE     (CDR.BillingStatus = 1) AND (ATPR.ProductID IN (1, 4))
			GROUP BY CDR.CustomerID, ATPR.ProductID
		) T1  INNER JOIN
		(SELECT     TOP (100) PERCENT SUM(CDR.RetailTotalBridge) AS ServiceAMT, CDR.CustomerID, ATPR.ProductID
			FROM  dbo.RatedCDR AS CDR WITH (NOLOCK) INNER JOIN
				  dbo.vw_AccessType_ProductRates AS ATPR ON CDR.AccessTypeID = ATPR.AccessTypeID AND 
				  CDR.BridgeProductRateID = ATPR.ProductRateID
			WHERE     (CDR.BillingStatus = 1) AND (ATPR.ProductID IN (1, 4))
			GROUP BY CDR.CustomerID, ATPR.ProductID
		) T2 ON T1.CustomerID = T2.CustomerID
		WHERE T1.ServiceAMT = T2.ServiceAMT AND T1.ProductID = 1 AND T2.ProductID = 4
		) FC
		ON ATPR.ProductID = FC.ProductID AND CDR.CustomerID = FC.CustomerID
	WHERE CDR.BillingStatus = 1
--	ORDER by CustomerID
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_MGMTRPT_RevenueByModerator2"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns a revenue report by Company, Moderator, and Sales Person

EXAMPLES:
	-- A Report for the month of October 2009
	EXEC [p_UTIL_MGMTRPT_RevenueByModerator2] '2009-10-01', '2009-11-01'
****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				



SELECT UserInfo.*, cdr.[Web Total] , cdrAudio.[Audio Total]

FROM    
				(
				SELECT  DISTINCT   dbo.[User].UserID, dbo.SalesPerson.FullName AS [Sales Person], dbo.Company.Description AS [Company Name], 
									  dbo.[User].DisplayName AS [Moderator Name], dbo.[User].Email AS [Moderator Email], dbo.[User].Telephone AS [Moderator Telephone]
    
				FROM         dbo.[User] INNER JOIN
						  dbo.Moderator ON dbo.[User].UserID = dbo.Moderator.UserID INNER JOIN
						  dbo.Customer ON dbo.Moderator.CustomerID = dbo.Customer.ID INNER JOIN
						  dbo.SalesPerson ON dbo.Customer.SalesPersonID = dbo.SalesPerson.ID INNER JOIN
						  dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID	
						--REMOVE Customers that shouldn't Effect Revenue
						AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
				)
				UserInfo

LEFT OUTER JOIN       
				( 
					SELECT     dbo.[User].UserID, 
										  SUM(dbo.RatedCDR.RetailTotal) AS [Web Total]
					FROM         dbo.RatedCDR INNER JOIN
										  dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
										  dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID
					WHERE     (dbo.RatedCDR.ConferenceStartTime BETWEEN @StartDate AND @EndDate) AND (dbo.RatedCDR.AccessTypeID = 3)
					GROUP BY dbo.[User].UserID
				) cdr 
          ON UserInfo.UserId = cdr.UserID
LEFT OUTER JOIN
				( 
					SELECT     dbo.[User].UserID, 
										  SUM(dbo.RatedCDR.RetailTotal) AS [Audio Total]
					FROM         dbo.RatedCDR INNER JOIN
										  dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
										  dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID
					WHERE     (dbo.RatedCDR.ConferenceStartTime BETWEEN @StartDate AND @EndDate) AND (dbo.RatedCDR.AccessTypeID <> 3)
					GROUP BY dbo.[User].UserID
				) cdrAudio 
          ON UserInfo.UserId = cdrAudio.UserID

ORDER BY [Sales Person], [Company Name], [Moderator Name]				


/*
select * from [User]
where UserID
not in
(
SELECT    distinct dbo.[User].UserID
FROM         dbo.RatedCDR INNER JOIN
					  dbo.Customer ON dbo.RatedCDR.CustomerID = dbo.Customer.ID INNER JOIN
					  dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
					  dbo.SalesPerson ON dbo.Customer.SalesPersonID = dbo.SalesPerson.ID INNER JOIN
					  dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID RIGHT OUTER JOIN
					  dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID
WHERE     (dbo.RatedCDR.ConferenceStartTime BETWEEN @StartDate AND @EndDate) AND (dbo.RatedCDR.AccessTypeID = 3)
)
*/
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_GenerateRandomString"  skip="true">
			<comment><![CDATA[
/***************************************************************************
* Created By: Raymond Lewallen
* Date:  05/16/2005
* Purpose: Generate a random string of given length
*
* Comments: Everything is self-explanatory.  Right now
*  max length is set to 100. So anything between 1
*  and 100 will work for a length.
*
*   If you specify a @charactersToUse,
*  the bit flags get ignored.
*
*   All spaces are stripped from the 
*  @charactersToUse.
*
*   Characters can repeat. Will be 
*  handled in a future version.
* http://codebetter.com/blogs/raymond.lewallen/archive/2005/05/17/63281.aspx
Example:
	declare @a varchar(100)
	exec dbo.p_UTIL_GenerateRandomString 1,1,0,null,8,@a OUT
	print @a
***************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@useNumbers" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@useLowerCase" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@useUpperCase" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@charactersToUse" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@passwordLength" type="smallint" direction="Input" size="0" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@password" type="varchar" direction="InputOutput" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

Begin

if @passwordLength <= 0
 raiserror('Cannot generate a random string of zero length.',16,1)

declare @characters varchar(100)
declare @count int

set @characters = ''

if @useNumbers = 1
begin
 -- load up numbers 0 - 9
 set @count = 48
 while @count <=57
 begin
     set @characters = @characters + Cast(CHAR(@count) as char(1))
     set @count = @count + 1
 end
end

if @useUpperCase = 1
begin
 -- load up uppercase letters A - Z
 set @count = 65
 while @count <=90
 begin
     set @characters = @characters + Cast(CHAR(@count) as char(1))
     set @count = @count + 1
 end
end

if @useLowerCase = 1
begin
 -- load up lowercase letters a - z
 set @count = 97
 while @count <=122
 begin
     set @characters = @characters + Cast(CHAR(@count) as char(1))
     set @count = @count + 1
 end
end

set @count = 0
set @password = ''

-- If you specify a character set to use, the bit flags get ignored.
if Len(@charactersToUse) > 0
begin
 while charindex(@charactersToUse,' ') > 0
 begin
  set @charactersToUse = replace(@charactersToUse,' ','')
 end

 if Len(@charactersToUse) = 0
  raiserror('Cannot use an empty character set.',16,1)

 while @count <= @passwordLength
 begin
     set @password = @password + SUBSTRING(@charactersToUse,CAST(ABS(CHECKSUM(NEWID()))*RAND(@count) as int)%LEN(@charactersToUse)+1,1)
     set @count = @count + 1
 end
end
else
begin
 while @count <= @passwordLength
 begin
     set @password = @password + SUBSTRING(@characters,CAST(ABS(CHECKSUM(NEWID()))*RAND(@count) as int)%LEN(@characters)+1,1)
     set @count = @count + 1
 end
end

end

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_CalculateTax"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To calculate the tax on an amount for a Customer. The values are passed back
	in OUTPUT variables.  See the function for more information.

Examples:
DECLARE @RC int
DECLARE @CustomerID int
DECLARE @PriCustomerNumber varchar(10)
DECLARE @WholesalerID char(10)
DECLARE @Amount decimal(18,7)
DECLARE @ProductRateID int
DECLARE @ProductRateName varchar(30)
DECLARE @FederalTaxRate decimal(9,5)
DECLARE @LocalTaxRate decimal(9,5)
DECLARE @FederalTaxAmount decimal(18,7)
DECLARE @LocalTaxAmount decimal(18,7)
DECLARE @LocalOnFederalTax bit
DECLARE @ProductRateTaxableValue int
DECLARE @CustomerTaxableValue int

-- TODO: Set parameter values here.
SET @CustomerID = 14
SET @PriCustomerNumber = null
SET @WholesalerID = '0000000001'
SET @Amount = 10.00
SET @ProductRateID = null
SET @ProductRateName = null

EXECUTE @RC = [CONFDB].[dbo].[p_UTIL_CalculateTax] 
   @CustomerID,@PriCustomerNumber,@WholesalerID,@Amount,@ProductRateID,@ProductRateName,@FederalTaxRate OUTPUT,@LocalTaxRate OUTPUT
	,@FederalTaxAmount OUTPUT ,@LocalTaxAmount OUTPUT,@LocalOnFederalTax OUTPUT,@ProductRateTaxableValue OUTPUT,@CustomerTaxableValue OUTPUT

PRINT @FederalTaxRate
PRINT @LocalTaxRate
PRINT @FederalTaxAmount
PRINT @LocalTaxAmount
PRINT @LocalOnFederalTax
PRINT @ProductRateTaxableValue
PRINT @CustomerTaxableValue

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Amount" type="decimal" direction="Input" size="0" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@ProductRateID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@FederalTaxRate" type="decimal" direction="InputOutput" size="0" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@LocalTaxRate" type="decimal" direction="InputOutput" size="0" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="InputOutput" size="0" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="InputOutput" size="0" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@LocalOnFederalTax" type="bit" direction="InputOutput" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerTaxableValue" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


-- Call Calculate the Tax Function to do all the work. This returns a table.
	SELECT @FederalTaxRate = FederalTaxRate, @LocalTaxRate = LocalTaxRate, @FederalTaxAmount = FederalTaxAmount, @LocalTaxAmount = LocalTaxAmount, @LocalOnFederalTax = LocalOnFederalTax, @ProductRateTaxableValue = ProductRateTaxableValue, @CustomerTaxableValue = CustomerTaxableValue
	FROM dbo.fn_CalculateTax(@CustomerID, @PriCustomerNumber, @WholesalerID, @Amount, @ProductRateID, @ProductRateName)

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_GenerateInvoices_Bak"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Generates the Invoice Summary info for the customer invoices and fills the other invoice tables with data which is used
	to generate PDF or online invoices. Gets the ALL the monthly changes, payments, etc. (all types) AND post them to the correct tables of information for 
	Invoicing purposes. This is done prior to running the generation of the PDF invoices.
	The tables updated are:
		- PrevInvoices, InvoiceSummary, InvoiceCharges

JUST A BACKUP AS CHANGES WERE MADE TO PRODUCTION VERSION!!!!
		
NOTE: 
1. This SP will process ALL records from the ENDDATE and less. Thus items posted in the future will be on the next billing cycle.

EXAMPLES: 
	--Times adjusted, no need to pass in.
	EXEC [p_UTIL_INV_GenerateInvoices_BAK] 'apr 1 2008', 'may 1 2008','0000000001',31

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@STARTDATE" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ENDDATE" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

-- Declare var's
	DECLARE @PeriodStartDate datetime, @PeriodEndDate datetime --12am dates for the start AND end period. Used so that all Period Dates are consistant.
	DECLARE @TempPostedDate datetime 
	--TEMP DATES USED TO DENOTE THE PERIOD START AND END DATE
	SET @PeriodStartDate = @STARTDATE --Midnight of the StartDate
	SET @PeriodEndDate = DATEADD(Day,-1,@ENDDATE) -- Midnight of the Last day of the billing period
	
	-- MAKE SURE BillingPeriodCutoff IS SET
	SET @BillingPeriodCutoff = ISNULL(@BillingPeriodCutoff,31)
	-- POST EVERYTHING AT THE SAME TIME TO MAKE IT EASIER TO FIND PROCEDURE RUNS
	SET @TempPostedDate = @STARTDATE 

	-- ADD ALL NEW ACCOUNTS TO THE PREVINVOICES TABLE WHICH STORES PREVBALANCES, THUS ENSURING ALL CUSTOMER HAVE A VALUE
	INSERT INTO PrevInvoices (WholesalerID,CustomerID,PrevBal,PrevPerStart,PrevPerEnd)
	SELECT WholesalerID, Customer.ID, 0.00, DATEADD(Month,-1,@PeriodStartDate),DATEADD(Month,-1,@PeriodEndDate)
	FROM   Customer WHERE ID NOT IN (SELECT CustomerID FROM PrevInvoices WHERE WholesalerID = @WholesalerID) 
	AND WholesalerID = @WholesalerID

BEGIN TRANSACTION

		--GENERATE THE INVOICE SUMMARY TABLE INFO
		INSERT INTO InvoiceSummary
		([StartDate],[EndDate],[CustomerID],[PriCustomerNumber],[InvoiceNumber],[AmountOfLastBill],[Payment1],[TotalCredits]
		,[TotalLatePaymentCharges],[BalForward],[ProductCharges],[MiscCharges],[LocalTaxAmount],[FederalTaxAmount],[TotalCurrent]
		,[BalanceForward],[InvoiceDate],[DueDate],[CurrencyID],[WholesalerID],[TotalFreeCredits],[Wholesaler_ProductID],[BPayCustomerRefNumber])
		--Just add everything together as some amounts will be returned as neg. ie. payments, credits, free credits
		SELECT @PeriodStartDate,@PeriodEndDate,DT.CustomerID,DT.PriCustomerNumber,DT.InvoiceNumber,DT.PreviousBalance,DT.TotalPayments,
		DT.TotalCredits, DT.TotalLatePaymentCharges,
		(DT.PreviousBalance + DT.TotalPayments + DT.TotalLatePaymentCharges + DT.TotalCredits) AS BalForward, --BalForward
		DT.TotalProductCharges, DT.TotalMiscCharges, DT.TotalLocalTaxAmount, DT.TotalFederalTaxAmount, --All new charges
		(DT.TotalProductCharges + DT.TotalMiscCharges + DT.TotalFederalTaxAmount + DT.TotalLocalTaxAmount) AS TotalCurrent , --TotalCurrent
		(DT.PreviousBalance + DT.TotalProductCharges + DT.TotalMiscCharges + DT.TotalFederalTaxAmount + DT.TotalLocalTaxAmount 
			+ DT.TotalPayments + DT.TotalLatePaymentCharges + DT.TotalCredits) AS BalanceForward, --BalanceForward, minus TotalFreeCredits (neg.)
		@PeriodEndDate,DATEADD(mm,1,@PeriodEndDate), --DUEDATE
		DT.CurrencyID,@WholesalerID,DT.TotalFreeCredits,DT.Wholesaler_ProductID,DT.BPayCustomerRefNumber
		FROM	
			--DERIVED TABLE
			(SELECT C1.ID AS CustomerID, C1.PriCustomerNumber,
				(	--INVOICE NUMBERS TO NEW FORMAT: <PriCustomerNumber,10><PeriodEndDate,6> MMDDYYYY e.g. 1000000000 043008
					SELECT C1.PriCustomerNumber + dbo.fn_FormatDate(@PeriodEndDate,'mmddyy') 
				) AS InvoiceNumber,
				(
					SELECT PrevBal FROM PrevInvoices WHERE CustomerID = C1.ID AND WholesalerID = @WholesalerID
				) AS PreviousBalance,
				(ISNULL	(
					(SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal 
					FROM CustomerTransaction WHERE CustomerTransactionTypeID = 4 --4 Payment
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalPayments, --Returns Neg number
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal 
					FROM CustomerTransaction
						/*
						NOTE: Incl. All Misc. Credit items and the applicable tax. NO FREE CONF CREDITS. Thus TransactionTotal is used as it includes tax amounts.
						ID	Name
						3	Non-Taxable Credit
						5	Payment Reversal
						7	Pre-Tax Credit
						9	Tax Credit - NRA --DON'T INCLUDE THIS WHEN EXPORTING TO QUICKBOOKS AS IT IS USED TO MOVE MONEY AROUND W/O IMPACTING EXT. ACCOUNTING SYSTEMS
						*/
					WHERE CustomerTransactionTypeID IN (3,5,7,9)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalCredits, --Returns Neg number
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal
					FROM CustomerTransaction
					WHERE CustomerTransactionTypeID = 10	--10	Interest Charge
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalLatePaymentCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount
					FROM CustomerTransaction
					/*
					NOTE: Incl. all new product/service charges for the billing period, No tax incl. thus TransactionAmount 
					ID	Name
					1	Product Bridge Charge
					12	Product LD Charge
					11	Free Conferencing Credit, need to add this as these items are removed from Customer's Balance
					*/ 
					WHERE CustomerTransactionTypeID IN (1,11,12)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalProductCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount 
					FROM CustomerTransaction
						/*
						NOTE: Incl. all other misc. charges items. No tax incl. thus TransactionAmount
						ID	Name
						2	Non-Taxable Charge
						6	Pre-Tax Charge
						8	Tax Charge - NRA DON'T INCLUDE THIS WHEN EXPORTING TO QUICKBOOKS AS IT IS USED TO MOVE MONEY AROUND W/O IMPACTING EXT. ACCOUNTING SYSTEMS
						*/
					WHERE CustomerTransactionTypeID IN (2,6,8)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
						)
					,0.00)
				) AS TotalMiscCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(LocalTaxAmount), 0.00),2) AS LocalTaxAmount 
					FROM CustomerTransaction
					/*
					NOTE: Taxes for the new charges and misc charges. Tax amounts are in one of the columns per transaction so need to total these. 
					Basically, the types are the ones used for TotalProductCharges and TotalMiscCharges.
					*/
					WHERE CustomerTransactionTypeID IN (1,11,12,2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalLocalTaxAmount,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(FederalTaxAmount), 0.00),2) AS FederalTaxAmount 
					FROM CustomerTransaction
					/*
					NOTE: Taxes for the new charges and misc charges. Tax amounts are in one of the columns per transaction so need to total these. 
					Basically, the types are the ones used for TotalProductCharges and TotalMiscCharges.
					*/
					WHERE CustomerTransactionTypeID IN (1,12,2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalFederalTaxAmount,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount 
					FROM CustomerTransaction
						/*
						NOTE: Only Free Conf Credits. NO TAX INCLUDED.
						11	Free Conferencing Credit
						*/
					WHERE CustomerTransactionTypeID IN (11)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalFreeCredits, --Returns Neg number
				(
				SELECT MIN(Wholesaler_ProductID) AS Wholesaler_ProductID 
				FROM CustomerTransaction
				WHERE CustomerTransactionTypeID IN (11)
				AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
				GROUP BY CustomerID
				) AS Wholesaler_ProductID, -- Which WS'er Product had the free Credit
				(	--BPAY Customer Reference Number <PriCustomerNumber,10><BPayDigit,1 or 2> e.g. 1000000000 1 
					SELECT C1.PriCustomerNumber + CAST(dbo.fn_Modulus10(CAST(C1.PriCustomerNumber AS BigInt)) AS varchar(4))
				) AS BPayCustomerRefNumber,
				C1.CurrencyID 
			FROM Customer C1
			WHERE C1.WholesalerID = @WholesalerID AND C1.BillingPeriodCutoff = @BillingPeriodCutoff) AS DT 
			IF (@@ERROR <> 0)
				GOTO RollBackTrans

			-- UPDATE THE Previous Balanced in the PREVIOUS INVOICES TABLE
			UPDATE PrevInvoices
			SET PrevBal = INV.BalanceForward, PrevPerStart = @PeriodStartDate, PrevPerEnd = @PeriodEndDate
			FROM PrevInvoices INNER JOIN InvoiceSummary INV ON PrevInvoices.CustomerID = INV.CustomerID AND PrevInvoices.WholesalerID = INV.WholesalerID
			WHERE INV.WholesalerID = @WholesalerID AND INV.StartDate = @PeriodStartDate
			IF (@@ERROR <> 0)
				GOTO RollBackTrans
		
		--POST Monthly Charges items, basically a copy of the Cust. Trans table for unposted items
			INSERT INTO InvoiceCharges
			([StartDate],[EndDate],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID]
			,[TransactionDescription],[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount]
			,[TransactionTotal],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber]
			,[UniqueConferenceID],[ElapsedTimeSeconds])
			SELECT @PeriodStartDate,@PeriodEndDate,[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID]
			,[TransactionDescription],[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount]
			,[TransactionTotal],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber]
			,[UniqueConferenceID],[ElapsedTimeSeconds]
			FROM CustomerTransaction
			WHERE CustomerTransactionTypeID IN (1,12,2,6,10,3,5,7,11,4) --specific as a double check, NO 8 and 9 --DON'T INCLUDE THESE AS IT IS USED TO MOVE MONEY AROUND W/O IMPACTING EXT. ACCOUNTING SYSTEMS
			AND PostedToInvoice = 0 AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE 
			IF (@@ERROR <> 0)
				GOTO RollBackTrans

			-- Mark items as Invoiced by updating the Customer Transaction table
			UPDATE CustomerTransaction
			SET PostedToInvoice = 1, PostedToInvoiceDate = @TempPostedDate
			FROM CustomerTransaction
			WHERE CustomerTransactionTypeID IN (1,12,2,6,8,10,3,5,7,9,11,4) --specific as a double check, 8 and 9 ok as we wanted to just mark them as processed
			AND PostedToInvoice = 0 AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE 
			IF (@@ERROR <> 0)
				GOTO RollBackTrans

GOTO CommitTrans
	
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
PRINT 'ERROR OCCURRED PROCESSING: '--	+ @PriCustomerNumber
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
--*/

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_BulkEditsPreview"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: To preview the Customers to be affected by the Bulk Edits screen. 
Parameters:
- @BulkEditType - 1 = All Customers and Moderators, 2 = Wholesaler Only, 3 = Wholesaler and All Customers

- @BulkEditType - 1 = All Moderators (Moderator), 2 = All Billing Contacts (Customer), 3 = All Mods & Contacts (both tables)
- @CustomerID - Effect all BulkEditTypes where they match this CustomerID
- @CompanyID - CompanyID entered, Effect all BulkEditTypes where they match this Company ID
- @SalesPersonID - SalesPersonID entered, Effect all BulkEditTypes where they match this SalesPersonID
- @WholesalerID - Used to limit the affected records to the current Wholesaler
NOTES:
- Both CompanyID and SalesPersonID can be passed in. If both are passed in then they are 
	AND'ed together
- CompanyID and SalesPersonID, take precedence over passing in an Customer number.
Date: Mon Apr 19 13:07:45 2004
Author: Leo Romano
Company: Enunciate Inc.
*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@BulkEditType" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

IF (@CompanyID is NOT null) OR (@SalesPersonID is NOT null)
BEGIN
	IF @BulkEditType = 1 OR @BulkEditType = 3 
    BEGIN
		--Customers
		SELECT
		Customer.ID,
		Customer.PriCustomerNumber,
		Customer.WholesalerID,
		RTRIM(Customer.Description) AS Description,
		Customer.PrimaryContactName,
		Customer.CompanyID,
		Company.Description AS CompanyName,
		'Enabled' = case when Customer.Enabled = 1 then 'Active' else 'Disabled' end
		FROM Customer (NOLOCK) INNER JOIN Company ON Customer.CompanyID = Company.ID
		WHERE
		(@WholesalerID is null or Customer.WholesalerID = @WholesalerID) AND 
		(@CompanyID is null or Customer.CompanyID = @CompanyID)
		AND (@SalesPersonID is null or Customer.SalesPersonID = @SalesPersonID)
		ORDER BY CompanyID, Customer.PrimaryContactName ASC
		-- Moderators
		SELECT     Moderator.ID AS ModeratorID, Moderator.CustomerID, Moderator.Description, Department.Name AS Department, U.UserName, 
			'Enabled' = case when Moderator.Enabled = 1 then 'Active' else 'Disabled' end
		FROM         Moderator (NOLOCK) INNER JOIN
			Department (NOLOCK) ON Moderator.DepartmentID = Department.ID INNER JOIN
			Customer (NOLOCK) ON Moderator.CustomerID = Customer.ID INNER JOIN [User] U ON Moderator.UserID = U.UserID
		WHERE --Needs to be the same as the query above
		(@WholesalerID is null or Customer.WholesalerID = @WholesalerID) AND 
		(@CompanyID is null or Customer.CompanyID = @CompanyID)
		AND (@SalesPersonID is null or Customer.SalesPersonID = @SalesPersonID)
		ORDER BY U.UserName ASC
	END
	RETURN --Don't process any more
END
-- CustomerID Passed in

IF (@CustomerID is NOT null)
BEGIN
	IF @BulkEditType = 1 OR @BulkEditType = 3 
    BEGIN
		--Customers
		SELECT
		Customer.ID,
		Customer.PriCustomerNumber,
		Customer.WholesalerID,
		RTRIM(Customer.Description) AS Description,
		Customer.PrimaryContactName,
		Customer.CompanyID,
		Company.Description AS CompanyName,
		'Enabled' = case when Customer.Enabled = 1 then 'Active' else 'Disabled' end
		FROM Customer (NOLOCK) INNER JOIN Company ON Customer.CompanyID = Company.ID
		WHERE
		(@WholesalerID is null or Customer.WholesalerID = @WholesalerID) AND 
		(Customer.ID = @CustomerID)
		ORDER BY CompanyID, Customer.PrimaryContactName ASC

		-- Moderators
		SELECT     Moderator.ID AS ModeratorID, Moderator.CustomerID, Moderator.Description, Department.Name AS Department, U.UserName, 
			'Enabled' = case when Moderator.Enabled = 1 then 'Active' else 'Disabled' end
		FROM         Moderator (NOLOCK) INNER JOIN
			Department (NOLOCK) ON Moderator.DepartmentID = Department.ID INNER JOIN [User] U ON Moderator.UserID = U.UserID
		WHERE --Needs to be the same as the query above
		(@WholesalerID is null or Moderator.WholesalerID = @WholesalerID) AND 
		(Moderator.CustomerID = @CustomerID)
		ORDER BY U.UserName ASC
	END
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_BACKUP_INVOICING_TABLES"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Backup the tables used for Invoicing prior to running the invoice run.
- Added the clearing of the [BAK_CustomerTransactionImportRepost] which is filled only if a Billing Run is 
	rolled back, then the transacations added since the last billing run as added back in

Uses the RAWCDRS database to reduce future excessive Prduction DB size as Invoices will remain
online.

Parameters:	

EXAMPLES: 
	EXEC [p_UTIL_INV_BACKUP_INVOICING_TABLES]
*****************************************************************************/
]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				

TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_CustomerTransactionImport]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_CustomerTransaction]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_InvoiceCharges]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_InvoiceSummary]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_PrevInvoices]
--Added Commission Tables
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_Commission]
TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_CommissionCustomer]

INSERT INTO [RAWCDRS].[dbo].[BAK_CustomerTransactionImport]
SELECT * FROM [CustomerTransactionImport]

INSERT INTO [RAWCDRS].[dbo].[BAK_CustomerTransaction]
SELECT * FROM [CustomerTransaction]

INSERT INTO [RAWCDRS].[dbo].[BAK_InvoiceCharges]
SELECT * FROM [InvoiceCharges]

INSERT INTO [RAWCDRS].[dbo].[BAK_InvoiceSummary]
SELECT * FROM [InvoiceSummary]

INSERT INTO [RAWCDRS].[dbo].[BAK_PrevInvoices]
SELECT * FROM [PrevInvoices]

--Added Commission Tables
INSERT INTO [RAWCDRS].[dbo].[BAK_Commission]
SELECT * FROM [Commission]

INSERT INTO [RAWCDRS].[dbo].[BAK_CommissionCustomer]
SELECT * FROM [CommissionCustomer]


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_BulkEditProductRates"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: To update the RETAIL Product Rates for items selected by the Bulk Edits screen. 
Parameters:
- @ProductRateID - The ProductRateID of the ProductRateValue
- @SellRate - The sell/retail rate.
- @BulkEditType - 1 = All Customers, 2 = Wholesaler Only, 3 = Wholesaler and All Customers
- @CustomerID - Effect all BulkEditTypes where they match this CustomerID
- @CompanyID - CompanyID entered, Effect all BulkEditTypes where they match this Company ID
- @SalesPersonID - SalesPersonID entered, Effect all BulkEditTypes where they match this SalesPersonID
- @WholesalerID - Used to limit the affected records to the current Wholesaler
- @CurrencyID - Used to limit the affected records to the correct currency

NOTES:
- Both CompanyID and SalesPersonID can be passed in. If both are passed in then they are AND'ed together
- CompanyID and SalesPersonID, Only affect Customer rates and not the Wholesaler's rates and they take precedence over passing in a Customer number.
- Sept/2013 - Added CurrencyID so just the correct currency items are updated.

Examples:
	--Update Specific Customer Only, SellRates
	EXEC p_UTIL_BulkEditProductRates @ProductRateID = 1, @SellRate = 0.20, @BulkEditType = 1, @CustomerID = 14
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'NZD'

	--Update All Customers Only but not WS'er, SellRates
	EXEC p_UTIL_BulkEditProductRates @ProductRateID = 1, @SellRate = 0.21, @BulkEditType = 1, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'NZD'

	--Update WS Only, SellRates
	EXEC p_UTIL_BulkEditProductRates @ProductRateID = 1, @SellRate = 0.22, @BulkEditType = 2, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'NZD'

	--Update WS and All Customers, SellRates
	EXEC p_UTIL_BulkEditProductRates @ProductRateID = 1, @SellRate = 0.23, @BulkEditType = 3, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'NZD'

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ProductRateID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="0" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BulkEditType" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CurrencyID" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


BEGIN TRANSACTION

IF (@CompanyID is NOT null) OR (@SalesPersonID is NOT null)
BEGIN
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer
    BEGIN
		--Updates all Customers Product Rates
		UPDATE    ProductRateValue
		SET              SellRate = @SellRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
					Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE	(ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (@CompanyID IS NULL OR Customer.CompanyID = @CompanyID) --optional item passed in
			AND (@SalesPersonID IS NULL OR Customer.SalesPersonID = @SalesPersonID) --optional item passed in
			AND (ProductRateValue.DefaultOption = 0) --not the default rates
			AND (ProductRateValue.SellRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 1 -- Retail Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
END

-- ************** CustomerID Passed in *****************
IF (@CustomerID is NOT null)
BEGIN
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer
    	BEGIN
		UPDATE    ProductRateValue
		SET              SellRate = @SellRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
					Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE	(ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (@CompanyID IS NULL OR Customer.CompanyID = @CompanyID) --optional item passed in
			AND (@SalesPersonID IS NULL OR Customer.SalesPersonID = @SalesPersonID) --optional item passed in
			AND (ProductRateValue.DefaultOption = 0) --not the default rates
			AND (ProductRateValue.SellRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 1 -- Retail Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
END

--WHOLESALER UPDATES
IF (@BulkEditType = 2 OR @BulkEditType = 3)
BEGIN
		UPDATE    ProductRateValue
		SET              SellRate = @SellRate
		FROM         ProductRateValue (NOLOCK) 
		WHERE     (ProductRateValue.ProductRateID = @ProductRateID) AND (ProductRateValue.WholesalerID = @WholesalerID) 
			AND (ProductRateValue.CustomerID IS NULL) AND (ProductRateValue.DefaultOption = 0)
			AND (ProductRateValue.SellRateCurrencyID = @CurrencyID) --Currency Filter
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
END

-- Update All Customers associated with Wholesaler, don't want to overlap CustomerID passed in scenario
IF (@BulkEditType = 3 OR (@BulkEditType = 1 AND @CustomerID IS NULL))
BEGIN
		-- Customer
		UPDATE    ProductRateValue
		SET              SellRate = @SellRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
					Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE     (ProductRateValue.ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (ProductRateValue.DefaultOption = 0)
			AND (ProductRateValue.SellRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 1 -- Retail Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
END


GOTO CommitTrans

RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION

END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_Mark_BillableCDRSStart"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: Used during the INVOICE RUN to mark the CDRS for the specific Customer, based on their BillingPeriodCut settings
and the date range passed in, as ready for billing. This done by setting the BillingStatus = 1.

NOTE: After the Invoicing is Done, Run [p_UTIL_INV_Mark_BillableCDRSEnd] to set the BillingStatus = 2 to complete the process. 

Examples: 	
	-- ALL RECORDS FROM 1 to 31, for a specific WS, and all Customer's with a BillingPeriodCutOff = 31 (used for different invoice runs)
	EXEC [p_UTIL_INV_Mark_BillableCDRSStart] 'may 1 2009', 'jun 1 2009','0000000001',31 

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutOff" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


BEGIN TRANSACTION
	--Tag the Missed CDRs from the past
	UPDATE RatedCDR SET BilledDate = @StartDate, BillingStatus = 1 
--Select * from ratedCDR
	WHERE (BillingStatus < 2 OR BillingStatus IS NULL) AND BilledDate IS NULL 
	AND (StartTime < @StartDate) --Less then @StartDate as the Next SQL will get the current items
		AND WholesalerID = @WholesalerID --specific Wholesaler
		--Specific Billing Period Customers
		AND ModeratorID IN 
			(Select M.ID FROM Moderator M INNER JOIN Customer C ON C.ID = M.CustomerID
			WHERE C.WholesalerID = @WholesalerID AND C.BillingPeriodCutOff = @BillingPeriodCutOff)
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	--Tag current CDRs for Billing
	UPDATE RatedCDR SET BilledDate = @StartDate, BillingStatus = 1 
--Select * from ratedCDR
	WHERE (BillingStatus < 2 OR BillingStatus is null) AND (StartTime BETWEEN @StartDate AND @EndDate) --Specific Date range
		AND WholesalerID = @WholesalerID --specific Wholesaler
		--Specific Billing Period Customers
		AND ModeratorID IN 
			(Select M.ID FROM Moderator M INNER JOIN Customer C ON C.ID = M.CustomerID
			WHERE C.WholesalerID = @WholesalerID AND C.BillingPeriodCutOff = @BillingPeriodCutOff)
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
	RAISERROR ('Billing Run Error: [p_UTIL_INV_Mark_BillableCDRSStart] had an error. Please signout and login to try your request again. 
		If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_Accounting_ExportInvoicesXERO"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns the Invoice charges in the format for XERO  system importing

MOD JS: July 23/2014 - added Sales Person Name to "Tracking Name 2" to export file

CHANGELOG
2014/10/02 | Topo	| ADD | Add Video Bridge Rate

After speaking with Vesna, there is a different, easier format, for XERO so lets use that.
Just a couple of questions as I look over this information:
1.	Do you want the other customer fields such as: EmailAddress, POAddressLine1, etc. filled out also? Would be great if you could include – billing contacts 
a.	If so then just let me know what type of information Xero expects in the “POCountry” field e.g. Long Name: Australia or ISO Country Code. 
A:- Australia

b.	Also, for the email address, should it be the “billing contacts” email? I would assume so but just want to confirm this. 
A:- Yes Billing Contacts

2.	For each item, can items repeat and have a “Quantity” set to 1 or do they need to be combined together and the Quantity sum’ed together? 
A:- Quantity will always = 1, so if you can have this set it would be perfect.

3.	For “credits” should the values be given as negative values or is there another way to denote credits? 
A:-Credits should be negative.

4.	Can you give me more information on the “AccountCode” field as maybe we can add something into the system to fill out this information for you. 
A:- All old ‘conferencing’ are account code 41000 – so all listed charges should be 41000
	All old ‘misc charges’ are 42000 – so all misc charges now listed separately should be 42000


Select top 1000 * from InvoiceSummary where totalcredits <> 0
Select top 100 * from InvoiceCharges IC inner join productrate PR on IC.ProductRateID = PR.ID WHERE PR.RatingTypeID = 4 -- Misc. charges
Select top 100 * from InvoiceCharges where customertransactionTypeID = 7 and StartDate = 'dec 1 2012'
Select top 100 * from CustomerTransactionType
Select top 100 * from ProductRate

update Company set description = replace(description, char(9), '')
update Customer set BillingContactPostalCode = replace(BillingContactPostalCode, char(9), '')
update Customer set BillingContactEmailAddress = replace(BillingContactEmailAddress, char(9), '')
update Customer set BillingContactAddress1 = replace(BillingContactAddress1, char(9), '')


Select * from Company where description like '%' + char(9) +'%'

EXAMPLES:
	EXEC [p_UTIL_Accounting_ExportInvoicesXERO] '0000000001','jun 1 2013'
****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
--Xero Option	ContactName	EmailAddress	POAddressLine1	POAddressLine2	POAddressLine3	POAddressLine4	POCity	PORegion	POPostalCode	POCountry	InvoiceNumber	Reference	InvoiceDate	DueDate
--	SubTotal	TotalTax	Total	Description	Quantity	UnitAmount	Discount	AccountCode	TaxType	TaxAmount	TrackingName1	TrackingOption1	TrackingName2	TrackingOption2

SELECT '' AS [Xero Option], LTRIM(RTRIM(dbo.Company.Description)) AS ContactName, dbo.Customer.BillingContactEmailAddress AS EmailAddress
	, '"' + dbo.Customer.BillingContactAddress1 +'"' AS POAddressLine1, ISNULL('"' + dbo.Customer.BillingContactAddress2 +'"','') AS POAddressLine2, '' AS POAddressLine3, '' AS POAddressLine4
	, '"' + dbo.Customer.BillingContactCity +'"' AS POCity, dbo.Customer.BillingContactRegion AS PORegion, '"' + dbo.Customer.BillingContactPostalCode  +'"' AS POPostalCode
	, dbo.fn_GetCountryLongNameByID(dbo.Customer.BillingContactCountry) AS POCountry, dbo.InvoiceSummary.InvoiceNumber, dbo.InvoiceSummary.BPayCustomerRefNumber AS Reference
	, dbo.InvoiceSummary.InvoiceDate, dbo.InvoiceSummary.DueDate, '' AS SubTotal,'' AS TotalTax,'' AS Total
	,T1.Description AS Description, 1 AS Quantity,T1.TransactionAmount AS UnitAmount,'' AS Discount
	,(CASE WHEN T1.CustomerTransactionTypeID = 6 THEN '42000' ELSE '41000' END) AS AccountCode,'GST on Income' AS TaxType,
	'' AS TaxAmount,'' AS TrackingName1,'' AS TrackingOption1, SalesPerson.FullName AS TrackingName2,'' AS TrackingOption2
FROM         dbo.Customer INNER JOIN
	dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID INNER JOIN
	  (SELECT   IC.StartDate, IC.CustomerID, IC.PriCustomerNumber, IC.CustomerTransactionTypeID, SUM(IC.TransactionAmount) AS TransactionAmount
		,(CASE 
			WHEN PR.DisplayName = 'Video Bridge Rate' THEN 5
			WHEN IC.CustomerTransactionTypeID = 11 THEN 4
			WHEN PR.DisplayName = 'Bridge Rate' THEN 1 
			WHEN PR.DisplayName = 'Web Bridge Rate' THEN 2 
			WHEN PR.DisplayName = 'Long Distance' THEN 3 
			ELSE 6 END) AS DisplayOrder
		,(CASE WHEN IC.CustomerTransactionTypeID = 11 THEN dbo.CustomerTransactionType.DisplayName
			WHEN PR.DisplayName IS NULL THEN dbo.CustomerTransactionType.DisplayName 
			WHEN PR.DisplayName = 'Bridge Rate' THEN 'Teleconferencing' 
			WHEN PR.DisplayName = 'Video Bridge Rate' THEN 'Videoconferencing' 
			WHEN PR.DisplayName = 'Web Bridge Rate' THEN 'Web Conferencing' ELSE PR.DisplayName END) AS Description, dbo.CustomerTransactionType.DisplayName
		FROM          dbo.InvoiceCharges AS IC INNER JOIN
							   dbo.CustomerTransactionType ON IC.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
							   dbo.ProductRate AS PR ON IC.ProductRateID = PR.ID
		GROUP BY IC.CustomerID, IC.PriCustomerNumber, IC.CustomerTransactionTypeID, PR.DisplayName, dbo.CustomerTransactionType.DisplayName, 
							   IC.StartDate
		HAVING      (IC.StartDate = @InvoiceDate) AND (NOT (IC.CustomerTransactionTypeID IN (4,5,8,9)))
		) AS T1 ON 
	dbo.Customer.ID = T1.CustomerID INNER JOIN
	dbo.InvoiceSummary ON T1.StartDate = dbo.InvoiceSummary.StartDate AND T1.CustomerID = dbo.InvoiceSummary.CustomerID
	--Add Sales Person
	INNER JOIN SalesPerson ON SalesPerson.ID = Customer.SalesPersonID
WHERE Customer.WholesalerID = @WholesalerID
--REMOVE Customers that shouldn't Effect Revenue
	AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
ORDER BY  LTRIM(RTRIM(dbo.Company.Description)), T1.DisplayOrder, T1.Description
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_Accounting_ExportCreditMemos"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns Quickbooks Credit Memo's in IIF format
NOTE: This looks at the Customer's Transactions for a given invoice period and uses that information.
Credit are stored as negative numbers so watch for this.

NOTEs: 
	DOCNUM = InvoiceNumber
	MEMO = Customer PriNumber + Desciption

-- SAMPLE OUTPUT
!TRNS	TRNSID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	NAMEISTAXABLE	ADDR1	ADDR2	ADDR3	ADDR4	DUEDATE	TERMS	PAID
!SPL	SPLID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	PRICE	INVITEM	PAYMETH	TAXABLE	VALADJ	TAXCODE	TAXAMOUNT	TAXITEM
!ENDTRNS																
TRNS	4	CREDIT MEMO	04/30/10	Accounts Receivable	"- Redback Internal Use"	-2822.51	9900000103108	9900000						05/30/10		
SPL	5	CREDIT MEMO	04/30/10	Conferencing	"- Redback Internal Use"	2565.92			2565.92	Conferencing		Y		GST	256.59	GST
ENDTRNS																

EXAMPLES:
	EXEC [p_UTIL_Accounting_ExportCreditMemos] '0000000001','nov 1 2009'

****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @ARAcctName varchar(50),@ConfAcctName varchar(50),@MiscAcctName varchar(50),
@GSTAcctName varchar(50),@GSTClassName varchar(50)-- special name for GST acct.
,@TransTypeName varchar(50)
--Variables for Cursor
, @CustomerID int, @TransDate varchar(50), @TransactionAmount Decimal(9,2)
, @CompanyName varchar(100),@InvoiceNumber varchar(50),@Memo varchar(100)
, @CustomerTransactionID int, @GSTAmount Decimal(9,2),@DueDate varchar(50)

SET @ARAcctName = 'Accounts Receivable'
SET @ConfAcctName = 'Conferencing'
SET @MiscAcctName = 'Other Income'
SET @GSTAcctName = 'GST'
SET @GSTClassName = 'Receiver General'
SET @TransTypeName = 'CREDIT MEMO'

--Table matches the IIF standard for Invoices for Columns in row #1 but has the same number of colums for both rows
-- This is critical as the logic builds the individual rows one at a time so needs the same number of columns.
-- In other words, the Temp Table column names could be anything but just used the name from the first column
--DROP TABLE #TempCreditExport
	CREATE TABLE #TempCreditExport (
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[TRNS] varchar(50),
		[TRNSID] varchar(50),
		[TRNSTYPE] varchar(50),
		[DATE] varchar(50), --Transaction Date
		[ACCNT] varchar(50), --QB Account Name
		[NAME] varchar(200), --Company Name, can only be 41 chars
		[AMOUNT] varchar(50), --Full Trans. Amt
		DOCNUM varchar(50), --Invoice Number
		MEMO varchar(100), --Just text fill of item
		NAMEISTAXABLE varchar(50), -- Y or N if the customer is taxable or not
		ADDR1 varchar(50), --
		ADDR2 varchar(50), --
		ADDR3 varchar(50), --
		ADDR4 varchar(50), --
		DUEDATE varchar(50), -- Invoice due date
		TERMS varchar(50), -- 
		PAID varchar(50) --
	) ON [PRIMARY]

--1st row
	INSERT INTO #TempCreditExport
	SELECT '!TRNS','TRNSID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','NAMEISTAXABLE','ADDR1','ADDR2','ADDR3','ADDR4','DUEDATE','TERMS','PAID'
--2nd row
	INSERT INTO #TempCreditExport
	SELECT '!SPL','SPLID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','PRICE','INVITEM','PAYMETH','TAXABLE','VALADJ','TAXCODE','TAXAMOUNT','TAXITEM'
--3nd row
	INSERT INTO #TempCreditExport
	SELECT '!ENDTRNS','','','','','','','','','','','','','','','',''

/* Debugging:

Select * from customertransaction where PostedToInvoiceDate = 'nov 1 2009' and CustomerTransactionTypeID IN (3,7) --Non-Taxable Credit, Pre-Tax Credit
select * from customertransactiontype

SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS TransactionDate
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
	, T1.LocalTaxAmount AS GSTAmount, dbo.fn_FormatDate(DueDate,'MM/DD/YY') AS DueDate
--	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = '0000000001' 
	AND T1.PostedToInvoiceDate = 'nov 1 2009' AND INV.StartDate = 'nov 1 2009'
	--ONLY CREDITS
	AND T1.CustomerTransactionTypeID IN (3,7) --Non-Taxable Credit, Pre-Tax Credit
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber

*/

DECLARE credit_cursor CURSOR FAST_FORWARD
FOR SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS TransactionDate
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
	, T1.LocalTaxAmount AS GSTAmount, dbo.fn_FormatDate(DueDate,'MM/DD/YY') AS DueDate
--	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = @WholesalerID
	AND T1.PostedToInvoiceDate = @InvoiceDate AND INV.StartDate = @InvoiceDate
	--ONLY CREDITS
	AND T1.CustomerTransactionTypeID IN (3,7) --Non-Taxable Credit, Pre-Tax Credit
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber
OPEN credit_cursor

FETCH NEXT FROM credit_cursor 
INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,@GSTAmount,@DueDate
	WHILE @@FETCH_STATUS = 0
	BEGIN
	-- Generate the different types of rows, Leave TRNSID, and SPLID blank
	--1st Row
	INSERT INTO #TempCreditExport
	SELECT 'TRNS','',@TransTypeName,@TransDate,@ARAcctName,@CompanyName,(@TransactionAmount + @GSTAmount),@InvoiceNumber,@Memo,'','','','','',@DueDate,'',''

	--2nd Row
	INSERT INTO #TempCreditExport
	SELECT 'SPL','',@TransTypeName,@TransDate,@ConfAcctName,@CompanyName,(@TransactionAmount * -1),'','',(@TransactionAmount * -1),@ConfAcctName,'',(CASE WHEN @GSTAmount = 0 THEN 'N' ELSE 'Y' END),'',@GSTAcctName,CAST(ROUND((@GSTAmount * -1),2) AS Decimal(9,2)),@GSTAcctName

	--End Row
	INSERT INTO #TempCreditExport
	SELECT 'ENDTRNS','','','','','','','','','','','','','','','',''


	FETCH NEXT FROM credit_cursor 
	INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,@GSTAmount,@DueDate

	END
CLOSE credit_cursor
DEALLOCATE credit_cursor

-- Clean up the data a bit
	UPDATE #TempCreditExport SET TRNSID = ID --REMOVED, [TIMESTAMP] = ID
	FROM #TempCreditExport WHERE TRNS = 'TRNS'

	UPDATE #TempCreditExport SET TRNSID = ID
	FROM #TempCreditExport WHERE TRNS = 'SPL'

SELECT [TRNS],[TRNSID],[TRNSTYPE] ,[DATE] ,[ACCNT] ,[NAME] ,[AMOUNT],DOCNUM,MEMO, NAMEISTAXABLE, ADDR1
	, ADDR2, ADDR3, ADDR4, DUEDATE, TERMS AS TERMS, PAID
FROM #TempCreditExport

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_GenerateInvoices"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Generates the Invoice Summary info for the customer invoices and fills the other invoice tables with data which is used
	to generate PDF or online invoices. Gets the ALL the monthly changes, payments, etc. (all types) AND post them to the correct tables of information for 
	Invoicing purposes. This is done prior to running the generation of the PDF invoices.
	The tables updated are:
		- PrevInvoices, InvoiceSummary, InvoiceCharges

History:
Jul 2009 - Updated to calculate one tax on whole invoice as per the Local Tax Rate
		
NOTE: 
1. This SP will process ALL records from the ENDDATE and less. Thus items posted in the future will be on the next billing cycle.
Used to 
EXAMPLES: 
	--Times adjusted, no need to pass in.
	EXEC [p_UTIL_INV_GenerateInvoices] 'jul 1 2009', 'aug 1 2009','0000000001',31

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@STARTDATE" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ENDDATE" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

-- Declare var's
	DECLARE @PeriodStartDate datetime, @PeriodEndDate datetime --12am dates for the start AND end period. Used so that all Period Dates are consistant.
	DECLARE @TempPostedDate datetime 
	--TEMP DATES USED TO DENOTE THE PERIOD START AND END DATE
	SET @PeriodStartDate = @STARTDATE --Midnight of the StartDate
	SET @PeriodEndDate = DATEADD(Day,-1,@ENDDATE) -- Midnight of the Last day of the billing period
	
	-- MAKE SURE BillingPeriodCutoff IS SET
	SET @BillingPeriodCutoff = ISNULL(@BillingPeriodCutoff,31)
	-- POST EVERYTHING AT THE SAME TIME TO MAKE IT EASIER TO FIND PROCEDURE RUNS
	SET @TempPostedDate = @STARTDATE 

	-- ADD ALL NEW ACCOUNTS TO THE PREVINVOICES TABLE WHICH STORES PREVBALANCES, THUS ENSURING ALL CUSTOMER HAVE A VALUE
	INSERT INTO PrevInvoices (WholesalerID,CustomerID,PrevBal,PrevPerStart,PrevPerEnd)
	SELECT WholesalerID, Customer.ID, 0.00, DATEADD(Month,-1,@PeriodStartDate),DATEADD(Month,-1,@PeriodEndDate)
	FROM   Customer WHERE ID NOT IN (SELECT CustomerID FROM PrevInvoices WHERE WholesalerID = @WholesalerID) 
	AND WholesalerID = @WholesalerID

BEGIN TRANSACTION

		--GENERATE THE INVOICE SUMMARY TABLE INFO
--/*
		INSERT INTO InvoiceSummary
		([StartDate],[EndDate],[CustomerID],[PriCustomerNumber],[InvoiceNumber],[AmountOfLastBill],[Payment1],[TotalCredits]
		,[TotalLatePaymentCharges],[BalForward],[ProductCharges],[MiscCharges],[LocalTaxAmount],[FederalTaxAmount],[TotalCurrent]
		,[BalanceForward],[InvoiceDate],[DueDate],[CurrencyID],[WholesalerID],[TotalFreeCredits],[Wholesaler_ProductID],[BPayCustomerRefNumber])
--*/
		--Just add everything together as some amounts will be returned as neg. ie. payments, credits, free credits
		SELECT @PeriodStartDate,@PeriodEndDate,DT.CustomerID,DT.PriCustomerNumber,DT.InvoiceNumber,DT.PreviousBalance,DT.TotalPayments,
		DT.TotalCredits, DT.TotalLatePaymentCharges,
	--BalForward
		(DT.PreviousBalance + DT.TotalPayments + DT.TotalLatePaymentCharges + DT.TotalCredits) AS BalForward, 
	--All new charges and tax calc
		DT.TotalProductCharges, DT.TotalMiscCharges
		--NEW CHANGES TO FORCE ONE TAX CALCULATION INSTEAD OF SUM OF EACH CONFERENCE OR ITEM
		,ROUND(((DT.TotalProductCharges + DT.TotalMiscCharges) * DT.LocalTaxRate),2) AS TotalLocalTaxAmount
		, DT.TotalFederalTaxAmount, 
	--TotalCurrent
		(DT.TotalProductCharges + DT.TotalMiscCharges + DT.TotalFederalTaxAmount + 
			ROUND(((DT.TotalProductCharges + DT.TotalMiscCharges) * DT.LocalTaxRate),2) --TotalLocalTaxAmount
		) AS TotalCurrent, 
	--BalanceForward, minus TotalFreeCredits (neg.)
		(DT.PreviousBalance + DT.TotalProductCharges + DT.TotalMiscCharges + DT.TotalFederalTaxAmount + 
			ROUND(((DT.TotalProductCharges + DT.TotalMiscCharges) * DT.LocalTaxRate),2) --TotalLocalTaxAmount
			+ DT.TotalPayments + DT.TotalLatePaymentCharges + DT.TotalCredits) AS BalanceForward,
	--DUEDATE		
		@PeriodEndDate,DATEADD(mm,1,@PeriodEndDate), 
	--OTHER INFO
		DT.CurrencyID,@WholesalerID,DT.TotalFreeCredits,DT.Wholesaler_ProductID,DT.BPayCustomerRefNumber
		FROM	
			--DERIVED TABLE
			(SELECT C1.ID AS CustomerID, C1.PriCustomerNumber,
				(	--INVOICE NUMBERS TO NEW FORMAT: <PriCustomerNumber,10><PeriodEndDate,6> MMDDYYYY e.g. 1000000000 043008
					SELECT C1.PriCustomerNumber + dbo.fn_FormatDate(@PeriodEndDate,'mmddyy') 
				) AS InvoiceNumber,
				(
					SELECT PrevBal FROM PrevInvoices WHERE CustomerID = C1.ID AND WholesalerID = @WholesalerID
				) AS PreviousBalance,
				(ISNULL	(
					(SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal 
					FROM CustomerTransaction WHERE CustomerTransactionTypeID = 4 --4 Payment
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalPayments, --Returns Neg number
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal 
					FROM CustomerTransaction
						/*
						NOTE: Incl. All Misc. Credit items and the applicable tax. NO FREE CONF CREDITS. Thus TransactionTotal is used as it includes tax amounts.
						ID	Name
						3	Non-Taxable Credit
						5	Payment Reversal
						7	Pre-Tax Credit
						9	Tax Credit - NRA DON'T INCLUDE THIS ON INVOICE OR QUICKBOOKS EXPORT AS IT IS USED TO MOVE MONEY AROUND WITH ADMIN SYSTEM
						*/
					WHERE CustomerTransactionTypeID IN (3,5,7)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalCredits, --Returns Neg number
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionTotal), 0.00),2) AS TransactionTotal
					FROM CustomerTransaction
					WHERE CustomerTransactionTypeID = 10	--10	Interest Charge
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalLatePaymentCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount
					FROM CustomerTransaction
					/*
					NOTE: Incl. all new product/service charges for the billing period, No tax incl. thus TransactionAmount 
					ID	Name
					1	Product Bridge Charge
					12	Product LD Charge
					11	Free Conferencing Credit, need to add this as these items are removed from Customer's Balance
					*/ 
					WHERE CustomerTransactionTypeID IN (1,11,12)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalProductCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount 
					FROM CustomerTransaction
						/*
						NOTE: Incl. all other misc. charges items. No tax incl. thus TransactionAmount
						ID	Name
						2	Non-Taxable Charge
						6	Pre-Tax Charge
						8	Tax Charge - NRA DON'T INCLUDE THIS ON INVOICE OR QUICKBOOKS EXPORT AS IT IS USED TO MOVE MONEY AROUND WITH ADMIN SYSTEM
						*/
					WHERE CustomerTransactionTypeID IN (2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
						)
					,0.00)
				) AS TotalMiscCharges,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(LocalTaxAmount), 0.00),2) AS LocalTaxAmount 
					FROM CustomerTransaction
					/*
					NOTE: Taxes for the new charges and misc charges. Tax amounts are in one of the columns per transaction so need to total these. 
					Basically, the types are the ones used for TotalProductCharges and TotalMiscCharges.
					*/
					WHERE CustomerTransactionTypeID IN (1,11,12,2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalLocalTaxAmount,
			-- Tax is 10% on the total for everything in AU so returning Tax amount to re-calculate tax as 
			--	doing it per conference is causing issues. Do it here before items copied to prevInvoices
				(ISNULL(
					(
					SELECT MAX(LocalTaxRate) AS LocalTaxRate 
					FROM CustomerTransaction
					/*
					NOTE: Taxes for the new charges and misc charges. Tax amounts are in one of the columns per transaction so need to total these. 
					Basically, the types are the ones used for TotalProductCharges and TotalMiscCharges.
					*/
					WHERE CustomerTransactionTypeID IN (1,11,12,2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.10)
				) AS LocalTaxRate,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(FederalTaxAmount), 0.00),2) AS FederalTaxAmount 
					FROM CustomerTransaction
					/*
					NOTE: Taxes for the new charges and misc charges. Tax amounts are in one of the columns per transaction so need to total these. 
					Basically, the types are the ones used for TotalProductCharges and TotalMiscCharges.
					*/
					WHERE CustomerTransactionTypeID IN (1,12,2,6)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID 
					)
					,0.00)
				) AS TotalFederalTaxAmount,
				(ISNULL(
					(
					SELECT ROUND(ISNULL(SUM(TransactionAmount), 0.00),2) AS TransactionAmount 
					FROM CustomerTransaction
						/*
						NOTE: Only Free Conf Credits. NO TAX INCLUDED.
						11	Free Conferencing Credit
						*/
					WHERE CustomerTransactionTypeID IN (11)
					AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
					GROUP BY CustomerID
					)
					,0.00)
				) AS TotalFreeCredits, --Returns Neg number
				(
				SELECT MIN(Wholesaler_ProductID) AS Wholesaler_ProductID 
				FROM CustomerTransaction
				WHERE CustomerTransactionTypeID IN (11)
				AND PostedToInvoice = 0 AND CustomerID = C1.ID AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE
				GROUP BY CustomerID
				) AS Wholesaler_ProductID, -- Which WS'er Product had the free Credit
				(	--BPAY Customer Reference Number <PriCustomerNumber,10><BPayDigit,1 or 2> e.g. 1000000000 1 
					SELECT C1.PriCustomerNumber + CAST(dbo.fn_Modulus10(CAST(C1.PriCustomerNumber AS BigInt)) AS varchar(4))
				) AS BPayCustomerRefNumber,
				C1.CurrencyID 
			FROM Customer C1
			WHERE C1.WholesalerID = @WholesalerID AND C1.BillingPeriodCutoff = @BillingPeriodCutoff) AS DT 
			IF (@@ERROR <> 0)
				GOTO RollBackTrans
--/*			
			-- UPDATE THE Previous Balanced in the PREVIOUS INVOICES TABLE
			UPDATE PrevInvoices
			SET PrevBal = INV.BalanceForward, PrevPerStart = @PeriodStartDate, PrevPerEnd = @PeriodEndDate
			FROM PrevInvoices INNER JOIN InvoiceSummary INV ON PrevInvoices.CustomerID = INV.CustomerID AND PrevInvoices.WholesalerID = INV.WholesalerID
			WHERE INV.WholesalerID = @WholesalerID AND INV.StartDate = @PeriodStartDate
			IF (@@ERROR <> 0)
				GOTO RollBackTrans
		
		--POST Monthly Charges items, basically a copy of the Cust. Trans table for unposted items
			INSERT INTO InvoiceCharges
			([StartDate],[EndDate],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID]
			,[TransactionDescription],[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount]
			,[TransactionTotal],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber]
			,[UniqueConferenceID],[ElapsedTimeSeconds])
			SELECT @PeriodStartDate,@PeriodEndDate,[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID]
			,[TransactionDescription],[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount]
			,[TransactionTotal],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber]
			,[UniqueConferenceID],[ElapsedTimeSeconds]
			FROM CustomerTransaction
			WHERE CustomerTransactionTypeID IN (1,12,2,6,10,3,5,7,11,4) --specific as a double check, NO 8 and 9 --DON'T INCLUDE THESE AS IT IS USED TO MOVE MONEY AROUND W/O IMPACTING EXT. ACCOUNTING SYSTEMS
			AND PostedToInvoice = 0 AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE 
			--Jan 30/2012 -- Don't post zero charges, these can be generated from the Billing of Recordings.
			AND TransactionAmount <> 0
			IF (@@ERROR <> 0)
				GOTO RollBackTrans

			-- Mark items as Invoiced by updating the Customer Transaction table
			UPDATE CustomerTransaction
			SET PostedToInvoice = 1, PostedToInvoiceDate = @TempPostedDate
			FROM CustomerTransaction
			WHERE CustomerTransactionTypeID IN (1,12,2,6,8,10,3,5,7,9,11,4) --specific as a double check, 8 and 9 ok as we wanted to just mark them as processed
			AND PostedToInvoice = 0 AND WholesalerID = @WholesalerID AND TransactionDate < @ENDDATE 
			IF (@@ERROR <> 0)
				GOTO RollBackTrans
--*/
GOTO CommitTrans
	
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
PRINT 'ERROR OCCURRED PROCESSING: '--	+ @PriCustomerNumber
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
--*/

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: 
	This SP adds new default Product SellRates that DON''T EXIST for either the
	Wholesaler, Customer or Moderators or All of them.
*****NOTE: The default setting is to update ALL entities.

NOTE: To change the Features or Products SellRates in a more granular fashion, use the BULK EDIT features of the ADMIN SITE and the SPs GetBulkEditsXXX, UpdateBulkEditsXXX

GOOD SQL TO KEEP AROUND:
	--Get the list of default rates with product info
	Select * 
	FROM         dbo.ProductRateValue INNER JOIN
						  dbo.ProductRate ON dbo.ProductRateValue.ProductRateID = dbo.ProductRate.ID INNER JOIN
						  dbo.ProductRateType ON dbo.ProductRate.ProductRateTypeID = dbo.ProductRateType.ID
	WHERE     DefaultOption = 1 --and productid = 1 --and productratetypeid = 3
	order by ProductRate.Name

Example:
EXEC p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll @WholesalerID='0000000001',@UpdateWholesaler = 1,@UpdateCustomer=1,@ProductID=NULL

--When a new Product is added to the Wholesaler
Select * from Product
-- EXEC p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll @WholesalerID='0000000001',@UpdateWholesaler = 1,@UpdateCustomer=1,@ProductID=4

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@UpdateWholesaler" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UpdateCustomer" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

/*
DEBUGGING AND TESTING -- New Product Scenario
	Select * from dbo.vw_ProductRatesForWholesaler where WholesalerID = '0000000001' and ProductID = 1
	Select * from [vw_DefaultProductRates] where ProductID = 1

DEBUGGING AND TESTING -- checking rates
	Select vw_ProductRatesForCustomer.CustomerID,vw_ProductRatesForCustomer.ProductRateValueID, * from dbo.vw_ProductRatesForCustomer where WholesalerID = '0000000001' and productrateid = 261 order by vw_ProductRatesForCustomer.customerid, vw_ProductRatesForCustomer.productratevalueid 
	Select * from dbo.vw_ProductRatesForWholesaler where WholesalerID = '0000000001'
	-- MAYBE HAVE MORE IF WS'ER DOES OFFER ALL PRODUCTS
	Select * from [vw_DefaultProductRates]

Select * from productratevalue where WholesalerID = '0000000001' order by id desc

DECLARE @WholesalerID varchar(10), @ProductID int
SET @WholesalerID = '0000000001'
--SET @ProductID = 1

*/


--CREATE TEMP TABLE TO HOLD NEW Product SellRate VALUES
--Drop Table #ProductRateValueTemp
Print 'CREATE TABLE #ProductRateValueTemp'
CREATE TABLE #ProductRateValueTemp (
	[ProductRateID] [int] NOT NULL ,
	[SellRate] [decimal](9, 4) NOT NULL ,
	[SellRateCurrencyID] [varchar](3) NOT NULL ,
	[BuyRate] [decimal](9, 4) NOT NULL ,
	[BuyRateCurrencyID] [varchar](3) NOT NULL ,
	[StartDate] [datetime] NULL ,
	[DefaultOption] [tinyint] NULL ,
	[WholesalerID] [char] (10) NULL 
)
IF @ProductID IS NULL --Existing Product
BEGIN
	Print 'Running Existing Product Section'
	INSERT INTO #ProductRateValueTemp
	SELECT ProductRateID, SellRate, SellRateCurrencyID, BuyRate, BuyRateCurrencyID, StartDate, 0 AS DefaultOption, WholesalerID
	FROM 
		(SELECT DISTINCT DPR.ProductRateID, DPR.SellRate, DPR.SellRateCurrencyID, DPR.BuyRate, DPR.BuyRateCurrencyID, DPR.StartDate
			, @WholesalerID AS WholesalerID
		FROM  dbo.vw_DefaultProductRates DPR (NOLOCK) CROSS JOIN
		            dbo.vw_ProductRatesForWholesaler (NOLOCK)
	--Returns where the Rates exist for the Products subscribed to by the WS'er
		WHERE NOT EXISTS
		                (SELECT *
		                FROM  vw_ProductRatesForWholesaler T1 (NOLOCK)
	--Add a check for the CurrencyID as Rates were not getting pushed down if they already existed in a different currency.
	-- USE SELL RATE AS RESELLER ALWAYS BUY IN SAME CURRENCY
		                WHERE DPR.ProductRateID = T1.ProductRateID AND DPR.SellRateCurrencyID = T1.ProductRateValueSellRateCurrencyID
			AND T1.WholesalerID COLLATE DATABASE_DEFAULT = @WholesalerID)
	--Matches the Product to the Rates that are missing above.
			AND EXISTS 
		                (SELECT *
		                FROM  vw_ProductRatesForWholesaler T1 (NOLOCK)
		                WHERE DPR.ProductID = T1.ProductID
			AND T1.WholesalerID COLLATE DATABASE_DEFAULT = @WholesalerID)
	--Speeds up CROSS JOIN. Did tests with Cross Joined removed and data returned is the same. No idea why the CRoss Join is used but left in just in case
		AND dbo.vw_ProductRatesForWholesaler.WholesalerID COLLATE DATABASE_DEFAULT = @WholesalerID
		) T1
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

END
ELSE --Newly added Product to WS'er = Load the rates for the WS'er/Product and push them down.
BEGIN
	Print 'Running Newly added Product already givent to Wholesaler Section'
	INSERT INTO #ProductRateValueTemp
	SELECT DISTINCT ProductRateID, ProductRateValueSellRate, ProductRateValueSellRateCurrencyID, ProductRateValueBuyRate, ProductRateValueBuyRateCurrencyID, ProductRateValueStartDate, 0 AS DefaultOption, WholesalerID
	FROM  dbo.vw_ProductRatesForWholesaler (NOLOCK)
	WHERE WholesalerID COLLATE DATABASE_DEFAULT = @WholesalerID COLLATE DATABASE_DEFAULT AND ProductID = @ProductID
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	--DON'T ADD TO WS'ER AGAIN
	SET @UpdateWholesaler = 0
END

BEGIN TRANSACTION
	IF @UpdateWholesaler = 1
	BEGIN
	-- Add Product Rates to Wholesaler
		INSERT INTO ProductRateValue
		SELECT ProductRateID, SellRate, SellRateCurrencyID, BuyRate, BuyRateCurrencyID, 0 AS DefaultOption, StartDate, WholesalerID, NULL AS CustomerID
		FROM #ProductRateValueTemp T1
		--Sept/2013 - added a check to not add if ProductRateID already exists
		WHERE NOT EXISTS 
			(SELECT * FROM ProductRateValue T2 WHERE T1.ProductRateID = T2.ProductRateID
				AND T1.WholesalerID COLLATE DATABASE_DEFAULT = T2.WholesalerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
	IF @UpdateCustomer = 1
	BEGIN
	-- Add Products to Customer
		INSERT INTO ProductRateValue
		SELECT ProductRateID, SellRate, SellRateCurrencyID, BuyRate, BuyRateCurrencyID, 0 AS DefaultOption, StartDate, WholesalerID, CustomerID
		FROM 
			(SELECT DISTINCT DSR.*, C.ID AS CustomerID
			FROM  #ProductRateValueTemp DSR INNER JOIN
			               dbo.Customer C (NOLOCK) ON DSR.SellRateCurrencyID COLLATE DATABASE_DEFAULT = C.CurrencyID COLLATE DATABASE_DEFAULT
			WHERE C.WholesalerID COLLATE DATABASE_DEFAULT = @WholesalerID
			) T1
		--Sept/2013 - added a check to not add if ProductRateID already exists
		WHERE NOT EXISTS 
			(SELECT * FROM ProductRateValue T2 WHERE T1.ProductRateID = T2.ProductRateID
				AND T1.CustomerID = T2.CustomerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
	
GOTO CommitTrans
RollBackTrans:
PRINT 'Rolled back Transaction: ' + @@ERROR
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_PopulateModeratorXTimeUser"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Populates the ModeratorXTimeUser table

EXAMPLES:
	EXEC p_UTIL_PopulateModeratorXTimeUser

--truncate table ModeratorXTimeUser
Select * from ModeratorXTimeUser order by FirstCallDate desc

*****************************************************************************/
]]></comment>
			<parameters>
			</parameters>
			<body><![CDATA[
				

--DROP TABLE #TempModeratorIDs
CREATE TABLE #TempModeratorIDs
	([ID] int,
	CONSTRAINT [TempModeratorIDs_PK] PRIMARY KEY  CLUSTERED 
	(
		[ID]
	)  ON [PRIMARY])

-- Used to increase performance by only looking at newer Moderators
INSERT #TempModeratorIDs
SELECT Distinct ModeratorID FROM RatedCDR --WHERE ConferenceStartTime > DateAdd(dd,-38,GetDate())

-- Add missing ModeratorIDs to the ModeratorXTimeUser table first.
INSERT ModeratorXTimeUser (ModeratorID)
	SELECT ID
	FROM Moderator
	WHERE	ID NOT IN (SELECT ModeratorID FROM ModeratorXTimeUser)

-- Try filling in the FirstCallDate field where it is null
UPDATE ModeratorXTimeUser
SET	FirstCallDate = ConferenceStartTimeX
FROM	(
	SELECT dt.ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTimeX FROM 
		(SELECT BridgeID, UniqueConferenceID, ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTime
		FROM RatedCDR GROUP BY BridgeID, UniqueConferenceID, ModeratorID HAVING Count(*) >= 2)
		dt
		INNER JOIN
		ModeratorXTimeUser MX ON MX.ModeratorID = dt.ModeratorID
	WHERE MX.FirstCallDate IS NULL
	GROUP BY dt.ModeratorID
	) FCL INNER JOIN ModeratorXTimeUser ON 
		ModeratorXTimeUser.ModeratorID = FCL.ModeratorID
	INNER JOIN #TempModeratorIDs ON ModeratorXTimeUser.ModeratorID = #TempModeratorIDs.ID
WHERE 	FirstCallDate IS NULL

UPDATE ModeratorXTimeUser
SET	FirstCallProductID = (Select ProductID FROM ProductRate PR WHERE PR.ID =
		(Select Min(BridgeProductRateID) FROM RatedCDR F WHERE F.ConferenceStartTime = ModeratorXTimeUser.FirstCallDate AND F.ModeratorID = ModeratorXTimeUser.ModeratorID))
WHERE FirstCallProductID IS NULL AND FirstCallDate IS NOT NULL

-- At this point the follow should give no results:
--SELECT * FROM ModeratorXTimeUser WHERE FirstCallProductID IS NULL AND FirstCallDate IS NOT NULL

-- Try filling in the SecondCallDate field where it is null
UPDATE ModeratorXTimeUser
SET	SecondCallDate = ConferenceStartTimeX
FROM	(
	SELECT dt.ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTimeX FROM 
		(SELECT BridgeID, UniqueConferenceID, ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTime
		FROM RatedCDR GROUP BY BridgeID, UniqueConferenceID, ModeratorID HAVING Count(*) > 2)
		dt
		INNER JOIN
		ModeratorXTimeUser MX ON MX.ModeratorID = dt.ModeratorID
	WHERE MX.FirstCallDate < dt.ConferenceStartTime
	GROUP BY dt.ModeratorID
	) FCL INNER JOIN ModeratorXTimeUser ON 
		ModeratorXTimeUser.ModeratorID = FCL.ModeratorID
	INNER JOIN #TempModeratorIDs ON ModeratorXTimeUser.ModeratorID = #TempModeratorIDs.ID
WHERE 	FirstCallDate IS NOT NULL AND SecondCallDate IS NULL

-- Try filling in the ThirdCallDate field where it is null
UPDATE ModeratorXTimeUser
SET	ThirdCallDate = ConferenceStartTimeX
FROM	(
	SELECT dt.ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTimeX FROM 
		(SELECT BridgeID, UniqueConferenceID, ModeratorID, Min(ConferenceStartTime) AS ConferenceStartTime
		FROM RatedCDR GROUP BY BridgeID, UniqueConferenceID, ModeratorID HAVING Count(*) > 2)
		dt
		INNER JOIN
		ModeratorXTimeUser MX ON MX.ModeratorID = dt.ModeratorID
	WHERE MX.SecondCallDate < dt.ConferenceStartTime
	GROUP BY dt.ModeratorID
	) FCL INNER JOIN ModeratorXTimeUser ON 
		ModeratorXTimeUser.ModeratorID = FCL.ModeratorID
	INNER JOIN #TempModeratorIDs ON ModeratorXTimeUser.ModeratorID = #TempModeratorIDs.ID
WHERE 	SecondCallDate IS NOT NULL AND ThirdCallDate IS NULL

UPDATE ModeratorXTimeUser
SET	ThirdCallProductID = (Select ProductID FROM ProductRate PR WHERE PR.ID =
		(Select Min(BridgeProductRateID) FROM RatedCDR F WHERE F.ConferenceStartTime = ModeratorXTimeUser.ThirdCallDate AND F.ModeratorID = ModeratorXTimeUser.ModeratorID))
WHERE ThirdCallProductID IS NULL AND ThirdCallDate IS NOT NULL

-- Update the UserID to match ModeratorID (one to many)
UPDATE ModeratorXTimeUser Set UserID = UL.UserID
FROM ModeratorXTimeUser MXT INNER JOIN vw_UserList UL ON MXT.ModeratorID = UL.ModeratorID
WHERE MXT.UserID IS NULL

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_GetReportData"  skip="true">
			<comment><![CDATA[
--exec [p_UTIL_GetReportData] 'ManagedEventsSummaryAdmin',null,null, '2014-10-1','2014-10-20'
]]></comment>
			<parameters>
				<parameter name="@ReportType" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	if @ReportType='ManagedEventsSummaryAdmin'
		exec [p_OmnoviaCDR_GetManagedEventSummary] @StartDate, @EndDate
	else if @ReportType='ModeratorSummaryConference'
		print 'moderator report'				
		--exec [p_moderator_conference_summary @ModeratorId, @StartDate, @EndDate
	else if @ReportType='CustomerSeeVoghOverageCharges'
		exec [p_Customer_GetSeeVoghOverageCharges] @CustomerID, @StartDate
	else if @ReportType='CustomerSeeVoghMonthlySummary'
		exec [p_Customer_GetSeeVoghMonthlySummary] @CustomerID, @StartDate

end

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_BulkEditWSProductRates"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To update the WHOLESALE Product Rates for items selected by the Bulk Edits screen. 
Parameters:
- @ProductRateID - The ProductRateID of the ProductRateValue
- @BuyRate - The rate to change. 
- @BulkEditType - 1 = All Customers, 2 = Wholesaler Only, 3 = Wholesaler and All Customers
- @CustomerID - Effect all BulkEditTypes where they match this CustomerID
- @CompanyID - CompanyID entered, Effect all BulkEditTypes where they match this Company ID
- @SalesPersonID - SalesPersonID entered, Effect all BulkEditTypes where they match this SalesPersonID
- @WholesalerID - Used to limit the affected records to the current Wholesaler
- @CurrencyID - Used to limit the affected records to the correct currency

NOTES:
- Wholesaler Buy rates should only be in 1 currency as no matter what the scenario they'll convert to 1 currency for their company.
- Both CompanyID and SalesPersonID can be passed in. If both are passed in then they are AND'ed together
- CompanyID and SalesPersonID, Only affect Customer rates and not the Wholesaler's rates and they take precedence over passing in a Customer number.
- Sept/2013 - Added CurrencyID so just the correct currency items are updated.


Examples:
	--Update Customers Only, BuyRates
	EXEC p_UTIL_BulkEditWSProductRates @ProductRateID = 1, @BuyRate = 0.02, @BulkEditType = 1, @CustomerID = 14
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'AUD'

	--Update All Customers Only but not WS'er, BuyRates
	EXEC p_UTIL_BulkEditWSProductRates @ProductRateID = 1, @BuyRate = 0.03, @BulkEditType = 1, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'AUD'

	--Update WS Only, BuyRates
	EXEC p_UTIL_BulkEditWSProductRates @ProductRateID = 1, @BuyRate = 0.04, @BulkEditType = 2, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'AUD'

	--Update WS and All Customers, BuyRates
	EXEC p_UTIL_BulkEditWSProductRates @ProductRateID = 1, @BuyRate = 0.05, @BulkEditType = 3, @CustomerID = NULL
		, @CompanyID = NULL, @SalesPersonID = NULL, @WholesalerID = '0000000001', @CurrencyID = 'AUD'

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ProductRateID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="0" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BulkEditType" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CurrencyID" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


BEGIN TRANSACTION

IF (@CompanyID is NOT null) OR (@SalesPersonID is NOT null)
BEGIN
	--Update the Rate in the ProductRateValue table with the ProductRateID and additional parameters.
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer
    BEGIN
		--Updates all Customers Product Rates
		UPDATE    ProductRateValue
		SET              BuyRate = @BuyRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
					Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE	(ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (@CompanyID IS NULL OR Customer.CompanyID = @CompanyID) --optional item passed in
			AND (@SalesPersonID IS NULL OR Customer.SalesPersonID = @SalesPersonID) --optional item passed in
			AND (ProductRateValue.DefaultOption = 0) --not the default rates
			AND (ProductRateValue.BuyRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 2 -- Wholesale Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
END

-- ************** CustomerID Passed in *****************
IF (@CustomerID is NOT null)
BEGIN
	IF @BulkEditType = 1  OR @BulkEditType = 3 --Customer
    BEGIN
		--Updates all Customers Product Rates
		UPDATE    ProductRateValue
		SET              BuyRate = @BuyRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
			Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE	(ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (@CompanyID IS NULL OR Customer.CompanyID = @CompanyID) --optional item passed in
			AND (@SalesPersonID IS NULL OR Customer.SalesPersonID = @SalesPersonID) --optional item passed in
			AND (ProductRateValue.DefaultOption = 0) --not the default rates
			AND (ProductRateValue.BuyRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 2 -- Wholesale Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
END

--WHOLESALER UPDATES
IF (@BulkEditType = 2 OR @BulkEditType = 3)
BEGIN
		UPDATE    ProductRateValue
		SET              BuyRate = @BuyRate
		FROM         ProductRateValue
		WHERE     (ProductRateValue.ProductRateID = @ProductRateID) AND (ProductRateValue.WholesalerID = @WholesalerID) 
			AND (ProductRateValue.CustomerID IS NULL) AND (ProductRateValue.DefaultOption = 0)
			AND (ProductRateValue.BuyRateCurrencyID = @CurrencyID) --Currency Filter
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
END

-- Update All Customers associated with Wholesaler, don't want to overlap CustomerID passed in scenario
IF (@BulkEditType = 3 OR (@BulkEditType = 1 AND @CustomerID IS NULL))
BEGIN
		-- Customer
		UPDATE    ProductRateValue
		SET              BuyRate = @BuyRate
		FROM         ProductRateValue (NOLOCK) INNER JOIN
			Customer (NOLOCK) ON ProductRateValue.CustomerID = Customer.ID
		WHERE     (ProductRateValue.ProductRateID = @ProductRateID) AND (Customer.WholesalerID = @WholesalerID) 
			AND (ProductRateValue.DefaultOption = 0)
			AND (ProductRateValue.BuyRateCurrencyID = @CurrencyID) AND (Customer.CurrencyID = @CurrencyID) --Currency Filter
		--Check the Lock Rates setting
			AND Customer.ID NOT IN (SELECT [CustomerID] FROM vw_FeatureOptionsForCustomers (NOLOCK) WHERE FeatureID = 23 -- Lock Rates 
				AND (FeatureOptionValue = 2 -- Wholesale Rates
				OR FeatureOptionValue = 3))-- Both Rates
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
END

GOTO CommitTrans

RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION

END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_GenerateCommissions"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Generates the Commission for the Customer / SalesPerson. The basics are:
- The first 12 invoices get 10% commission on revenue. Valid invoice for commissions
are ones where the product charges or misc. charges are greater then zero irregardless of the credit amount. If 
credit is greater then product charges + misc. charges then Sales Person will get no commission but this
still counts as a valid invoice for incrementing the counter.
- after 12 invoices the commission goes to 0%. Same rules apply for "valid invoices".

The tables updated are:
	- Commission, CommissionCustomer
		
NOTE: 
1. The logic here only looks at the amounts invoiced so the invoice date needs to match the commission date.
i.e. the first date of the invoice run process would be the same date passed here.

History:
May/16/2012 = change commission from 18 month 10%, 1% after to 10% for 12 months then 0% after.

Select * from Commission where billedDate = 'jun 1 2010'
--Delete from Commission where billedDate = 'jun 1 2010'
Select * from CommissionCustomer
--truncate table CommissionCustomer
EXAMPLES: 
	EXEC [p_UTIL_INV_GenerateCommissions] 'jun 1 2010','0000000001',31

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@STARTDATE" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

-- Declare var's
	DECLARE @CommissionMonths int, -- the number of months to pay Rule 1 comm. on, after this it is Rule #2
	@CommissionRule1Percent decimal(5,2), -- comm. on first rule
	@CommissionRule2Percent decimal(5,2), -- comm. on 2nd rule
	@PeriodStartDate datetime, --12am dates for the start AND end period. Used so that all Period Dates are consistant.
	@TempPostedDate datetime 

	--Set this number to the number of months you want to pay e.g.10% commission on
	SET @CommissionMonths = 12
	SET @CommissionRule1Percent = 0.10
	SET @CommissionRule2Percent = 0.00

	--TEMP DATES USED TO DENOTE THE PERIOD START AND END DATE
	SET @PeriodStartDate = @STARTDATE --Midnight of the StartDate

	-- MAKE SURE BillingPeriodCutoff IS SET
	SET @BillingPeriodCutoff = ISNULL(@BillingPeriodCutoff,31)
	-- POST EVERYTHING AT THE SAME TIME TO MAKE IT EASIER TO FIND PROCEDURE RUNS
	SET @TempPostedDate = @STARTDATE 

	--RULE: IF THERE IS ALREADY A RECORD WITH THIS DATE THEN DON"T RUN AS IT WILL ADD DUPLICATE ENTRIES
	DECLARE @Count int
	Set @Count = NULL
	SELECT @Count = Count(*) FROM Commission WHERE WholesalerID = @WholesalerID AND BilledDate = @PeriodStartDate -- match invoice peroid to commission period
	--print @count
	IF @Count <> 0
	BEGIN
		GOTO END_SP -- quick way to exit
	END

	-- ADD ALL NEW CUSTOMERS COMMISSIONCUSTOMER TABLE 
	-- This tracks the number of invoices and with SalesPerson gets the commission
	INSERT INTO CommissionCustomer (WholesalerID,CustomerID,SalesPersonID,InvoiceCount,CreatedDate)
	SELECT WholesalerID, Customer.ID, SalesPersonID, 0, @PeriodStartDate
	FROM   Customer WHERE ID NOT IN (SELECT CustomerID FROM CommissionCustomer WHERE WholesalerID = @WholesalerID) 
	AND WholesalerID = @WholesalerID
	--REMOVE Customers that shouldn't Effect Revenue
	AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')

	-- UPDATE THE SALESPERSON AS IT MAY HAVE CHANGED
	UPDATE CommissionCustomer SET SalesPersonID = C.SalesPersonID
	FROM CommissionCustomer CC INNER JOIN Customer C ON CC.CustomerID = C.ID
	WHERE C.WholesalerID = @WholesalerID AND C.SalesPersonID <> CC.SalesPersonID

BEGIN TRANSACTION
	
	--GENERATE THE COMMISSIONS
	-- Copy the information and total the commission amount. If the Credits are larger then the Commission amount will be 
	-- negative. This is dealt with in the next step where the amount is converted to an amount based on the commission rate
	INSERT INTO [Commission]
	([WholesalerID],[CustomerID],[SalesPersonID],[BilledDate],[TotalCredits],[ProductCharges],[MiscCharges],[TotalAmount],[CommissionRate],[TotalCommission],[CurrencyID])
	SELECT INV.WholesalerID, INV.CustomerID, C.SalesPersonID, INV.StartDate, INV.TotalCredits, INV.ProductCharges, INV.MiscCharges,
	(INV.TotalCredits + INV.ProductCharges + INV.MiscCharges) AS TotalAmount,0 AS CommissionRate, 0 AS TotalCommission, INV.CurrencyID
	FROM dbo.InvoiceSummary AS INV INNER JOIN dbo.Customer AS C ON INV.CustomerID = C.ID
	WHERE C.WholesalerID = @WholesalerID AND C.BillingPeriodCutoff = @BillingPeriodCutoff
	AND INV.StartDate = @PeriodStartDate -- match invoice peroid to commission period
	AND (INV.ProductCharges + INV.MiscCharges) > 0 -- only valid invoices
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	-- Update the CommissionCustomer to increment the Invoice Count by 1 which starts at Zero
	UPDATE CommissionCustomer SET InvoiceCount = CC.InvoiceCount + 1 
	FROM CommissionCustomer CC INNER JOIN Commission Comm ON CC.CustomerID = Comm.CustomerID
	WHERE Comm.WholesalerID = @WholesalerID AND Comm.BilledDate = @PeriodStartDate -- match invoice peroid to commission period
	AND Comm.TotalAmount > 0 -- only valid invoices
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	-- Fix update the Negative Commission Amounts 
	UPDATE Commission SET CommissionRate = 0, TotalCommission = 0
	WHERE BilledDate = @PeriodStartDate -- match invoice peroid to commission period
	AND TotalAmount < 0
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	-- Calculate the commission based on Invoice count, X months or less = 10%
	UPDATE Commission SET CommissionRate = @CommissionRule1Percent, TotalCommission = ROUND((Comm.TotalAmount * @CommissionRule1Percent),2)
	FROM Commission Comm INNER JOIN CommissionCustomer CC ON CC.CustomerID = Comm.CustomerID
	WHERE Comm.WholesalerID = @WholesalerID AND Comm.BilledDate = @PeriodStartDate -- match invoice peroid to commission period
	AND (Comm.TotalAmount) > 0 AND CC.InvoiceCount <= @CommissionMonths -- only valid invoices
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	-- Calculate the commission based on Invoice count, e.g. x+1 month or more = 1%
	UPDATE Commission SET CommissionRate = @CommissionRule2Percent, TotalCommission = ROUND((Comm.TotalAmount * @CommissionRule2Percent),2)
	FROM Commission Comm INNER JOIN CommissionCustomer CC ON CC.CustomerID = Comm.CustomerID
	WHERE Comm.WholesalerID = @WholesalerID AND Comm.BilledDate = @PeriodStartDate -- match invoice peroid to commission period
	AND (Comm.TotalAmount) > 0 AND CC.InvoiceCount > @CommissionMonths -- only valid invoices
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

GOTO CommitTrans
	
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
PRINT 'ERROR OCCURRED PROCESSING: '
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
--*/


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_Accounting_ExportPayments"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns Quickbooks Payments in IIF format
NOTEs: 
	DOCNUM = InvoiceNumber
	MEMO = Customer PriNumber + Desciption

-- SAMPLE Format
!TRNS	TRNSID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	PAYMETH
!SPL	SPLID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	TAXRATE
!ENDTRNS									
TRNS		PAYMENT	9/30/2009	Bank Account:ANZ Cheque Account - 6115	ABC Customer	858.02	200154	Invoice 9000153	Cheque
SPL		PAYMENT	9/30/2009	Accounts Receivable	ABC Customer	-858.02			
ENDTRNS									
TRNS		PAYMENT	9/30/2009	ABC Bank	Hadrians Wall Company	1000		Invoice 9000154	Cash
SPL		PAYMENT	9/30/2009	Accounts Receivable	Hadrians Wall Company	-1000			
ENDTRNS									

EXAMPLES:
	EXEC [p_UTIL_Accounting_ExportPayments] '0000000001','nov 1 2009'
****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @ARAcctName varchar(50),@BankAcctName varchar(50)
,@TransTypeName varchar(50)
--Variables for Cursor
, @CustomerID int, @TransDate varchar(50), @TransactionAmount Decimal(9,2)
, @CompanyName varchar(100),@InvoiceNumber varchar(50),@Memo varchar(100)
, @CustomerTransactionID int, @PMTMethod varchar(50)

SET @ARAcctName = 'Accounts Receivable'
SET @BankAcctName = 'Bank Account:ANZ Cheque Account - 6115'
SET @TransTypeName = 'PAYMENT'

--Table matches the IIF standard for Payments for Columns in row #1 but has the same number of colums for both rows
-- This is critical as the logic builds the individual rows one at a time so needs the same number of columns.
-- In other words, the Temp Table column names could be anything but just used the name from the first column
--DROP TABLE #TempPMTExport
	CREATE TABLE #TempPMTExport (
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[TRNS] varchar(50),
		[TRNSID] varchar(50),
		[TRNSTYPE] varchar(50),
		[DATE] varchar(50), --Transaction Date
		[ACCNT] varchar(50), --QB Account Name
		[NAME] varchar(200), --Company Name, can only be 41 chars
		[AMOUNT] varchar(50), --Full Trans. Amt
		DOCNUM varchar(50), --Invoice Number
		MEMO varchar(100), --Just text fill of item
		PAYMETH varchar(50), -- Y or N if the customer is taxable or not
	) ON [PRIMARY]

--1st row
	INSERT INTO #TempPMTExport
	SELECT '!TRNS','TRNSID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','PAYMETH'
--2nd row
	INSERT INTO #TempPMTExport
	SELECT '!SPL','SPLID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','TAXRATE'
--3nd row
	INSERT INTO #TempPMTExport
	SELECT '!ENDTRNS','','','','','','','','',''

/* Debugging:
Select * from customertransaction where customertransactiontypeid = 4 and PostedToInvoiceDate = 'nov 1 2009'
select * from customertransactiontype

 SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS [Date]
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount * -1) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
	, (CASE WHEN T1.TransactionDescription LIKE '%EFT%' THEN 'EFT'
		WHEN T1.TransactionDescription LIKE '%BPay%' THEN 'B Pay'
		WHEN T1.TransactionDescription LIKE '%Cheque%' THEN 'Cheque'
		ELSE 'Cheque'
		END)AS PMTMethod
	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = '0000000001' 
	AND T1.PostedToInvoiceDate = 'nov 1 2009' AND INV.StartDate = 'nov 1 2009'
	--PAYMENTS ONLY
	AND T1.CustomerTransactionTypeID = 4
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber
*/

/*
This SQL is used to setup the main items that will be looped over. In this case, each
payment for a customer is iterated over and used to create a QB payment item, this way
each payment can be tracked.	
*/
DECLARE temp_cursor CURSOR FAST_FORWARD
FOR SELECT T1.ID, T1.CustomerID,dbo.fn_FormatDate(TransactionDate,'MM/DD/YY') AS [Date]
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, (T1.TransactionAmount * -1) AS TransactionAmount
	, INV.InvoiceNumber, ('"' + RTRIM(T1.PriCustomerNumber) + ' - ' + T1.TransactionDescription +'"') As Memo
	, (CASE WHEN T1.TransactionDescription LIKE '%EFT%' THEN 'EFT'
		WHEN T1.TransactionDescription LIKE '%BPay%' THEN 'B Pay'
		WHEN T1.TransactionDescription LIKE '%Cheque%' THEN 'Cheque'
		ELSE 'Cheque'
		END)AS PMTMethod
--	,* 
	FROM CustomerTransaction T1 
	INNER JOIN InvoiceSummary INV ON T1.CustomerID = INV.CustomerID
	INNER JOIN Customer C ON T1.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	WHERE T1.WholesalerID = @WholesalerID
	AND T1.PostedToInvoiceDate = @InvoiceDate AND INV.StartDate = @InvoiceDate
	--PAYMENTS ONLY
	AND T1.CustomerTransactionTypeID = 4
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY T1.PriCustomerNumber
OPEN temp_cursor

FETCH NEXT FROM temp_cursor 
INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,@PMTMethod
	WHILE @@FETCH_STATUS = 0
	BEGIN
	-- Generate the different types of rows, Leave TRNSID, and SPLID blank
	--Full amount Row, TRNS Header
	INSERT INTO #TempPMTExport		
	SELECT 'TRNS','',@TransTypeName,@TransDate,@BankAcctName,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,@PMTMethod

	--Acct Rec. row
	INSERT INTO #TempPMTExport
	SELECT 'SPL','',@TransTypeName,@TransDate,@ARAcctName,@CompanyName,(@TransactionAmount * -1),'','',''

	--END Row
	INSERT INTO #TempPMTExport
	SELECT 'ENDTRNS','','','','','','','','',''

	FETCH NEXT FROM temp_cursor 
	INTO @CustomerTransactionID, @CustomerID, @TransDate,@CompanyName,@TransactionAmount,@InvoiceNumber,@Memo,@PMTMethod
	END
CLOSE temp_cursor
DEALLOCATE temp_cursor

-- Clean up the data a bit
	UPDATE #TempPMTExport SET TRNSID = ID --REMOVED, [TIMESTAMP] = ID
	FROM #TempPMTExport WHERE TRNS = 'TRNS'

	UPDATE #TempPMTExport SET TRNSID = ID
	FROM #TempPMTExport WHERE TRNS = 'SPL'

SELECT [TRNS],[TRNSID],[TRNSTYPE] ,[DATE] ,[ACCNT] ,[NAME] ,[AMOUNT],DOCNUM, MEMO, PAYMETH
FROM #TempPMTExport

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_MGMTRPT_Trends"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns the Trends info for each company which is a moving 12 month total revenue picture.

July 2013 - added Account Manager fields
March/2014 - added Customer CreatedDate - known as Date Provisioned

EXAMPLES:
	-- @SalesPersonID
	EXEC [p_UTIL_MGMTRPT_Trends] '0000000001', 3
	
	EXEC [p_UTIL_MGMTRPT_Trends] '0000000001', NULL

****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


	SELECT  dbo.Trend.*, dbo.SalesPerson.FullName AS SalesPerson, dbo.AccountManager.FullName AS AccountManager
	,Customer.CreatedDate AS DateProvisioned
	FROM	dbo.SalesPerson INNER JOIN
			dbo.Customer ON dbo.SalesPerson.ID = dbo.Customer.SalesPersonID INNER JOIN
			dbo.AccountManager ON dbo.Customer.AccountManagerID = dbo.AccountManager.ID INNER JOIN
			dbo.Trend ON dbo.Customer.ID = dbo.Trend.CustomerID
	WHERE (Trend.WholesalerID = @WholesalerID) AND (@SalesPersonID IS NULL OR Trend.SalesPersonID = @SalesPersonID)
	--REMOVE Customers that shouldn't Effect Revenue
	AND Trend.CustomerID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY Trend.CompanyName



			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_MGMTRPT_RevenueByModerator"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns a revenue report by Company, Moderator, and Sales Person

EXAMPLES:
	-- A Report for the month of October 2009
	EXEC [p_UTIL_MGMTRPT_RevenueByModerator] '2009-10-01', '2009-11-01'
****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


/*
SELECT     TOP (100) PERCENT dbo.SalesPerson.FullName AS [Sales Person], dbo.Company.Description AS [Company Name], dbo.[User].DisplayName AS [Moderator Name], 
                      dbo.[User].Email AS [Moderator Email], dbo.[User].Telephone AS [Moderator Telephone], dbo.RatedCDR.RetailTotal AS Total
FROM         dbo.RatedCDR INNER JOIN
                      dbo.Customer ON dbo.RatedCDR.CustomerID = dbo.Customer.ID INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.SalesPerson ON dbo.Customer.SalesPersonID = dbo.SalesPerson.ID INNER JOIN
                      dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID
where ConferenceStartTime between @StartDate and @EndDate
AND AccessTypeId = 3
--REMOVE Customers that shouldn't Effect Revenue
AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
ORDER BY dbo.SalesPerson.FullName, [Company Name], [Moderator Name]
*/

SELECT     dbo.SalesPerson.FullName AS [Sales Person], dbo.Company.Description AS [Company Name], dbo.[User].DisplayName AS [Moderator Name], 
                      dbo.[User].Email AS [Moderator Email], dbo.[User].Telephone AS [Moderator Telephone], Sum(dbo.RatedCDR.RetailTotal) AS [Web Total]
FROM         dbo.RatedCDR INNER JOIN
                      dbo.Customer ON dbo.RatedCDR.CustomerID = dbo.Customer.ID INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.SalesPerson ON dbo.Customer.SalesPersonID = dbo.SalesPerson.ID INNER JOIN
                      dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID
where 
ConferenceStartTime between @StartDate and @EndDate 
AND AccessTypeId = 3
--REMOVE Customers that shouldn't Effect Revenue
AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
group by dbo.SalesPerson.FullName , dbo.Company.Description , dbo.[User].DisplayName, dbo.[User].Email , dbo.[User].Telephone 
ORDER BY dbo.SalesPerson.FullName , dbo.Company.Description , dbo.[User].DisplayName

SELECT     dbo.SalesPerson.FullName AS [Sales Person], dbo.Company.Description AS [Company Name], dbo.[User].DisplayName AS [Moderator Name], 
                      dbo.[User].Email AS [Moderator Email], dbo.[User].Telephone AS [Moderator Telephone], Sum(dbo.RatedCDR.RetailTotal) AS [Audio Total]
FROM         dbo.RatedCDR INNER JOIN
                      dbo.Customer ON dbo.RatedCDR.CustomerID = dbo.Customer.ID INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.SalesPerson ON dbo.Customer.SalesPersonID = dbo.SalesPerson.ID INNER JOIN
                      dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID
where 
ConferenceStartTime between @StartDate and @EndDate 
AND AccessTypeId <> 3
--REMOVE Customers that shouldn't Effect Revenue
AND Customer.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
group by dbo.SalesPerson.FullName , dbo.Company.Description , dbo.[User].DisplayName, dbo.[User].Email , dbo.[User].Telephone 
ORDER BY dbo.SalesPerson.FullName , dbo.Company.Description , dbo.[User].DisplayName

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Used to repost transcations that were posted after the billing run period.
See dbo.p_UTIL_INV_ROLLBACK_INVOICING_TABLES for how the table is filled.
See dbo.p_UTIL_INV_DoBillingRun for where it is called.

Parameters:	

EXAMPLES:
	EXEC [p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK] '0000000001'
*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

--Check if anything needs to be processed or just exit out
Declare @count int 
	SET @count = -1
	SELECT @count=count(ID) FROM [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost]
	PRINT @count
	IF (@count = 0)
		return

BEGIN TRANSACTION
--REPOST Customer Transaction after a Rollback
--Declare @WholesalerID varchar(10) set @WholesalerID = null
SET IDENTITY_INSERT CustomerTransactionImport ON
	INSERT INTO CustomerTransactionImport 
		(ID,[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate],[TransactionAmount],[TransactionDescription],[CustomerTransactionTypeID]
		,[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ModifiedBy],[CreatedDate],[PostedToCustTrans],[PostedToCustTransDate]
		,[ImportType],[ErrorCodesID],[ReferenceNumber],[UniqueConferenceID],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[ElapsedTimeSeconds])
	SELECT * FROM [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID) AND
		ID NOT IN (SELECT ID FROM CustomerTransactionImport WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID))
SET IDENTITY_INSERT CustomerTransactionImport OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

--Some Items can already exist when a Backup is Taken so we need to remark them for posting
	UPDATE CustomerTransactionImport SET PostedToCustTrans = 0, PostedToCustTransDate = NULL
	--Select * from CustomerTransactionImport
	WHERE ID IN (SELECT ID FROM [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost])

--Force them to be processed.--/*
	--Process anything in the CustomerTransactionImport table and use Name Of ModifiedBy field for UserName
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

	GOTO CommitTrans
RollBackTrans:
PRINT 'ERROR OCCURRED PROCESSING SP: '
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_MGMTRPT_GrossProfit"  skip="true">
			<comment><![CDATA[
/*****************************************************************************
PURPOSE: Returns the Gross Profit info by Customer Admin for each Service.

NOTE: You need to minus out the RetailTotalCredit from the RetailTotalBridge so as to
match the revenue when free credits are applied.

July 2013 - added Account Manager fields
March/2014 - added Customer CreatedDate - known as Date Provisioned

EXAMPLES:
	-- Start and End Date
	EXEC [p_UTIL_MGMTRPT_GrossProfit] '0000000001', 'Apr 1 2009', 'May 1 2009' --46 rows
	--Invoice Date
	EXEC [p_UTIL_MGMTRPT_GrossProfit] '0000000001', null, null, 'Feb 1 2009'  --15 rows
	-- @SalesPersonID
	EXEC [p_UTIL_MGMTRPT_GrossProfit] '0000000001', null, null, 'Feb 1 2009', 3 -- 0 rows
	-- ALL
	EXEC [p_UTIL_MGMTRPT_GrossProfit] '0000000001', null, null, null, null --2400 rows

****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


SET @EndDate = DateAdd(ms, -1, DateAdd(d,1,@EndDate))

DECLARE @Currency char(3)
SET @Currency = 'AUD'

--drop table GrossProfit
CREATE TABLE #GrossProfit (
	CompanyID int,
	Company varchar(50),
	PriCustomerNumber varchar(10),
	CustomerID int,
	ProductID int,
	Product varchar(50),
	Calls int,
	ConnectRevenue decimal(18,2),
	BridgeRevenue decimal(18,2),
	LDRevenue decimal(18,2),
	MiscRevenue decimal(18,2),
	MiscCredit decimal(18,2), --credit items
	RetailCurrency char(3),
	ConnectCost decimal(18,2),
	BridgeCost decimal(18,2),
	LDCost decimal(18,2),
	MiscCost decimal(18,2),
	WSCurrency char(3),
	BridgeMinutes int,
	LDMinutes int
) ON [PRIMARY]

INSERT #GrossProfit -- From the RatedCDR
SELECT
	C.ID AS CompanyID,
	C.Description AS Company,
	Cust.PriCustomerNumber,
	Cust.ID AS CustomerID,
	PR.ProductID,
	WSP.Name AS Product,
	Count (DISTINCT CDR.UniqueConferenceID) AS TotalCalls,
	Sum(IsNull(CDR.RetailTotalConnectCharge,0)) AS ConnectRevenue,
	Sum(IsNull(CDR.RetailTotalBridge,0) - IsNull(CDR.RetailTotalCredit,0)) AS BridgeRevenue, --Minus out RetailTotalCredit which is the free credit or zero
	Sum(IsNull(CDR.RetailTotalLD,0)) AS LDRevenue,
	0 AS MiscRevenue,
	0 AS MiscCredit,
	CDR.RetailCurrency,
	Sum(ISNull(CDR.WSConnectCharge, 0)) AS ConnectCost,
	Sum(IsNull(CDR.WSTotalBridge, 0)) AS BridgeCost,
	Sum(IsNull(CDR.WSTotalLD, 0)) AS LDCost,
	0 AS MiscCost,
	CDR.WSCurrency,
	Sum(IsNull(CDR.ElapsedTime,0))/60 AS BridgeMinutes,
	Sum(CASE WHEN LDProductRateID <> 0 THEN IsNull(CDR.ElapsedTime,0) ELSE 0 END)/60 AS LDMinutes
FROM
	RatedCDR AS CDR WITH (NOLOCK) INNER JOIN Customer Cust (NOLOCK) ON CDR.CustomerID = Cust.ID
	INNER JOIN Company AS C WITH (NOLOCK) ON Cust.CompanyID = C.ID
	INNER JOIN ProductRate AS PR WITH (NOLOCK) ON CDR.BridgeProductRateID = PR.ID
	INNER JOIN Wholesaler_Product AS WSP WITH (NOLOCK) ON PR.ProductID = WSP.ProductID AND WSP.WholesalerID = @WholesalerID
WHERE
	CDR.WholesalerID = @WholesalerID
	AND (@StartDate IS NULL OR CDR.ConferenceStartTime >= @StartDate)
	AND (@EndDate IS NULL OR CDR.ConferenceStartTime < @EndDate)
	AND (@InvoiceDate IS NULL OR CDR.BilledDate = @InvoiceDate)
	AND (@SalesPersonID IS NULL OR Cust.SalesPersonID = @SalesPersonID)
GROUP BY C.ID, C.Description, Cust.PriCustomerNumber, Cust.ID, PR.ProductID, WSP.Name, CDR.RetailCurrency, CDR.WSCurrency
ORDER BY C.ID, C.Description, WSP.Name

--Select * from CustomerTransactionType
INSERT #GrossProfit -- CustomerTransaction for Misc. Charges/Credits
SELECT
	C.ID AS CompanyID,
	C.Description AS Company,
	Cust.PriCustomerNumber,
	Cust.ID AS CustomerID,
	ISNULL(PR.ProductID, 1) AS ProductID, --If no ProductID then map to Teleconferencing
	ISNULL(WSP.Name, 'Teleconferencing') AS Product, --If no ProductID then map to Teleconferencing
	0 AS TotalCalls,
	0 AS ConnectRevenue,
	0 AS BridgeRevenue,
	0 AS LDRevenue,
	Sum(CASE WHEN CustomerTransactionTypeID IN (2,6) THEN IsNull(TransactionAmount,0)
			ELSE 0
		END) AS MiscRevenue,
	Sum(CASE WHEN CustomerTransactionTypeID IN (3,7) THEN IsNull(TransactionAmount,0)
			ELSE 0
		END) AS MiscCredit,
 	Cust.CurrencyID AS RetailCurrency,
	0 AS ConnectCost,
	0 AS BridgeCost,
	0 AS LDCost,
	Sum(IsNull(WSTransactionAmount,0)) AS MiscCost,
	@Currency AS WSCurrency,
	0 AS LDMinutes,
	0 AS BridgeMinutes
FROM  
	Wholesaler_Product AS WSP WITH (NOLOCK) INNER JOIN
	ProductRate AS PR WITH (NOLOCK) ON WSP.ProductID = PR.ProductID AND WSP.WholesalerID = @WholesalerID RIGHT OUTER JOIN
	CustomerTransaction AS CT WITH (NOLOCK) INNER JOIN
	Customer AS Cust WITH (NOLOCK) ON CT.CustomerID = Cust.ID INNER JOIN
	Company AS C WITH (NOLOCK) ON Cust.CompanyID = C.ID ON PR.ID = CT.ProductRateID
WHERE
	CT.WholesalerID = @WholesalerID AND CT.CustomerTransactionTypeID IN (2,3,6,7)
	AND (@StartDate IS NULL OR CT.TransactionDate >= @StartDate)
	AND (@EndDate IS NULL OR CT.TransactionDate < @EndDate)
	AND (@InvoiceDate IS NULL OR CT.PostedToInvoiceDate = @InvoiceDate)
	AND (@SalesPersonID IS NULL OR Cust.SalesPersonID = @SalesPersonID)
GROUP BY C.ID, C.Description, Cust.PriCustomerNumber, Cust.ID, PR.ProductID, WSP.Name, Cust.CurrencyID--, 'AUD'
ORDER BY C.ID, C.Description, WSP.Name

SELECT GP.CompanyID, Company, GP.PriCustomerNumber,
	V.Description AS Vertical, SP.FullName AS SalesPerson,Product,
	SUM(Calls) AS Calls,SUM(ConnectRevenue) AS ConnectRevenue,
	SUM(BridgeRevenue) AS BridgeRevenue,SUM(LDRevenue) AS LDRevenue,SUM(MiscRevenue) AS MiscRevenue
	,SUM(MiscCredit) AS MiscCredit,MAX(RetailCurrency) AS RetailCurrency,	SUM(ConnectCost) AS ConnectCost
	,SUM(BridgeCost) AS BridgeCost,SUM(LDCost) AS LDCost,SUM(MiscCost) AS MiscCost,
	MAX(WSCurrency) AS WSCurrency,SUM(BridgeMinutes) AS BridgeMinutes,SUM(LDMinutes) AS LDMinutes, Cust.SalesPersonID, AM.FullName AS AccountManager
	,MAX(Cust.CreatedDate) AS DateProvisioned
FROM #GrossProfit GP 
	INNER JOIN Customer AS Cust WITH (NOLOCK) ON GP.CustomerID = Cust.ID
	INNER JOIN Vertical AS V WITH (NOLOCK) ON Cust.VerticalID = V.ID
	INNER JOIN SalesPerson AS SP WITH (NOLOCK) ON Cust.SalesPersonID = SP.ID
	INNER JOIN AccountManager AS AM WITH (NOLOCK) ON Cust.AccountManagerID = AM.ID
--REMOVED RB Demo Company
WHERE GP.CompanyID <> 2
--REMOVE Customers that shouldn't Effect Revenue
AND Cust.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
GROUP BY GP.CompanyID,Company, GP.PriCustomerNumber, V.Description, SP.FullName,Product,Cust.SalesPersonID, ProductID, AM.FullName
ORDER BY Company, GP.PriCustomerNumber,ProductID


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_EnableInvoiceEmailer"  skip="true">
			<comment><![CDATA[
/*****************************************************************************
Purpose: Updated the system settings table to start the Invoice Emailer process

EXAMPLES:
	EXEC p_UTIL_INV_EnableInvoiceEmailer @WholesalerID = '0000000001', @StartDate = 'jul 1 2009'

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


--EVERYTHING NEEDS TO BE PASSED IN.
	IF (@StartDate IS NULL) OR (@WholesalerID IS NULL)
	BEGIN
		RAISERROR ('Billing Run Error: One or more values passed into the procedure was invalid. Process 
		cancelled. Please signout and login to try your request again. If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
		RETURN @@ERROR 
		GOTO END_SP -- ??jump over every thing?
	END

BEGIN TRANSACTION

	-- Update SystemSettings Table.
	UPDATE SystemSettings SET Value = dbo.fn_FormatDate(@StartDate,'mmmddyyyy')
	WHERE Name = 'EmailInvoicerInvoiceDate'

GOTO CommitTrans

RollBackTrans:
PRINT 'ERROR OCCURRED PROCESSING SP: '
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_PushFeatureThatDontExistToWholesalerAndAll"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: 
	This SP adds new default Feature and FeatureOption that DON'T EXIST for either the
	Wholesaler (Customer_Services), Customers, Moderators or All of them.
NOTE: The default setting is to update ALL entities. This uses the vw_FeatureDontExistXXXX view
	which limits the view to only default system values.
NOTE: To change the Feature or Service Rates in a more granular fashion, use the BULK EDIT Feature 
of the ADMIN SITE and the SPs GetBulkEditsXXX, UpdateBulkEditsXXX
Date: 
Author: 
Company:
Example:

EXECUTE [p_UTIL_PushFeatureThatDontExistToWholesalerAndAll] 
	@WholesalerID = '0000000001', @UpdateWholesaler = 1, @UpdateCustomer = 1, @UpdateModerator = 1

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@UpdateWholesaler" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UpdateCustomer" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UpdateModerator" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN TRANSACTION
	IF @UpdateWholesaler = 1
	BEGIN
	PRINT ' Add Feature to Wholesaler'
		INSERT    Wholesaler_Product_Feature
		SELECT T1.Wholesaler_ProductID, T1.FeatureID, T1.FeatureOptionID, T1.FeatureEnabled, NULL AS FeatureOptionValue --Should be set by individual
		FROM vw_FeaturesDontExistWholesaler T1
		WHERE T1.WholesalerID = @WholesalerID 
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
	IF @UpdateCustomer = 1
	BEGIN
	PRINT ' Add Feature to all Wholesaler Customers'
		INSERT    Customer_Feature
		SELECT  T1.CustomerID, T1.FeatureID, T1.FeatureOptionID, T1.FeatureEnabled, NULL AS FeatureOptionValue --Should be set by individual
		FROM vw_FeaturesDontExistCustomer T1
		WHERE T1.WholesalerID = @WholesalerID
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
	
	IF @UpdateModerator = 1
	BEGIN
	PRINT ' Add Feature to all Wholesaler Moderators'
		INSERT    Moderator_Feature
		SELECT T1.ModeratorID, T1.FeatureID, T1.FeatureOptionID, T1.FeatureEnabled, NULL AS FeatureOptionValue --Should be set by individual
		FROM vw_FeaturesDontExistModerator T1
		WHERE T1.WholesalerID = @WholesalerID
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	END
	
GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:



			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_INV_ROLLBACK_INVOICING_TABLES"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Rollback the invoicing tables if something missed or an error occurred.
Added Commission Tables
Added Capture and Repost new transactions since billing run

JS: Sept/2014 - Add rollback handler for SeeVogh Overage Charges 
JS: Nov/2014 - 	Added a list of Processes that should be excluded from being reposted when a rollback occurs. These are items that will be 
	added again by the "DoBillingRun" process.


Parameters:	

EXAMPLES:
	EXEC [p_UTIL_INV_ROLLBACK_INVOICING_TABLES] --Rollback for everyone
	EXEC [p_UTIL_INV_ROLLBACK_INVOICING_TABLES] @WholesalerID = '0000000001' --Specific Wholesaler
*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


BEGIN TRANSACTION
--Add a step to backup the items that have been added since last billing run in case Rollback is done later on in the month
	TRUNCATE TABLE [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost]
	INSERT INTO [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost]
	SELECT DISTINCT CTImport.* FROM [dbo].[CustomerTransactionImport] CTImport INNER JOIN
		dbo.CustomerTransaction CT ON CTImport.WholesalerID = CT.WholesalerID AND CTImport.CustomerID = CT.CustomerID
		AND CTImport.TransactionDescription = CT.TransactionDescription AND CTImport.TransactionDate = CT.TransactionDate
		AND CTImport.TransactionAmount = CT.TransactionAmount
	WHERE CT.PostedToInvoice = 0 AND CTImport.ID NOT IN (SELECT ID FROM [RAWCDRS].dbo.BAK_CustomerTransactionImport) 
/*
JS: Nov/2014 - 	Added a list of Processes that should be excluded from being reposted when a rollback occurs. These are items that will be 
	added again by the "DoBillingRun" process.
*/	
	AND CT.ModifiedBy NOT IN ('p_UTIL_INV_PostMonthlyCharges', --Monthly Posting of Conferencing charges
		'p_UTIL_ProcessSeeVoghMonthlyCharges', --Monthly Posting of SeeVogh Monthly Per Port charges
		'p_UTIL_ProcessSeeVoghOverageCharges' --Monthly Posting of SeeVogh Monthly Per Port Overage charges
		)
	

-- Just reset some PostToCustTrans and PostedToCustTransDate, so they run again when reposted.
	UPDATE [RAWCDRS].[dbo].[BAK_CustomerTransactionImportRepost] SET PostedToCustTrans = 0, PostedToCustTransDate = NULL

IF @WholesalerID IS NULL
BEGIN
	TRUNCATE TABLE [CustomerTransactionImport]
	TRUNCATE TABLE [CustomerTransaction]
	TRUNCATE TABLE [InvoiceCharges]
	TRUNCATE TABLE [InvoiceSummary]
	TRUNCATE TABLE [PrevInvoices]
	TRUNCATE TABLE [Commission]
	TRUNCATE TABLE [CommissionCustomer]
END
ELSE
BEGIN
	DELETE [CustomerTransactionImport] WHERE WholesalerID = @WholesalerID
	DELETE [CustomerTransaction] WHERE WholesalerID = @WholesalerID
	DELETE [InvoiceCharges] WHERE WholesalerID = @WholesalerID
	DELETE [InvoiceSummary] WHERE WholesalerID = @WholesalerID
	DELETE [PrevInvoices] WHERE WholesalerID = @WholesalerID
	DELETE [Commission] WHERE WholesalerID = @WholesalerID
	DELETE [CommissionCustomer] WHERE WholesalerID = @WholesalerID
END

--/*
SET IDENTITY_INSERT CustomerTransactionImport ON
INSERT INTO CustomerTransactionImport 
	([ID],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate],[TransactionAmount],[TransactionDescription],[CustomerTransactionTypeID]
	,[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ModifiedBy],[CreatedDate],[PostedToCustTrans],[PostedToCustTransDate]
	,[ImportType],[ErrorCodesID],[ReferenceNumber],[UniqueConferenceID],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[ElapsedTimeSeconds])
SELECT * FROM [RAWCDRS].[dbo].[BAK_CustomerTransactionImport] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT CustomerTransactionImport OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [CustomerTransaction] ON
INSERT INTO [CustomerTransaction] 
	([ID],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID],[TransactionDescription],[TransactionDate]
	,[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[TransactionTotal],[CustomerBalance],[Wholesaler_ProductID],[ProductRateID]
	,[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber],[UniqueConferenceID],[PostedDate],[ModifiedBy],[CreatedDate],[PostedToInvoice],[PostedToInvoiceDate]
	,[ElapsedTimeSeconds])
SELECT * FROM [RAWCDRS].[dbo].[BAK_CustomerTransaction] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [CustomerTransaction] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [InvoiceCharges] ON
INSERT INTO [InvoiceCharges] 
	([ID],[StartDate],[EndDate],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID],[TransactionDescription]
	,[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[TransactionTotal],[Wholesaler_ProductID],[ProductRateID]
	,[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber],[UniqueConferenceID],[ElapsedTimeSeconds])
SELECT * FROM  [RAWCDRS].[dbo].[BAK_InvoiceCharges] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [InvoiceCharges] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [InvoiceSummary] ON
INSERT INTO [InvoiceSummary] 
	([ID],[StartDate],[EndDate],[CustomerID],[PriCustomerNumber],[InvoiceNumber],[AmountOfLastBill],[Payment1],[TotalCredits]
	,[TotalLatePaymentCharges],[BalForward],[ProductCharges],[MiscCharges],[LocalTaxAmount],[FederalTaxAmount],[TotalCurrent],[BalanceForward],[InvoiceDate]
	,[DueDate],[CurrencyID],[WholesalerID],[TotalFreeCredits],[Wholesaler_ProductID],[BPayCustomerRefNumber])
SELECT * FROM [RAWCDRS].[dbo].[BAK_InvoiceSummary] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [InvoiceSummary] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [PrevInvoices] ON
INSERT INTO [PrevInvoices] ([ID],[WholesalerID],[CustomerID],[PrevBal],[PrevPerStart],[PrevPerEnd])
SELECT * FROM  [RAWCDRS].[dbo].[BAK_PrevInvoices] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [PrevInvoices] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [Commission] ON
INSERT INTO [Commission] ([ID],[WholesalerID],[CustomerID],[SalesPersonID],[BilledDate],[TotalCredits],[ProductCharges],[MiscCharges],[TotalAmount],[CommissionRate],[TotalCommission],[CurrencyID])
SELECT * FROM  [RAWCDRS].[dbo].[BAK_Commission] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [Commission] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

SET IDENTITY_INSERT [CommissionCustomer] ON
INSERT INTO [CommissionCustomer] ([ID],[WholesalerID],[CustomerID],[SalesPersonID],[InvoiceCount],[CreatedDate])
SELECT * FROM  [RAWCDRS].[dbo].[BAK_CommissionCustomer] WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID)
SET IDENTITY_INSERT [CommissionCustomer] OFF
IF (@@ERROR <> 0)
	GOTO RollBackTrans

--*/
--Rollback the FreeCredit Calculation as there could have been and issue there
UPDATE RATEDCDR SET RetailTotalCredit = 0
WHERE (@WholesalerID IS NULL OR WholesalerID = @WholesalerID) AND BillingStatus = 1 AND RetailTotalCredit <> 0
IF (@@ERROR <> 0)
	GOTO RollBackTrans

/*
JS: Sept/2014 - Add rollback handler for SeeVogh Overage Charges 
Rollback the SeeVogh Overage Charges: Need to reset the Billed value to 0 when we rollback billing
- Calc. the Start and EndDate of the Billing Period, using the last billing run
- Add 1 month so it will effect changes for the Billing run about to happen
*/
	Declare @BillingStartDate datetime, @BillingEndDate datetime
	SELECT TOP 1 @BillingStartDate=DATEADD(month,1,startdate), @BillingEndDate=(DATEADD(month,1,DATEADD(d,1,enddate)))
	--* 
	FROM InvoiceSummary ORDER BY StartDate DESC
	--Print @BillingStartDate; Print @BillingEndDate;
	UPDATE RAWCDRS.dbo.SeeVoghOverage SET Billed = 0
	WHERE Billed = 1 
		AND MeetingDate BETWEEN @BillingStartDate AND @BillingEndDate
	IF (@@ERROR <> 0)
		GOTO RollBackTrans

GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
	RAISERROR ('Billing Run Error: [p_UTIL_INV_ROLLBACK_INVOICING_TABLES] had an error. Please signout and login to try your request again. 
		If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
GOTO END_SP -- Have to skip commit trans if rollback called

CommitTrans:
COMMIT TRANSACTION
END_SP:



			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_UTIL_Accounting_ExportInvoices"  skip="true">
			<comment><![CDATA[/*****************************************************************************
PURPOSE: Returns Quickbooks Invoice in IIF format

-- SAMPLE OUTPUT
!TRNS	TRNSID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	NAMEISTAXABLE	ADDR1	ADDR2	ADDR3	ADDR4	DUEDATE	TERMS	PAID
!SPL	SPLID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	PRICE	INVITEM	PAYMETH	TAXABLE	VALADJ	TAXCODE	TAXAMOUNT	TAXITEM
!ENDTRNS																
TRNS	4	TAX INVOICE	10/31/08	Accounts Receivable	"- Redback Internal Use"	970.73	9900000103108	9900000						11/30/08		
SPL	5	TAX INVOICE	10/31/08	Conferencing		-882.48			882.48	Conferencing		Y		GST	-88.25	GST
SPL	6	TAX INVOICE	10/31/08	Other Income		0.00			0.00	Other Income		Y		GST	0.00	GST
ENDTRNS																

EXAMPLES:
	EXEC [p_UTIL_Accounting_ExportInvoices] '0000000001','oct 1 2008'
****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @ARAcctName varchar(50),@ConfAcctName varchar(50),@MiscAcctName varchar(50),
@GSTAcctName varchar(50),@GSTClassName varchar(50)-- special name for GST acct.
,@TransTypeName varchar(50)
--Variables for Cursor
, @CustomerID int, @EndDate varchar(50), @DueDate varchar(50), @CompanyName varchar(100),@LocalTax decimal(8,4)

SET @ARAcctName = 'Accounts Receivable'
SET @ConfAcctName = 'Conferencing'
SET @MiscAcctName = 'Other Income'
SET @GSTAcctName = 'GST'
SET @GSTClassName = 'Receiver General'
SET @TransTypeName = 'TAX INVOICE'

--Table matches the IIF standard for Invoices for Columns in row #1 but has the same number of colums for both rows
-- This is critical as the logic builds the individual rows one at a time so needs the same number of columns.
-- In other words, the Temp Table column names could be anything but just used the name from the first column
--DROP TABLE #TempInvoiceExport
	CREATE TABLE #TempInvoiceExport (
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[TRNS] varchar(50),
		[TRNSID] varchar(50),
		[TRNSTYPE] varchar(50),
		[DATE] varchar(50), --Transaction Date
		[ACCNT] varchar(50), --QB Account Name
		[NAME] varchar(200), --Company Name, QB can only import 41 chars
		[AMOUNT] varchar(50), --Full Trans. Amt
		DOCNUM varchar(50), --Invoice Number
		MEMO varchar(50), --Just text fill of item
		NAMEISTAXABLE varchar(50), -- Y or N if the customer is taxable or not
		ADDR1 varchar(50), --
		ADDR2 varchar(50), --
		ADDR3 varchar(50), --
		ADDR4 varchar(50), --
		DUEDATE varchar(50), -- Invoice due date
		TERMS varchar(50), -- 
		PAID varchar(50) --
	) ON [PRIMARY]

/* SAMPLE IIF
!TRNS	TRNSID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	NAMEISTAXABLE	ADDR1	ADDR2	ADDR3	ADDR4	DUEDATE	TERMS	PAID
!SPL	SPLID	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT	DOCNUM	MEMO	PRICE	INVITEM	PAYMETH	TAXABLE	VALADJ	TAXCODE	TAXAMOUNT	TAXITEM
!ENDTRNS																
TRNS		TAX INVOICE	06/16/09	Accounts Receivable	%COMPANYNAME%	25	5			 	"Sydney, nsw 1052"	Australia		06/16/09		
SPL		TAX INVOICE	06/16/09	Conferencing		-22.73		Conferencing	22.73	Conferencing		Y		GST	-2.27	GST
ENDTRNS																
TRNS		TAX INVOICE	06/16/09	Accounts Receivable	Redback	13.2	6			 	Australia Street	"Homebush,"	"Sydney, NSW 2140"	06/16/09		
SPL		TAX INVOICE	06/16/09	Conferencing		-12		Other Income	12	Other Income		Y		GST	-1.2	GST
ENDTRNS																
					NOTE:  this should be the company name not the account number as it will be easier to search in quick books.											
--OLD FORMAT
!TRNS	TRNSID	TIMESTAMP	TRNSTYPE	DATE	ACCNT	NAME	AMOUNT
!SPL	SPLID		TRNSTYPE	DATE	ACCNT	NAME	AMOUNT
!ENDTRNS							
TRNS	1	1	INVOICE	02/28/09	Accounts Receivable	9900000	400
SPL	2		INVOICE	02/28/09	Conferencing		-200
SPL	3		INVOICE	02/28/09	Other Income		-200
SPL	4		INVOICE	02/28/09	GST Payable	Receiver General	0
ENDTRNS							
*/

--1st row
	INSERT INTO #TempInvoiceExport
	SELECT '!TRNS','TRNSID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','NAMEISTAXABLE','ADDR1','ADDR2','ADDR3','ADDR4','DUEDATE','TERMS','PAID'
--2nd row
	INSERT INTO #TempInvoiceExport
	SELECT '!SPL','SPLID','TRNSTYPE','DATE','ACCNT','NAME','AMOUNT','DOCNUM','MEMO','PRICE','INVITEM','PAYMETH','TAXABLE','VALADJ','TAXCODE','TAXAMOUNT','TAXITEM'
--3nd row
	INSERT INTO #TempInvoiceExport
	SELECT '!ENDTRNS','','','','','','','','','','','','','','','',''

/* Debugging:
 SELECT CustomerID,dbo.fn_FormatDate(EndDate,'MM/DD/YY') AS EndDate,dbo.fn_FormatDate(DueDate,'MM/DD/YY') AS DueDate
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, State.LocalTax AS LocalTax
	,* 
	FROM Invoicesummary INV INNER JOIN Customer C ON INV.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	INNER JOIN State ON C.BillingContactRegion = State.ID
	WHERE INV.WholesalerID = '0000000001' AND INV.StartDate = 'mar 1 2009'
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY INV.PriCustomerNumber
*/
DECLARE customer_cursor CURSOR FAST_FORWARD
FOR SELECT CustomerID,dbo.fn_FormatDate(EndDate,'MM/DD/YY') AS EndDate,dbo.fn_FormatDate(DueDate,'MM/DD/YY') AS DueDate
	,'"' + SUBSTRING(Comp.Description,1,41) + '"' AS CompanyName, State.LocalTax AS LocalTax
	--,* 
	FROM Invoicesummary INV INNER JOIN Customer C ON INV.CustomerID = C.ID
	INNER JOIN Company Comp ON C.CompanyID = Comp.ID
	INNER JOIN State ON C.BillingContactRegion = State.ID
	WHERE INV.WholesalerID = @WholesalerID AND INV.StartDate = @InvoiceDate
	--REMOVE Customers that shouldn't Effect Revenue
	AND C.ID NOT IN (SELECT CustomerID FROM vw_FeatureOptionsForCustomers WHERE FeatureName = 'Include in Revenue' AND FeatureOptionName = 'No')
	ORDER BY INV.PriCustomerNumber
OPEN customer_cursor
FETCH NEXT FROM customer_cursor INTO @CustomerID, @EndDate,@DueDate,@CompanyName,@LocalTax
	WHILE @@FETCH_STATUS = 0
	BEGIN
	-- Generate the different types of rows, Leave TRNSID, and SPLID blank
	--Full amount Row, TRNS Header
	INSERT INTO #TempInvoiceExport		
	SELECT 'TRNS','',@TransTypeName,@EndDate,@ARAcctName,@CompanyName,TotalCurrent,InvoiceNumber,PriCustomerNumber,'','','','','',@DueDate,'',''
	FROM Invoicesummary
	WHERE WholesalerID = @WholesalerID AND StartDate = @InvoiceDate AND CustomerID = @CustomerID

	--Conferning Charges, with GST	
	INSERT INTO #TempInvoiceExport
	SELECT 'SPL','',@TransTypeName,@EndDate,@ConfAcctName,'',(ProductCharges * -1),'','',ProductCharges,@ConfAcctName,'','Y','',@GSTAcctName,CAST(ROUND((ProductCharges * @LocalTax * -1),2) AS Decimal(9,2)),@GSTAcctName
	FROM Invoicesummary 
	WHERE WholesalerID = @WholesalerID AND StartDate = @InvoiceDate AND CustomerID = @CustomerID

	--Other Charges, with GST
	INSERT INTO #TempInvoiceExport		
	SELECT 'SPL','',@TransTypeName,@EndDate,@MiscAcctName,'',(MiscCharges * -1),'','',MiscCharges,@MiscAcctName,'','Y','',@GSTAcctName,CAST(ROUND((MiscCharges * @LocalTax * -1),2) AS Decimal(9,2)),@GSTAcctName
	FROM Invoicesummary 
	WHERE WholesalerID = @WholesalerID AND StartDate = @InvoiceDate AND CustomerID = @CustomerID

	INSERT INTO #TempInvoiceExport
	SELECT 'ENDTRNS','','','','','','','','','','','','','','','',''

	FETCH NEXT FROM customer_cursor INTO @CustomerID, @EndDate,@DueDate,@CompanyName,@LocalTax
	END
CLOSE customer_cursor
DEALLOCATE customer_cursor

-- Clean up the data a bit
	UPDATE #TempInvoiceExport SET TRNSID = ID --REMOVED, [TIMESTAMP] = ID
	FROM #TempInvoiceExport WHERE TRNS = 'TRNS'

	UPDATE #TempInvoiceExport SET TRNSID = ID
	FROM #TempInvoiceExport WHERE TRNS = 'SPL'

SELECT [TRNS],[TRNSID],[TRNSTYPE] ,[DATE] ,[ACCNT] ,[NAME] ,[AMOUNT],DOCNUM,MEMO, NAMEISTAXABLE, ADDR1
	, ADDR2, ADDR3, ADDR4, DUEDATE, TERMS AS TERMS, PAID
FROM #TempInvoiceExport

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pTicketCategory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketCategory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketCategory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketCategory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketCategory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketCategory]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketCategory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketCategory]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketCategory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketCategory] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketCategory_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketCategory]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketCategory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketCategory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketCategory]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketCategory]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketCategory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketCategory table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayOrder]
					, [Deleted]
					FROM [dbo].[TicketCategory] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayOrder],
				       [Deleted]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketCategory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTaxable_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Taxable table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[Taxable]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTaxable_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Taxable table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Taxable]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Taxable]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTaxable_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Taxable table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Taxable]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTaxable_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Taxable table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Taxable]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTaxable_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Taxable table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Taxable] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTaxable_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Taxable table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[Taxable]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTaxable_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Taxable table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[Taxable]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[Taxable]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTaxable_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Taxable table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[Taxable] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Taxable] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWholesaler_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWholesaler_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [CompanyShortName]'
				SET @SQL = @SQL + ', [RetailPriCustomerNumber]'
				SET @SQL = @SQL + ', [RetailPriCustomerNumberLIKEExp]'
				SET @SQL = @SQL + ', [DefaultModCodeLength]'
				SET @SQL = @SQL + ', [DefaultPassCodeLength]'
				SET @SQL = @SQL + ', [DefaultPasswordLength]'
				SET @SQL = @SQL + ', [DefaultCapsOK]'
				SET @SQL = @SQL + ', [ModeratorTxt]'
				SET @SQL = @SQL + ', [ParticipantTxt]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CustomerNumberExceptionList]'
				SET @SQL = @SQL + ', [WebProductProviderName]'
				SET @SQL = @SQL + ', [WebProductProviderBranding]'
				SET @SQL = @SQL + ', [WebSecProductProvider]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingWholesalerID]'
				SET @SQL = @SQL + ', [BillingCustomerNumber]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [WebSiteURL]'
				SET @SQL = @SQL + ', [AdminSiteURL]'
				SET @SQL = @SQL + ', [AdminSiteIP]'
				SET @SQL = @SQL + ', [SelfServeURL]'
				SET @SQL = @SQL + ', [SelfServeIP]'
				SET @SQL = @SQL + ', [WebConferencingURL]'
				SET @SQL = @SQL + ', [WebConferencingIP]'
				SET @SQL = @SQL + ', [SupportEmail]'
				SET @SQL = @SQL + ', [SupportPhoneNumber]'
				SET @SQL = @SQL + ', [DoRetailBilling]'
				SET @SQL = @SQL + ', [CommissionLockDate]'
				SET @SQL = @SQL + ', [PortalID]'
				SET @SQL = @SQL + ', [BillingAddress1]'
				SET @SQL = @SQL + ', [BillingAddress2]'
				SET @SQL = @SQL + ', [BillingCity]'
				SET @SQL = @SQL + ', [BillingCountry]'
				SET @SQL = @SQL + ', [BillingRegion]'
				SET @SQL = @SQL + ', [BillingPostalCode]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [CompanyShortName],'
				SET @SQL = @SQL + ' [RetailPriCustomerNumber],'
				SET @SQL = @SQL + ' [RetailPriCustomerNumberLIKEExp],'
				SET @SQL = @SQL + ' [DefaultModCodeLength],'
				SET @SQL = @SQL + ' [DefaultPassCodeLength],'
				SET @SQL = @SQL + ' [DefaultPasswordLength],'
				SET @SQL = @SQL + ' [DefaultCapsOK],'
				SET @SQL = @SQL + ' [ModeratorTxt],'
				SET @SQL = @SQL + ' [ParticipantTxt],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CustomerNumberExceptionList],'
				SET @SQL = @SQL + ' [WebProductProviderName],'
				SET @SQL = @SQL + ' [WebProductProviderBranding],'
				SET @SQL = @SQL + ' [WebSecProductProvider],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingWholesalerID],'
				SET @SQL = @SQL + ' [BillingCustomerNumber],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [WebSiteURL],'
				SET @SQL = @SQL + ' [AdminSiteURL],'
				SET @SQL = @SQL + ' [AdminSiteIP],'
				SET @SQL = @SQL + ' [SelfServeURL],'
				SET @SQL = @SQL + ' [SelfServeIP],'
				SET @SQL = @SQL + ' [WebConferencingURL],'
				SET @SQL = @SQL + ' [WebConferencingIP],'
				SET @SQL = @SQL + ' [SupportEmail],'
				SET @SQL = @SQL + ' [SupportPhoneNumber],'
				SET @SQL = @SQL + ' [DoRetailBilling],'
				SET @SQL = @SQL + ' [CommissionLockDate],'
				SET @SQL = @SQL + ' [PortalID],'
				SET @SQL = @SQL + ' [BillingAddress1],'
				SET @SQL = @SQL + ' [BillingAddress2],'
				SET @SQL = @SQL + ' [BillingCity],'
				SET @SQL = @SQL + ' [BillingCountry],'
				SET @SQL = @SQL + ' [BillingRegion],'
				SET @SQL = @SQL + ' [BillingPostalCode]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pWholesaler_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CompanyShortName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@RetailPriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@RetailPriCustomerNumberLikeExp" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@DefaultModCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultPassCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultPasswordLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultCapsOk" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParticipantTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerNumberExceptionList" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@WebProductProviderName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WebProductProviderBranding" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WebSecProductProvider" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingWholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@BillingCustomerNumber" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AdminSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AdminSiteIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SelfServeUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SelfServeIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebConferencingUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebConferencingIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SupportEmail" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SupportPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@DoRetailBilling" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CommissionLockDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PortalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Wholesaler]
					(
					[ID]
					,[CompanyName]
					,[CompanyShortName]
					,[RetailPriCustomerNumber]
					,[RetailPriCustomerNumberLIKEExp]
					,[DefaultModCodeLength]
					,[DefaultPassCodeLength]
					,[DefaultPasswordLength]
					,[DefaultCapsOK]
					,[ModeratorTxt]
					,[ParticipantTxt]
					,[Enabled]
					,[CustomerNumberExceptionList]
					,[WebProductProviderName]
					,[WebProductProviderBranding]
					,[WebSecProductProvider]
					,[CurrencyID]
					,[BillingWholesalerID]
					,[BillingCustomerNumber]
					,[TaxableID]
					,[WebSiteURL]
					,[AdminSiteURL]
					,[AdminSiteIP]
					,[SelfServeURL]
					,[SelfServeIP]
					,[WebConferencingURL]
					,[WebConferencingIP]
					,[SupportEmail]
					,[SupportPhoneNumber]
					,[DoRetailBilling]
					,[CommissionLockDate]
					,[PortalID]
					,[BillingAddress1]
					,[BillingAddress2]
					,[BillingCity]
					,[BillingCountry]
					,[BillingRegion]
					,[BillingPostalCode]
					)
				VALUES
					(
					@Id
					,@CompanyName
					,@CompanyShortName
					,@RetailPriCustomerNumber
					,@RetailPriCustomerNumberLikeExp
					,@DefaultModCodeLength
					,@DefaultPassCodeLength
					,@DefaultPasswordLength
					,@DefaultCapsOk
					,@ModeratorTxt
					,@ParticipantTxt
					,@Enabled
					,@CustomerNumberExceptionList
					,@WebProductProviderName
					,@WebProductProviderBranding
					,@WebSecProductProvider
					,@CurrencyId
					,@BillingWholesalerId
					,@BillingCustomerNumber
					,@TaxableId
					,@WebSiteUrl
					,@AdminSiteUrl
					,@AdminSiteIp
					,@SelfServeUrl
					,@SelfServeIp
					,@WebConferencingUrl
					,@WebConferencingIp
					,@SupportEmail
					,@SupportPhoneNumber
					,@DoRetailBilling
					,@CommissionLockDate
					,@PortalId
					,@BillingAddress1
					,@BillingAddress2
					,@BillingCity
					,@BillingCountry
					,@BillingRegion
					,@BillingPostalCode
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CompanyShortName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@RetailPriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@RetailPriCustomerNumberLikeExp" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@DefaultModCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultPassCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultPasswordLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultCapsOk" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParticipantTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerNumberExceptionList" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@WebProductProviderName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WebProductProviderBranding" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WebSecProductProvider" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingWholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@BillingCustomerNumber" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AdminSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AdminSiteIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SelfServeUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SelfServeIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebConferencingUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebConferencingIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SupportEmail" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SupportPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@DoRetailBilling" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CommissionLockDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PortalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BillingAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler]
				SET
					[ID] = @Id
					,[CompanyName] = @CompanyName
					,[CompanyShortName] = @CompanyShortName
					,[RetailPriCustomerNumber] = @RetailPriCustomerNumber
					,[RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp
					,[DefaultModCodeLength] = @DefaultModCodeLength
					,[DefaultPassCodeLength] = @DefaultPassCodeLength
					,[DefaultPasswordLength] = @DefaultPasswordLength
					,[DefaultCapsOK] = @DefaultCapsOk
					,[ModeratorTxt] = @ModeratorTxt
					,[ParticipantTxt] = @ParticipantTxt
					,[Enabled] = @Enabled
					,[CustomerNumberExceptionList] = @CustomerNumberExceptionList
					,[WebProductProviderName] = @WebProductProviderName
					,[WebProductProviderBranding] = @WebProductProviderBranding
					,[WebSecProductProvider] = @WebSecProductProvider
					,[CurrencyID] = @CurrencyId
					,[BillingWholesalerID] = @BillingWholesalerId
					,[BillingCustomerNumber] = @BillingCustomerNumber
					,[TaxableID] = @TaxableId
					,[WebSiteURL] = @WebSiteUrl
					,[AdminSiteURL] = @AdminSiteUrl
					,[AdminSiteIP] = @AdminSiteIp
					,[SelfServeURL] = @SelfServeUrl
					,[SelfServeIP] = @SelfServeIp
					,[WebConferencingURL] = @WebConferencingUrl
					,[WebConferencingIP] = @WebConferencingIp
					,[SupportEmail] = @SupportEmail
					,[SupportPhoneNumber] = @SupportPhoneNumber
					,[DoRetailBilling] = @DoRetailBilling
					,[CommissionLockDate] = @CommissionLockDate
					,[PortalID] = @PortalId
					,[BillingAddress1] = @BillingAddress1
					,[BillingAddress2] = @BillingAddress2
					,[BillingCity] = @BillingCity
					,[BillingCountry] = @BillingCountry
					,[BillingRegion] = @BillingRegion
					,[BillingPostalCode] = @BillingPostalCode
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Wholesaler] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetByCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetByBillingCountry" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillingCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[BillingCountry] = @BillingCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetByBillingRegion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillingRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[BillingRegion] = @BillingRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetByTaxableId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWholesaler_GetByLanguageIdFromIrWholesaler" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Wholesaler].[ID]
       ,dbo.[Wholesaler].[CompanyName]
       ,dbo.[Wholesaler].[CompanyShortName]
       ,dbo.[Wholesaler].[RetailPriCustomerNumber]
       ,dbo.[Wholesaler].[RetailPriCustomerNumberLIKEExp]
       ,dbo.[Wholesaler].[DefaultModCodeLength]
       ,dbo.[Wholesaler].[DefaultPassCodeLength]
       ,dbo.[Wholesaler].[DefaultPasswordLength]
       ,dbo.[Wholesaler].[DefaultCapsOK]
       ,dbo.[Wholesaler].[ModeratorTxt]
       ,dbo.[Wholesaler].[ParticipantTxt]
       ,dbo.[Wholesaler].[Enabled]
       ,dbo.[Wholesaler].[CustomerNumberExceptionList]
       ,dbo.[Wholesaler].[WebProductProviderName]
       ,dbo.[Wholesaler].[WebProductProviderBranding]
       ,dbo.[Wholesaler].[WebSecProductProvider]
       ,dbo.[Wholesaler].[CurrencyID]
       ,dbo.[Wholesaler].[BillingWholesalerID]
       ,dbo.[Wholesaler].[BillingCustomerNumber]
       ,dbo.[Wholesaler].[TaxableID]
       ,dbo.[Wholesaler].[WebSiteURL]
       ,dbo.[Wholesaler].[AdminSiteURL]
       ,dbo.[Wholesaler].[AdminSiteIP]
       ,dbo.[Wholesaler].[SelfServeURL]
       ,dbo.[Wholesaler].[SelfServeIP]
       ,dbo.[Wholesaler].[WebConferencingURL]
       ,dbo.[Wholesaler].[WebConferencingIP]
       ,dbo.[Wholesaler].[SupportEmail]
       ,dbo.[Wholesaler].[SupportPhoneNumber]
       ,dbo.[Wholesaler].[DoRetailBilling]
       ,dbo.[Wholesaler].[CommissionLockDate]
       ,dbo.[Wholesaler].[PortalID]
       ,dbo.[Wholesaler].[BillingAddress1]
       ,dbo.[Wholesaler].[BillingAddress2]
       ,dbo.[Wholesaler].[BillingCity]
       ,dbo.[Wholesaler].[BillingCountry]
       ,dbo.[Wholesaler].[BillingRegion]
       ,dbo.[Wholesaler].[BillingPostalCode]
  FROM dbo.[Wholesaler]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[IRWholesaler] 
                WHERE dbo.[IRWholesaler].[LanguageID] = @LanguageId
                  AND dbo.[IRWholesaler].[WholesalerID] = dbo.[Wholesaler].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CompanyShortName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@RetailPriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@RetailPriCustomerNumberLikeExp" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@DefaultModCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@DefaultPassCodeLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@DefaultPasswordLength" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@DefaultCapsOk" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ParticipantTxt" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerNumberExceptionList" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@WebProductProviderName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WebProductProviderBranding" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WebSecProductProvider" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingWholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@BillingCustomerNumber" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WebSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@AdminSiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@AdminSiteIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@SelfServeUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@SelfServeIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@WebConferencingUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@WebConferencingIp" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@SupportEmail" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SupportPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@DoRetailBilling" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CommissionLockDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@PortalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BillingAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyName]
	, [CompanyShortName]
	, [RetailPriCustomerNumber]
	, [RetailPriCustomerNumberLIKEExp]
	, [DefaultModCodeLength]
	, [DefaultPassCodeLength]
	, [DefaultPasswordLength]
	, [DefaultCapsOK]
	, [ModeratorTxt]
	, [ParticipantTxt]
	, [Enabled]
	, [CustomerNumberExceptionList]
	, [WebProductProviderName]
	, [WebProductProviderBranding]
	, [WebSecProductProvider]
	, [CurrencyID]
	, [BillingWholesalerID]
	, [BillingCustomerNumber]
	, [TaxableID]
	, [WebSiteURL]
	, [AdminSiteURL]
	, [AdminSiteIP]
	, [SelfServeURL]
	, [SelfServeIP]
	, [WebConferencingURL]
	, [WebConferencingIP]
	, [SupportEmail]
	, [SupportPhoneNumber]
	, [DoRetailBilling]
	, [CommissionLockDate]
	, [PortalID]
	, [BillingAddress1]
	, [BillingAddress2]
	, [BillingCity]
	, [BillingCountry]
	, [BillingRegion]
	, [BillingPostalCode]
    FROM
	[dbo].[Wholesaler]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([CompanyShortName] = @CompanyShortName OR @CompanyShortName IS NULL)
	AND ([RetailPriCustomerNumber] = @RetailPriCustomerNumber OR @RetailPriCustomerNumber IS NULL)
	AND ([RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp OR @RetailPriCustomerNumberLikeExp IS NULL)
	AND ([DefaultModCodeLength] = @DefaultModCodeLength OR @DefaultModCodeLength IS NULL)
	AND ([DefaultPassCodeLength] = @DefaultPassCodeLength OR @DefaultPassCodeLength IS NULL)
	AND ([DefaultPasswordLength] = @DefaultPasswordLength OR @DefaultPasswordLength IS NULL)
	AND ([DefaultCapsOK] = @DefaultCapsOk OR @DefaultCapsOk IS NULL)
	AND ([ModeratorTxt] = @ModeratorTxt OR @ModeratorTxt IS NULL)
	AND ([ParticipantTxt] = @ParticipantTxt OR @ParticipantTxt IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([CustomerNumberExceptionList] = @CustomerNumberExceptionList OR @CustomerNumberExceptionList IS NULL)
	AND ([WebProductProviderName] = @WebProductProviderName OR @WebProductProviderName IS NULL)
	AND ([WebProductProviderBranding] = @WebProductProviderBranding OR @WebProductProviderBranding IS NULL)
	AND ([WebSecProductProvider] = @WebSecProductProvider OR @WebSecProductProvider IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([BillingWholesalerID] = @BillingWholesalerId OR @BillingWholesalerId IS NULL)
	AND ([BillingCustomerNumber] = @BillingCustomerNumber OR @BillingCustomerNumber IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([WebSiteURL] = @WebSiteUrl OR @WebSiteUrl IS NULL)
	AND ([AdminSiteURL] = @AdminSiteUrl OR @AdminSiteUrl IS NULL)
	AND ([AdminSiteIP] = @AdminSiteIp OR @AdminSiteIp IS NULL)
	AND ([SelfServeURL] = @SelfServeUrl OR @SelfServeUrl IS NULL)
	AND ([SelfServeIP] = @SelfServeIp OR @SelfServeIp IS NULL)
	AND ([WebConferencingURL] = @WebConferencingUrl OR @WebConferencingUrl IS NULL)
	AND ([WebConferencingIP] = @WebConferencingIp OR @WebConferencingIp IS NULL)
	AND ([SupportEmail] = @SupportEmail OR @SupportEmail IS NULL)
	AND ([SupportPhoneNumber] = @SupportPhoneNumber OR @SupportPhoneNumber IS NULL)
	AND ([DoRetailBilling] = @DoRetailBilling OR @DoRetailBilling IS NULL)
	AND ([CommissionLockDate] = @CommissionLockDate OR @CommissionLockDate IS NULL)
	AND ([PortalID] = @PortalId OR @PortalId IS NULL)
	AND ([BillingAddress1] = @BillingAddress1 OR @BillingAddress1 IS NULL)
	AND ([BillingAddress2] = @BillingAddress2 OR @BillingAddress2 IS NULL)
	AND ([BillingCity] = @BillingCity OR @BillingCity IS NULL)
	AND ([BillingCountry] = @BillingCountry OR @BillingCountry IS NULL)
	AND ([BillingRegion] = @BillingRegion OR @BillingRegion IS NULL)
	AND ([BillingPostalCode] = @BillingPostalCode OR @BillingPostalCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyName]
	, [CompanyShortName]
	, [RetailPriCustomerNumber]
	, [RetailPriCustomerNumberLIKEExp]
	, [DefaultModCodeLength]
	, [DefaultPassCodeLength]
	, [DefaultPasswordLength]
	, [DefaultCapsOK]
	, [ModeratorTxt]
	, [ParticipantTxt]
	, [Enabled]
	, [CustomerNumberExceptionList]
	, [WebProductProviderName]
	, [WebProductProviderBranding]
	, [WebSecProductProvider]
	, [CurrencyID]
	, [BillingWholesalerID]
	, [BillingCustomerNumber]
	, [TaxableID]
	, [WebSiteURL]
	, [AdminSiteURL]
	, [AdminSiteIP]
	, [SelfServeURL]
	, [SelfServeIP]
	, [WebConferencingURL]
	, [WebConferencingIP]
	, [SupportEmail]
	, [SupportPhoneNumber]
	, [DoRetailBilling]
	, [CommissionLockDate]
	, [PortalID]
	, [BillingAddress1]
	, [BillingAddress2]
	, [BillingCity]
	, [BillingCountry]
	, [BillingRegion]
	, [BillingPostalCode]
    FROM
	[dbo].[Wholesaler]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([CompanyShortName] = @CompanyShortName AND @CompanyShortName is not null)
	OR ([RetailPriCustomerNumber] = @RetailPriCustomerNumber AND @RetailPriCustomerNumber is not null)
	OR ([RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp AND @RetailPriCustomerNumberLikeExp is not null)
	OR ([DefaultModCodeLength] = @DefaultModCodeLength AND @DefaultModCodeLength is not null)
	OR ([DefaultPassCodeLength] = @DefaultPassCodeLength AND @DefaultPassCodeLength is not null)
	OR ([DefaultPasswordLength] = @DefaultPasswordLength AND @DefaultPasswordLength is not null)
	OR ([DefaultCapsOK] = @DefaultCapsOk AND @DefaultCapsOk is not null)
	OR ([ModeratorTxt] = @ModeratorTxt AND @ModeratorTxt is not null)
	OR ([ParticipantTxt] = @ParticipantTxt AND @ParticipantTxt is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([CustomerNumberExceptionList] = @CustomerNumberExceptionList AND @CustomerNumberExceptionList is not null)
	OR ([WebProductProviderName] = @WebProductProviderName AND @WebProductProviderName is not null)
	OR ([WebProductProviderBranding] = @WebProductProviderBranding AND @WebProductProviderBranding is not null)
	OR ([WebSecProductProvider] = @WebSecProductProvider AND @WebSecProductProvider is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([BillingWholesalerID] = @BillingWholesalerId AND @BillingWholesalerId is not null)
	OR ([BillingCustomerNumber] = @BillingCustomerNumber AND @BillingCustomerNumber is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([WebSiteURL] = @WebSiteUrl AND @WebSiteUrl is not null)
	OR ([AdminSiteURL] = @AdminSiteUrl AND @AdminSiteUrl is not null)
	OR ([AdminSiteIP] = @AdminSiteIp AND @AdminSiteIp is not null)
	OR ([SelfServeURL] = @SelfServeUrl AND @SelfServeUrl is not null)
	OR ([SelfServeIP] = @SelfServeIp AND @SelfServeIp is not null)
	OR ([WebConferencingURL] = @WebConferencingUrl AND @WebConferencingUrl is not null)
	OR ([WebConferencingIP] = @WebConferencingIp AND @WebConferencingIp is not null)
	OR ([SupportEmail] = @SupportEmail AND @SupportEmail is not null)
	OR ([SupportPhoneNumber] = @SupportPhoneNumber AND @SupportPhoneNumber is not null)
	OR ([DoRetailBilling] = @DoRetailBilling AND @DoRetailBilling is not null)
	OR ([CommissionLockDate] = @CommissionLockDate AND @CommissionLockDate is not null)
	OR ([PortalID] = @PortalId AND @PortalId is not null)
	OR ([BillingAddress1] = @BillingAddress1 AND @BillingAddress1 is not null)
	OR ([BillingAddress2] = @BillingAddress2 AND @BillingAddress2 is not null)
	OR ([BillingCity] = @BillingCity AND @BillingCity is not null)
	OR ([BillingCountry] = @BillingCountry AND @BillingCountry is not null)
	OR ([BillingRegion] = @BillingRegion AND @BillingRegion is not null)
	OR ([BillingPostalCode] = @BillingPostalCode AND @BillingPostalCode is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pWholesaler_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CompanyName]
					, [CompanyShortName]
					, [RetailPriCustomerNumber]
					, [RetailPriCustomerNumberLIKEExp]
					, [DefaultModCodeLength]
					, [DefaultPassCodeLength]
					, [DefaultPasswordLength]
					, [DefaultCapsOK]
					, [ModeratorTxt]
					, [ParticipantTxt]
					, [Enabled]
					, [CustomerNumberExceptionList]
					, [WebProductProviderName]
					, [WebProductProviderBranding]
					, [WebSecProductProvider]
					, [CurrencyID]
					, [BillingWholesalerID]
					, [BillingCustomerNumber]
					, [TaxableID]
					, [WebSiteURL]
					, [AdminSiteURL]
					, [AdminSiteIP]
					, [SelfServeURL]
					, [SelfServeIP]
					, [WebConferencingURL]
					, [WebConferencingIP]
					, [SupportEmail]
					, [SupportPhoneNumber]
					, [DoRetailBilling]
					, [CommissionLockDate]
					, [PortalID]
					, [BillingAddress1]
					, [BillingAddress2]
					, [BillingCity]
					, [BillingCountry]
					, [BillingRegion]
					, [BillingPostalCode]
					FROM [dbo].[Wholesaler] {0}
				)
				SELECT
				       [ID],
				       [CompanyName],
				       [CompanyShortName],
				       [RetailPriCustomerNumber],
				       [RetailPriCustomerNumberLIKEExp],
				       [DefaultModCodeLength],
				       [DefaultPassCodeLength],
				       [DefaultPasswordLength],
				       [DefaultCapsOK],
				       [ModeratorTxt],
				       [ParticipantTxt],
				       [Enabled],
				       [CustomerNumberExceptionList],
				       [WebProductProviderName],
				       [WebProductProviderBranding],
				       [WebSecProductProvider],
				       [CurrencyID],
				       [BillingWholesalerID],
				       [BillingCustomerNumber],
				       [TaxableID],
				       [WebSiteURL],
				       [AdminSiteURL],
				       [AdminSiteIP],
				       [SelfServeURL],
				       [SelfServeIP],
				       [WebConferencingURL],
				       [WebConferencingIP],
				       [SupportEmail],
				       [SupportPhoneNumber],
				       [DoRetailBilling],
				       [CommissionLockDate],
				       [PortalID],
				       [BillingAddress1],
				       [BillingAddress2],
				       [BillingCity],
				       [BillingCountry],
				       [BillingRegion],
				       [BillingPostalCode]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Wholesaler] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Wholesaler_Product_InstallDefaults"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To install the defaults for the Wholesaler after they have inserted a record into ''Wholesaler_Product'' table.
NOTE: This tables is used for the rebanding of Products. Business rules are	included
	to copy the data over for the Wholesaler based on the Product being added.

-- Test Code below, make sure to comment out the Insert statments before running.
DECLARE @RC int
DECLARE @Wholesaler_ProductID int
DECLARE @ProductID int
DECLARE @WholesalerID char(10)

-- TODO: Set parameter values here.
SET @Wholesaler_ProductID = 1234
SET @ProductID = 1 --Audio
SET @WholesalerID = '0000000000'


EXECUTE @RC = [CONFDB].[dbo].[p_Wholesaler_Product_InstallDefaults_TEST] 
   @Wholesaler_ProductID
  ,@ProductID
  ,@WholesalerID

Print @Wholesaler_ProductID
*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@Wholesaler_ProductID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN TRANSACTION

--Setup Var''s
DECLARE @WSBuyRateCurrencyID varchar(3)

--Look up Wholesalers Currency, this is used to replace the BuyRateCurrencyID as a Wholesaler should only be billed in one Currency.
	SELECT @WSBuyRateCurrencyID=CurrencyID FROM Wholesaler WHERE ID = @WholesalerID

-- Copy all Rates for the Product
--NOTES: DefaultOption = 1 is for System Wide rates only. BuyRateCurrencyID is changed to the WS'er Currency. Bulk Edit the values to the WS'er BuyRate
	INSERT INTO [ProductRateValue]([ProductRateID],[SellRate],[SellRateCurrencyID],[BuyRate],[BuyRateCurrencyID],[DefaultOption],[StartDate],[WholesalerID],[CustomerID])
	SELECT     ProductRateValue.ProductRateID, ProductRateValue.[SellRate], ProductRateValue.[SellRateCurrencyID], ProductRateValue.[BuyRate]
		, @WSBuyRateCurrencyID, 0 AS DefaultOption, ProductRateValue.[StartDate], @WholesalerID AS WholesalerID, NULL AS CustomerID
	FROM         ProductRateValue INNER JOIN
						  ProductRate ON ProductRateValue.ProductRateID = ProductRate.ID INNER JOIN
						  Product ON ProductRate.ProductID = Product.ID
	WHERE     (Product.ID = @ProductID) AND (ProductRateValue.DefaultOption = 1)
	IF @@error != 0
		GOTO RollBackTrans

--Copy the Default Feature Options for the Product.
	INSERT INTO Wholesaler_Product_Feature
	SELECT     @Wholesaler_ProductID AS Wholesaler_ProductID, Feature.ID AS FeatureID, FeatureOption.ID AS FeatureOptionID, Feature.Enabled, NULL AS FeatureOptionValue
	FROM         Product INNER JOIN
						  Feature ON Product.ID = Feature.ProductID INNER JOIN
						  FeatureOption ON Feature.ID = FeatureOption.FeatureID
	WHERE     (Product.ID = @ProductID) AND (FeatureOption.DefaultOption = 1)
	IF @@error != 0
		GOTO RollBackTrans

GOTO CommitTrans
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Wholesaler_UpdateProductFeature"  skip="true">
			<comment><![CDATA[/* =============================================
	Updates the Wholesaler_Feature table for the Wholesaler based on the Wholesaler_FeatureID.
NOTE: Added the functionality to push the set down to all moderators.

Example:
	Select Wholesaler_Product_Feature.* from Feature inner join dbo.Wholesaler_Product_Feature on Feature.id = dbo.Wholesaler_Product_Feature.Featureid
	Select * from Feature inner join customer_Feature on Feature.id = customer_Feature.Featureid
	Select * from Feature inner join moderator_Feature on Feature.id = moderator_Feature.Featureid

	EXEC p_Wholesaler_UpdateProductFeature @WholesalerID='0000000001',@Wholesaler_Product_FeatureID=1, @FeatureID=33
		,@FeatureOptionID=255,@FeatureOptionValue=null, @UpdateCustomers=1,@UpdateModerators=1

*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Wholesaler_Product_FeatureID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UpdateCustomers" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UpdateModerators" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN

	UPDATE Wholesaler_Product_Feature SET FeatureOptionID=@FeatureOptionID, 
		FeatureOptionValue=@FeatureOptionValue
	WHERE Wholesaler_Product_Feature.FeatureID = @FeatureID AND Wholesaler_Product_Feature.ID = @Wholesaler_Product_FeatureID --Makes it unique

	IF @UpdateCustomers = 1
	BEGIN
		UPDATE Customer_Feature SET FeatureOptionID=@FeatureOptionID, 
			FeatureOptionValue=@FeatureOptionValue
		WHERE Customer_Feature.FeatureID = @FeatureID AND 
			Customer_Feature.CustomerID IN (SELECT ID FROM Customer WHERE WholesalerID = @WholesalerID) --Makes it unique
	END

	IF @UpdateModerators = 1
	BEGIN
		--Update all of the Modertors to match
		UPDATE Moderator_Feature SET FeatureOptionID=@FeatureOptionID,
			FeatureOptionValue=@FeatureOptionValue
		FROM Moderator_Feature INNER JOIN Moderator ON Moderator.ID = Moderator_Feature.ModeratorID
		WHERE Moderator_Feature.FeatureID = @FeatureID AND
			Moderator.WholesalerID = @WholesalerID
		--JS: Nov 26/2014 - Add new check to so that Moderators/Conference Features are not overridden
		AND Moderator_Feature.ModeratorID NOT IN (
		SELECT ModeratorID
		FROM vw_FeatureOptionsForModerators T1
		WHERE T1.ModeratorID = Moderator_Feature.ModeratorID AND FeatureName = 'LockConferenceFeatures'	AND FeatureOptionValue = '1' --Yes
		)
			
	END
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Wholesaler_GetProductRates"  skip="true">
			<comment><![CDATA[/*
 Returns the Products and Rates for the Wholesaler
Examples:
	EXEC p_Wholesaler_GetProductRates '0000000001'
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT ProductRateValueID, WholesalerID, Wholesaler_ProductName, ProductTypeDisplayName, ProductRateValueSellRate
		, ProductRateValueSellRateCurrencyID,ProductRateValueBuyRate, ProductRateValueBuyRateCurrencyID, ProductRateDisplayName
		, ProductRateDescription, ProductRateTypeDisplayName, ProductRateID
--Select *	
	FROM         dbo.vw_ProductRatesForWholesaler
	WHERE     (WholesalerID = @WholesalerID) AND (Wholesaler_ProductEnabled = 1)
	ORDER BY Wholesaler_ProductDisplayOrder, ProductRateTypeDisplayOrder ASC, ProductRateDisplayOrder ASC, ProductRateValueBuyRateCurrencyID

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Wholesaler_GetProductFeatures"  skip="true">
			<comment><![CDATA[/* ================================================
Returns information for Wholesaler Features. Multiple
selects are performed to simplify the UI layer.

Examples:
	EXEC p_Wholesaler_GetProductFeatures '0000000001'
 ================================================ */
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT Wholesaler_Product_FeatureID, WholesalerID, Wholesaler_Product_FeatureFeatureID, Wholesaler_Product_FeatureFeatureOptionID, Wholesaler_Product_FeatureEnabled, 
						  Wholesaler_Product_FeatureFeatureOptionValue, FeatureDisplayName, FeatureDescription, FeatureDisplayNameAlt, FeatureDescriptionAlt, FeatureOptionID, 
						  FeatureOptionDisplayName, FeatureOptionDescription, FeatureOptionDisplayNameAlt, FeatureOptionDescriptionAlt, FeatureOptionValue, 
						  Wholesaler_ProductName, Wholesaler_ProductDescription, Wholesaler_ProductDisplayNameAlt, Wholesaler_ProductDescriptionAlt
	FROM         dbo.vw_FeatureOptionsForWholesalers
	WHERE     (FeatureEnabled = 1) AND (Wholesaler_ProductEnabled = 1) AND (FeatureOptionEnabled = 1)
	AND WholesalerID = @WholesalerID
	ORDER BY Wholesaler_ProductDisplayOrder, FeatureDisplayOrder, FeatureOptionDisplayOrder
END
			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pTicket_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Ticket table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicket_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Ticket table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [IssueDescription]'
				SET @SQL = @SQL + ', [ClientContactInfo]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [StatusID]'
				SET @SQL = @SQL + ', [ResolutionText]'
				SET @SQL = @SQL + ', [TicketPriorityID]'
				SET @SQL = @SQL + ', [CreatedByUserID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [AssignedToUserID]'
				SET @SQL = @SQL + ', [AssignedDate]'
				SET @SQL = @SQL + ', [FixedByUserID]'
				SET @SQL = @SQL + ', [FixedDate]'
				SET @SQL = @SQL + ', [ClosedByUserID]'
				SET @SQL = @SQL + ', [ClosedDate]'
				SET @SQL = @SQL + ', [TicketProductID]'
				SET @SQL = @SQL + ', [TicketCategoryID]'
				SET @SQL = @SQL + ', [DuplicateTicketID]'
				SET @SQL = @SQL + ' FROM [dbo].[Ticket]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [IssueDescription],'
				SET @SQL = @SQL + ' [ClientContactInfo],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [StatusID],'
				SET @SQL = @SQL + ' [ResolutionText],'
				SET @SQL = @SQL + ' [TicketPriorityID],'
				SET @SQL = @SQL + ' [CreatedByUserID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [AssignedToUserID],'
				SET @SQL = @SQL + ' [AssignedDate],'
				SET @SQL = @SQL + ' [FixedByUserID],'
				SET @SQL = @SQL + ' [FixedDate],'
				SET @SQL = @SQL + ' [ClosedByUserID],'
				SET @SQL = @SQL + ' [ClosedDate],'
				SET @SQL = @SQL + ' [TicketProductID],'
				SET @SQL = @SQL + ' [TicketCategoryID],'
				SET @SQL = @SQL + ' [DuplicateTicketID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Ticket]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicket_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Ticket table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IssueDescription" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ClientContactInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ResolutionText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketPriorityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@AssignedToUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FixedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FixedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ClosedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ClosedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TicketProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DuplicateTicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Ticket]
					(
					[ID]
					,[Title]
					,[IssueDescription]
					,[ClientContactInfo]
					,[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[StatusID]
					,[ResolutionText]
					,[TicketPriorityID]
					,[CreatedByUserID]
					,[CreatedDate]
					,[AssignedToUserID]
					,[AssignedDate]
					,[FixedByUserID]
					,[FixedDate]
					,[ClosedByUserID]
					,[ClosedDate]
					,[TicketProductID]
					,[TicketCategoryID]
					,[DuplicateTicketID]
					)
				VALUES
					(
					@Id
					,@Title
					,@IssueDescription
					,@ClientContactInfo
					,@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@StatusId
					,@ResolutionText
					,@TicketPriorityId
					,@CreatedByUserId
					,@CreatedDate
					,@AssignedToUserId
					,@AssignedDate
					,@FixedByUserId
					,@FixedDate
					,@ClosedByUserId
					,@ClosedDate
					,@TicketProductId
					,@TicketCategoryId
					,@DuplicateTicketId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Ticket table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IssueDescription" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ClientContactInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ResolutionText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketPriorityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@AssignedToUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FixedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FixedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ClosedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ClosedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TicketProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DuplicateTicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Ticket]
				SET
					[ID] = @Id
					,[Title] = @Title
					,[IssueDescription] = @IssueDescription
					,[ClientContactInfo] = @ClientContactInfo
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[StatusID] = @StatusId
					,[ResolutionText] = @ResolutionText
					,[TicketPriorityID] = @TicketPriorityId
					,[CreatedByUserID] = @CreatedByUserId
					,[CreatedDate] = @CreatedDate
					,[AssignedToUserID] = @AssignedToUserId
					,[AssignedDate] = @AssignedDate
					,[FixedByUserID] = @FixedByUserId
					,[FixedDate] = @FixedDate
					,[ClosedByUserID] = @ClosedByUserId
					,[ClosedDate] = @ClosedDate
					,[TicketProductID] = @TicketProductId
					,[TicketCategoryID] = @TicketCategoryId
					,[DuplicateTicketID] = @DuplicateTicketId
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Ticket table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Ticket] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByTicketProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketProductID] = @TicketProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[StatusID] = @StatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByTicketPriorityId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketPriorityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketPriorityID] = @TicketPriorityId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByTicketCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketCategoryID] = @TicketCategoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicket_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicket_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Ticket table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@IssueDescription" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ClientContactInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ResolutionText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@TicketPriorityId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@AssignedToUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@FixedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FixedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ClosedByUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ClosedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TicketProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TicketCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DuplicateTicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Title]
	, [IssueDescription]
	, [ClientContactInfo]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [StatusID]
	, [ResolutionText]
	, [TicketPriorityID]
	, [CreatedByUserID]
	, [CreatedDate]
	, [AssignedToUserID]
	, [AssignedDate]
	, [FixedByUserID]
	, [FixedDate]
	, [ClosedByUserID]
	, [ClosedDate]
	, [TicketProductID]
	, [TicketCategoryID]
	, [DuplicateTicketID]
    FROM
	[dbo].[Ticket]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([ClientContactInfo] = @ClientContactInfo OR @ClientContactInfo IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([StatusID] = @StatusId OR @StatusId IS NULL)
	AND ([TicketPriorityID] = @TicketPriorityId OR @TicketPriorityId IS NULL)
	AND ([CreatedByUserID] = @CreatedByUserId OR @CreatedByUserId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([AssignedToUserID] = @AssignedToUserId OR @AssignedToUserId IS NULL)
	AND ([AssignedDate] = @AssignedDate OR @AssignedDate IS NULL)
	AND ([FixedByUserID] = @FixedByUserId OR @FixedByUserId IS NULL)
	AND ([FixedDate] = @FixedDate OR @FixedDate IS NULL)
	AND ([ClosedByUserID] = @ClosedByUserId OR @ClosedByUserId IS NULL)
	AND ([ClosedDate] = @ClosedDate OR @ClosedDate IS NULL)
	AND ([TicketProductID] = @TicketProductId OR @TicketProductId IS NULL)
	AND ([TicketCategoryID] = @TicketCategoryId OR @TicketCategoryId IS NULL)
	AND ([DuplicateTicketID] = @DuplicateTicketId OR @DuplicateTicketId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Title]
	, [IssueDescription]
	, [ClientContactInfo]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [StatusID]
	, [ResolutionText]
	, [TicketPriorityID]
	, [CreatedByUserID]
	, [CreatedDate]
	, [AssignedToUserID]
	, [AssignedDate]
	, [FixedByUserID]
	, [FixedDate]
	, [ClosedByUserID]
	, [ClosedDate]
	, [TicketProductID]
	, [TicketCategoryID]
	, [DuplicateTicketID]
    FROM
	[dbo].[Ticket]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([ClientContactInfo] = @ClientContactInfo AND @ClientContactInfo is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([StatusID] = @StatusId AND @StatusId is not null)
	OR ([TicketPriorityID] = @TicketPriorityId AND @TicketPriorityId is not null)
	OR ([CreatedByUserID] = @CreatedByUserId AND @CreatedByUserId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([AssignedToUserID] = @AssignedToUserId AND @AssignedToUserId is not null)
	OR ([AssignedDate] = @AssignedDate AND @AssignedDate is not null)
	OR ([FixedByUserID] = @FixedByUserId AND @FixedByUserId is not null)
	OR ([FixedDate] = @FixedDate AND @FixedDate is not null)
	OR ([ClosedByUserID] = @ClosedByUserId AND @ClosedByUserId is not null)
	OR ([ClosedDate] = @ClosedDate AND @ClosedDate is not null)
	OR ([TicketProductID] = @TicketProductId AND @TicketProductId is not null)
	OR ([TicketCategoryID] = @TicketCategoryId AND @TicketCategoryId is not null)
	OR ([DuplicateTicketID] = @DuplicateTicketId AND @DuplicateTicketId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicket_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Ticket table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Title]
					, [IssueDescription]
					, [ClientContactInfo]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [StatusID]
					, [ResolutionText]
					, [TicketPriorityID]
					, [CreatedByUserID]
					, [CreatedDate]
					, [AssignedToUserID]
					, [AssignedDate]
					, [FixedByUserID]
					, [FixedDate]
					, [ClosedByUserID]
					, [ClosedDate]
					, [TicketProductID]
					, [TicketCategoryID]
					, [DuplicateTicketID]
					FROM [dbo].[Ticket] {0}
				)
				SELECT
				       [ID],
				       [Title],
				       [IssueDescription],
				       [ClientContactInfo],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [StatusID],
				       [ResolutionText],
				       [TicketPriorityID],
				       [CreatedByUserID],
				       [CreatedDate],
				       [AssignedToUserID],
				       [AssignedDate],
				       [FixedByUserID],
				       [FixedDate],
				       [ClosedByUserID],
				       [ClosedDate],
				       [TicketProductID],
				       [TicketCategoryID],
				       [DuplicateTicketID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Ticket] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWelcomeKitRequest_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWelcomeKitRequest_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the WelcomeKitRequest table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [RequestedBy]'
				SET @SQL = @SQL + ', [LastModifiedBy]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [RequestProcessed]'
				SET @SQL = @SQL + ', [RequestCompletedDate]'
				SET @SQL = @SQL + ', [RequestCompletedBy]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ' FROM [dbo].[WelcomeKitRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [RequestedBy],'
				SET @SQL = @SQL + ' [LastModifiedBy],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [RequestProcessed],'
				SET @SQL = @SQL + ' [RequestCompletedDate],'
				SET @SQL = @SQL + ' [RequestCompletedBy],'
				SET @SQL = @SQL + ' [BilledDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[WelcomeKitRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pWelcomeKitRequest_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequestProcessed" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestCompletedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequestCompletedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[WelcomeKitRequest]
					(
					[ModeratorID]
					,[Notes]
					,[RequestedBy]
					,[LastModifiedBy]
					,[LastModified]
					,[CreatedDate]
					,[RequestProcessed]
					,[RequestCompletedDate]
					,[RequestCompletedBy]
					,[BilledDate]
					)
				VALUES
					(
					@ModeratorId
					,@Notes
					,@RequestedBy
					,@LastModifiedBy
					,@LastModified
					,@CreatedDate
					,@RequestProcessed
					,@RequestCompletedDate
					,@RequestCompletedBy
					,@BilledDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequestProcessed" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestCompletedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequestCompletedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[WelcomeKitRequest]
				SET
					[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[RequestedBy] = @RequestedBy
					,[LastModifiedBy] = @LastModifiedBy
					,[LastModified] = @LastModified
					,[CreatedDate] = @CreatedDate
					,[RequestProcessed] = @RequestProcessed
					,[RequestCompletedDate] = @RequestCompletedDate
					,[RequestCompletedBy] = @RequestCompletedBy
					,[BilledDate] = @BilledDate
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[WelcomeKitRequest] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_GetByCreatedDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[CreatedDate] = @CreatedDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWelcomeKitRequest_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the WelcomeKitRequest table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@LastModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RequestProcessed" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestCompletedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RequestCompletedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [Notes]
	, [RequestedBy]
	, [LastModifiedBy]
	, [LastModified]
	, [CreatedDate]
	, [RequestProcessed]
	, [RequestCompletedDate]
	, [RequestCompletedBy]
	, [BilledDate]
    FROM
	[dbo].[WelcomeKitRequest]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([RequestedBy] = @RequestedBy OR @RequestedBy IS NULL)
	AND ([LastModifiedBy] = @LastModifiedBy OR @LastModifiedBy IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([RequestProcessed] = @RequestProcessed OR @RequestProcessed IS NULL)
	AND ([RequestCompletedDate] = @RequestCompletedDate OR @RequestCompletedDate IS NULL)
	AND ([RequestCompletedBy] = @RequestCompletedBy OR @RequestCompletedBy IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [Notes]
	, [RequestedBy]
	, [LastModifiedBy]
	, [LastModified]
	, [CreatedDate]
	, [RequestProcessed]
	, [RequestCompletedDate]
	, [RequestCompletedBy]
	, [BilledDate]
    FROM
	[dbo].[WelcomeKitRequest]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([RequestedBy] = @RequestedBy AND @RequestedBy is not null)
	OR ([LastModifiedBy] = @LastModifiedBy AND @LastModifiedBy is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([RequestProcessed] = @RequestProcessed AND @RequestProcessed is not null)
	OR ([RequestCompletedDate] = @RequestCompletedDate AND @RequestCompletedDate is not null)
	OR ([RequestCompletedBy] = @RequestCompletedBy AND @RequestCompletedBy is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pWelcomeKitRequest_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the WelcomeKitRequest table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ModeratorID]
					, [Notes]
					, [RequestedBy]
					, [LastModifiedBy]
					, [LastModified]
					, [CreatedDate]
					, [RequestProcessed]
					, [RequestCompletedDate]
					, [RequestCompletedBy]
					, [BilledDate]
					FROM [dbo].[WelcomeKitRequest] {0}
				)
				SELECT
				       [ID],
				       [ModeratorID],
				       [Notes],
				       [RequestedBy],
				       [LastModifiedBy],
				       [LastModified],
				       [CreatedDate],
				       [RequestProcessed],
				       [RequestCompletedDate],
				       [RequestCompletedBy],
				       [BilledDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[WelcomeKitRequest] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_WelcomeKitRequest_AddRequest"  skip="true">
			<comment><![CDATA[/*
Purpose: 
	Adds Welcome Kit Request/ Wallet Card Kit request to the system but removed any non-processed requests first.
Examples:
Select * from WelcomeKitRequest

	EXEC p_WelcomeKitRequest_AddRequest 10,'System Admin','Do this quickly.'

*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DELETE FROM WelcomeKitRequest WHERE ModeratorID = @ModeratorID AND RequestProcessed = 0

	INSERT INTO [WelcomeKitRequest]
		([ModeratorID],[Notes],[RequestedBy],[LastModifiedBy],[LastModified],[CreatedDate],[RequestProcessed]
		,[RequestCompletedDate],[RequestCompletedBy],[BilledDate])
	VALUES
		(@ModeratorID, @Notes,@RequestedBy,
		@RequestedBy, --<LastModifiedBy, varchar(50),>
		GETDATE(),--,<LastModified, datetime,>
		GETDATE(),--,<CreatedDate, datetime,>
		0,--,<RequestProcessed, bit,>
		null,--,<RequestCompletedDate, datetime,>
		null,--,<RequestCompletedBy, varchar(50),>
		null--,<BilledDate, datetime,>
		)
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_WelcomeKitRequest_ProcessRequest"  skip="true">
			<comment><![CDATA[/*
Purpose: 
	Returns the Welcome Kit Request/ Wallet Card Kit requests data that the user MAY want to process and alternatively,
	can mark the items as processed then return the information.

Examples:
Select * from WelcomeKitRequest

	EXEC p_WelcomeKitRequest_ProcessRequest 'oct 1 2008', 'dec 1 2008', 'System Admin',0 --Get data
	EXEC p_WelcomeKitRequest_ProcessRequest 'oct 1 2008', 'dec 1 2008', 'System Admin',-1 --Get all data
	--EXEC p_WelcomeKitRequest_ProcessRequest 'oct 1 2008', 'dec 1 2008', 'System Admin',1 --Mark and return

*/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestedCompletedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MarkAsProcessed" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--Date Logic
	SET @EndDate = dbo.fn_SetEndDate(@StartDate, @EndDate)

	--Default to false
	SET @MarkAsProcessed = ISNULL(@MarkAsProcessed,0)

	--Return all records, processed or not for the time range
	IF @MarkAsProcessed = -1
	BEGIN
		SELECT CompanyName, ModeratorName, ModeratorUsername, DepartmentName, ModeratorAddress1, ModeratorAddress2, ModeratorCity, ModeratorCountry, 
        ModeratorRegion, ModeratorPostalCode, ModeratorTelephone, ModeratorCode, PassCode AS ParticipantCode, 
        ConferenceDescription AS ConferenceName, ModeratorEnabled, Local, TollFree
		, WelcomeKitRequest.ID, WelcomeKitRequest.Notes,WelcomeKitRequest.[RequestedBy]
		,WelcomeKitRequest.[LastModifiedBy],WelcomeKitRequest.[LastModified],WelcomeKitRequest.[CreatedDate]
		,WelcomeKitRequest.[RequestProcessed],WelcomeKitRequest.[RequestCompletedDate]
		,WelcomeKitRequest.[RequestCompletedBy],WelcomeKitRequest.[BilledDate]
		,CustomerAdminWebSiteURL
		FROM vw_EmailInfo INNER JOIN WelcomeKitRequest ON vw_EmailInfo.ModeratorID = WelcomeKitRequest.ModeratorID
		WHERE ModeratorEnabled = 'Enabled' and CreatedDate BETWEEN @StartDate AND @EndDate
	END

	-- Return only non-processed records
	IF @MarkAsProcessed = 0
	BEGIN
		SELECT CompanyName, ModeratorName, ModeratorUsername, DepartmentName, ModeratorAddress1, ModeratorAddress2, ModeratorCity, ModeratorCountry, 
        ModeratorRegion, ModeratorPostalCode, ModeratorTelephone, ModeratorCode, PassCode AS ParticipantCode, 
        ConferenceDescription AS ConferenceName, ModeratorEnabled, Local, TollFree
		, WelcomeKitRequest.ID, WelcomeKitRequest.Notes,WelcomeKitRequest.[RequestedBy]
		,WelcomeKitRequest.[LastModifiedBy],WelcomeKitRequest.[LastModified],WelcomeKitRequest.[CreatedDate]
		,WelcomeKitRequest.[RequestProcessed],WelcomeKitRequest.[RequestCompletedDate]
		,WelcomeKitRequest.[RequestCompletedBy],WelcomeKitRequest.[BilledDate]
		,CustomerAdminWebSiteURL
		FROM vw_EmailInfo INNER JOIN WelcomeKitRequest ON vw_EmailInfo.ModeratorID = WelcomeKitRequest.ModeratorID
		WHERE ModeratorEnabled = 'Enabled' and CreatedDate BETWEEN @StartDate AND @EndDate	AND RequestProcessed = 0
	END

	--Mark items and returned Marked Items
	IF @MarkAsProcessed = 1
	BEGIN
		Declare @TempDate datetime -- used to mark all times as the same
		SET @TempDate = GETDATE()
		--Mark the items
		UPDATE WelcomeKitRequest SET RequestProcessed = 1, LastModifiedBy = @RequestedCompletedBy,
			LastModified = @TempDate, RequestCompletedDate = @TempDate, RequestCompletedBy = @RequestedCompletedBy
		WHERE CreatedDate BETWEEN @StartDate AND @EndDate AND RequestProcessed = 0
		--Get the data to return/
		SELECT CompanyName, ModeratorName, ModeratorUsername, DepartmentName, ModeratorAddress1, ModeratorAddress2, ModeratorCity, ModeratorCountry, 
        ModeratorRegion, ModeratorPostalCode, ModeratorTelephone, ModeratorCode, PassCode AS ParticipantCode, 
        ConferenceDescription AS ConferenceName, ModeratorEnabled, Local, TollFree
		, WelcomeKitRequest.ID, WelcomeKitRequest.Notes,WelcomeKitRequest.[RequestedBy]
		,WelcomeKitRequest.[LastModifiedBy],WelcomeKitRequest.[LastModified],WelcomeKitRequest.[CreatedDate]
		,WelcomeKitRequest.[RequestProcessed],WelcomeKitRequest.[RequestCompletedDate]
		,WelcomeKitRequest.[RequestCompletedBy],WelcomeKitRequest.[BilledDate]
		,CustomerAdminWebSiteURL
		FROM vw_EmailInfo INNER JOIN WelcomeKitRequest ON vw_EmailInfo.ModeratorID = WelcomeKitRequest.ModeratorID
		WHERE ModeratorEnabled = 'Enabled' and CreatedDate BETWEEN @StartDate AND @EndDate AND RequestProcessed = 1
	END

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pWholesaler_Product_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWholesaler_Product_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pWholesaler_Product_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Wholesaler_Product]
					(
					[ProductID]
					,[WholesalerID]
					,[Name]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DisplayOrder]
					,[Enabled]
					)
				VALUES
					(
					@ProductId
					,@WholesalerId
					,@Name
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DisplayOrder
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler_Product]
				SET
					[ProductID] = @ProductId
					,[WholesalerID] = @WholesalerId
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DisplayOrder] = @DisplayOrder
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Wholesaler_Product] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_GetByWholesalerIdProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler_Product table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [WholesalerID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
	, [Enabled]
    FROM
	[dbo].[Wholesaler_Product]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [WholesalerID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
	, [Enabled]
    FROM
	[dbo].[Wholesaler_Product]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pWholesaler_Product_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ProductID]
					, [WholesalerID]
					, [Name]
					, [Description]
					, [DisplayNameAlt]
					, [DescriptionAlt]
					, [DisplayOrder]
					, [Enabled]
					FROM [dbo].[Wholesaler_Product] {0}
				)
				SELECT
				       [ID],
				       [ProductID],
				       [WholesalerID],
				       [Name],
				       [Description],
				       [DisplayNameAlt],
				       [DescriptionAlt],
				       [DisplayOrder],
				       [Enabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Wholesaler_Product] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Wholesaler_Product_InstallDefaults"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To install the defaults for the Wholesaler after they have inserted a record into ''Wholesaler_Product'' table.
NOTE: This tables is used for the rebanding of Products. Business rules are	included
	to copy the data over for the Wholesaler based on the Product being added.

-- Test Code below, make sure to comment out the Insert statments before running.
DECLARE @RC int
DECLARE @Wholesaler_ProductID int
DECLARE @ProductID int
DECLARE @WholesalerID char(10)

-- TODO: Set parameter values here.
SET @Wholesaler_ProductID = 1234
SET @ProductID = 1 --Audio
SET @WholesalerID = '0000000000'


EXECUTE @RC = [CONFDB].[dbo].[p_Wholesaler_Product_InstallDefaults_TEST] 
   @Wholesaler_ProductID
  ,@ProductID
  ,@WholesalerID

Print @Wholesaler_ProductID
*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@Wholesaler_ProductID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN TRANSACTION

--Setup Var''s
DECLARE @WSBuyRateCurrencyID varchar(3)

--Look up Wholesalers Currency, this is used to replace the BuyRateCurrencyID as a Wholesaler should only be billed in one Currency.
	SELECT @WSBuyRateCurrencyID=CurrencyID FROM Wholesaler WHERE ID = @WholesalerID

-- Copy all Rates for the Product
--NOTES: DefaultOption = 1 is for System Wide rates only. BuyRateCurrencyID is changed to the WS'er Currency. Bulk Edit the values to the WS'er BuyRate
	INSERT INTO [ProductRateValue]([ProductRateID],[SellRate],[SellRateCurrencyID],[BuyRate],[BuyRateCurrencyID],[DefaultOption],[StartDate],[WholesalerID],[CustomerID])
	SELECT     ProductRateValue.ProductRateID, ProductRateValue.[SellRate], ProductRateValue.[SellRateCurrencyID], ProductRateValue.[BuyRate]
		, @WSBuyRateCurrencyID, 0 AS DefaultOption, ProductRateValue.[StartDate], @WholesalerID AS WholesalerID, NULL AS CustomerID
	FROM         ProductRateValue INNER JOIN
						  ProductRate ON ProductRateValue.ProductRateID = ProductRate.ID INNER JOIN
						  Product ON ProductRate.ProductID = Product.ID
	WHERE     (Product.ID = @ProductID) AND (ProductRateValue.DefaultOption = 1)
	IF @@error != 0
		GOTO RollBackTrans

--Copy the Default Feature Options for the Product.
	INSERT INTO Wholesaler_Product_Feature
	SELECT     @Wholesaler_ProductID AS Wholesaler_ProductID, Feature.ID AS FeatureID, FeatureOption.ID AS FeatureOptionID, Feature.Enabled, NULL AS FeatureOptionValue
	FROM         Product INNER JOIN
						  Feature ON Product.ID = Feature.ProductID INNER JOIN
						  FeatureOption ON Feature.ID = FeatureOption.FeatureID
	WHERE     (Product.ID = @ProductID) AND (FeatureOption.DefaultOption = 1)
	IF @@error != 0
		GOTO RollBackTrans

GOTO CommitTrans
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pSalesPerson_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SalesPerson table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pSalesPerson_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SalesPerson table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [FullName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [ExternalAgent]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [SalesManagerID]'
				SET @SQL = @SQL + ' FROM [dbo].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [FullName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [ExternalAgent],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [SalesManagerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pSalesPerson_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SalesPerson table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalAgent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[SalesPerson]
					(
					[WholesalerID]
					,[FullName]
					,[EmailAddress]
					,[ExternalAgent]
					,[Enabled]
					,[SalesManagerID]
					)
				VALUES
					(
					@WholesalerId
					,@FullName
					,@EmailAddress
					,@ExternalAgent
					,@Enabled
					,@SalesManagerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SalesPerson table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalAgent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SalesPerson]
				SET
					[WholesalerID] = @WholesalerId
					,[FullName] = @FullName
					,[EmailAddress] = @EmailAddress
					,[ExternalAgent] = @ExternalAgent
					,[Enabled] = @Enabled
					,[SalesManagerID] = @SalesManagerId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SalesPerson table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[SalesPerson] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_GetBySalesManagerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[SalesManagerID] = @SalesManagerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pSalesPerson_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SalesPerson table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ExternalAgent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [ExternalAgent]
	, [Enabled]
	, [SalesManagerID]
    FROM
	[dbo].[SalesPerson]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([FullName] = @FullName OR @FullName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([ExternalAgent] = @ExternalAgent OR @ExternalAgent IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([SalesManagerID] = @SalesManagerId OR @SalesManagerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [ExternalAgent]
	, [Enabled]
	, [SalesManagerID]
    FROM
	[dbo].[SalesPerson]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([FullName] = @FullName AND @FullName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([ExternalAgent] = @ExternalAgent AND @ExternalAgent is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([SalesManagerID] = @SalesManagerId AND @SalesManagerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pSalesPerson_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SalesPerson table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [FullName]
					, [EmailAddress]
					, [ExternalAgent]
					, [Enabled]
					, [SalesManagerID]
					FROM [dbo].[SalesPerson] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [FullName],
				       [EmailAddress],
				       [ExternalAgent],
				       [Enabled],
				       [SalesManagerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SalesPerson] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pMarketingService_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pMarketingService_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the MarketingService table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pMarketingService_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[MarketingService]
					(
					[WholesalerID]
					,[Name]
					)
				VALUES
					(
					@WholesalerId
					,@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pMarketingService_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[MarketingService]
				SET
					[WholesalerID] = @WholesalerId
					,[Name] = @Name
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pMarketingService_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the MarketingService table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[MarketingService] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pMarketingService_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pMarketingService_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MarketingService table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pMarketingService_GetByUserIdFromUser_MarketingService" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MarketingService].[ID]
       ,dbo.[MarketingService].[WholesalerID]
       ,dbo.[MarketingService].[Name]
  FROM dbo.[MarketingService]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[User_MarketingService] 
                WHERE dbo.[User_MarketingService].[UserID] = @UserId
                  AND dbo.[User_MarketingService].[MarketingServiceID] = dbo.[MarketingService].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pMarketingService_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the MarketingService table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Name]
    FROM
	[dbo].[MarketingService]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Name]
    FROM
	[dbo].[MarketingService]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pMarketingService_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the MarketingService table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [Name]
					FROM [dbo].[MarketingService] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [Name]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[MarketingService] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UniqueModeratorID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebMeetingID]'
				SET @SQL = @SQL + ', [omnovia_room_id]'
				SET @SQL = @SQL + ', [seevogh_meeting_url]'
				SET @SQL = @SQL + ', [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UniqueModeratorID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebMeetingID],'
				SET @SQL = @SQL + ' [omnovia_room_id],'
				SET @SQL = @SQL + ' [seevogh_meeting_url],'
				SET @SQL = @SQL + ' [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pModerator_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DepartmentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueModeratorId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Omnovia_Room_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Seevogh_Meeting_Url" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Moderator]
					(
					[WholesalerID]
					,[CustomerID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[ExternalModeratorNumber]
					,[ModeratorCode]
					,[PassCode]
					,[Description]
					,[DepartmentID]
					,[ModifiedBy]
					,[CreatedDate]
					,[LastModified]
					,[Enabled]
					,[UniqueModeratorID]
					,[UserID]
					,[WebMeetingID]
					,[omnovia_room_id]
					,[seevogh_meeting_url]
					,[SeeVoghMeetingID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@ExternalModeratorNumber
					,@ModeratorCode
					,@PassCode
					,@Description
					,@DepartmentId
					,@ModifiedBy
					,@CreatedDate
					,@LastModified
					,@Enabled
					,@UniqueModeratorId
					,@UserId
					,@WebMeetingId
					,@Omnovia_Room_Id
					,@Seevogh_Meeting_Url
					,@SeeVoghMeetingId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DepartmentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueModeratorId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Omnovia_Room_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Seevogh_Meeting_Url" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[Description] = @Description
					,[DepartmentID] = @DepartmentId
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[Enabled] = @Enabled
					,[UniqueModeratorID] = @UniqueModeratorId
					,[UserID] = @UserId
					,[WebMeetingID] = @WebMeetingId
					,[omnovia_room_id] = @Omnovia_Room_Id
					,[seevogh_meeting_url] = @Seevogh_Meeting_Url
					,[SeeVoghMeetingID] = @SeeVoghMeetingId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Moderator] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[CustomerID] = @CustomerId
					AND [PriCustomerNumber] = @PriCustomerNumber
					AND [SecCustomerNumber] = @SecCustomerNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [PriCustomerNumber] = @PriCustomerNumber
					AND [SecCustomerNumber] = @SecCustomerNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByWholesalerIdId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByModeratorCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ModeratorCode] = @ModeratorCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByModeratorCodePassCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ModeratorCode] = @ModeratorCode
					AND [PassCode] = @PassCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByPassCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[PassCode] = @PassCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByDepartmentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[DepartmentID] = @DepartmentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_GetByDnisidFromModerator_Dnis" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Moderator].[ID]
       ,dbo.[Moderator].[WholesalerID]
       ,dbo.[Moderator].[CustomerID]
       ,dbo.[Moderator].[PriCustomerNumber]
       ,dbo.[Moderator].[SecCustomerNumber]
       ,dbo.[Moderator].[ExternalModeratorNumber]
       ,dbo.[Moderator].[ModeratorCode]
       ,dbo.[Moderator].[PassCode]
       ,dbo.[Moderator].[Description]
       ,dbo.[Moderator].[DepartmentID]
       ,dbo.[Moderator].[ModifiedBy]
       ,dbo.[Moderator].[CreatedDate]
       ,dbo.[Moderator].[LastModified]
       ,dbo.[Moderator].[Enabled]
       ,dbo.[Moderator].[UniqueModeratorID]
       ,dbo.[Moderator].[UserID]
       ,dbo.[Moderator].[WebMeetingID]
       ,dbo.[Moderator].[omnovia_room_id]
       ,dbo.[Moderator].[seevogh_meeting_url]
       ,dbo.[Moderator].[SeeVoghMeetingID]
  FROM dbo.[Moderator]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Moderator_DNIS] 
                WHERE dbo.[Moderator_DNIS].[DNISID] = @Dnisid
                  AND dbo.[Moderator_DNIS].[ModeratorID] = dbo.[Moderator].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DepartmentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UniqueModeratorId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WebMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Omnovia_Room_Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Seevogh_Meeting_Url" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [ExternalModeratorNumber]
	, [ModeratorCode]
	, [PassCode]
	, [Description]
	, [DepartmentID]
	, [ModifiedBy]
	, [CreatedDate]
	, [LastModified]
	, [Enabled]
	, [UniqueModeratorID]
	, [UserID]
	, [WebMeetingID]
	, [omnovia_room_id]
	, [seevogh_meeting_url]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[Moderator]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DepartmentID] = @DepartmentId OR @DepartmentId IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([UniqueModeratorID] = @UniqueModeratorId OR @UniqueModeratorId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([WebMeetingID] = @WebMeetingId OR @WebMeetingId IS NULL)
	AND ([omnovia_room_id] = @Omnovia_Room_Id OR @Omnovia_Room_Id IS NULL)
	AND ([seevogh_meeting_url] = @Seevogh_Meeting_Url OR @Seevogh_Meeting_Url IS NULL)
	AND ([SeeVoghMeetingID] = @SeeVoghMeetingId OR @SeeVoghMeetingId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [ExternalModeratorNumber]
	, [ModeratorCode]
	, [PassCode]
	, [Description]
	, [DepartmentID]
	, [ModifiedBy]
	, [CreatedDate]
	, [LastModified]
	, [Enabled]
	, [UniqueModeratorID]
	, [UserID]
	, [WebMeetingID]
	, [omnovia_room_id]
	, [seevogh_meeting_url]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[Moderator]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DepartmentID] = @DepartmentId AND @DepartmentId is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([UniqueModeratorID] = @UniqueModeratorId AND @UniqueModeratorId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([WebMeetingID] = @WebMeetingId AND @WebMeetingId is not null)
	OR ([omnovia_room_id] = @Omnovia_Room_Id AND @Omnovia_Room_Id is not null)
	OR ([seevogh_meeting_url] = @Seevogh_Meeting_Url AND @Seevogh_Meeting_Url is not null)
	OR ([SeeVoghMeetingID] = @SeeVoghMeetingId AND @SeeVoghMeetingId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pModerator_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [ExternalModeratorNumber]
					, [ModeratorCode]
					, [PassCode]
					, [Description]
					, [DepartmentID]
					, [ModifiedBy]
					, [CreatedDate]
					, [LastModified]
					, [Enabled]
					, [UniqueModeratorID]
					, [UserID]
					, [WebMeetingID]
					, [omnovia_room_id]
					, [seevogh_meeting_url]
					, [SeeVoghMeetingID]
					FROM [dbo].[Moderator] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [ExternalModeratorNumber],
				       [ModeratorCode],
				       [PassCode],
				       [Description],
				       [DepartmentID],
				       [ModifiedBy],
				       [CreatedDate],
				       [LastModified],
				       [Enabled],
				       [UniqueModeratorID],
				       [UserID],
				       [WebMeetingID],
				       [omnovia_room_id],
				       [seevogh_meeting_url],
				       [SeeVoghMeetingID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Moderator] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Moderator_CreateUser"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: This procedure creates a user that is associated to a Moderator.
NOTE: The Moderator must first be added to the system.
Examples: 
-- TODO: Set parameter values here.

EXECUTE p_Moderator_CreateUser @ModeratorID,@UserName,@Password,@DisplayName,@Telephone
,@Address1,@Address2,@City,@Country,@Region,@PostalCode,@CharityID,@Enabled,@MustChangePassword
,@UserID OUTPUT
PRINT @UserID

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Telephone" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Address1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Address2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Country" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Region" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@PostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@CharityID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@MustChangePassword" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Declare @RoleID int

	--Enforce Biz Rules for Role
	SELECT @RoleID=ID FROM [Role] WHERE Name = 'Moderator'
	IF @Password IS NULL
	BEGIN
		--Using NULL as there are no other defaults in the system currently
		EXECUTE p_UTIL_GeneratePassword @Password=@Password OUTPUT,@WholesalerID=NULL,@CustomerID=NULL,@ModeratorID=NULL,@PasswordLength=8
		--PRINT @Password
	END

BEGIN TRANSACTION

	INSERT INTO [dbo].[User] ([Username],[Password],[DisplayName],[Email],[Telephone],[Enabled],[CompanyID]
	,[SalesPersonID],[RoleID],[MustChangePassword],[Address1],[Address2],[City],[Country],[Region],[PostalCode]
	,[CharityID],[WebMemberID])
	VALUES
		(@UserName, @Password, @DisplayName, @UserName, @Telephone, @Enabled, NULL, NULL, @RoleID, @MustChangePassword
		,@Address1, @Address2,@City, @Country,@Region,@PostalCode,@CharityID,NULL)
	SET @UserID = SCOPE_IDENTITY()

	IF NOT @UserID > 0
	BEGIN
		SET @UserID = -1
		GOTO RollBackTrans
	END
	--Link the new User to the parent table
	UPDATE Moderator SET UserID = @UserID WHERE ID = @ModeratorID

GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_InstallDefaults"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: This procedure copies the default items from the Customer to setup the Moderator.
NOTE: The Moderator must first be added to the system.
Examples: 

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

DECLARE @ModeratorID int
SET @ModeratorID = @ID --makes it easier to understand SP

-- Look up Customer
Declare @CustomerID char(10), @WholesalerID char(10), @PriCustomerNumber varchar(10), @SecCustomerNumber varchar(6)
SELECT @CustomerID=CustomerID From Moderator (NOLOCK) Where ID = @ID
SELECT @WholesalerID=WholesalerID,@PriCustomerNumber=PriCustomerNumber From Customer (NOLOCK) Where ID = @CustomerID

-- Update Mod settings
EXECUTE [p_Moderator_GetNextSecCustomerNumber] @CustomerID,@SecCustomerNumber OUTPUT
Print @SecCustomerNumber

BEGIN TRANSACTION
	UPDATE Moderator SET WholesalerID=@WholesalerID, PriCustomerNumber=@PriCustomerNumber, SecCustomerNumber=@SecCustomerNumber
	Where ID = @ModeratorID

/*	
	Business Rules added to support the copying of new Features and DNIS
	for the Moderator from its parent Customer.
*/
	--Copy the FeatureOptions from the Customer_Feature table for each Product if there are any Features
		INSERT INTO Moderator_Feature ([ModeratorID], [FeatureID],[FeatureOptionID],[Enabled],[FeatureOptionValue])
		SELECT @ModeratorID AS [ModeratorID], Customer_Feature.[FeatureID],Customer_Feature.[FeatureOptionID],Customer_Feature.[Enabled],Customer_Feature.[FeatureOptionValue]
		FROM dbo.Customer_Feature (NOLOCK)
		WHERE CustomerID = @CustomerID

	-- Copy Default DNIS information over
		INSERT INTO Moderator_DNIS
		SELECT DNISID, @ModeratorID AS ModeratorID
		FROM Customer_DNIS  (NOLOCK) 
		WHERE (CustomerID = @CustomerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

GOTO CommitTrans
RollBackTrans:
CLOSE WSCursor
DEALLOCATE WSCursor
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_GetNextSecCustomerNumber"  skip="true">
			<comment><![CDATA[
/**************************************************************** 
Gets the next available Secondary Customer number in the Moderator table.
Parameter:
	@CustomerID - Is the Primary Customer's ID.
Returns: 
	@SecCustomerNumber - a 6 digit string starting @ 100000
Examples:
	DECLARE @SecCustomerNumber varchar(6)
	EXEC p_Moderator_GetNextSecCustomerNumber 8, @SecCustomerNumber OUTPUT
	Print @SecCustomerNumber

**********************************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="InputOutput" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

DECLARE @TempCustomerNum varchar(10)
DECLARE @StartingValue int
	--Init. the start value
	SET @StartingValue = 100000
	--Determine the Max Secondary Customer number in Moderator Table, or return blank 
	SELECT     @TempCustomerNum = ISNULL(MAX(SecCustomerNumber),'')
	FROM       Moderator
	WHERE     CustomerID = @CustomerID
	IF @TempCustomerNum = ''
	BEGIN
		--Nothing found, return starting value
		SET @SecCustomerNumber = CAST(@StartingValue AS varchar)
	END
	ELSE
	BEGIN
		-- Max value found so increment and return
		SET @SecCustomerNumber = CAST(@TempCustomerNum AS int) + 1
	END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_DisableModerator"  skip="true">
			<comment><![CDATA[/* ================================================
Purpose: To disable the Moderators in a controlled way.

 ================================================*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Disable all Users pointing to the Moderator
	UPDATE [User] SET Enabled = 0 WHERE UserID IN (SELECT UserID FROM Moderator WHERE ID = @ModeratorID)
	--Disable the Moderator record
	UPDATE Moderator SET Enabled = 0 WHERE ID = @ModeratorID

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_Omnovia_GetRecordings"  skip="true">
			<comment><![CDATA[/*
DESCRIPTION
Returns Omnovia recast recordings that are belong to moderator.
NOTE
Must use UserID not moderatorID because each moderator can have multiple moderator code.

LOG

2015/02/23 | Topo | ADD | Init
2015/03/27 | Topo | FIX | Make sure that hosted links are returned (even when archive cache records are removed)
2015/04/02 | Topo | ADD | Add  urlAlias
2015/04/09 | Topo | ADD | Add moderator and conference name
2015/04/17 | Topo | MOD | Only return hosted recordings
2015/04/28 | Topo | ADD | Add mp4RequestID
2015/05/05 | Topo | FIX | remove expired mp4
2015/05/05 | Topo | FIX | set mp4DownloadUrl='' for expired mp4
2015/05/15 | Topo | ADD | Participant counter
2015/05/19 | Topo | ADD | event custom id and event title for Event webinar
2015/07/08 | Topo | FIX | remove cacheId
						  return records that are based on UserID (not moderatorid)
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

/*	SELECT conferenceName=m.description,moderatorName=u.displayname,cacheId=a.id,hostedId=0, title=a.MovieTitle,movieDateAdded=a.MovieDateAdded,roomName=a.RoomName,movieLength=a.MovieLength, 
			movieDate=a.MovieDate, url='', urlAlias='', urlExpiry=0, hosted=0
			FROM OmnoviaArchive a
				inner join moderator m on a.moderatorid = m.id
				inner join [user] u on u.userid=m.userid
		WHERE a.ModeratorID=@ModeratorID AND 
			  a.movieid not in (select movieid from OmnoviaHostedArchive where ModeratorID=@ModeratorID)
	UNION
*/
--	SELECT conferenceName=m.description,moderatorName=u.displayname,hostedId=a.id, title=a.MovieTitle,movieDateAdded=a.MovieDateAdded,roomName=a.RoomName,movieLength=a.MovieLength, 
--			movieDate=a.MovieDate, url=a.HostedLinkShortened, urlAlias=isnull(a.HostedLinkAlias,''), urlExpiry=a.HostedLinkExpiryDate, mp4RequestID=mp4.id, 
--			mp4DownloadUrl=CASE WHEN mp4.OmnoviaHostedUrlExpiryDate>getdate() then mp4.OmnoviaHostedURL
--							   ELSE ''
--						  END,
--			numOfParticipant=(SELECT count(*) FROM OmnoviaHostedArchiveParticipant WHERE HostedArchiveID=a.id),
--			eventCustomID=e.customid, eventTitle=e.title
--			FROM OmnoviaHostedArchive a 
--				inner join moderator m on a.moderatorid = m.id
--				inner join [user] u on u.userid=m.userid
--				left join (select * from [OmnoviaMP4Request] where OmnoviaHostedURLExpiryDate > getdate() or OmnoviaHostedURLExpiryDate is null) mp4 on mp4.hostedID=a.id
--				left join launchdb.dbo.event e on a.event_id = e.id
--		WHERE a.ModeratorID=@ModeratorID --and mp4.OmnoviaHostedURLExpiryDate > getdate()
--	order by MovieDateAdded


	DECLARE @userid int
	SELECT @userid=userid from moderator where id=@moderatorid

	SELECT conferenceName=m.description,moderatorName=u.displayname,hostedId=a.id, title=a.MovieTitle,movieDateAdded=a.MovieDateAdded,roomName=a.RoomName,movieLength=a.MovieLength, 
			movieDate=a.MovieDate, url=a.HostedLinkShortened, urlAlias=isnull(a.HostedLinkAlias,''), urlExpiry=a.HostedLinkExpiryDate, mp4RequestID=mp4.id, 
			mp4DownloadUrl=CASE WHEN mp4.OmnoviaHostedUrlExpiryDate>getdate() then mp4.OmnoviaHostedURL
							   ELSE ''
						  END,
			numOfParticipant=(SELECT count(*) FROM OmnoviaHostedArchiveParticipant WHERE HostedArchiveID=a.id),
			eventCustomID=e.customid, eventTitle=e.title
			FROM OmnoviaHostedArchive a 
				inner join moderator m on a.moderatorid = m.id
				inner join [user] u on u.userid=m.userid
				left join (select * from [OmnoviaMP4Request] where OmnoviaHostedURLExpiryDate > getdate() or OmnoviaHostedURLExpiryDate is null) mp4 on mp4.hostedID=a.id
				left join launchdb.dbo.event e on a.event_id = e.id
		WHERE m.userid=@userid --and mp4.OmnoviaHostedURLExpiryDate > getdate()
	ORDER by MovieDateAdded

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_Omnovia_GetCompanyLogin"  skip="true">
			<comment><![CDATA[
/*
Find moderator with omnovia access
select * from moderator where omnovia_room_id is not null

Example: [p_Moderator_Omnovia_GetCompanyLogin] 8
*/

]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select top 1 co.cid as cID,co.cpw as cPW from launchdb.dbo.company co
											inner join customer cust on cust.companyid=co.id
											inner join moderator m on cust.id=m.customerid
	WHERE m.id=@ModeratorID

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_UpdateDNIS"  skip="true">
			<comment><![CDATA[/* =============================================
	Updates the Moderator_DNIS table for the Moderator based on the DNISTypeID.
Example:
	Select * from DNIS inner join Moderator_dnis on dnis.id = Moderator_dnis.dnisid
	EXEC p_DNIS_GetByWholesalerIdDDL '0000000001'

	EXEC p_Moderator_UpdateDNIS @ModeratorID=9, @DNISID=20, @DNISTypeID=1
	EXEC p_Moderator_UpdateDNIS @ModeratorID=9, @DNISID=8, @DNISTypeID=1
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DNISID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DNISTypeID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	UPDATE Moderator_DNIS SET DNISID=@DNISID	
	FROM Moderator_DNIS INNER JOIN DNIS ON DNIS.ID = Moderator_DNIS.DNISID
	WHERE DNIS.DNISTypeID = @DNISTypeID AND Moderator_DNIS.ModeratorID = @ModeratorID
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_DeleteModerator"  skip="true">
			<comment><![CDATA[/* ================================================
Purpose: To delete the Moderator and foreign key table data in a controlled 
	way without the use of cascasding deletes.

 ================================================*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DELETE FROM Moderator_DNIS WHERE ModeratorID = @ModeratorID
	DELETE FROM Moderator_Feature WHERE ModeratorID = @ModeratorID
	DELETE FROM [User] WHERE UserID IN (SELECT UserID FROM Moderator M WHERE M.ID = @ModeratorID)
	DELETE FROM Moderator WHERE ID = @ModeratorID

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_GenerateCodes"  skip="true">
			<comment><![CDATA[/* 
Generates Moderator and Participant Codes. The Mod and Participant codes are
created together to ensure that the new codes gen'ed don't match since neither of these are 
stored in the database to check against.
Supports passing in different Lengths for Mod and Part Codes.

Parameters:	
		@ModeratorCode varchar(16) = null OUTPUT,
		@PassCode varchar(16) = null OUTPUT,
		@WholesalerID char(10) = NULL, --WHOLESALERID used to look up the default setting for the Wholesaler. If not passed in then the passed in arguments are used.
		@CustomerID int = NULL, --The CustomerID to lookup the moderator/passcode length setting. If not passed in then the passed in arguments are used.
		@ModeratorID int = NULL --The ModeratorID to lookup the moderator/passcode length setting. If not passed in then the passed in arguments are used.
		@ModCodeLength int = 7, --The length of the Moderator Code  to generate. This value is used if all ID fields are NULL. 
		@PassCodeLength int = 7, --The length of the PassCode to generate. This value is used if all ID fields are NULL. 
Return:
@ModeratorCode 
@PassCode

Author: 
Company:

Examples:

DECLARE @ModeratorCode varchar(16)
DECLARE @PassCode varchar(16)

EXECUTE p_Moderator_GenerateCodes 
   @ModeratorCode OUTPUT
  ,@PassCode OUTPUT
  ,@WholesalerID = NULL
  ,@CustomerID = NULL
  ,@ModeratorID = NULL
  ,@ModCodeLength = NULL
  ,@PassCodeLength = NULL

	PRINT @ModeratorCode
	PRINT @PassCode

*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorCode" type="varchar" direction="InputOutput" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="InputOutput" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModCodeLength" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PassCodeLength" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	DECLARE @Result varchar(20)
	DECLARE @TempModCodeLength int
	DECLARE @TempPassCodeLength int

	SET @TempModCodeLength = ISNULL(@ModCodeLength, 7)
	SET @TempPassCodeLength = ISNULL(@PassCodeLength, 7)

--  Get the default values for the Wholesaler if the value passed in
	IF @WholesalerID IS NOT NULL
	BEGIN
		SELECT @TempModCodeLength=ISNULL(DefaultModCodeLength,@TempModCodeLength) FROM Wholesaler WHERE ID = @WholesalerID 
		SELECT @TempPassCodeLength=ISNULL(DefaultPassCodeLength,@TempPassCodeLength) FROM Wholesaler WHERE ID = @WholesalerID
	END

--  Get the default values for the Customer if the CustomerID value passed in
	IF @CustomerID IS NOT NULL
	BEGIN
		Select @TempModCodeLength=ISNULL(FeatureOptionValue,@TempModCodeLength) from vw_FeatureOptionsForCustomers T1 where T1.FeatureID = 24 and  T1.CustomerID = @CustomerID 
		Select @TempPassCodeLength=ISNULL(FeatureOptionValue,@TempPassCodeLength) from vw_FeatureOptionsForCustomers T1 where T1.FeatureID = 25 and  T1.CustomerID = @CustomerID 
	END

--  Get the default values for the Moderator if the ModeratorID value passed in
	IF @ModeratorID IS NOT NULL
	BEGIN
		Select @TempModCodeLength=ISNULL(FeatureOptionValue,@TempModCodeLength) from vw_FeatureOptionsForModerators T1 where T1.FeatureID = 24 and  T1.ModeratorID = @ModeratorID 
		Select @TempPassCodeLength=ISNULL(FeatureOptionValue,@TempPassCodeLength) from vw_FeatureOptionsForModerators T1 where T1.FeatureID = 25 and  T1.ModeratorID = @ModeratorID 
	END


TRY_AGAIN:
--Do it again if the codes aren't unique

	SET @ModeratorCode = dbo.fn_RandIntString(@TempModCodeLength)
	SET @PassCode = dbo.fn_RandIntString(@TempPassCodeLength)
	-- Determine if values are unique for the Whole system, if not try again.
	--Test if values are the same
	IF @ModeratorCode = @PassCode
	BEGIN
		GOTO TRY_AGAIN
	END
	-- Test if Unqiue in the database
		DECLARE @ModCodeUnique bit  --Init. to False
		DECLARE @PartCodeUnique bit  --Init. to False
		EXEC p_UTIL_TestUserCodes @ModeratorCode, @PassCode, null,@ModCodeUnique OUTPUT,@PartCodeUnique OUTPUT
		IF @ModCodeUnique = 0 OR @PartCodeUnique = 0 --Match Found, Not Unique, Try Again
		BEGIN
			GOTO TRY_AGAIN
		END


--RETURN @Result
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Moderator_GetProductFeatures"  skip="true">
			<comment><![CDATA[/* ================================================
Returns information for Moderator Features. Multiple
selects are performed to simplify the UI layer.

JS NOTES: Only the Admin Site is using this SP but the AMP site looks at the DisplayOnlyToCustomer field but doesn't use an SP or View
so changes made to the DisplayOnlyToCustomer shows up on the site. Change AMP site to use this SP.

History:
JS Oct/2014 - adding new options for Feature hiding, Adding a FeatureDisplayInAMPSite so AMP can filter this out as both Admin Site and AMP can call this SP.

Examples:
	EXEC p_Moderator_GetProductFeatures 8
 ================================================ */
]]></comment>
			<parameters>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT Moderator_FeatureID, ModeratorID, Moderator_FeatureFeatureID, Moderator_FeatureFeatureOptionID, Moderator_FeatureEnabled, 
						  Moderator_FeatureFeatureOptionValue, FeatureDisplayName, FeatureDescription, FeatureDisplayNameAlt, FeatureDescriptionAlt, FeatureOptionID, 
						  FeatureOptionDisplayName, FeatureOptionDescription, FeatureOptionDisplayNameAlt, FeatureOptionDescriptionAlt, FeatureOptionValue, 
						  Wholesaler_ProductName, Wholesaler_ProductDescription, Wholesaler_ProductDisplayNameAlt, Wholesaler_ProductDescriptionAlt
						  ,FeatureDisplayInAMPSite
	FROM         dbo.vw_FeatureOptionsForModerators
	WHERE     (FeatureEnabled = 1) AND (Wholesaler_ProductEnabled = 1) AND (FeatureOptionEnabled = 1) 	AND ModeratorID = @ModeratorID
	--JS: Sept/2014 Added Feature Check back in as too many things can be set at the Moderator/Conference level that shouldn't and it's confusing to users
	-- and ourselves as you may not know where to check for the correct value. Most values for billing should only be checked at the Customer feature level
	--AND (FeatureDisplayOnlyToCustomer <> 1) 
	AND FeatureDisplayToModerator = 1
	ORDER BY Wholesaler_ProductDisplayOrder, FeatureDisplayOrder, FeatureOptionDisplayOrder
END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pParticipant_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Participant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pParticipant_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Participant table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ParticipantListID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [PhoneNumber]'
				SET @SQL = @SQL + ', [PIN]'
				SET @SQL = @SQL + ', [UserName]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ' FROM [dbo].[Participant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ParticipantListID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [PhoneNumber],'
				SET @SQL = @SQL + ' [PIN],'
				SET @SQL = @SQL + ' [UserName],'
				SET @SQL = @SQL + ' [Password]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Participant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pParticipant_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Participant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParticipantListId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Pin" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Participant]
					(
					[ID]
					,[ParticipantListID]
					,[Name]
					,[CompanyName]
					,[EmailAddress]
					,[PhoneNumber]
					,[PIN]
					,[UserName]
					,[Password]
					)
				VALUES
					(
					@Id
					,@ParticipantListId
					,@Name
					,@CompanyName
					,@EmailAddress
					,@PhoneNumber
					,@Pin
					,@UserName
					,@Password
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipant_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Participant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParticipantListId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Pin" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Participant]
				SET
					[ID] = @Id
					,[ParticipantListID] = @ParticipantListId
					,[Name] = @Name
					,[CompanyName] = @CompanyName
					,[EmailAddress] = @EmailAddress
					,[PhoneNumber] = @PhoneNumber
					,[PIN] = @Pin
					,[UserName] = @UserName
					,[Password] = @Password
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipant_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Participant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Participant] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipant_GetByParticipantListId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Participant table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ParticipantListId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
				WHERE
					[ParticipantListID] = @ParticipantListId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipant_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Participant table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pParticipant_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Participant table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ParticipantListId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Pin" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ParticipantListID]
	, [Name]
	, [CompanyName]
	, [EmailAddress]
	, [PhoneNumber]
	, [PIN]
	, [UserName]
	, [Password]
    FROM
	[dbo].[Participant]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ParticipantListID] = @ParticipantListId OR @ParticipantListId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([PhoneNumber] = @PhoneNumber OR @PhoneNumber IS NULL)
	AND ([PIN] = @Pin OR @Pin IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ParticipantListID]
	, [Name]
	, [CompanyName]
	, [EmailAddress]
	, [PhoneNumber]
	, [PIN]
	, [UserName]
	, [Password]
    FROM
	[dbo].[Participant]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ParticipantListID] = @ParticipantListId AND @ParticipantListId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([PhoneNumber] = @PhoneNumber AND @PhoneNumber is not null)
	OR ([PIN] = @Pin AND @Pin is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([Password] = @Password AND @Password is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pParticipant_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Participant table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ParticipantListID]
					, [Name]
					, [CompanyName]
					, [EmailAddress]
					, [PhoneNumber]
					, [PIN]
					, [UserName]
					, [Password]
					FROM [dbo].[Participant] {0}
				)
				SELECT
				       [ID],
				       [ParticipantListID],
				       [Name],
				       [CompanyName],
				       [EmailAddress],
				       [PhoneNumber],
				       [PIN],
				       [UserName],
				       [Password]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Participant] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_DNIS_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pModerator_DNIS_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DNISID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DNISID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DNISID],'
				SET @SQL = @SQL + ' [ModeratorID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pModerator_DNIS_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Moderator_DNIS]
					(
					[DNISID]
					,[ModeratorID]
					)
				VALUES
					(
					@Dnisid
					,@ModeratorId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalDnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator_DNIS]
				SET
					[DNISID] = @Dnisid
					,[ModeratorID] = @ModeratorId
				WHERE
[DNISID] = @OriginalDnisid 
AND [ModeratorID] = @OriginalModeratorId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Moderator_DNIS] WITH (ROWLOCK) 
				WHERE
					[DNISID] = @Dnisid
					AND [ModeratorID] = @ModeratorId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_GetByDnisid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[DNISID] = @Dnisid
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_GetByDnisidModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[DNISID] = @Dnisid
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pModerator_DNIS_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator_DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DNISID]
	, [ModeratorID]
    FROM
	[dbo].[Moderator_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid OR @Dnisid IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DNISID]
	, [ModeratorID]
    FROM
	[dbo].[Moderator_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid AND @Dnisid is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pModerator_DNIS_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_DNIS table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DNISID]
					, [ModeratorID]
					FROM [dbo].[Moderator_DNIS] {0}
				)
				SELECT
				       [DNISID],
				       [ModeratorID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Moderator_DNIS] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pParticipantList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ParticipantList table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pParticipantList_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ParticipantList table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[ParticipantList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ParticipantList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pParticipantList_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ParticipantList table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ParticipantList]
					(
					[CustomerID]
					,[Name]
					)
				VALUES
					(
					@CustomerId
					,@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipantList_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ParticipantList table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ParticipantList]
				SET
					[CustomerID] = @CustomerId
					,[Name] = @Name
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipantList_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ParticipantList table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ParticipantList] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipantList_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ParticipantList table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pParticipantList_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ParticipantList table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pParticipantList_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ParticipantList table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [Name]
    FROM
	[dbo].[ParticipantList]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [Name]
    FROM
	[dbo].[ParticipantList]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pParticipantList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ParticipantList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CustomerID]
					, [Name]
					FROM [dbo].[ParticipantList] {0}
				)
				SELECT
				       [ID],
				       [CustomerID],
				       [Name]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ParticipantList] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempReplayIDs_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ReplayID],
					[AuxiliaryCID],
					[BillingDuration],
					[Notes],
					[Enabled],
					[ModifiedBy],
					[LastModifiedDate],
					[CreatedDate]
				FROM
					[dbo].[TempReplayIDs]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempReplayIDs_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempReplayIDs table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ReplayID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ReplayID]'
				SET @SQL = @SQL + ', [AuxiliaryCID]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [LastModifiedDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TempReplayIDs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ReplayID],'
				SET @SQL = @SQL + ' [AuxiliaryCID],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [LastModifiedDate],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempReplayIDs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTempReplayIDs_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AuxiliaryCid" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LastModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TempReplayIDs]
					(
					[ReplayID]
					,[AuxiliaryCID]
					,[BillingDuration]
					,[Notes]
					,[Enabled]
					,[ModifiedBy]
					,[LastModifiedDate]
					,[CreatedDate]
					)
				VALUES
					(
					@ReplayId
					,@AuxiliaryCid
					,@BillingDuration
					,@Notes
					,@Enabled
					,@ModifiedBy
					,@LastModifiedDate
					,@CreatedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempReplayIDs_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AuxiliaryCid" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LastModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempReplayIDs]
				SET
					[ReplayID] = @ReplayId
					,[AuxiliaryCID] = @AuxiliaryCid
					,[BillingDuration] = @BillingDuration
					,[Notes] = @Notes
					,[Enabled] = @Enabled
					,[ModifiedBy] = @ModifiedBy
					,[LastModifiedDate] = @LastModifiedDate
					,[CreatedDate] = @CreatedDate
				WHERE
[ReplayID] = @OriginalReplayId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempReplayIDs_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TempReplayIDs] WITH (ROWLOCK) 
				WHERE
					[ReplayID] = @ReplayId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempReplayIDs_GetByReplayId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempReplayIDs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ReplayID],
					[AuxiliaryCID],
					[BillingDuration],
					[Notes],
					[Enabled],
					[ModifiedBy],
					[LastModifiedDate],
					[CreatedDate]
				FROM
					[dbo].[TempReplayIDs]
				WHERE
					[ReplayID] = @ReplayId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempReplayIDs_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempReplayIDs table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReplayId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AuxiliaryCid" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault="null"/>
				<parameter name="@BillingDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@LastModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ReplayID]
	, [AuxiliaryCID]
	, [BillingDuration]
	, [Notes]
	, [Enabled]
	, [ModifiedBy]
	, [LastModifiedDate]
	, [CreatedDate]
    FROM
	[dbo].[TempReplayIDs]
    WHERE 
	 ([ReplayID] = @ReplayId OR @ReplayId IS NULL)
	AND ([AuxiliaryCID] = @AuxiliaryCid OR @AuxiliaryCid IS NULL)
	AND ([BillingDuration] = @BillingDuration OR @BillingDuration IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([LastModifiedDate] = @LastModifiedDate OR @LastModifiedDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ReplayID]
	, [AuxiliaryCID]
	, [BillingDuration]
	, [Notes]
	, [Enabled]
	, [ModifiedBy]
	, [LastModifiedDate]
	, [CreatedDate]
    FROM
	[dbo].[TempReplayIDs]
    WHERE 
	 ([ReplayID] = @ReplayId AND @ReplayId is not null)
	OR ([AuxiliaryCID] = @AuxiliaryCid AND @AuxiliaryCid is not null)
	OR ([BillingDuration] = @BillingDuration AND @BillingDuration is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([LastModifiedDate] = @LastModifiedDate AND @LastModifiedDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTempReplayIDs_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempReplayIDs table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ReplayID]
					, [AuxiliaryCID]
					, [BillingDuration]
					, [Notes]
					, [Enabled]
					, [ModifiedBy]
					, [LastModifiedDate]
					, [CreatedDate]
					FROM [dbo].[TempReplayIDs] {0}
				)
				SELECT
				       [ReplayID],
				       [AuxiliaryCID],
				       [BillingDuration],
				       [Notes],
				       [Enabled],
				       [ModifiedBy],
				       [LastModifiedDate],
				       [CreatedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TempReplayIDs] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempExistingCodes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Codes],
					[NewCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location],
					[WholesalerID]
				FROM
					[dbo].[TempExistingCodes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempExistingCodes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempExistingCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Codes]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Codes]'
				SET @SQL = @SQL + ', [NewCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [Location]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ' FROM [dbo].[TempExistingCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Codes],'
				SET @SQL = @SQL + ' [NewCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [Location],'
				SET @SQL = @SQL + ' [WholesalerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempExistingCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTempExistingCodes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Codes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TempExistingCodes]
					(
					[Codes]
					,[NewCode]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[Location]
					,[WholesalerID]
					)
				VALUES
					(
					@Codes
					,@NewCode
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@Location
					,@WholesalerId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempExistingCodes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Codes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@OriginalCodes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempExistingCodes]
				SET
					[Codes] = @Codes
					,[NewCode] = @NewCode
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[Location] = @Location
					,[WholesalerID] = @WholesalerId
				WHERE
[Codes] = @OriginalCodes 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempExistingCodes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Codes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TempExistingCodes] WITH (ROWLOCK) 
				WHERE
					[Codes] = @Codes
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempExistingCodes_GetByCodes" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempExistingCodes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Codes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Codes],
					[NewCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location],
					[WholesalerID]
				FROM
					[dbo].[TempExistingCodes]
				WHERE
					[Codes] = @Codes
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempExistingCodes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempExistingCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Codes" type="varchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Codes]
	, [NewCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
	, [WholesalerID]
    FROM
	[dbo].[TempExistingCodes]
    WHERE 
	 ([Codes] = @Codes OR @Codes IS NULL)
	AND ([NewCode] = @NewCode OR @NewCode IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([Location] = @Location OR @Location IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Codes]
	, [NewCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
	, [WholesalerID]
    FROM
	[dbo].[TempExistingCodes]
    WHERE 
	 ([Codes] = @Codes AND @Codes is not null)
	OR ([NewCode] = @NewCode AND @NewCode is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([Location] = @Location AND @Location is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTempExistingCodes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempExistingCodes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [Codes]
					, [NewCode]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [Location]
					, [WholesalerID]
					FROM [dbo].[TempExistingCodes] {0}
				)
				SELECT
				       [Codes],
				       [NewCode],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [Location],
				       [WholesalerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TempExistingCodes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempCodes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Codes],
					[NewCode],
					[CreatedDate],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location]
				FROM
					[dbo].[TempCodes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempCodes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Codes]'
				SET @SQL = @SQL + ', [NewCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [Location]'
				SET @SQL = @SQL + ' FROM [dbo].[TempCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Codes],'
				SET @SQL = @SQL + ' [NewCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [Location]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTempCodes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Codes" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TempCodes]
					(
					[ID]
					,[Codes]
					,[NewCode]
					,[CreatedDate]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[Location]
					)
				VALUES
					(
					@Id
					,@Codes
					,@NewCode
					,@CreatedDate
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@Location
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempCodes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Codes" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempCodes]
				SET
					[ID] = @Id
					,[Codes] = @Codes
					,[NewCode] = @NewCode
					,[CreatedDate] = @CreatedDate
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[Location] = @Location
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempCodes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TempCodes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempCodes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempCodes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Codes],
					[NewCode],
					[CreatedDate],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location]
				FROM
					[dbo].[TempCodes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempCodes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Codes" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@NewCode" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Location" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Codes]
	, [NewCode]
	, [CreatedDate]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
    FROM
	[dbo].[TempCodes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Codes] = @Codes OR @Codes IS NULL)
	AND ([NewCode] = @NewCode OR @NewCode IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([Location] = @Location OR @Location IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Codes]
	, [NewCode]
	, [CreatedDate]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
    FROM
	[dbo].[TempCodes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Codes] = @Codes AND @Codes is not null)
	OR ([NewCode] = @NewCode AND @NewCode is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([Location] = @Location AND @Location is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTempCodes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempCodes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Codes]
					, [NewCode]
					, [CreatedDate]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [Location]
					FROM [dbo].[TempCodes] {0}
				)
				SELECT
				       [ID],
				       [Codes],
				       [NewCode],
				       [CreatedDate],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [Location]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TempCodes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="ptempCodeChanges_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[OrigModCode],
					[OrigPassCode],
					[ExpectedOrigModCode],
					[ExpectedOrigPassCode],
					[NewModCode],
					[NewPassCode],
					[AppliedDate]
				FROM
					[dbo].[tempCodeChanges]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="ptempCodeChanges_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the tempCodeChanges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [OrigModCode]'
				SET @SQL = @SQL + ', [OrigPassCode]'
				SET @SQL = @SQL + ', [ExpectedOrigModCode]'
				SET @SQL = @SQL + ', [ExpectedOrigPassCode]'
				SET @SQL = @SQL + ', [NewModCode]'
				SET @SQL = @SQL + ', [NewPassCode]'
				SET @SQL = @SQL + ', [AppliedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[tempCodeChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [OrigModCode],'
				SET @SQL = @SQL + ' [OrigPassCode],'
				SET @SQL = @SQL + ' [ExpectedOrigModCode],'
				SET @SQL = @SQL + ' [ExpectedOrigPassCode],'
				SET @SQL = @SQL + ' [NewModCode],'
				SET @SQL = @SQL + ' [NewPassCode],'
				SET @SQL = @SQL + ' [AppliedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[tempCodeChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="ptempCodeChanges_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@OrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@OrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@ExpectedOrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@ExpectedOrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@AppliedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[tempCodeChanges]
					(
					[PriCustomerNumber]
					,[SecCustomerNumber]
					,[OrigModCode]
					,[OrigPassCode]
					,[ExpectedOrigModCode]
					,[ExpectedOrigPassCode]
					,[NewModCode]
					,[NewPassCode]
					,[AppliedDate]
					)
				VALUES
					(
					@PriCustomerNumber
					,@SecCustomerNumber
					,@OrigModCode
					,@OrigPassCode
					,@ExpectedOrigModCode
					,@ExpectedOrigPassCode
					,@NewModCode
					,@NewPassCode
					,@AppliedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="ptempCodeChanges_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@OrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@OrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@ExpectedOrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@ExpectedOrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@NewPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@AppliedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[tempCodeChanges]
				SET
					[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[OrigModCode] = @OrigModCode
					,[OrigPassCode] = @OrigPassCode
					,[ExpectedOrigModCode] = @ExpectedOrigModCode
					,[ExpectedOrigPassCode] = @ExpectedOrigPassCode
					,[NewModCode] = @NewModCode
					,[NewPassCode] = @NewPassCode
					,[AppliedDate] = @AppliedDate
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="ptempCodeChanges_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[tempCodeChanges] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="ptempCodeChanges_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the tempCodeChanges table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[OrigModCode],
					[OrigPassCode],
					[ExpectedOrigModCode],
					[ExpectedOrigPassCode],
					[NewModCode],
					[NewPassCode],
					[AppliedDate]
				FROM
					[dbo].[tempCodeChanges]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="ptempCodeChanges_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the tempCodeChanges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@OrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@OrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@ExpectedOrigModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@ExpectedOrigPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@NewModCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@NewPassCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@AppliedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [OrigModCode]
	, [OrigPassCode]
	, [ExpectedOrigModCode]
	, [ExpectedOrigPassCode]
	, [NewModCode]
	, [NewPassCode]
	, [AppliedDate]
    FROM
	[dbo].[tempCodeChanges]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([OrigModCode] = @OrigModCode OR @OrigModCode IS NULL)
	AND ([OrigPassCode] = @OrigPassCode OR @OrigPassCode IS NULL)
	AND ([ExpectedOrigModCode] = @ExpectedOrigModCode OR @ExpectedOrigModCode IS NULL)
	AND ([ExpectedOrigPassCode] = @ExpectedOrigPassCode OR @ExpectedOrigPassCode IS NULL)
	AND ([NewModCode] = @NewModCode OR @NewModCode IS NULL)
	AND ([NewPassCode] = @NewPassCode OR @NewPassCode IS NULL)
	AND ([AppliedDate] = @AppliedDate OR @AppliedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [OrigModCode]
	, [OrigPassCode]
	, [ExpectedOrigModCode]
	, [ExpectedOrigPassCode]
	, [NewModCode]
	, [NewPassCode]
	, [AppliedDate]
    FROM
	[dbo].[tempCodeChanges]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([OrigModCode] = @OrigModCode AND @OrigModCode is not null)
	OR ([OrigPassCode] = @OrigPassCode AND @OrigPassCode is not null)
	OR ([ExpectedOrigModCode] = @ExpectedOrigModCode AND @ExpectedOrigModCode is not null)
	OR ([ExpectedOrigPassCode] = @ExpectedOrigPassCode AND @ExpectedOrigPassCode is not null)
	OR ([NewModCode] = @NewModCode AND @NewModCode is not null)
	OR ([NewPassCode] = @NewPassCode AND @NewPassCode is not null)
	OR ([AppliedDate] = @AppliedDate AND @AppliedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="ptempCodeChanges_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the tempCodeChanges table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [OrigModCode]
					, [OrigPassCode]
					, [ExpectedOrigModCode]
					, [ExpectedOrigPassCode]
					, [NewModCode]
					, [NewPassCode]
					, [AppliedDate]
					FROM [dbo].[tempCodeChanges] {0}
				)
				SELECT
				       [ID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [OrigModCode],
				       [OrigPassCode],
				       [ExpectedOrigModCode],
				       [ExpectedOrigPassCode],
				       [NewModCode],
				       [NewPassCode],
				       [AppliedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[tempCodeChanges] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[DateInterval],
					[NumberOfPorts],
					[AccessType],
					[WholesalerID]
				FROM
					[dbo].[TempSampleRatesPerProduct]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempSampleRatesPerProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DateInterval]'
				SET @SQL = @SQL + ', [NumberOfPorts]'
				SET @SQL = @SQL + ', [AccessType]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ' FROM [dbo].[TempSampleRatesPerProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DateInterval],'
				SET @SQL = @SQL + ' [NumberOfPorts],'
				SET @SQL = @SQL + ' [AccessType],'
				SET @SQL = @SQL + ' [WholesalerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempSampleRatesPerProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateInterval" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@NumberOfPorts" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TempSampleRatesPerProduct]
					(
					[DateInterval]
					,[NumberOfPorts]
					,[AccessType]
					,[WholesalerID]
					)
				VALUES
					(
					@DateInterval
					,@NumberOfPorts
					,@AccessType
					,@WholesalerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateInterval" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@NumberOfPorts" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempSampleRatesPerProduct]
				SET
					[DateInterval] = @DateInterval
					,[NumberOfPorts] = @NumberOfPorts
					,[AccessType] = @AccessType
					,[WholesalerID] = @WholesalerId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TempSampleRatesPerProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempSampleRatesPerProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[DateInterval],
					[NumberOfPorts],
					[AccessType],
					[WholesalerID]
				FROM
					[dbo].[TempSampleRatesPerProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempSampleRatesPerProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DateInterval" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@NumberOfPorts" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DateInterval]
	, [NumberOfPorts]
	, [AccessType]
	, [WholesalerID]
    FROM
	[dbo].[TempSampleRatesPerProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DateInterval] = @DateInterval OR @DateInterval IS NULL)
	AND ([NumberOfPorts] = @NumberOfPorts OR @NumberOfPorts IS NULL)
	AND ([AccessType] = @AccessType OR @AccessType IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DateInterval]
	, [NumberOfPorts]
	, [AccessType]
	, [WholesalerID]
    FROM
	[dbo].[TempSampleRatesPerProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DateInterval] = @DateInterval AND @DateInterval is not null)
	OR ([NumberOfPorts] = @NumberOfPorts AND @NumberOfPorts is not null)
	OR ([AccessType] = @AccessType AND @AccessType is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTempSampleRatesPerProduct_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempSampleRatesPerProduct table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [DateInterval]
					, [NumberOfPorts]
					, [AccessType]
					, [WholesalerID]
					FROM [dbo].[TempSampleRatesPerProduct] {0}
				)
				SELECT
				       [ID],
				       [DateInterval],
				       [NumberOfPorts],
				       [AccessType],
				       [WholesalerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TempSampleRatesPerProduct] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTempTotalDollarsSpent_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempTotalDollarsSpent table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID123]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID123]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [TotalDollarsSpent]'
				SET @SQL = @SQL + ', [LastTimeUsed]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TempTotalDollarsSpent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID123],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [TotalDollarsSpent],'
				SET @SQL = @SQL + ' [LastTimeUsed],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempTotalDollarsSpent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id123" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@TotalDollarsSpent" type="decimal" direction="Input" size="9" precision="18" scale="5" param="(18, 5)" nulldefault=""/>
				<parameter name="@LastTimeUsed" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TempTotalDollarsSpent]
					(
					[PriCustomerNumber]
					,[SecCustomerNumber]
					,[TotalDollarsSpent]
					,[LastTimeUsed]
					,[CreatedDate]
					)
				VALUES
					(
					@PriCustomerNumber
					,@SecCustomerNumber
					,@TotalDollarsSpent
					,@LastTimeUsed
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id123 = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id123" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@TotalDollarsSpent" type="decimal" direction="Input" size="9" precision="18" scale="5" param="(18, 5)" nulldefault=""/>
				<parameter name="@LastTimeUsed" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempTotalDollarsSpent]
				SET
					[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[TotalDollarsSpent] = @TotalDollarsSpent
					,[LastTimeUsed] = @LastTimeUsed
					,[CreatedDate] = @CreatedDate
				WHERE
[ID123] = @Id123 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id123" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TempTotalDollarsSpent] WITH (ROWLOCK) 
				WHERE
					[ID123] = @Id123
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTempTotalDollarsSpent_GetById123" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempTotalDollarsSpent table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id123" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
				WHERE
					[ID123] = @Id123
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempTotalDollarsSpent_GetByPriCustomerNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempTotalDollarsSpent table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempTotalDollarsSpent table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id123" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@TotalDollarsSpent" type="decimal" direction="Input" size="9" precision="18" scale="5" param="(18, 5)" nulldefault="null"/>
				<parameter name="@LastTimeUsed" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID123]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TotalDollarsSpent]
	, [LastTimeUsed]
	, [CreatedDate]
    FROM
	[dbo].[TempTotalDollarsSpent]
    WHERE 
	 ([ID123] = @Id123 OR @Id123 IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([TotalDollarsSpent] = @TotalDollarsSpent OR @TotalDollarsSpent IS NULL)
	AND ([LastTimeUsed] = @LastTimeUsed OR @LastTimeUsed IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID123]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TotalDollarsSpent]
	, [LastTimeUsed]
	, [CreatedDate]
    FROM
	[dbo].[TempTotalDollarsSpent]
    WHERE 
	 ([ID123] = @Id123 AND @Id123 is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([TotalDollarsSpent] = @TotalDollarsSpent AND @TotalDollarsSpent is not null)
	OR ([LastTimeUsed] = @LastTimeUsed AND @LastTimeUsed is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTempTotalDollarsSpent_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempTotalDollarsSpent table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID123]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [TotalDollarsSpent]
					, [LastTimeUsed]
					, [CreatedDate]
					FROM [dbo].[TempTotalDollarsSpent] {0}
				)
				SELECT
				       [ID123],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [TotalDollarsSpent],
				       [LastTimeUsed],
				       [CreatedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TempTotalDollarsSpent] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRatedCDR_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RatedCDR table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pRatedCDR_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatedCDR table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ConferenceID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Moderator]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [ConferenceStartTime]'
				SET @SQL = @SQL + ', [ConferenceEndTime]'
				SET @SQL = @SQL + ', [ConferenceElapsedTime]'
				SET @SQL = @SQL + ', [StartTime]'
				SET @SQL = @SQL + ', [EndTime]'
				SET @SQL = @SQL + ', [ElapsedTime]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [DNIS]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [ANI]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [Destination]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ConnectProductRateID]'
				SET @SQL = @SQL + ', [BridgeProductRateID]'
				SET @SQL = @SQL + ', [LDProductRateID]'
				SET @SQL = @SQL + ', [ProductRateTaxableValue]'
				SET @SQL = @SQL + ', [CustomerTaxableValue]'
				SET @SQL = @SQL + ', [WSTaxableValue]'
				SET @SQL = @SQL + ', [RetailConnectCharge]'
				SET @SQL = @SQL + ', [RetailBridgeRate]'
				SET @SQL = @SQL + ', [RetailLDRate]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [RetailBillingInterval]'
				SET @SQL = @SQL + ', [RetailTotalConnectCharge]'
				SET @SQL = @SQL + ', [RetailTotalBridge]'
				SET @SQL = @SQL + ', [RetailTotalLD]'
				SET @SQL = @SQL + ', [RetailTotal]'
				SET @SQL = @SQL + ', [RetailTotalCredit]'
				SET @SQL = @SQL + ', [RetailLocalTaxRate]'
				SET @SQL = @SQL + ', [RetailFederalTaxRate]'
				SET @SQL = @SQL + ', [RetailLocalTax]'
				SET @SQL = @SQL + ', [RetailFederalTax]'
				SET @SQL = @SQL + ', [RetailTotalTax]'
				SET @SQL = @SQL + ', [WSConnectCharge]'
				SET @SQL = @SQL + ', [WSBridgeRate]'
				SET @SQL = @SQL + ', [WSLDRate]'
				SET @SQL = @SQL + ', [WSCurrency]'
				SET @SQL = @SQL + ', [WSBillingInterval]'
				SET @SQL = @SQL + ', [WSTotalConnectCharge]'
				SET @SQL = @SQL + ', [WSTotalBridge]'
				SET @SQL = @SQL + ', [WSTotalLD]'
				SET @SQL = @SQL + ', [WSTotal]'
				SET @SQL = @SQL + ', [WSLocalTaxRate]'
				SET @SQL = @SQL + ', [WSFederalTaxRate]'
				SET @SQL = @SQL + ', [WSLocalTax]'
				SET @SQL = @SQL + ', [WSFederalTax]'
				SET @SQL = @SQL + ', [WSTotalTax]'
				SET @SQL = @SQL + ', [BillingStatus]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProcessedDate]'
				SET @SQL = @SQL + ', [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[RatedCDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ConferenceID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Moderator],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [ConferenceStartTime],'
				SET @SQL = @SQL + ' [ConferenceEndTime],'
				SET @SQL = @SQL + ' [ConferenceElapsedTime],'
				SET @SQL = @SQL + ' [StartTime],'
				SET @SQL = @SQL + ' [EndTime],'
				SET @SQL = @SQL + ' [ElapsedTime],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [DNIS],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [ANI],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [Destination],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ConnectProductRateID],'
				SET @SQL = @SQL + ' [BridgeProductRateID],'
				SET @SQL = @SQL + ' [LDProductRateID],'
				SET @SQL = @SQL + ' [ProductRateTaxableValue],'
				SET @SQL = @SQL + ' [CustomerTaxableValue],'
				SET @SQL = @SQL + ' [WSTaxableValue],'
				SET @SQL = @SQL + ' [RetailConnectCharge],'
				SET @SQL = @SQL + ' [RetailBridgeRate],'
				SET @SQL = @SQL + ' [RetailLDRate],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [RetailBillingInterval],'
				SET @SQL = @SQL + ' [RetailTotalConnectCharge],'
				SET @SQL = @SQL + ' [RetailTotalBridge],'
				SET @SQL = @SQL + ' [RetailTotalLD],'
				SET @SQL = @SQL + ' [RetailTotal],'
				SET @SQL = @SQL + ' [RetailTotalCredit],'
				SET @SQL = @SQL + ' [RetailLocalTaxRate],'
				SET @SQL = @SQL + ' [RetailFederalTaxRate],'
				SET @SQL = @SQL + ' [RetailLocalTax],'
				SET @SQL = @SQL + ' [RetailFederalTax],'
				SET @SQL = @SQL + ' [RetailTotalTax],'
				SET @SQL = @SQL + ' [WSConnectCharge],'
				SET @SQL = @SQL + ' [WSBridgeRate],'
				SET @SQL = @SQL + ' [WSLDRate],'
				SET @SQL = @SQL + ' [WSCurrency],'
				SET @SQL = @SQL + ' [WSBillingInterval],'
				SET @SQL = @SQL + ' [WSTotalConnectCharge],'
				SET @SQL = @SQL + ' [WSTotalBridge],'
				SET @SQL = @SQL + ' [WSTotalLD],'
				SET @SQL = @SQL + ' [WSTotal],'
				SET @SQL = @SQL + ' [WSLocalTaxRate],'
				SET @SQL = @SQL + ' [WSFederalTaxRate],'
				SET @SQL = @SQL + ' [WSLocalTax],'
				SET @SQL = @SQL + ' [WSFederalTax],'
				SET @SQL = @SQL + ' [WSTotalTax],'
				SET @SQL = @SQL + ' [BillingStatus],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProcessedDate],'
				SET @SQL = @SQL + ' [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RatedCDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pRatedCDR_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RatedCDR table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ConferenceStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ConferenceEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ConferenceElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Ani" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalCredit" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[RatedCDR]
					(
					[ID]
					,[ConferenceID]
					,[ModeratorID]
					,[CustomerID]
					,[WholesalerID]
					,[ModeratorCode]
					,[PassCode]
					,[ModeratorName]
					,[Moderator]
					,[ExternalCustomerNumber]
					,[ExternalModeratorNumber]
					,[ReferenceNumber]
					,[ConferenceStartTime]
					,[ConferenceEndTime]
					,[ConferenceElapsedTime]
					,[StartTime]
					,[EndTime]
					,[ElapsedTime]
					,[BridgeID]
					,[UniqueConferenceID]
					,[AuxiliaryConferenceID]
					,[DNIS]
					,[DialNumber]
					,[ANI]
					,[ParticipantName]
					,[Destination]
					,[AccessTypeID]
					,[ConnectProductRateID]
					,[BridgeProductRateID]
					,[LDProductRateID]
					,[ProductRateTaxableValue]
					,[CustomerTaxableValue]
					,[WSTaxableValue]
					,[RetailConnectCharge]
					,[RetailBridgeRate]
					,[RetailLDRate]
					,[RetailCurrency]
					,[RetailBillingInterval]
					,[RetailTotalConnectCharge]
					,[RetailTotalBridge]
					,[RetailTotalLD]
					,[RetailTotal]
					,[RetailTotalCredit]
					,[RetailLocalTaxRate]
					,[RetailFederalTaxRate]
					,[RetailLocalTax]
					,[RetailFederalTax]
					,[RetailTotalTax]
					,[WSConnectCharge]
					,[WSBridgeRate]
					,[WSLDRate]
					,[WSCurrency]
					,[WSBillingInterval]
					,[WSTotalConnectCharge]
					,[WSTotalBridge]
					,[WSTotalLD]
					,[WSTotal]
					,[WSLocalTaxRate]
					,[WSFederalTaxRate]
					,[WSLocalTax]
					,[WSFederalTax]
					,[WSTotalTax]
					,[BillingStatus]
					,[BilledDate]
					,[ProcessedDate]
					,[SeeVoghMeetingID]
					)
				VALUES
					(
					@Id
					,@ConferenceId
					,@ModeratorId
					,@CustomerId
					,@WholesalerId
					,@ModeratorCode
					,@PassCode
					,@ModeratorName
					,@Moderator
					,@ExternalCustomerNumber
					,@ExternalModeratorNumber
					,@ReferenceNumber
					,@ConferenceStartTime
					,@ConferenceEndTime
					,@ConferenceElapsedTime
					,@StartTime
					,@EndTime
					,@ElapsedTime
					,@BridgeId
					,@UniqueConferenceId
					,@AuxiliaryConferenceId
					,@Dnis
					,@DialNumber
					,@Ani
					,@ParticipantName
					,@Destination
					,@AccessTypeId
					,@ConnectProductRateId
					,@BridgeProductRateId
					,@LdProductRateId
					,@ProductRateTaxableValue
					,@CustomerTaxableValue
					,@WsTaxableValue
					,@RetailConnectCharge
					,@RetailBridgeRate
					,@RetailLdRate
					,@RetailCurrency
					,@RetailBillingInterval
					,@RetailTotalConnectCharge
					,@RetailTotalBridge
					,@RetailTotalLd
					,@RetailTotal
					,@RetailTotalCredit
					,@RetailLocalTaxRate
					,@RetailFederalTaxRate
					,@RetailLocalTax
					,@RetailFederalTax
					,@RetailTotalTax
					,@WsConnectCharge
					,@WsBridgeRate
					,@WsldRate
					,@WsCurrency
					,@WsBillingInterval
					,@WsTotalConnectCharge
					,@WsTotalBridge
					,@WsTotalLd
					,@WsTotal
					,@WsLocalTaxRate
					,@WsFederalTaxRate
					,@WsLocalTax
					,@WsFederalTax
					,@WsTotalTax
					,@BillingStatus
					,@BilledDate
					,@ProcessedDate
					,@SeeVoghMeetingId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RatedCDR table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ConferenceStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ConferenceEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ConferenceElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Ani" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalCredit" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RatedCDR]
				SET
					[ID] = @Id
					,[ConferenceID] = @ConferenceId
					,[ModeratorID] = @ModeratorId
					,[CustomerID] = @CustomerId
					,[WholesalerID] = @WholesalerId
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[ModeratorName] = @ModeratorName
					,[Moderator] = @Moderator
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ReferenceNumber] = @ReferenceNumber
					,[ConferenceStartTime] = @ConferenceStartTime
					,[ConferenceEndTime] = @ConferenceEndTime
					,[ConferenceElapsedTime] = @ConferenceElapsedTime
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[ElapsedTime] = @ElapsedTime
					,[BridgeID] = @BridgeId
					,[UniqueConferenceID] = @UniqueConferenceId
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[DNIS] = @Dnis
					,[DialNumber] = @DialNumber
					,[ANI] = @Ani
					,[ParticipantName] = @ParticipantName
					,[Destination] = @Destination
					,[AccessTypeID] = @AccessTypeId
					,[ConnectProductRateID] = @ConnectProductRateId
					,[BridgeProductRateID] = @BridgeProductRateId
					,[LDProductRateID] = @LdProductRateId
					,[ProductRateTaxableValue] = @ProductRateTaxableValue
					,[CustomerTaxableValue] = @CustomerTaxableValue
					,[WSTaxableValue] = @WsTaxableValue
					,[RetailConnectCharge] = @RetailConnectCharge
					,[RetailBridgeRate] = @RetailBridgeRate
					,[RetailLDRate] = @RetailLdRate
					,[RetailCurrency] = @RetailCurrency
					,[RetailBillingInterval] = @RetailBillingInterval
					,[RetailTotalConnectCharge] = @RetailTotalConnectCharge
					,[RetailTotalBridge] = @RetailTotalBridge
					,[RetailTotalLD] = @RetailTotalLd
					,[RetailTotal] = @RetailTotal
					,[RetailTotalCredit] = @RetailTotalCredit
					,[RetailLocalTaxRate] = @RetailLocalTaxRate
					,[RetailFederalTaxRate] = @RetailFederalTaxRate
					,[RetailLocalTax] = @RetailLocalTax
					,[RetailFederalTax] = @RetailFederalTax
					,[RetailTotalTax] = @RetailTotalTax
					,[WSConnectCharge] = @WsConnectCharge
					,[WSBridgeRate] = @WsBridgeRate
					,[WSLDRate] = @WsldRate
					,[WSCurrency] = @WsCurrency
					,[WSBillingInterval] = @WsBillingInterval
					,[WSTotalConnectCharge] = @WsTotalConnectCharge
					,[WSTotalBridge] = @WsTotalBridge
					,[WSTotalLD] = @WsTotalLd
					,[WSTotal] = @WsTotal
					,[WSLocalTaxRate] = @WsLocalTaxRate
					,[WSFederalTaxRate] = @WsFederalTaxRate
					,[WSLocalTax] = @WsLocalTax
					,[WSFederalTax] = @WsFederalTax
					,[WSTotalTax] = @WsTotalTax
					,[BillingStatus] = @BillingStatus
					,[BilledDate] = @BilledDate
					,[ProcessedDate] = @ProcessedDate
					,[SeeVoghMeetingID] = @SeeVoghMeetingId
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RatedCDR table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[RatedCDR] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByAccessTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByBridgeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[BridgeID] = @BridgeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByConferenceIdBridgeIdWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ConferenceID] = @ConferenceId
					AND [BridgeID] = @BridgeId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByWholesalerIdModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByAccessTypeIdBridgeProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[AccessTypeID] = @AccessTypeId
					AND [BridgeProductRateID] = @BridgeProductRateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByWholesalerIdStartTimeEndTime" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [StartTime] = @StartTime
					AND [EndTime] = @EndTime
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByReferenceNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ReferenceNumber] = @ReferenceNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByBilledDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[BilledDate] = @BilledDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_GetByUniqueConferenceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[UniqueConferenceID] = @UniqueConferenceId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pRatedCDR_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RatedCDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ConferenceStartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ConferenceEndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ConferenceElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Ani" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotalCredit" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@SeeVoghMeetingId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [CustomerID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [ConferenceStartTime]
	, [ConferenceEndTime]
	, [ConferenceElapsedTime]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailTotalCredit]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[RatedCDR]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ConferenceID] = @ConferenceId OR @ConferenceId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([ModeratorName] = @ModeratorName OR @ModeratorName IS NULL)
	AND ([Moderator] = @Moderator OR @Moderator IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([ConferenceStartTime] = @ConferenceStartTime OR @ConferenceStartTime IS NULL)
	AND ([ConferenceEndTime] = @ConferenceEndTime OR @ConferenceEndTime IS NULL)
	AND ([ConferenceElapsedTime] = @ConferenceElapsedTime OR @ConferenceElapsedTime IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([ElapsedTime] = @ElapsedTime OR @ElapsedTime IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([DNIS] = @Dnis OR @Dnis IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([ANI] = @Ani OR @Ani IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([Destination] = @Destination OR @Destination IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ConnectProductRateID] = @ConnectProductRateId OR @ConnectProductRateId IS NULL)
	AND ([BridgeProductRateID] = @BridgeProductRateId OR @BridgeProductRateId IS NULL)
	AND ([LDProductRateID] = @LdProductRateId OR @LdProductRateId IS NULL)
	AND ([ProductRateTaxableValue] = @ProductRateTaxableValue OR @ProductRateTaxableValue IS NULL)
	AND ([CustomerTaxableValue] = @CustomerTaxableValue OR @CustomerTaxableValue IS NULL)
	AND ([WSTaxableValue] = @WsTaxableValue OR @WsTaxableValue IS NULL)
	AND ([RetailConnectCharge] = @RetailConnectCharge OR @RetailConnectCharge IS NULL)
	AND ([RetailBridgeRate] = @RetailBridgeRate OR @RetailBridgeRate IS NULL)
	AND ([RetailLDRate] = @RetailLdRate OR @RetailLdRate IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([RetailBillingInterval] = @RetailBillingInterval OR @RetailBillingInterval IS NULL)
	AND ([RetailTotalConnectCharge] = @RetailTotalConnectCharge OR @RetailTotalConnectCharge IS NULL)
	AND ([RetailTotalBridge] = @RetailTotalBridge OR @RetailTotalBridge IS NULL)
	AND ([RetailTotalLD] = @RetailTotalLd OR @RetailTotalLd IS NULL)
	AND ([RetailTotal] = @RetailTotal OR @RetailTotal IS NULL)
	AND ([RetailTotalCredit] = @RetailTotalCredit OR @RetailTotalCredit IS NULL)
	AND ([RetailLocalTaxRate] = @RetailLocalTaxRate OR @RetailLocalTaxRate IS NULL)
	AND ([RetailFederalTaxRate] = @RetailFederalTaxRate OR @RetailFederalTaxRate IS NULL)
	AND ([RetailLocalTax] = @RetailLocalTax OR @RetailLocalTax IS NULL)
	AND ([RetailFederalTax] = @RetailFederalTax OR @RetailFederalTax IS NULL)
	AND ([RetailTotalTax] = @RetailTotalTax OR @RetailTotalTax IS NULL)
	AND ([WSConnectCharge] = @WsConnectCharge OR @WsConnectCharge IS NULL)
	AND ([WSBridgeRate] = @WsBridgeRate OR @WsBridgeRate IS NULL)
	AND ([WSLDRate] = @WsldRate OR @WsldRate IS NULL)
	AND ([WSCurrency] = @WsCurrency OR @WsCurrency IS NULL)
	AND ([WSBillingInterval] = @WsBillingInterval OR @WsBillingInterval IS NULL)
	AND ([WSTotalConnectCharge] = @WsTotalConnectCharge OR @WsTotalConnectCharge IS NULL)
	AND ([WSTotalBridge] = @WsTotalBridge OR @WsTotalBridge IS NULL)
	AND ([WSTotalLD] = @WsTotalLd OR @WsTotalLd IS NULL)
	AND ([WSTotal] = @WsTotal OR @WsTotal IS NULL)
	AND ([WSLocalTaxRate] = @WsLocalTaxRate OR @WsLocalTaxRate IS NULL)
	AND ([WSFederalTaxRate] = @WsFederalTaxRate OR @WsFederalTaxRate IS NULL)
	AND ([WSLocalTax] = @WsLocalTax OR @WsLocalTax IS NULL)
	AND ([WSFederalTax] = @WsFederalTax OR @WsFederalTax IS NULL)
	AND ([WSTotalTax] = @WsTotalTax OR @WsTotalTax IS NULL)
	AND ([BillingStatus] = @BillingStatus OR @BillingStatus IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProcessedDate] = @ProcessedDate OR @ProcessedDate IS NULL)
	AND ([SeeVoghMeetingID] = @SeeVoghMeetingId OR @SeeVoghMeetingId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [CustomerID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [ConferenceStartTime]
	, [ConferenceEndTime]
	, [ConferenceElapsedTime]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailTotalCredit]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[RatedCDR]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ConferenceID] = @ConferenceId AND @ConferenceId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([ModeratorName] = @ModeratorName AND @ModeratorName is not null)
	OR ([Moderator] = @Moderator AND @Moderator is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([ConferenceStartTime] = @ConferenceStartTime AND @ConferenceStartTime is not null)
	OR ([ConferenceEndTime] = @ConferenceEndTime AND @ConferenceEndTime is not null)
	OR ([ConferenceElapsedTime] = @ConferenceElapsedTime AND @ConferenceElapsedTime is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([ElapsedTime] = @ElapsedTime AND @ElapsedTime is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([DNIS] = @Dnis AND @Dnis is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([ANI] = @Ani AND @Ani is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([Destination] = @Destination AND @Destination is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ConnectProductRateID] = @ConnectProductRateId AND @ConnectProductRateId is not null)
	OR ([BridgeProductRateID] = @BridgeProductRateId AND @BridgeProductRateId is not null)
	OR ([LDProductRateID] = @LdProductRateId AND @LdProductRateId is not null)
	OR ([ProductRateTaxableValue] = @ProductRateTaxableValue AND @ProductRateTaxableValue is not null)
	OR ([CustomerTaxableValue] = @CustomerTaxableValue AND @CustomerTaxableValue is not null)
	OR ([WSTaxableValue] = @WsTaxableValue AND @WsTaxableValue is not null)
	OR ([RetailConnectCharge] = @RetailConnectCharge AND @RetailConnectCharge is not null)
	OR ([RetailBridgeRate] = @RetailBridgeRate AND @RetailBridgeRate is not null)
	OR ([RetailLDRate] = @RetailLdRate AND @RetailLdRate is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([RetailBillingInterval] = @RetailBillingInterval AND @RetailBillingInterval is not null)
	OR ([RetailTotalConnectCharge] = @RetailTotalConnectCharge AND @RetailTotalConnectCharge is not null)
	OR ([RetailTotalBridge] = @RetailTotalBridge AND @RetailTotalBridge is not null)
	OR ([RetailTotalLD] = @RetailTotalLd AND @RetailTotalLd is not null)
	OR ([RetailTotal] = @RetailTotal AND @RetailTotal is not null)
	OR ([RetailTotalCredit] = @RetailTotalCredit AND @RetailTotalCredit is not null)
	OR ([RetailLocalTaxRate] = @RetailLocalTaxRate AND @RetailLocalTaxRate is not null)
	OR ([RetailFederalTaxRate] = @RetailFederalTaxRate AND @RetailFederalTaxRate is not null)
	OR ([RetailLocalTax] = @RetailLocalTax AND @RetailLocalTax is not null)
	OR ([RetailFederalTax] = @RetailFederalTax AND @RetailFederalTax is not null)
	OR ([RetailTotalTax] = @RetailTotalTax AND @RetailTotalTax is not null)
	OR ([WSConnectCharge] = @WsConnectCharge AND @WsConnectCharge is not null)
	OR ([WSBridgeRate] = @WsBridgeRate AND @WsBridgeRate is not null)
	OR ([WSLDRate] = @WsldRate AND @WsldRate is not null)
	OR ([WSCurrency] = @WsCurrency AND @WsCurrency is not null)
	OR ([WSBillingInterval] = @WsBillingInterval AND @WsBillingInterval is not null)
	OR ([WSTotalConnectCharge] = @WsTotalConnectCharge AND @WsTotalConnectCharge is not null)
	OR ([WSTotalBridge] = @WsTotalBridge AND @WsTotalBridge is not null)
	OR ([WSTotalLD] = @WsTotalLd AND @WsTotalLd is not null)
	OR ([WSTotal] = @WsTotal AND @WsTotal is not null)
	OR ([WSLocalTaxRate] = @WsLocalTaxRate AND @WsLocalTaxRate is not null)
	OR ([WSFederalTaxRate] = @WsFederalTaxRate AND @WsFederalTaxRate is not null)
	OR ([WSLocalTax] = @WsLocalTax AND @WsLocalTax is not null)
	OR ([WSFederalTax] = @WsFederalTax AND @WsFederalTax is not null)
	OR ([WSTotalTax] = @WsTotalTax AND @WsTotalTax is not null)
	OR ([BillingStatus] = @BillingStatus AND @BillingStatus is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProcessedDate] = @ProcessedDate AND @ProcessedDate is not null)
	OR ([SeeVoghMeetingID] = @SeeVoghMeetingId AND @SeeVoghMeetingId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pRatedCDR_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatedCDR table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ConferenceID]
					, [ModeratorID]
					, [CustomerID]
					, [WholesalerID]
					, [ModeratorCode]
					, [PassCode]
					, [ModeratorName]
					, [Moderator]
					, [ExternalCustomerNumber]
					, [ExternalModeratorNumber]
					, [ReferenceNumber]
					, [ConferenceStartTime]
					, [ConferenceEndTime]
					, [ConferenceElapsedTime]
					, [StartTime]
					, [EndTime]
					, [ElapsedTime]
					, [BridgeID]
					, [UniqueConferenceID]
					, [AuxiliaryConferenceID]
					, [DNIS]
					, [DialNumber]
					, [ANI]
					, [ParticipantName]
					, [Destination]
					, [AccessTypeID]
					, [ConnectProductRateID]
					, [BridgeProductRateID]
					, [LDProductRateID]
					, [ProductRateTaxableValue]
					, [CustomerTaxableValue]
					, [WSTaxableValue]
					, [RetailConnectCharge]
					, [RetailBridgeRate]
					, [RetailLDRate]
					, [RetailCurrency]
					, [RetailBillingInterval]
					, [RetailTotalConnectCharge]
					, [RetailTotalBridge]
					, [RetailTotalLD]
					, [RetailTotal]
					, [RetailTotalCredit]
					, [RetailLocalTaxRate]
					, [RetailFederalTaxRate]
					, [RetailLocalTax]
					, [RetailFederalTax]
					, [RetailTotalTax]
					, [WSConnectCharge]
					, [WSBridgeRate]
					, [WSLDRate]
					, [WSCurrency]
					, [WSBillingInterval]
					, [WSTotalConnectCharge]
					, [WSTotalBridge]
					, [WSTotalLD]
					, [WSTotal]
					, [WSLocalTaxRate]
					, [WSFederalTaxRate]
					, [WSLocalTax]
					, [WSFederalTax]
					, [WSTotalTax]
					, [BillingStatus]
					, [BilledDate]
					, [ProcessedDate]
					, [SeeVoghMeetingID]
					FROM [dbo].[RatedCDR] {0}
				)
				SELECT
				       [ID],
				       [ConferenceID],
				       [ModeratorID],
				       [CustomerID],
				       [WholesalerID],
				       [ModeratorCode],
				       [PassCode],
				       [ModeratorName],
				       [Moderator],
				       [ExternalCustomerNumber],
				       [ExternalModeratorNumber],
				       [ReferenceNumber],
				       [ConferenceStartTime],
				       [ConferenceEndTime],
				       [ConferenceElapsedTime],
				       [StartTime],
				       [EndTime],
				       [ElapsedTime],
				       [BridgeID],
				       [UniqueConferenceID],
				       [AuxiliaryConferenceID],
				       [DNIS],
				       [DialNumber],
				       [ANI],
				       [ParticipantName],
				       [Destination],
				       [AccessTypeID],
				       [ConnectProductRateID],
				       [BridgeProductRateID],
				       [LDProductRateID],
				       [ProductRateTaxableValue],
				       [CustomerTaxableValue],
				       [WSTaxableValue],
				       [RetailConnectCharge],
				       [RetailBridgeRate],
				       [RetailLDRate],
				       [RetailCurrency],
				       [RetailBillingInterval],
				       [RetailTotalConnectCharge],
				       [RetailTotalBridge],
				       [RetailTotalLD],
				       [RetailTotal],
				       [RetailTotalCredit],
				       [RetailLocalTaxRate],
				       [RetailFederalTaxRate],
				       [RetailLocalTax],
				       [RetailFederalTax],
				       [RetailTotalTax],
				       [WSConnectCharge],
				       [WSBridgeRate],
				       [WSLDRate],
				       [WSCurrency],
				       [WSBillingInterval],
				       [WSTotalConnectCharge],
				       [WSTotalBridge],
				       [WSTotalLD],
				       [WSTotal],
				       [WSLocalTaxRate],
				       [WSFederalTaxRate],
				       [WSLocalTax],
				       [WSFederalTax],
				       [WSTotalTax],
				       [BillingStatus],
				       [BilledDate],
				       [ProcessedDate],
				       [SeeVoghMeetingID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[RatedCDR] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_RatedCDR_GetCallSummaryForCustomer3"  skip="true">
			<comment><![CDATA[-- Stored procedure
-- select * from [User]
-- Select * from Customer
-- select * from Moderator where UserID = 5 
-- select * from ratedCDR where ModeratorID = 8
-- [p_RatedCDR_GetCallSummaryForCustomer3] 373, '2010-10-1', '2010-10-30', -1, -1, '', ''

]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MeetingName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   select
	UniqueConferenceID,

	MeetingDate,
    MIN(StartTime) as ConfStartTime,
	UserDisplayName,
	ModeratorName,
	ReferenceNumber,	 
    sum(RetailTotal) as RetailTotal


   from (
   SELECT     CAST(CONVERT(char(10), dbo.RatedCDR.StartTime, 101) AS datetime) AS MeetingDate, dbo.RatedCDR.UniqueConferenceID, dbo.RatedCDR.StartTime, 
                      dbo.[User].DisplayName AS UserDisplayName, dbo.RatedCDR.ModeratorName, dbo.RatedCDR.ReferenceNumber, dbo.RatedCDR.RetailTotal
                      
FROM         dbo.RatedCDR INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.AccessType ON dbo.RatedCDR.AccessTypeID = dbo.AccessType.ID 
	where
	StartTime >= @StartTime and StartTime <= @EndTime
	AND ModeratorID in (select ID from Moderator where CustomerID = @CustomerID)
	AND (@UserID = -1 or ModeratorID in (select ID from Moderator where UserID = @UserID))
	AND (ReferenceNumber = @ReferenceNumber or @ReferenceNumber = '')
    AND (ModeratorName = @MeetingName or @MeetingName = '')
    AND (DepartmentID = @DepartmentID or @DepartmentID = -1)
    ) dTable
	group by UniqueConferenceID, MeetingDate, UserDisplayName, ModeratorName, ReferenceNumber 
	order by MeetingDate, ConfStartTime,  UserDisplayName, ModeratorName, ReferenceNumber
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_RatedCDR_GetCallSummaryForCustomer"  skip="true">
			<comment><![CDATA[-- Stored procedure
-- select * from [User]
-- Select * from Customer
-- select * from Moderator where UserID = 5 
-- select * from ratedCDR where ModeratorID = 8
-- [p_RatedCDR_GetCallSummaryForCustomer] 373, '2010-10-1', '2010-10-30', -1, -1, '', ''

]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MeetingName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   select
	UniqueConferenceID,

	MeetingDate,
    MIN(StartTime) as ConfStartTime,
	UserDisplayName,
	ModeratorName,
	ReferenceNumber,	 
    sum(RetailTotal) as RetailTotal,
ProductTypeDisplayName

   from (
   SELECT     CAST(CONVERT(char(10), dbo.RatedCDR.StartTime, 101) AS datetime) AS MeetingDate, dbo.RatedCDR.UniqueConferenceID, dbo.RatedCDR.StartTime, 
                      dbo.[User].DisplayName AS UserDisplayName, dbo.RatedCDR.ModeratorName, dbo.RatedCDR.ReferenceNumber, dbo.RatedCDR.RetailTotal, 
                      dbo.vw_AccessType_ProductType.ProductTypeDisplayName
FROM         dbo.RatedCDR INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.AccessType ON dbo.RatedCDR.AccessTypeID = dbo.AccessType.ID INNER JOIN
                      dbo.vw_AccessType_ProductType ON (dbo.RatedCDR.AccessTypeID = dbo.vw_AccessType_ProductType.AccessTypeID AND dbo.RatedCDR.BridgeProductRateID = dbo.vw_AccessType_ProductType.ProductRateID)
	where
	StartTime >= @StartTime and StartTime <= @EndTime
	AND ModeratorID in (select ID from Moderator where CustomerID = @CustomerID)
	AND (@UserID = -1 or ModeratorID in (select ID from Moderator where UserID = @UserID))
	AND (ReferenceNumber = @ReferenceNumber or @ReferenceNumber = '')
    AND (ModeratorName = @MeetingName or @MeetingName = '')
    AND (DepartmentID = @DepartmentID or @DepartmentID = -1)
    ) dTable
	group by UniqueConferenceID, MeetingDate, UserDisplayName, ModeratorName, ReferenceNumber, ProductTypeDisplayName
	order by MeetingDate, ConfStartTime,  UserDisplayName, ModeratorName, ReferenceNumber
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_RatedCDR_SetBillingCode"  skip="true">
			<comment><![CDATA[]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UniqueConferenceID" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN

UPDATE [dbo].RatedCDR
	set ReferenceNumber = RTRim(LTrim(@ReferenceNumber))
	where 
		UniqueConferenceID = @UniqueConferenceID
 		and CustomerID = @CustomerID
END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_RatedCDR_GetCallDetailsForCustomer"  skip="true">
			<comment><![CDATA[-- Stored procedure
-- select * from [User]
-- Select * from Customer
-- select * from Moderator where UserID = 5 
-- select * from ratedCDR where ModeratorID = 8
-- [p_RatedCDR_GetCallDetailsForCustomer] 8, '2010-10-1', '2010-10-30', -1, -1, '', ''

]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MeetingName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT     cast(convert(char(10), StartTime, 101) as datetime) as MeetingDate, dbo.RatedCDR.*, dbo.[User].DisplayName as UserDisplayName, AccessType.DisplayName as AccessTypeDisplayName,
	/*	 
	CASE Destination
			 WHEN '0' THEN ANI 
			 WHEN '' THEN ANI
			 WHEN null THEN ANI
			 ELSE 'Dialed out to: ' + Destination
		 END
		CallerID
	*/
	Case
		WHEN ParticipantName <> '' Then ParticipantName
		WHEN (Destination = '0' or Destination = '' or Destination is null) THEN ANI 
		ELSE 'Dialed out to: ' + Destination
    END
    CallerID

   FROM         dbo.RatedCDR INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID	INNER JOIN
                      dbo.AccessType ON dbo.RatedCDR.AccessTypeID = dbo.AccessType.ID
	where
	StartTime >= @StartTime and StartTime <= @EndTime
	AND ModeratorID in (select ID from Moderator where CustomerID = @CustomerID)
	AND (@UserID = -1 or ModeratorID in (select ID from Moderator where UserID = @UserID))
	AND (ReferenceNumber = @ReferenceNumber or @ReferenceNumber = '')
	AND (ModeratorName = @MeetingName or @MeetingName = '')
    AND (DepartmentID = @DepartmentID or @DepartmentID = -1)
	order by StartTime
END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_RatedCDR_GetCallSummaryForCustomer2"  skip="true">
			<comment><![CDATA[-- Stored procedure
-- select * from [User]
-- Select * from Customer
-- select * from Moderator where UserID = 5 
-- select * from ratedCDR where ModeratorID = 8
-- [p_RatedCDR_GetCallSummaryForCustomer2] 8, '2008-1-1', '2008-12-30', -1, -1, '', ''

]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MeetingName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   select
	UniqueConferenceID,

	MeetingDate,
	ProductTypeDisplayName,
    MIN(StartTime) as ConfStartTime,
	UserDisplayName,
	ModeratorName,
	ReferenceNumber,	 
    sum(RetailTotal) as RetailTotal

   from (
   SELECT     cast(convert(char(10), StartTime, 101) as datetime) as MeetingDate,
              UniqueConferenceID,
			  StartTime,	
			  (dbo.[User].DisplayName) as UserDisplayName,
			  (ModeratorName) as ModeratorName,
			  (ReferenceNumber) as ReferenceNumber,
			  (ProductType.DisplayName) as ProductTypeDisplayName,
			  (RetailTotal) as RetailTotal
FROM         dbo.ProductRate INNER JOIN
                      dbo.Product ON dbo.ProductRate.ProductID = dbo.Product.ID INNER JOIN
                      dbo.ProductType ON dbo.Product.ProductTypeID = dbo.ProductType.ID RIGHT OUTER JOIN
                      dbo.RatedCDR INNER JOIN
                      dbo.Moderator ON dbo.RatedCDR.ModeratorID = dbo.Moderator.ID INNER JOIN
                      dbo.[User] ON dbo.Moderator.UserID = dbo.[User].UserID INNER JOIN
                      dbo.AccessType ON dbo.RatedCDR.AccessTypeID = dbo.AccessType.ID ON dbo.ProductRate.ID = dbo.RatedCDR.ConnectProductRateID	where
	StartTime >= @StartTime and StartTime <= @EndTime
	AND ModeratorID in (select ID from Moderator where CustomerID = @CustomerID)
	AND (@UserID = -1 or ModeratorID in (select ID from Moderator where UserID = @UserID))
	AND (ReferenceNumber = @ReferenceNumber or @ReferenceNumber = '')
    AND (ModeratorName = @MeetingName or @MeetingName = '')
    AND (DepartmentID = @DepartmentID or @DepartmentID = -1)
    ) dTable
	group by UniqueConferenceID, ProductTypeDisplayName, MeetingDate, UserDisplayName, ModeratorName, ReferenceNumber
	order by MeetingDate, ConfStartTime,  UserDisplayName, ModeratorName, ReferenceNumber
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_RatedCDR_GetCallDetailsForModerator"  skip="true">
			<comment><![CDATA[]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    select 
        RatedCDR.*,
         CASE Destination 
             WHEN '' THEN ANI
             WHEN '0' THEN ANI 
             WHEN null THEN ANI
             ELSE 'Dialed out to: ' + Destination
         END
        CallerID
    from RatedCDR
    where
    StartTime between @StartTime and @EndTime
    AND ModeratorID in (select ID from Moderator where UserID = @UserID)

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pTrend_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Trend table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CompanyID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[RetailCurrency],
					[CompanyName],
					[TotalRevenueMonth01],
					[TotalRevenueMonth02],
					[TotalRevenueMonth03],
					[TotalRevenueMonth04],
					[TotalRevenueMonth05],
					[TotalRevenueMonth06],
					[TotalRevenueMonth07],
					[TotalRevenueMonth08],
					[TotalRevenueMonth09],
					[TotalRevenueMonth10],
					[TotalRevenueMonth11],
					[TotalRevenueMonth12],
					[YearCategory],
					[StartDate],
					[EndDate]
				FROM
					[dbo].[Trend]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTrend_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Trend table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CompanyID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [TotalRevenueMonth01]'
				SET @SQL = @SQL + ', [TotalRevenueMonth02]'
				SET @SQL = @SQL + ', [TotalRevenueMonth03]'
				SET @SQL = @SQL + ', [TotalRevenueMonth04]'
				SET @SQL = @SQL + ', [TotalRevenueMonth05]'
				SET @SQL = @SQL + ', [TotalRevenueMonth06]'
				SET @SQL = @SQL + ', [TotalRevenueMonth07]'
				SET @SQL = @SQL + ', [TotalRevenueMonth08]'
				SET @SQL = @SQL + ', [TotalRevenueMonth09]'
				SET @SQL = @SQL + ', [TotalRevenueMonth10]'
				SET @SQL = @SQL + ', [TotalRevenueMonth11]'
				SET @SQL = @SQL + ', [TotalRevenueMonth12]'
				SET @SQL = @SQL + ', [YearCategory]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ' FROM [dbo].[Trend]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [TotalRevenueMonth01],'
				SET @SQL = @SQL + ' [TotalRevenueMonth02],'
				SET @SQL = @SQL + ' [TotalRevenueMonth03],'
				SET @SQL = @SQL + ' [TotalRevenueMonth04],'
				SET @SQL = @SQL + ' [TotalRevenueMonth05],'
				SET @SQL = @SQL + ' [TotalRevenueMonth06],'
				SET @SQL = @SQL + ' [TotalRevenueMonth07],'
				SET @SQL = @SQL + ' [TotalRevenueMonth08],'
				SET @SQL = @SQL + ' [TotalRevenueMonth09],'
				SET @SQL = @SQL + ' [TotalRevenueMonth10],'
				SET @SQL = @SQL + ' [TotalRevenueMonth11],'
				SET @SQL = @SQL + ' [TotalRevenueMonth12],'
				SET @SQL = @SQL + ' [YearCategory],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Trend]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTrend_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Trend table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth01" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth02" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth03" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth04" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth05" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth06" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth07" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth08" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth09" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth10" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth11" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth12" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@YearCategory" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Trend]
					(
					[CompanyID]
					,[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[RetailCurrency]
					,[CompanyName]
					,[TotalRevenueMonth01]
					,[TotalRevenueMonth02]
					,[TotalRevenueMonth03]
					,[TotalRevenueMonth04]
					,[TotalRevenueMonth05]
					,[TotalRevenueMonth06]
					,[TotalRevenueMonth07]
					,[TotalRevenueMonth08]
					,[TotalRevenueMonth09]
					,[TotalRevenueMonth10]
					,[TotalRevenueMonth11]
					,[TotalRevenueMonth12]
					,[YearCategory]
					,[StartDate]
					,[EndDate]
					)
				VALUES
					(
					@CompanyId
					,@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@RetailCurrency
					,@CompanyName
					,@TotalRevenueMonth01
					,@TotalRevenueMonth02
					,@TotalRevenueMonth03
					,@TotalRevenueMonth04
					,@TotalRevenueMonth05
					,@TotalRevenueMonth06
					,@TotalRevenueMonth07
					,@TotalRevenueMonth08
					,@TotalRevenueMonth09
					,@TotalRevenueMonth10
					,@TotalRevenueMonth11
					,@TotalRevenueMonth12
					,@YearCategory
					,@StartDate
					,@EndDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTrend_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Trend table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalWholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth01" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth02" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth03" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth04" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth05" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth06" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth07" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth08" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth09" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth10" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth11" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalRevenueMonth12" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@YearCategory" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Trend]
				SET
					[CompanyID] = @CompanyId
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[RetailCurrency] = @RetailCurrency
					,[CompanyName] = @CompanyName
					,[TotalRevenueMonth01] = @TotalRevenueMonth01
					,[TotalRevenueMonth02] = @TotalRevenueMonth02
					,[TotalRevenueMonth03] = @TotalRevenueMonth03
					,[TotalRevenueMonth04] = @TotalRevenueMonth04
					,[TotalRevenueMonth05] = @TotalRevenueMonth05
					,[TotalRevenueMonth06] = @TotalRevenueMonth06
					,[TotalRevenueMonth07] = @TotalRevenueMonth07
					,[TotalRevenueMonth08] = @TotalRevenueMonth08
					,[TotalRevenueMonth09] = @TotalRevenueMonth09
					,[TotalRevenueMonth10] = @TotalRevenueMonth10
					,[TotalRevenueMonth11] = @TotalRevenueMonth11
					,[TotalRevenueMonth12] = @TotalRevenueMonth12
					,[YearCategory] = @YearCategory
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
				WHERE
[WholesalerID] = @OriginalWholesalerId 
AND [CustomerID] = @OriginalCustomerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTrend_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Trend table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Trend] WITH (ROWLOCK) 
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTrend_GetByWholesalerIdCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Trend table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CompanyID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[RetailCurrency],
					[CompanyName],
					[TotalRevenueMonth01],
					[TotalRevenueMonth02],
					[TotalRevenueMonth03],
					[TotalRevenueMonth04],
					[TotalRevenueMonth05],
					[TotalRevenueMonth06],
					[TotalRevenueMonth07],
					[TotalRevenueMonth08],
					[TotalRevenueMonth09],
					[TotalRevenueMonth10],
					[TotalRevenueMonth11],
					[TotalRevenueMonth12],
					[YearCategory],
					[StartDate],
					[EndDate]
				FROM
					[dbo].[Trend]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTrend_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Trend table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth01" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth02" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth03" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth04" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth05" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth06" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth07" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth08" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth09" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth10" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth11" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalRevenueMonth12" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@YearCategory" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CompanyID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [RetailCurrency]
	, [CompanyName]
	, [TotalRevenueMonth01]
	, [TotalRevenueMonth02]
	, [TotalRevenueMonth03]
	, [TotalRevenueMonth04]
	, [TotalRevenueMonth05]
	, [TotalRevenueMonth06]
	, [TotalRevenueMonth07]
	, [TotalRevenueMonth08]
	, [TotalRevenueMonth09]
	, [TotalRevenueMonth10]
	, [TotalRevenueMonth11]
	, [TotalRevenueMonth12]
	, [YearCategory]
	, [StartDate]
	, [EndDate]
    FROM
	[dbo].[Trend]
    WHERE 
	 ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([TotalRevenueMonth01] = @TotalRevenueMonth01 OR @TotalRevenueMonth01 IS NULL)
	AND ([TotalRevenueMonth02] = @TotalRevenueMonth02 OR @TotalRevenueMonth02 IS NULL)
	AND ([TotalRevenueMonth03] = @TotalRevenueMonth03 OR @TotalRevenueMonth03 IS NULL)
	AND ([TotalRevenueMonth04] = @TotalRevenueMonth04 OR @TotalRevenueMonth04 IS NULL)
	AND ([TotalRevenueMonth05] = @TotalRevenueMonth05 OR @TotalRevenueMonth05 IS NULL)
	AND ([TotalRevenueMonth06] = @TotalRevenueMonth06 OR @TotalRevenueMonth06 IS NULL)
	AND ([TotalRevenueMonth07] = @TotalRevenueMonth07 OR @TotalRevenueMonth07 IS NULL)
	AND ([TotalRevenueMonth08] = @TotalRevenueMonth08 OR @TotalRevenueMonth08 IS NULL)
	AND ([TotalRevenueMonth09] = @TotalRevenueMonth09 OR @TotalRevenueMonth09 IS NULL)
	AND ([TotalRevenueMonth10] = @TotalRevenueMonth10 OR @TotalRevenueMonth10 IS NULL)
	AND ([TotalRevenueMonth11] = @TotalRevenueMonth11 OR @TotalRevenueMonth11 IS NULL)
	AND ([TotalRevenueMonth12] = @TotalRevenueMonth12 OR @TotalRevenueMonth12 IS NULL)
	AND ([YearCategory] = @YearCategory OR @YearCategory IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CompanyID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [RetailCurrency]
	, [CompanyName]
	, [TotalRevenueMonth01]
	, [TotalRevenueMonth02]
	, [TotalRevenueMonth03]
	, [TotalRevenueMonth04]
	, [TotalRevenueMonth05]
	, [TotalRevenueMonth06]
	, [TotalRevenueMonth07]
	, [TotalRevenueMonth08]
	, [TotalRevenueMonth09]
	, [TotalRevenueMonth10]
	, [TotalRevenueMonth11]
	, [TotalRevenueMonth12]
	, [YearCategory]
	, [StartDate]
	, [EndDate]
    FROM
	[dbo].[Trend]
    WHERE 
	 ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([TotalRevenueMonth01] = @TotalRevenueMonth01 AND @TotalRevenueMonth01 is not null)
	OR ([TotalRevenueMonth02] = @TotalRevenueMonth02 AND @TotalRevenueMonth02 is not null)
	OR ([TotalRevenueMonth03] = @TotalRevenueMonth03 AND @TotalRevenueMonth03 is not null)
	OR ([TotalRevenueMonth04] = @TotalRevenueMonth04 AND @TotalRevenueMonth04 is not null)
	OR ([TotalRevenueMonth05] = @TotalRevenueMonth05 AND @TotalRevenueMonth05 is not null)
	OR ([TotalRevenueMonth06] = @TotalRevenueMonth06 AND @TotalRevenueMonth06 is not null)
	OR ([TotalRevenueMonth07] = @TotalRevenueMonth07 AND @TotalRevenueMonth07 is not null)
	OR ([TotalRevenueMonth08] = @TotalRevenueMonth08 AND @TotalRevenueMonth08 is not null)
	OR ([TotalRevenueMonth09] = @TotalRevenueMonth09 AND @TotalRevenueMonth09 is not null)
	OR ([TotalRevenueMonth10] = @TotalRevenueMonth10 AND @TotalRevenueMonth10 is not null)
	OR ([TotalRevenueMonth11] = @TotalRevenueMonth11 AND @TotalRevenueMonth11 is not null)
	OR ([TotalRevenueMonth12] = @TotalRevenueMonth12 AND @TotalRevenueMonth12 is not null)
	OR ([YearCategory] = @YearCategory AND @YearCategory is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTrend_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Trend table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CompanyID]
					, [WholesalerID]
					, [CustomerID]
					, [SalesPersonID]
					, [RetailCurrency]
					, [CompanyName]
					, [TotalRevenueMonth01]
					, [TotalRevenueMonth02]
					, [TotalRevenueMonth03]
					, [TotalRevenueMonth04]
					, [TotalRevenueMonth05]
					, [TotalRevenueMonth06]
					, [TotalRevenueMonth07]
					, [TotalRevenueMonth08]
					, [TotalRevenueMonth09]
					, [TotalRevenueMonth10]
					, [TotalRevenueMonth11]
					, [TotalRevenueMonth12]
					, [YearCategory]
					, [StartDate]
					, [EndDate]
					FROM [dbo].[Trend] {0}
				)
				SELECT
				       [CompanyID],
				       [WholesalerID],
				       [CustomerID],
				       [SalesPersonID],
				       [RetailCurrency],
				       [CompanyName],
				       [TotalRevenueMonth01],
				       [TotalRevenueMonth02],
				       [TotalRevenueMonth03],
				       [TotalRevenueMonth04],
				       [TotalRevenueMonth05],
				       [TotalRevenueMonth06],
				       [TotalRevenueMonth07],
				       [TotalRevenueMonth08],
				       [TotalRevenueMonth09],
				       [TotalRevenueMonth10],
				       [TotalRevenueMonth11],
				       [TotalRevenueMonth12],
				       [YearCategory],
				       [StartDate],
				       [EndDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Trend] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketUserAssociations_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[TicketUserID]
				FROM
					[dbo].[TicketUserAssociations]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketUserAssociations_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketUserAssociations table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [TicketUserID]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketUserAssociations]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [TicketUserID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketUserAssociations]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketUserAssociations_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketUserAssociations]
					(
					[UserID]
					,[TicketUserID]
					)
				VALUES
					(
					@UserId
					,@TicketUserId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketUserAssociations_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalTicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketUserAssociations]
				SET
					[UserID] = @UserId
					,[TicketUserID] = @TicketUserId
				WHERE
[UserID] = @OriginalUserId 
AND [TicketUserID] = @OriginalTicketUserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketUserAssociations_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketUserAssociations] WITH (ROWLOCK) 
				WHERE
					[UserID] = @UserId
					AND [TicketUserID] = @TicketUserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketUserAssociations_GetByUserIdTicketUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketUserAssociations table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserID],
					[TicketUserID]
				FROM
					[dbo].[TicketUserAssociations]
				WHERE
					[UserID] = @UserId
					AND [TicketUserID] = @TicketUserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketUserAssociations_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketUserAssociations table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TicketUserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [TicketUserID]
    FROM
	[dbo].[TicketUserAssociations]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([TicketUserID] = @TicketUserId OR @TicketUserId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [TicketUserID]
    FROM
	[dbo].[TicketUserAssociations]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([TicketUserID] = @TicketUserId AND @TicketUserId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketUserAssociations_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketUserAssociations table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UserID]
					, [TicketUserID]
					FROM [dbo].[TicketUserAssociations] {0}
				)
				SELECT
				       [UserID],
				       [TicketUserID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketUserAssociations] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketStatusHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pTicketStatusHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatusHistory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TicketID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TicketID]'
				SET @SQL = @SQL + ', [StatusID]'
				SET @SQL = @SQL + ', [StatusDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatusHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TicketID],'
				SET @SQL = @SQL + ' [StatusID],'
				SET @SQL = @SQL + ' [StatusDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatusHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pTicketStatusHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[TicketStatusHistory]
					(
					[TicketID]
					,[StatusID]
					,[StatusDate]
					)
				VALUES
					(
					@TicketId
					,@StatusId
					,@StatusDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatusHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalTicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketStatusHistory]
				SET
					[TicketID] = @TicketId
					,[StatusID] = @StatusId
					,[StatusDate] = @StatusDate
				WHERE
[TicketID] = @OriginalTicketId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatusHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TicketStatusHistory] WITH (ROWLOCK) 
				WHERE
					[TicketID] = @TicketId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatusHistory_GetByStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatusHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
				WHERE
					[StatusID] = @StatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pTicketStatusHistory_GetByTicketId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatusHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
				WHERE
					[TicketID] = @TicketId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pTicketStatusHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketStatusHistory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TicketId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StatusId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TicketID]
	, [StatusID]
	, [StatusDate]
    FROM
	[dbo].[TicketStatusHistory]
    WHERE 
	 ([TicketID] = @TicketId OR @TicketId IS NULL)
	AND ([StatusID] = @StatusId OR @StatusId IS NULL)
	AND ([StatusDate] = @StatusDate OR @StatusDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TicketID]
	, [StatusID]
	, [StatusDate]
    FROM
	[dbo].[TicketStatusHistory]
    WHERE 
	 ([TicketID] = @TicketId AND @TicketId is not null)
	OR ([StatusID] = @StatusId AND @StatusId is not null)
	OR ([StatusDate] = @StatusDate AND @StatusDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pTicketStatusHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatusHistory table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TicketID]
					, [StatusID]
					, [StatusDate]
					FROM [dbo].[TicketStatusHistory] {0}
				)
				SELECT
				       [TicketID],
				       [StatusID],
				       [StatusDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TicketStatusHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateValue_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pProductRateValue_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateValue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [SellRateCurrencyID]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [BuyRateCurrencyID]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [SellRateCurrencyID],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [BuyRateCurrencyID],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pProductRateValue_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@DefaultOption" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ProductRateValue]
					(
					[ProductRateID]
					,[SellRate]
					,[SellRateCurrencyID]
					,[BuyRate]
					,[BuyRateCurrencyID]
					,[DefaultOption]
					,[StartDate]
					,[WholesalerID]
					,[CustomerID]
					)
				VALUES
					(
					@ProductRateId
					,@SellRate
					,@SellRateCurrencyId
					,@BuyRate
					,@BuyRateCurrencyId
					,@DefaultOption
					,@StartDate
					,@WholesalerId
					,@CustomerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@DefaultOption" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateValue]
				SET
					[ProductRateID] = @ProductRateId
					,[SellRate] = @SellRate
					,[SellRateCurrencyID] = @SellRateCurrencyId
					,[BuyRate] = @BuyRate
					,[BuyRateCurrencyID] = @BuyRateCurrencyId
					,[DefaultOption] = @DefaultOption
					,[StartDate] = @StartDate
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ProductRateValue] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByBuyRateCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BuyRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[BuyRateCurrencyID] = @BuyRateCurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetBySellRateCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[SellRateCurrencyID] = @SellRateCurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByCustomerIdProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[CustomerID] = @CustomerId
					AND [ProductRateID] = @ProductRateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByProductRateIdDefaultOption" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
					AND [DefaultOption] = @DefaultOption
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByIdProductRateIdSellRateSellRateCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ID] = @Id
					AND [ProductRateID] = @ProductRateId
					AND [SellRate] = @SellRate
					AND [SellRateCurrencyID] = @SellRateCurrencyId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
					AND [DefaultOption] = @DefaultOption
					AND [WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					AND [SellRateCurrencyID] = @SellRateCurrencyId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pProductRateValue_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateValue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@SellRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BuyRateCurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@DefaultOption" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductRateID]
	, [SellRate]
	, [SellRateCurrencyID]
	, [BuyRate]
	, [BuyRateCurrencyID]
	, [DefaultOption]
	, [StartDate]
	, [WholesalerID]
	, [CustomerID]
    FROM
	[dbo].[ProductRateValue]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([SellRateCurrencyID] = @SellRateCurrencyId OR @SellRateCurrencyId IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([BuyRateCurrencyID] = @BuyRateCurrencyId OR @BuyRateCurrencyId IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductRateID]
	, [SellRate]
	, [SellRateCurrencyID]
	, [BuyRate]
	, [BuyRateCurrencyID]
	, [DefaultOption]
	, [StartDate]
	, [WholesalerID]
	, [CustomerID]
    FROM
	[dbo].[ProductRateValue]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([SellRateCurrencyID] = @SellRateCurrencyId AND @SellRateCurrencyId is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([BuyRateCurrencyID] = @BuyRateCurrencyId AND @BuyRateCurrencyId is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pProductRateValue_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateValue table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ProductRateID]
					, [SellRate]
					, [SellRateCurrencyID]
					, [BuyRate]
					, [BuyRateCurrencyID]
					, [DefaultOption]
					, [StartDate]
					, [WholesalerID]
					, [CustomerID]
					FROM [dbo].[ProductRateValue] {0}
				)
				SELECT
				       [ID],
				       [ProductRateID],
				       [SellRate],
				       [SellRateCurrencyID],
				       [BuyRate],
				       [BuyRateCurrencyID],
				       [DefaultOption],
				       [StartDate],
				       [WholesalerID],
				       [CustomerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ProductRateValue] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadPeriod_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadPeriod]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadPeriod_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadPeriod table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadPeriod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadPeriod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLeadPeriod_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[LeadPeriod]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadPeriod_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadPeriod]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadPeriod_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[LeadPeriod] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadPeriod_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadPeriod table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadPeriod]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLeadPeriod_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadPeriod table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadPeriod]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadPeriod]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLeadPeriod_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadPeriod table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[LeadPeriod] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[LeadPeriod] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDNIS_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDNIS_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [DNISTypeID]'
				SET @SQL = @SQL + ', [DNISNumber]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [CallFlowID]'
				SET @SQL = @SQL + ', [PromptSetID]'
				SET @SQL = @SQL + ' FROM [dbo].[DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [DNISTypeID],'
				SET @SQL = @SQL + ' [DNISNumber],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [CallFlowID],'
				SET @SQL = @SQL + ' [PromptSetID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pDNIS_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DnisTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DnisNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PromptSetId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[DNIS]
					(
					[WholesalerID]
					,[AccessTypeID]
					,[DNISTypeID]
					,[DNISNumber]
					,[DialNumber]
					,[Description]
					,[Enabled]
					,[DisplayOrder]
					,[DefaultOption]
					,[CallFlowID]
					,[PromptSetID]
					)
				VALUES
					(
					@WholesalerId
					,@AccessTypeId
					,@DnisTypeId
					,@DnisNumber
					,@DialNumber
					,@Description
					,@Enabled
					,@DisplayOrder
					,@DefaultOption
					,@CallFlowId
					,@PromptSetId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DnisTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DnisNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PromptSetId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DNIS]
				SET
					[WholesalerID] = @WholesalerId
					,[AccessTypeID] = @AccessTypeId
					,[DNISTypeID] = @DnisTypeId
					,[DNISNumber] = @DnisNumber
					,[DialNumber] = @DialNumber
					,[Description] = @Description
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
					,[DefaultOption] = @DefaultOption
					,[CallFlowID] = @CallFlowId
					,[PromptSetID] = @PromptSetId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DNIS] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByAccessTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByCallFlowId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[CallFlowID] = @CallFlowId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByPromptSetId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PromptSetId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[PromptSetID] = @PromptSetId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByDnisTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DnisTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DNISTypeID] = @DnisTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByDnisNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DnisNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DNISNumber] = @DnisNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByDialNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DialNumber] = @DialNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByCustomerIdFromCustomer_Dnis" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[DNIS].[ID]
       ,dbo.[DNIS].[WholesalerID]
       ,dbo.[DNIS].[AccessTypeID]
       ,dbo.[DNIS].[DNISTypeID]
       ,dbo.[DNIS].[DNISNumber]
       ,dbo.[DNIS].[DialNumber]
       ,dbo.[DNIS].[Description]
       ,dbo.[DNIS].[Enabled]
       ,dbo.[DNIS].[DisplayOrder]
       ,dbo.[DNIS].[DefaultOption]
       ,dbo.[DNIS].[CallFlowID]
       ,dbo.[DNIS].[PromptSetID]
  FROM dbo.[DNIS]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Customer_DNIS] 
                WHERE dbo.[Customer_DNIS].[CustomerID] = @CustomerId
                  AND dbo.[Customer_DNIS].[DNISID] = dbo.[DNIS].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_GetByModeratorIdFromModerator_Dnis" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[DNIS].[ID]
       ,dbo.[DNIS].[WholesalerID]
       ,dbo.[DNIS].[AccessTypeID]
       ,dbo.[DNIS].[DNISTypeID]
       ,dbo.[DNIS].[DNISNumber]
       ,dbo.[DNIS].[DialNumber]
       ,dbo.[DNIS].[Description]
       ,dbo.[DNIS].[Enabled]
       ,dbo.[DNIS].[DisplayOrder]
       ,dbo.[DNIS].[DefaultOption]
       ,dbo.[DNIS].[CallFlowID]
       ,dbo.[DNIS].[PromptSetID]
  FROM dbo.[DNIS]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Moderator_DNIS] 
                WHERE dbo.[Moderator_DNIS].[ModeratorID] = @ModeratorId
                  AND dbo.[Moderator_DNIS].[DNISID] = dbo.[DNIS].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNIS_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DnisTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DnisNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PromptSetId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [AccessTypeID]
	, [DNISTypeID]
	, [DNISNumber]
	, [DialNumber]
	, [Description]
	, [Enabled]
	, [DisplayOrder]
	, [DefaultOption]
	, [CallFlowID]
	, [PromptSetID]
    FROM
	[dbo].[DNIS]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([DNISTypeID] = @DnisTypeId OR @DnisTypeId IS NULL)
	AND ([DNISNumber] = @DnisNumber OR @DnisNumber IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([CallFlowID] = @CallFlowId OR @CallFlowId IS NULL)
	AND ([PromptSetID] = @PromptSetId OR @PromptSetId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [AccessTypeID]
	, [DNISTypeID]
	, [DNISNumber]
	, [DialNumber]
	, [Description]
	, [Enabled]
	, [DisplayOrder]
	, [DefaultOption]
	, [CallFlowID]
	, [PromptSetID]
    FROM
	[dbo].[DNIS]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([DNISTypeID] = @DnisTypeId AND @DnisTypeId is not null)
	OR ([DNISNumber] = @DnisNumber AND @DnisNumber is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([CallFlowID] = @CallFlowId AND @CallFlowId is not null)
	OR ([PromptSetID] = @PromptSetId AND @PromptSetId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pDNIS_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNIS table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [AccessTypeID]
					, [DNISTypeID]
					, [DNISNumber]
					, [DialNumber]
					, [Description]
					, [Enabled]
					, [DisplayOrder]
					, [DefaultOption]
					, [CallFlowID]
					, [PromptSetID]
					FROM [dbo].[DNIS] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [AccessTypeID],
				       [DNISTypeID],
				       [DNISNumber],
				       [DialNumber],
				       [Description],
				       [Enabled],
				       [DisplayOrder],
				       [DefaultOption],
				       [CallFlowID],
				       [PromptSetID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DNIS] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_DNIS_GetByWholesalerIdDDL"  skip="true">
			<comment><![CDATA[/* =============================================
	Return DNIS info based on the Wholesaler which is used in DropDownList controls (DDL)
	for Customer and Moderator's as the information is combined into one colum for the DDL.
	Also, added an optional DNISTypeID so it can be used in filtered scenarios.
	NOTE: Only show Enabled ones for the WS'er.
Example:
	EXEC p_DNIS_GetByWholesalerIdDDL '0000000001'
	EXEC p_DNIS_GetByWholesalerIdDDL '0000000001',1
	EXEC p_DNIS_GetByWholesalerIdDDL '0000000001',2
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@DNISTypeId" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	SELECT [DNISID]
	  ,[WholesalerID]
	  ,[AccessTypeID]
	  ,[DNISTypeID]
	  ,[DNISNumber]
	  ,[DialNumber]
	  ,[Description]
	  ,[Enabled]
	  ,[DisplayOrder]
	  ,[DefaultOption]
	  ,[CallFlowID]
	  ,[PromptSetID]
	  ,[DNISTypeName]
	  ,[DNISTypeDisplayName]
	  ,[DDLInfo]
	FROM [dbo].[vw_DNISForWholesaler]
	WHERE [Enabled] = 1 AND WholesalerId = @WholesalerId AND (@DNISTypeId IS NULL OR DNISTypeId = @DNISTypeId)
	ORDER BY DNISTypeDisplayOrder, Description ASC

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pLeadChurnReason_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadChurnReason]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLeadChurnReason_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadChurnReason table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadChurnReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadChurnReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLeadChurnReason_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[LeadChurnReason]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadChurnReason_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadChurnReason]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadChurnReason_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[LeadChurnReason] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLeadChurnReason_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadChurnReason table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadChurnReason]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLeadChurnReason_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadChurnReason table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Value" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadChurnReason]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadChurnReason]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLeadChurnReason_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadChurnReason table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Value]
					, [DisplayOrder]
					FROM [dbo].[LeadChurnReason] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Value],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[LeadChurnReason] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDNISType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DNISType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayOrder],
					[DisplayName]
				FROM
					[dbo].[DNISType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDNISType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNISType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ' FROM [dbo].[DNISType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DisplayName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DNISType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pDNISType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DNISType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[DNISType]
					(
					[Name]
					,[DisplayOrder]
					,[DisplayName]
					)
				VALUES
					(
					@Name
					,@DisplayOrder
					,@DisplayName
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNISType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DNISType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DNISType]
				SET
					[Name] = @Name
					,[DisplayOrder] = @DisplayOrder
					,[DisplayName] = @DisplayName
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNISType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DNISType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DNISType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDNISType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNISType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayOrder],
					[DisplayName]
				FROM
					[dbo].[DNISType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDNISType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DNISType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayOrder]
	, [DisplayName]
    FROM
	[dbo].[DNISType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayOrder]
	, [DisplayName]
    FROM
	[dbo].[DNISType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pDNISType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNISType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayOrder]
					, [DisplayName]
					FROM [dbo].[DNISType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayOrder],
				       [DisplayName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DNISType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompany_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Company table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompany_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Company table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Company]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Company]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCompany_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Company table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Company]
					(
					[WholesalerID]
					,[Description]
					)
				VALUES
					(
					@WholesalerId
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompany_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Company table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Company]
				SET
					[WholesalerID] = @WholesalerId
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompany_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Company table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Company] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompany_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompany_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCompany_GetByWholesalerIdDescription" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [Description] = @Description
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCompany_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Company table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Company]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Company]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCompany_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Company table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [Description]
					FROM [dbo].[Company] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Company] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pClientNotes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ClientNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[Notes],
					[ModuleID]
				FROM
					[dbo].[ClientNotes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pClientNotes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClientNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModuleID]'
				SET @SQL = @SQL + ' FROM [dbo].[ClientNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModuleID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ClientNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pClientNotes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ClientNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModuleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ClientNotes]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[Notes]
					,[ModuleID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@Notes
					,@ModuleId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pClientNotes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ClientNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModuleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ClientNotes]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[ModuleID] = @ModuleId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pClientNotes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ClientNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ClientNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pClientNotes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClientNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[Notes],
					[ModuleID]
				FROM
					[dbo].[ClientNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pClientNotes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ClientNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModuleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [Notes]
	, [ModuleID]
    FROM
	[dbo].[ClientNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ModuleID] = @ModuleId OR @ModuleId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [Notes]
	, [ModuleID]
    FROM
	[dbo].[ClientNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ModuleID] = @ModuleId AND @ModuleId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pClientNotes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClientNotes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [Notes]
					, [ModuleID]
					FROM [dbo].[ClientNotes] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [Notes],
				       [ModuleID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ClientNotes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCharity_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Charity table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[LogoURL],
					[DisplayOrder]
				FROM
					[dbo].[Charity]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCharity_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Charity table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [LogoURL]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Charity]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [LogoURL],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Charity]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCharity_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Charity table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@LogoUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Charity]
					(
					[Name]
					,[Description]
					,[LogoURL]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@LogoUrl
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCharity_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Charity table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@LogoUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Charity]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[LogoURL] = @LogoUrl
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCharity_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Charity table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Charity] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCharity_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Charity table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[LogoURL],
					[DisplayOrder]
				FROM
					[dbo].[Charity]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCharity_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Charity table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault="null"/>
				<parameter name="@LogoUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [LogoURL]
	, [DisplayOrder]
    FROM
	[dbo].[Charity]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([LogoURL] = @LogoUrl OR @LogoUrl IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [LogoURL]
	, [DisplayOrder]
    FROM
	[dbo].[Charity]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([LogoURL] = @LogoUrl AND @LogoUrl is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCharity_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Charity table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [LogoURL]
					, [DisplayOrder]
					FROM [dbo].[Charity] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [LogoURL],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Charity] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCallFlow_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CallFlow table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[CallFlow]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCallFlow_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CallFlow table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[CallFlow]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CallFlow]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCallFlow_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CallFlow table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CallFlow]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCallFlow_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CallFlow table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CallFlow]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCallFlow_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CallFlow table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CallFlow] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCallFlow_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CallFlow table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[CallFlow]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCallFlow_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CallFlow table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[CallFlow]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[CallFlow]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCallFlow_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CallFlow table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					FROM [dbo].[CallFlow] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CallFlow] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCommission_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Commission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCommission_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Commission table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [TotalCredits]'
				SET @SQL = @SQL + ', [ProductCharges]'
				SET @SQL = @SQL + ', [MiscCharges]'
				SET @SQL = @SQL + ', [TotalAmount]'
				SET @SQL = @SQL + ', [CommissionRate]'
				SET @SQL = @SQL + ', [TotalCommission]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ' FROM [dbo].[Commission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [TotalCredits],'
				SET @SQL = @SQL + ' [ProductCharges],'
				SET @SQL = @SQL + ' [MiscCharges],'
				SET @SQL = @SQL + ' [TotalAmount],'
				SET @SQL = @SQL + ' [CommissionRate],'
				SET @SQL = @SQL + ' [TotalCommission],'
				SET @SQL = @SQL + ' [CurrencyID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Commission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCommission_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Commission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@CommissionRate" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCommission" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Commission]
					(
					[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[BilledDate]
					,[TotalCredits]
					,[ProductCharges]
					,[MiscCharges]
					,[TotalAmount]
					,[CommissionRate]
					,[TotalCommission]
					,[CurrencyID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@BilledDate
					,@TotalCredits
					,@ProductCharges
					,@MiscCharges
					,@TotalAmount
					,@CommissionRate
					,@TotalCommission
					,@CurrencyId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Commission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@CommissionRate" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCommission" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Commission]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[BilledDate] = @BilledDate
					,[TotalCredits] = @TotalCredits
					,[ProductCharges] = @ProductCharges
					,[MiscCharges] = @MiscCharges
					,[TotalAmount] = @TotalAmount
					,[CommissionRate] = @CommissionRate
					,[TotalCommission] = @TotalCommission
					,[CurrencyID] = @CurrencyId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Commission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Commission] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_GetByCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommission_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCommission_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Commission table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@TotalAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@CommissionRate" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@TotalCommission" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [BilledDate]
	, [TotalCredits]
	, [ProductCharges]
	, [MiscCharges]
	, [TotalAmount]
	, [CommissionRate]
	, [TotalCommission]
	, [CurrencyID]
    FROM
	[dbo].[Commission]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([TotalCredits] = @TotalCredits OR @TotalCredits IS NULL)
	AND ([ProductCharges] = @ProductCharges OR @ProductCharges IS NULL)
	AND ([MiscCharges] = @MiscCharges OR @MiscCharges IS NULL)
	AND ([TotalAmount] = @TotalAmount OR @TotalAmount IS NULL)
	AND ([CommissionRate] = @CommissionRate OR @CommissionRate IS NULL)
	AND ([TotalCommission] = @TotalCommission OR @TotalCommission IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [BilledDate]
	, [TotalCredits]
	, [ProductCharges]
	, [MiscCharges]
	, [TotalAmount]
	, [CommissionRate]
	, [TotalCommission]
	, [CurrencyID]
    FROM
	[dbo].[Commission]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([TotalCredits] = @TotalCredits AND @TotalCredits is not null)
	OR ([ProductCharges] = @ProductCharges AND @ProductCharges is not null)
	OR ([MiscCharges] = @MiscCharges AND @MiscCharges is not null)
	OR ([TotalAmount] = @TotalAmount AND @TotalAmount is not null)
	OR ([CommissionRate] = @CommissionRate AND @CommissionRate is not null)
	OR ([TotalCommission] = @TotalCommission AND @TotalCommission is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCommission_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Commission table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [SalesPersonID]
					, [BilledDate]
					, [TotalCredits]
					, [ProductCharges]
					, [MiscCharges]
					, [TotalAmount]
					, [CommissionRate]
					, [TotalCommission]
					, [CurrencyID]
					FROM [dbo].[Commission] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [SalesPersonID],
				       [BilledDate],
				       [TotalCredits],
				       [ProductCharges],
				       [MiscCharges],
				       [TotalAmount],
				       [CommissionRate],
				       [TotalCommission],
				       [CurrencyID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Commission] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Commission_GetCommissionReport"  skip="true">
			<comment><![CDATA[/*
Purpose: Get the Commissions for the Sales Person or All, by Invoice or All.

Examples:
	EXEC p_Commission_GetCommissionReport '0000000001', null, null
	EXEC p_Commission_GetCommissionReport '0000000001', 3, 'jan 1 2009'

*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SalesPersonID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

-- Commission info by Sales Person by Invoice Period
	SELECT     TOP (100) PERCENT Company.Description AS CompanyName, C.PriCustomerNumber, SalesPerson.FullName AS SalesPersonFullName, 
		Comm.BilledDate, Comm.TotalCredits, Comm.ProductCharges, Comm.MiscCharges, Comm.TotalCommission
		,Comm.SalesPersonID,Comm.WholesalerID,Comm.CustomerID
	FROM  dbo.Commission AS Comm INNER JOIN
		  dbo.Customer AS C ON Comm.CustomerID = C.ID INNER JOIN
		  dbo.Company ON C.CompanyID = dbo.Company.ID INNER JOIN
		  dbo.SalesPerson ON C.SalesPersonID = dbo.SalesPerson.ID
	WHERE (Comm.WholesalerID = @WholesalerID) AND
	(@SalesPersonID IS NULL OR Comm.SalesPersonID = @SalesPersonID) AND
	(@InvoiceDate IS NULL OR Comm.BilledDate = @InvoiceDate)
	ORDER BY CompanyName, C.PriCustomerNumber, Comm.BilledDate
END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pCommissionCustomer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCommissionCustomer_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CommissionCustomer table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [InvoiceCount]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[CommissionCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [InvoiceCount],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CommissionCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCommissionCustomer_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@InvoiceCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CommissionCustomer]
					(
					[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[InvoiceCount]
					,[CreatedDate]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@InvoiceCount
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@InvoiceCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CommissionCustomer]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[InvoiceCount] = @InvoiceCount
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CommissionCustomer] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCommissionCustomer_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CommissionCustomer table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@InvoiceCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [InvoiceCount]
	, [CreatedDate]
    FROM
	[dbo].[CommissionCustomer]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([InvoiceCount] = @InvoiceCount OR @InvoiceCount IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [InvoiceCount]
	, [CreatedDate]
    FROM
	[dbo].[CommissionCustomer]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([InvoiceCount] = @InvoiceCount AND @InvoiceCount is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCommissionCustomer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CommissionCustomer table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [SalesPersonID]
					, [InvoiceCount]
					, [CreatedDate]
					FROM [dbo].[CommissionCustomer] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [SalesPersonID],
				       [InvoiceCount],
				       [CreatedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CommissionCustomer] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyInfo_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyInfo_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyInfo table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [LeadID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SLAEndDate]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [Postal]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [LeadID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SLAEndDate],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [Postal]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCompanyInfo_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SlaEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Address" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Postal" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CompanyInfo]
					(
					[ID]
					,[LeadID]
					,[CompanyID]
					,[SLAEndDate]
					,[Address]
					,[City]
					,[CountryID]
					,[Postal]
					)
				VALUES
					(
					@Id
					,@LeadId
					,@CompanyId
					,@SlaEndDate
					,@Address
					,@City
					,@CountryId
					,@Postal
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyInfo_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SlaEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Address" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Postal" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyInfo]
				SET
					[ID] = @Id
					,[LeadID] = @LeadId
					,[CompanyID] = @CompanyId
					,[SLAEndDate] = @SlaEndDate
					,[Address] = @Address
					,[City] = @City
					,[CountryID] = @CountryId
					,[Postal] = @Postal
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyInfo_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CompanyInfo] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyInfo_GetByCountryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyInfo table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyInfo_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyInfo table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCompanyInfo_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyInfo table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LeadId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SlaEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Address" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@City" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CountryId" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Postal" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [LeadID]
	, [CompanyID]
	, [SLAEndDate]
	, [Address]
	, [City]
	, [CountryID]
	, [Postal]
    FROM
	[dbo].[CompanyInfo]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([LeadID] = @LeadId OR @LeadId IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([SLAEndDate] = @SlaEndDate OR @SlaEndDate IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([Postal] = @Postal OR @Postal IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [LeadID]
	, [CompanyID]
	, [SLAEndDate]
	, [Address]
	, [City]
	, [CountryID]
	, [Postal]
    FROM
	[dbo].[CompanyInfo]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([LeadID] = @LeadId AND @LeadId is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([SLAEndDate] = @SlaEndDate AND @SlaEndDate is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([City] = @City AND @City is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([Postal] = @Postal AND @Postal is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCompanyInfo_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyInfo table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [LeadID]
					, [CompanyID]
					, [SLAEndDate]
					, [Address]
					, [City]
					, [CountryID]
					, [Postal]
					FROM [dbo].[CompanyInfo] {0}
				)
				SELECT
				       [ID],
				       [LeadID],
				       [CompanyID],
				       [SLAEndDate],
				       [Address],
				       [City],
				       [CountryID],
				       [Postal]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CompanyInfo] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCurve_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Curve table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[Curve]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCurve_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Curve table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Curve]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Curve]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCurve_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Curve table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Curve]
					(
					[ID]
					,[Description]
					)
				VALUES
					(
					@Id
					,@Description
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurve_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Curve table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Curve]
				SET
					[ID] = @Id
					,[Description] = @Description
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurve_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Curve table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Curve] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCurve_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Curve table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[Curve]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCurve_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Curve table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[Curve]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[Curve]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCurve_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Curve table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Description]
					FROM [dbo].[Curve] {0}
				)
				SELECT
				       [ID],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Curve] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyLeadTracking_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyLeadTracking_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTracking table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyInfoID]'
				SET @SQL = @SQL + ', [ProjectedRevenue]'
				SET @SQL = @SQL + ', [LeadProductID]'
				SET @SQL = @SQL + ', [LeadSourceID]'
				SET @SQL = @SQL + ', [LeadStageID]'
				SET @SQL = @SQL + ', [ExpectedCloseDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [LeadPeriodID]'
				SET @SQL = @SQL + ', [LeadChurnReasonID]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTracking]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyInfoID],'
				SET @SQL = @SQL + ' [ProjectedRevenue],'
				SET @SQL = @SQL + ' [LeadProductID],'
				SET @SQL = @SQL + ' [LeadSourceID],'
				SET @SQL = @SQL + ' [LeadStageID],'
				SET @SQL = @SQL + ' [ExpectedCloseDate],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [LeadPeriodID],'
				SET @SQL = @SQL + ' [LeadChurnReasonID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTracking]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCompanyLeadTracking_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyInfoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProjectedRevenue" type="decimal" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
				<parameter name="@LeadProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadSourceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadStageId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExpectedCloseDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LeadPeriodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadChurnReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CompanyLeadTracking]
					(
					[ID]
					,[CompanyInfoID]
					,[ProjectedRevenue]
					,[LeadProductID]
					,[LeadSourceID]
					,[LeadStageID]
					,[ExpectedCloseDate]
					,[CreatedDate]
					,[ModifiedBy]
					,[LeadPeriodID]
					,[LeadChurnReasonID]
					)
				VALUES
					(
					@Id
					,@CompanyInfoId
					,@ProjectedRevenue
					,@LeadProductId
					,@LeadSourceId
					,@LeadStageId
					,@ExpectedCloseDate
					,@CreatedDate
					,@ModifiedBy
					,@LeadPeriodId
					,@LeadChurnReasonId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyInfoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProjectedRevenue" type="decimal" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
				<parameter name="@LeadProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadSourceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadStageId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExpectedCloseDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LeadPeriodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LeadChurnReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyLeadTracking]
				SET
					[ID] = @Id
					,[CompanyInfoID] = @CompanyInfoId
					,[ProjectedRevenue] = @ProjectedRevenue
					,[LeadProductID] = @LeadProductId
					,[LeadSourceID] = @LeadSourceId
					,[LeadStageID] = @LeadStageId
					,[ExpectedCloseDate] = @ExpectedCloseDate
					,[CreatedDate] = @CreatedDate
					,[ModifiedBy] = @ModifiedBy
					,[LeadPeriodID] = @LeadPeriodId
					,[LeadChurnReasonID] = @LeadChurnReasonId
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CompanyLeadTracking] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByLeadPeriodId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LeadPeriodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadPeriodID] = @LeadPeriodId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByCompanyInfoId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyInfoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[CompanyInfoID] = @CompanyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByLeadSourceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LeadSourceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadSourceID] = @LeadSourceId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByLeadChurnReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LeadChurnReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadChurnReasonID] = @LeadChurnReasonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByLeadProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LeadProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadProductID] = @LeadProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetByLeadStageId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LeadStageId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadStageID] = @LeadStageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTracking_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyLeadTracking table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyInfoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProjectedRevenue" type="decimal" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
				<parameter name="@LeadProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LeadSourceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LeadStageId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExpectedCloseDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@LeadPeriodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LeadChurnReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyInfoID]
	, [ProjectedRevenue]
	, [LeadProductID]
	, [LeadSourceID]
	, [LeadStageID]
	, [ExpectedCloseDate]
	, [CreatedDate]
	, [ModifiedBy]
	, [LeadPeriodID]
	, [LeadChurnReasonID]
    FROM
	[dbo].[CompanyLeadTracking]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyInfoID] = @CompanyInfoId OR @CompanyInfoId IS NULL)
	AND ([ProjectedRevenue] = @ProjectedRevenue OR @ProjectedRevenue IS NULL)
	AND ([LeadProductID] = @LeadProductId OR @LeadProductId IS NULL)
	AND ([LeadSourceID] = @LeadSourceId OR @LeadSourceId IS NULL)
	AND ([LeadStageID] = @LeadStageId OR @LeadStageId IS NULL)
	AND ([ExpectedCloseDate] = @ExpectedCloseDate OR @ExpectedCloseDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([LeadPeriodID] = @LeadPeriodId OR @LeadPeriodId IS NULL)
	AND ([LeadChurnReasonID] = @LeadChurnReasonId OR @LeadChurnReasonId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyInfoID]
	, [ProjectedRevenue]
	, [LeadProductID]
	, [LeadSourceID]
	, [LeadStageID]
	, [ExpectedCloseDate]
	, [CreatedDate]
	, [ModifiedBy]
	, [LeadPeriodID]
	, [LeadChurnReasonID]
    FROM
	[dbo].[CompanyLeadTracking]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyInfoID] = @CompanyInfoId AND @CompanyInfoId is not null)
	OR ([ProjectedRevenue] = @ProjectedRevenue AND @ProjectedRevenue is not null)
	OR ([LeadProductID] = @LeadProductId AND @LeadProductId is not null)
	OR ([LeadSourceID] = @LeadSourceId AND @LeadSourceId is not null)
	OR ([LeadStageID] = @LeadStageId AND @LeadStageId is not null)
	OR ([ExpectedCloseDate] = @ExpectedCloseDate AND @ExpectedCloseDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([LeadPeriodID] = @LeadPeriodId AND @LeadPeriodId is not null)
	OR ([LeadChurnReasonID] = @LeadChurnReasonId AND @LeadChurnReasonId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCompanyLeadTracking_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTracking table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CompanyInfoID]
					, [ProjectedRevenue]
					, [LeadProductID]
					, [LeadSourceID]
					, [LeadStageID]
					, [ExpectedCloseDate]
					, [CreatedDate]
					, [ModifiedBy]
					, [LeadPeriodID]
					, [LeadChurnReasonID]
					FROM [dbo].[CompanyLeadTracking] {0}
				)
				SELECT
				       [ID],
				       [CompanyInfoID],
				       [ProjectedRevenue],
				       [LeadProductID],
				       [LeadSourceID],
				       [LeadStageID],
				       [ExpectedCloseDate],
				       [CreatedDate],
				       [ModifiedBy],
				       [LeadPeriodID],
				       [LeadChurnReasonID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CompanyLeadTracking] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pConferencingSummary_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[BilledDate],
					[ProductID],
					[Currency],
					[LocalSeconds],
					[LDSeconds],
					[TotalBridge],
					[TotalLD],
					[TotalMiscellaneous]
				FROM
					[dbo].[ConferencingSummary]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pConferencingSummary_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ConferencingSummary table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[BilledDate]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Currency]'
				SET @SQL = @SQL + ', [LocalSeconds]'
				SET @SQL = @SQL + ', [LDSeconds]'
				SET @SQL = @SQL + ', [TotalBridge]'
				SET @SQL = @SQL + ', [TotalLD]'
				SET @SQL = @SQL + ', [TotalMiscellaneous]'
				SET @SQL = @SQL + ' FROM [dbo].[ConferencingSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Currency],'
				SET @SQL = @SQL + ' [LocalSeconds],'
				SET @SQL = @SQL + ' [LDSeconds],'
				SET @SQL = @SQL + ' [TotalBridge],'
				SET @SQL = @SQL + ' [TotalLD],'
				SET @SQL = @SQL + ' [TotalMiscellaneous]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ConferencingSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pConferencingSummary_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Currency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LocalSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalMiscellaneous" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ConferencingSummary]
					(
					[BilledDate]
					,[ProductID]
					,[Currency]
					,[LocalSeconds]
					,[LDSeconds]
					,[TotalBridge]
					,[TotalLD]
					,[TotalMiscellaneous]
					)
				VALUES
					(
					@BilledDate
					,@ProductId
					,@Currency
					,@LocalSeconds
					,@LdSeconds
					,@TotalBridge
					,@TotalLd
					,@TotalMiscellaneous
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pConferencingSummary_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalBilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Currency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@LocalSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@TotalMiscellaneous" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ConferencingSummary]
				SET
					[BilledDate] = @BilledDate
					,[ProductID] = @ProductId
					,[Currency] = @Currency
					,[LocalSeconds] = @LocalSeconds
					,[LDSeconds] = @LdSeconds
					,[TotalBridge] = @TotalBridge
					,[TotalLD] = @TotalLd
					,[TotalMiscellaneous] = @TotalMiscellaneous
				WHERE
[BilledDate] = @OriginalBilledDate 
AND [ProductID] = @OriginalProductId 
AND [Currency] = @OriginalCurrency 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pConferencingSummary_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Currency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ConferencingSummary] WITH (ROWLOCK) 
				WHERE
					[BilledDate] = @BilledDate
					AND [ProductID] = @ProductId
					AND [Currency] = @Currency
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pConferencingSummary_GetByBilledDateProductIdCurrency" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ConferencingSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Currency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[BilledDate],
					[ProductID],
					[Currency],
					[LocalSeconds],
					[LDSeconds],
					[TotalBridge],
					[TotalLD],
					[TotalMiscellaneous]
				FROM
					[dbo].[ConferencingSummary]
				WHERE
					[BilledDate] = @BilledDate
					AND [ProductID] = @ProductId
					AND [Currency] = @Currency
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pConferencingSummary_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ConferencingSummary table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Currency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@LocalSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LdSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@TotalMiscellaneous" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [BilledDate]
	, [ProductID]
	, [Currency]
	, [LocalSeconds]
	, [LDSeconds]
	, [TotalBridge]
	, [TotalLD]
	, [TotalMiscellaneous]
    FROM
	[dbo].[ConferencingSummary]
    WHERE 
	 ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([Currency] = @Currency OR @Currency IS NULL)
	AND ([LocalSeconds] = @LocalSeconds OR @LocalSeconds IS NULL)
	AND ([LDSeconds] = @LdSeconds OR @LdSeconds IS NULL)
	AND ([TotalBridge] = @TotalBridge OR @TotalBridge IS NULL)
	AND ([TotalLD] = @TotalLd OR @TotalLd IS NULL)
	AND ([TotalMiscellaneous] = @TotalMiscellaneous OR @TotalMiscellaneous IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [BilledDate]
	, [ProductID]
	, [Currency]
	, [LocalSeconds]
	, [LDSeconds]
	, [TotalBridge]
	, [TotalLD]
	, [TotalMiscellaneous]
    FROM
	[dbo].[ConferencingSummary]
    WHERE 
	 ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([Currency] = @Currency AND @Currency is not null)
	OR ([LocalSeconds] = @LocalSeconds AND @LocalSeconds is not null)
	OR ([LDSeconds] = @LdSeconds AND @LdSeconds is not null)
	OR ([TotalBridge] = @TotalBridge AND @TotalBridge is not null)
	OR ([TotalLD] = @TotalLd AND @TotalLd is not null)
	OR ([TotalMiscellaneous] = @TotalMiscellaneous AND @TotalMiscellaneous is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pConferencingSummary_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ConferencingSummary table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [BilledDate]
					, [ProductID]
					, [Currency]
					, [LocalSeconds]
					, [LDSeconds]
					, [TotalBridge]
					, [TotalLD]
					, [TotalMiscellaneous]
					FROM [dbo].[ConferencingSummary] {0}
				)
				SELECT
				       [BilledDate],
				       [ProductID],
				       [Currency],
				       [LocalSeconds],
				       [LDSeconds],
				       [TotalBridge],
				       [TotalLD],
				       [TotalMiscellaneous]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ConferencingSummary] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[BridgeType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBridgeType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[BridgeType]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeType]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[BridgeType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[BridgeType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridgeType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[BridgeType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[BridgeType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBridgeType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					FROM [dbo].[BridgeType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[BridgeType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTrackingNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyLeadTrackingID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [OldValues]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTrackingNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyLeadTrackingID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [OldValues],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ModifiedBy]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTrackingNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyLeadTrackingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@OldValues" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CompanyLeadTrackingNotes]
					(
					[ID]
					,[CompanyLeadTrackingID]
					,[Notes]
					,[OldValues]
					,[CreatedDate]
					,[ModifiedBy]
					)
				VALUES
					(
					@Id
					,@CompanyLeadTrackingId
					,@Notes
					,@OldValues
					,@CreatedDate
					,@ModifiedBy
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyLeadTrackingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@OldValues" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyLeadTrackingNotes]
				SET
					[ID] = @Id
					,[CompanyLeadTrackingID] = @CompanyLeadTrackingId
					,[Notes] = @Notes
					,[OldValues] = @OldValues
					,[CreatedDate] = @CreatedDate
					,[ModifiedBy] = @ModifiedBy
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CompanyLeadTrackingNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_GetByCompanyLeadTrackingId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTrackingNotes table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyLeadTrackingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
				WHERE
					[CompanyLeadTrackingID] = @CompanyLeadTrackingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTrackingNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyLeadTrackingNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyLeadTrackingId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault="null"/>
				<parameter name="@OldValues" type="varchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyLeadTrackingID]
	, [Notes]
	, [OldValues]
	, [CreatedDate]
	, [ModifiedBy]
    FROM
	[dbo].[CompanyLeadTrackingNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyLeadTrackingID] = @CompanyLeadTrackingId OR @CompanyLeadTrackingId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([OldValues] = @OldValues OR @OldValues IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyLeadTrackingID]
	, [Notes]
	, [OldValues]
	, [CreatedDate]
	, [ModifiedBy]
    FROM
	[dbo].[CompanyLeadTrackingNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyLeadTrackingID] = @CompanyLeadTrackingId AND @CompanyLeadTrackingId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([OldValues] = @OldValues AND @OldValues is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCompanyLeadTrackingNotes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTrackingNotes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CompanyLeadTrackingID]
					, [Notes]
					, [OldValues]
					, [CreatedDate]
					, [ModifiedBy]
					FROM [dbo].[CompanyLeadTrackingNotes] {0}
				)
				SELECT
				       [ID],
				       [CompanyLeadTrackingID],
				       [Notes],
				       [OldValues],
				       [CreatedDate],
				       [ModifiedBy]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CompanyLeadTrackingNotes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeRequestType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name]
				FROM
					[dbo].[BridgeRequestType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeRequestType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequestType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequestType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequestType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBridgeRequestType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[BridgeRequestType]
					(
					[Name]
					)
				VALUES
					(
					@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequestType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeRequestType]
				SET
					[Name] = @Name
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequestType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[BridgeRequestType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequestType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequestType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name]
				FROM
					[dbo].[BridgeRequestType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridgeRequestType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeRequestType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
    FROM
	[dbo].[BridgeRequestType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
    FROM
	[dbo].[BridgeRequestType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBridgeRequestType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequestType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					FROM [dbo].[BridgeRequestType] {0}
				)
				SELECT
				       [ID],
				       [Name]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[BridgeRequestType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAdminSiteNotes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CustomerID],
					[UserID],
					[ModeratorID],
					[Notes],
					[ModifiedBy],
					[CreatedDate],
					[WholesalerID],
					[Deleted]
				FROM
					[dbo].[AdminSiteNotes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAdminSiteNotes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAdminSiteNotes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AdminSiteNotes]
					(
					[ID]
					,[CustomerID]
					,[UserID]
					,[ModeratorID]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					,[WholesalerID]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@CustomerId
					,@UserId
					,@ModeratorId
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					,@WholesalerId
					,@Deleted
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AdminSiteNotes]
				SET
					[ID] = @Id
					,[CustomerID] = @CustomerId
					,[UserID] = @UserId
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[WholesalerID] = @WholesalerId
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AdminSiteNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CustomerID],
					[UserID],
					[ModeratorID],
					[Notes],
					[ModifiedBy],
					[CreatedDate],
					[WholesalerID],
					[Deleted]
				FROM
					[dbo].[AdminSiteNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AdminSiteNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Deleted" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [UserID]
	, [ModeratorID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
	, [WholesalerID]
	, [Deleted]
    FROM
	[dbo].[AdminSiteNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [UserID]
	, [ModeratorID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
	, [WholesalerID]
	, [Deleted]
    FROM
	[dbo].[AdminSiteNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAdminSiteNotes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CustomerID]
					, [UserID]
					, [ModeratorID]
					, [Notes]
					, [ModifiedBy]
					, [CreatedDate]
					, [WholesalerID]
					, [Deleted]
					FROM [dbo].[AdminSiteNotes] {0}
				)
				SELECT
				       [ID],
				       [CustomerID],
				       [UserID],
				       [ModeratorID],
				       [Notes],
				       [ModifiedBy],
				       [CreatedDate],
				       [WholesalerID],
				       [Deleted]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AdminSiteNotes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pActionType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ActionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pActionType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ActionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[ActionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ActionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pActionType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ActionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ActionType]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pActionType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ActionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ActionType]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pActionType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ActionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ActionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pActionType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ActionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pActionType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ActionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pActionType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ActionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[ActionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[ActionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pActionType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ActionType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					FROM [dbo].[ActionType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ActionType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAction_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Action table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAction_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Action table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DateTimeStamp]'
				SET @SQL = @SQL + ', [ActionTypeID]'
				SET @SQL = @SQL + ', [ActionFrom]'
				SET @SQL = @SQL + ', [ExtraInfo]'
				SET @SQL = @SQL + ', [ProcessedFlag]'
				SET @SQL = @SQL + ' FROM [dbo].[Action]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DateTimeStamp],'
				SET @SQL = @SQL + ' [ActionTypeID],'
				SET @SQL = @SQL + ' [ActionFrom],'
				SET @SQL = @SQL + ' [ExtraInfo],'
				SET @SQL = @SQL + ' [ProcessedFlag]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Action]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAction_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Action table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActionFrom" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@ProcessedFlag" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Action]
					(
					[DateTimeStamp]
					,[ActionTypeID]
					,[ActionFrom]
					,[ExtraInfo]
					,[ProcessedFlag]
					)
				VALUES
					(
					@DateTimeStamp
					,@ActionTypeId
					,@ActionFrom
					,@ExtraInfo
					,@ProcessedFlag
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAction_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Action table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActionFrom" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@ProcessedFlag" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Action]
				SET
					[DateTimeStamp] = @DateTimeStamp
					,[ActionTypeID] = @ActionTypeId
					,[ActionFrom] = @ActionFrom
					,[ExtraInfo] = @ExtraInfo
					,[ProcessedFlag] = @ProcessedFlag
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAction_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Action table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Action] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAction_GetByActionTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Action table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ActionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
				WHERE
					[ActionTypeID] = @ActionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAction_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Action table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAction_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Action table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DateTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ActionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ActionFrom" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@ProcessedFlag" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DateTimeStamp]
	, [ActionTypeID]
	, [ActionFrom]
	, [ExtraInfo]
	, [ProcessedFlag]
    FROM
	[dbo].[Action]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DateTimeStamp] = @DateTimeStamp OR @DateTimeStamp IS NULL)
	AND ([ActionTypeID] = @ActionTypeId OR @ActionTypeId IS NULL)
	AND ([ActionFrom] = @ActionFrom OR @ActionFrom IS NULL)
	AND ([ExtraInfo] = @ExtraInfo OR @ExtraInfo IS NULL)
	AND ([ProcessedFlag] = @ProcessedFlag OR @ProcessedFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DateTimeStamp]
	, [ActionTypeID]
	, [ActionFrom]
	, [ExtraInfo]
	, [ProcessedFlag]
    FROM
	[dbo].[Action]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DateTimeStamp] = @DateTimeStamp AND @DateTimeStamp is not null)
	OR ([ActionTypeID] = @ActionTypeId AND @ActionTypeId is not null)
	OR ([ActionFrom] = @ActionFrom AND @ActionFrom is not null)
	OR ([ExtraInfo] = @ExtraInfo AND @ExtraInfo is not null)
	OR ([ProcessedFlag] = @ProcessedFlag AND @ProcessedFlag is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAction_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Action table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [DateTimeStamp]
					, [ActionTypeID]
					, [ActionFrom]
					, [ExtraInfo]
					, [ProcessedFlag]
					FROM [dbo].[Action] {0}
				)
				SELECT
				       [ID],
				       [DateTimeStamp],
				       [ActionTypeID],
				       [ActionFrom],
				       [ExtraInfo],
				       [ProcessedFlag]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Action] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAccountManager_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccountManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAccountManager_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccountManager table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [FullName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[AccountManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [FullName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccountManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAccountManager_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccountManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AccountManager]
					(
					[WholesalerID]
					,[FullName]
					,[EmailAddress]
					,[Enabled]
					)
				VALUES
					(
					@WholesalerId
					,@FullName
					,@EmailAddress
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccountManager_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccountManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccountManager]
				SET
					[WholesalerID] = @WholesalerId
					,[FullName] = @FullName
					,[EmailAddress] = @EmailAddress
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccountManager_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccountManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AccountManager] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccountManager_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccountManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccountManager_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccountManager table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccountManager_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccountManager table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@FullName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@EmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [Enabled]
    FROM
	[dbo].[AccountManager]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([FullName] = @FullName OR @FullName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [Enabled]
    FROM
	[dbo].[AccountManager]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([FullName] = @FullName AND @FullName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAccountManager_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccountManager table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [FullName]
					, [EmailAddress]
					, [Enabled]
					FROM [dbo].[AccountManager] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [FullName],
				       [EmailAddress],
				       [Enabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AccountManager] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAccessType_ProductRate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAccessType_ProductRate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType_ProductRate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType_ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ProductRateID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType_ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAccessType_ProductRate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AccessType_ProductRate]
					(
					[AccessTypeID]
					,[ProductRateID]
					)
				VALUES
					(
					@AccessTypeId
					,@ProductRateId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccessType_ProductRate]
				SET
					[AccessTypeID] = @AccessTypeId
					,[ProductRateID] = @ProductRateId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AccessType_ProductRate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_GetByAccessTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_GetByProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_GetByAccessTypeIdProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[AccessTypeID] = @AccessTypeId
					AND [ProductRateID] = @ProductRateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAccessType_ProductRate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccessType_ProductRate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AccessTypeID]
	, [ProductRateID]
    FROM
	[dbo].[AccessType_ProductRate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AccessTypeID]
	, [ProductRateID]
    FROM
	[dbo].[AccessType_ProductRate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAccessType_ProductRate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType_ProductRate table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [AccessTypeID]
					, [ProductRateID]
					FROM [dbo].[AccessType_ProductRate] {0}
				)
				SELECT
				       [ID],
				       [AccessTypeID],
				       [ProductRateID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AccessType_ProductRate] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAdminSiteNotesHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotesHistory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AdminSiteNotesID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotesHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AdminSiteNotesID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotesHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AdminSiteNotesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AdminSiteNotesHistory]
					(
					[AdminSiteNotesID]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					)
				VALUES
					(
					@AdminSiteNotesId
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AdminSiteNotesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AdminSiteNotesHistory]
				SET
					[AdminSiteNotesID] = @AdminSiteNotesId
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AdminSiteNotesHistory] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotesHistory_GetByAdminSiteNotesId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotesHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AdminSiteNotesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
				WHERE
					[AdminSiteNotesID] = @AdminSiteNotesId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotesHistory_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotesHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AdminSiteNotesHistory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AdminSiteNotesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="nvarchar" direction="Input" size="3000" precision="0" scale="0" param="(3000)" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AdminSiteNotesID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[AdminSiteNotesHistory]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AdminSiteNotesID] = @AdminSiteNotesId OR @AdminSiteNotesId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AdminSiteNotesID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[AdminSiteNotesHistory]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AdminSiteNotesID] = @AdminSiteNotesId AND @AdminSiteNotesId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAdminSiteNotesHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotesHistory table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [AdminSiteNotesID]
					, [Notes]
					, [ModifiedBy]
					, [CreatedDate]
					FROM [dbo].[AdminSiteNotesHistory] {0}
				)
				SELECT
				       [ID],
				       [AdminSiteNotesID],
				       [Notes],
				       [ModifiedBy],
				       [CreatedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AdminSiteNotesHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAreaCodeNXX_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[AreaCode],
					[Location1],
					[Location2],
					[ISOCountryCode]
				FROM
					[dbo].[AreaCodeNXX]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAreaCodeNXX_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AreaCodeNXX table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AreaCode]'
				SET @SQL = @SQL + ', [Location1]'
				SET @SQL = @SQL + ', [Location2]'
				SET @SQL = @SQL + ', [ISOCountryCode]'
				SET @SQL = @SQL + ' FROM [dbo].[AreaCodeNXX]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AreaCode],'
				SET @SQL = @SQL + ' [Location1],'
				SET @SQL = @SQL + ' [Location2],'
				SET @SQL = @SQL + ' [ISOCountryCode]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AreaCodeNXX]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAreaCodeNXX_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Location1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsoCountryCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AreaCodeNXX]
					(
					[ID]
					,[AreaCode]
					,[Location1]
					,[Location2]
					,[ISOCountryCode]
					)
				VALUES
					(
					@Id
					,@AreaCode
					,@Location1
					,@Location2
					,@IsoCountryCode
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAreaCodeNXX_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Location1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Location2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsoCountryCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AreaCodeNXX]
				SET
					[ID] = @Id
					,[AreaCode] = @AreaCode
					,[Location1] = @Location1
					,[Location2] = @Location2
					,[ISOCountryCode] = @IsoCountryCode
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAreaCodeNXX_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AreaCodeNXX] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAreaCodeNXX_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AreaCodeNXX table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[AreaCode],
					[Location1],
					[Location2],
					[ISOCountryCode]
				FROM
					[dbo].[AreaCodeNXX]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAreaCodeNXX_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AreaCodeNXX table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AreaCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Location1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Location2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@IsoCountryCode" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AreaCode]
	, [Location1]
	, [Location2]
	, [ISOCountryCode]
    FROM
	[dbo].[AreaCodeNXX]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AreaCode] = @AreaCode OR @AreaCode IS NULL)
	AND ([Location1] = @Location1 OR @Location1 IS NULL)
	AND ([Location2] = @Location2 OR @Location2 IS NULL)
	AND ([ISOCountryCode] = @IsoCountryCode OR @IsoCountryCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AreaCode]
	, [Location1]
	, [Location2]
	, [ISOCountryCode]
    FROM
	[dbo].[AreaCodeNXX]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AreaCode] = @AreaCode AND @AreaCode is not null)
	OR ([Location1] = @Location1 AND @Location1 is not null)
	OR ([Location2] = @Location2 AND @Location2 is not null)
	OR ([ISOCountryCode] = @IsoCountryCode AND @IsoCountryCode is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAreaCodeNXX_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AreaCodeNXX table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [AreaCode]
					, [Location1]
					, [Location2]
					, [ISOCountryCode]
					FROM [dbo].[AreaCodeNXX] {0}
				)
				SELECT
				       [ID],
				       [AreaCode],
				       [Location1],
				       [Location2],
				       [ISOCountryCode]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AreaCodeNXX] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAuditLog_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AuditLog table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[TblName],
					[TablePKID],
					[CreatedDate],
					[CustomerID],
					[ModeratorID],
					[ColumnsUpdated],
					[Category]
				FROM
					[dbo].[AuditLog]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAuditLog_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AuditLog table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [TblName]'
				SET @SQL = @SQL + ', [TablePKID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [ColumnsUpdated]'
				SET @SQL = @SQL + ', [Category]'
				SET @SQL = @SQL + ' FROM [dbo].[AuditLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [TblName],'
				SET @SQL = @SQL + ' [TablePKID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [ColumnsUpdated],'
				SET @SQL = @SQL + ' [Category]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AuditLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAuditLog_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AuditLog table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TblName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TablePkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ColumnsUpdated" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AuditLog]
					(
					[TblName]
					,[TablePKID]
					,[CreatedDate]
					,[CustomerID]
					,[ModeratorID]
					,[ColumnsUpdated]
					,[Category]
					)
				VALUES
					(
					@TblName
					,@TablePkid
					,@CreatedDate
					,@CustomerId
					,@ModeratorId
					,@ColumnsUpdated
					,@Category
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAuditLog_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AuditLog table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TblName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TablePkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ColumnsUpdated" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AuditLog]
				SET
					[TblName] = @TblName
					,[TablePKID] = @TablePkid
					,[CreatedDate] = @CreatedDate
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[ColumnsUpdated] = @ColumnsUpdated
					,[Category] = @Category
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAuditLog_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AuditLog table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AuditLog] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAuditLog_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AuditLog table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TblName],
					[TablePKID],
					[CreatedDate],
					[CustomerID],
					[ModeratorID],
					[ColumnsUpdated],
					[Category]
				FROM
					[dbo].[AuditLog]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAuditLog_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AuditLog table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TblName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@TablePkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ColumnsUpdated" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [TblName]
	, [TablePKID]
	, [CreatedDate]
	, [CustomerID]
	, [ModeratorID]
	, [ColumnsUpdated]
	, [Category]
    FROM
	[dbo].[AuditLog]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([TblName] = @TblName OR @TblName IS NULL)
	AND ([TablePKID] = @TablePkid OR @TablePkid IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ColumnsUpdated] = @ColumnsUpdated OR @ColumnsUpdated IS NULL)
	AND ([Category] = @Category OR @Category IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [TblName]
	, [TablePKID]
	, [CreatedDate]
	, [CustomerID]
	, [ModeratorID]
	, [ColumnsUpdated]
	, [Category]
    FROM
	[dbo].[AuditLog]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([TblName] = @TblName AND @TblName is not null)
	OR ([TablePKID] = @TablePkid AND @TablePkid is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ColumnsUpdated] = @ColumnsUpdated AND @ColumnsUpdated is not null)
	OR ([Category] = @Category AND @Category is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAuditLog_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AuditLog table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [TblName]
					, [TablePKID]
					, [CreatedDate]
					, [CustomerID]
					, [ModeratorID]
					, [ColumnsUpdated]
					, [Category]
					FROM [dbo].[AuditLog] {0}
				)
				SELECT
				       [ID],
				       [TblName],
				       [TablePKID],
				       [CreatedDate],
				       [CustomerID],
				       [ModeratorID],
				       [ColumnsUpdated],
				       [Category]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AuditLog] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeRequest_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeRequest_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequest table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [TransTimeStamp]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [BridgeRequestTypeID]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [TransTimeStamp],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [BridgeRequestTypeID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBridgeRequest_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@BridgeRequestTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[BridgeRequest]
					(
					[ModeratorID]
					,[TransTimeStamp]
					,[ProcessFlag]
					,[BridgeRequestTypeID]
					)
				VALUES
					(
					@ModeratorId
					,@TransTimeStamp
					,@ProcessFlag
					,@BridgeRequestTypeId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@BridgeRequestTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeRequest]
				SET
					[ModeratorID] = @ModeratorId
					,[TransTimeStamp] = @TransTimeStamp
					,[ProcessFlag] = @ProcessFlag
					,[BridgeRequestTypeID] = @BridgeRequestTypeId
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[BridgeRequest] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_GetByBridgeRequestTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BridgeRequestTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[BridgeRequestTypeID] = @BridgeRequestTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_GetByModeratorIdProcessFlag" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ModeratorID] = @ModeratorId
					AND [ProcessFlag] = @ProcessFlag
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridgeRequest_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeRequest table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransTimeStamp" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@BridgeRequestTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [TransTimeStamp]
	, [ProcessFlag]
	, [BridgeRequestTypeID]
    FROM
	[dbo].[BridgeRequest]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([TransTimeStamp] = @TransTimeStamp OR @TransTimeStamp IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
	AND ([BridgeRequestTypeID] = @BridgeRequestTypeId OR @BridgeRequestTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [TransTimeStamp]
	, [ProcessFlag]
	, [BridgeRequestTypeID]
    FROM
	[dbo].[BridgeRequest]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([TransTimeStamp] = @TransTimeStamp AND @TransTimeStamp is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	OR ([BridgeRequestTypeID] = @BridgeRequestTypeId AND @BridgeRequestTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBridgeRequest_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequest table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ModeratorID]
					, [TransTimeStamp]
					, [ProcessFlag]
					, [BridgeRequestTypeID]
					FROM [dbo].[BridgeRequest] {0}
				)
				SELECT
				       [ID],
				       [ModeratorID],
				       [TransTimeStamp],
				       [ProcessFlag],
				       [BridgeRequestTypeID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[BridgeRequest] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridge_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Bridge table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridge_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Bridge table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [IPAddress]'
				SET @SQL = @SQL + ', [WebRequestSecurityToken]'
				SET @SQL = @SQL + ', [WebRequestAPIURL]'
				SET @SQL = @SQL + ', [WebRequestMethod]'
				SET @SQL = @SQL + ', [WebRequestContentType]'
				SET @SQL = @SQL + ', [UserName]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [BridgeTypeID]'
				SET @SQL = @SQL + ', [DBConnectionString]'
				SET @SQL = @SQL + ' FROM [dbo].[Bridge]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [IPAddress],'
				SET @SQL = @SQL + ' [WebRequestSecurityToken],'
				SET @SQL = @SQL + ' [WebRequestAPIURL],'
				SET @SQL = @SQL + ' [WebRequestMethod],'
				SET @SQL = @SQL + ' [WebRequestContentType],'
				SET @SQL = @SQL + ' [UserName],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [BridgeTypeID],'
				SET @SQL = @SQL + ' [DBConnectionString]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Bridge]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBridge_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Bridge table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@IpAddress" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebRequestSecurityToken" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebRequestApiurl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebRequestMethod" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@WebRequestContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BridgeTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DbConnectionString" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Bridge]
					(
					[Name]
					,[Description]
					,[IPAddress]
					,[WebRequestSecurityToken]
					,[WebRequestAPIURL]
					,[WebRequestMethod]
					,[WebRequestContentType]
					,[UserName]
					,[Password]
					,[BridgeTypeID]
					,[DBConnectionString]
					)
				VALUES
					(
					@Name
					,@Description
					,@IpAddress
					,@WebRequestSecurityToken
					,@WebRequestApiurl
					,@WebRequestMethod
					,@WebRequestContentType
					,@UserName
					,@Password
					,@BridgeTypeId
					,@DbConnectionString
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridge_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Bridge table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@IpAddress" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebRequestSecurityToken" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebRequestApiurl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WebRequestMethod" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@WebRequestContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BridgeTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DbConnectionString" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Bridge]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[IPAddress] = @IpAddress
					,[WebRequestSecurityToken] = @WebRequestSecurityToken
					,[WebRequestAPIURL] = @WebRequestApiurl
					,[WebRequestMethod] = @WebRequestMethod
					,[WebRequestContentType] = @WebRequestContentType
					,[UserName] = @UserName
					,[Password] = @Password
					,[BridgeTypeID] = @BridgeTypeId
					,[DBConnectionString] = @DbConnectionString
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridge_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Bridge table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Bridge] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridge_GetByBridgeTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Bridge table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BridgeTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
				WHERE
					[BridgeTypeID] = @BridgeTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridge_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Bridge table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridge_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Bridge table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@IpAddress" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@WebRequestSecurityToken" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@WebRequestApiurl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@WebRequestMethod" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@WebRequestContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@BridgeTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DbConnectionString" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [IPAddress]
	, [WebRequestSecurityToken]
	, [WebRequestAPIURL]
	, [WebRequestMethod]
	, [WebRequestContentType]
	, [UserName]
	, [Password]
	, [BridgeTypeID]
	, [DBConnectionString]
    FROM
	[dbo].[Bridge]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([IPAddress] = @IpAddress OR @IpAddress IS NULL)
	AND ([WebRequestSecurityToken] = @WebRequestSecurityToken OR @WebRequestSecurityToken IS NULL)
	AND ([WebRequestAPIURL] = @WebRequestApiurl OR @WebRequestApiurl IS NULL)
	AND ([WebRequestMethod] = @WebRequestMethod OR @WebRequestMethod IS NULL)
	AND ([WebRequestContentType] = @WebRequestContentType OR @WebRequestContentType IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([BridgeTypeID] = @BridgeTypeId OR @BridgeTypeId IS NULL)
	AND ([DBConnectionString] = @DbConnectionString OR @DbConnectionString IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [IPAddress]
	, [WebRequestSecurityToken]
	, [WebRequestAPIURL]
	, [WebRequestMethod]
	, [WebRequestContentType]
	, [UserName]
	, [Password]
	, [BridgeTypeID]
	, [DBConnectionString]
    FROM
	[dbo].[Bridge]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([IPAddress] = @IpAddress AND @IpAddress is not null)
	OR ([WebRequestSecurityToken] = @WebRequestSecurityToken AND @WebRequestSecurityToken is not null)
	OR ([WebRequestAPIURL] = @WebRequestApiurl AND @WebRequestApiurl is not null)
	OR ([WebRequestMethod] = @WebRequestMethod AND @WebRequestMethod is not null)
	OR ([WebRequestContentType] = @WebRequestContentType AND @WebRequestContentType is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([BridgeTypeID] = @BridgeTypeId AND @BridgeTypeId is not null)
	OR ([DBConnectionString] = @DbConnectionString AND @DbConnectionString is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBridge_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Bridge table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [IPAddress]
					, [WebRequestSecurityToken]
					, [WebRequestAPIURL]
					, [WebRequestMethod]
					, [WebRequestContentType]
					, [UserName]
					, [Password]
					, [BridgeTypeID]
					, [DBConnectionString]
					FROM [dbo].[Bridge] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [IPAddress],
				       [WebRequestSecurityToken],
				       [WebRequestAPIURL],
				       [WebRequestMethod],
				       [WebRequestContentType],
				       [UserName],
				       [Password],
				       [BridgeTypeID],
				       [DBConnectionString]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Bridge] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBillableLegs_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BillableLegs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBillableLegs_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BillableLegs table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ConferenceID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Moderator]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [StartTime]'
				SET @SQL = @SQL + ', [EndTime]'
				SET @SQL = @SQL + ', [ElapsedTime]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [DNIS]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [ANI]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [Destination]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ConnectProductRateID]'
				SET @SQL = @SQL + ', [BridgeProductRateID]'
				SET @SQL = @SQL + ', [LDProductRateID]'
				SET @SQL = @SQL + ', [ProductRateTaxableValue]'
				SET @SQL = @SQL + ', [CustomerTaxableValue]'
				SET @SQL = @SQL + ', [WSTaxableValue]'
				SET @SQL = @SQL + ', [RetailConnectCharge]'
				SET @SQL = @SQL + ', [RetailBridgeRate]'
				SET @SQL = @SQL + ', [RetailLDRate]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [RetailBillingInterval]'
				SET @SQL = @SQL + ', [RetailTotalConnectCharge]'
				SET @SQL = @SQL + ', [RetailTotalBridge]'
				SET @SQL = @SQL + ', [RetailTotalLD]'
				SET @SQL = @SQL + ', [RetailTotal]'
				SET @SQL = @SQL + ', [RetailLocalTaxRate]'
				SET @SQL = @SQL + ', [RetailFederalTaxRate]'
				SET @SQL = @SQL + ', [RetailLocalTax]'
				SET @SQL = @SQL + ', [RetailFederalTax]'
				SET @SQL = @SQL + ', [RetailTotalTax]'
				SET @SQL = @SQL + ', [WSConnectCharge]'
				SET @SQL = @SQL + ', [WSBridgeRate]'
				SET @SQL = @SQL + ', [WSLDRate]'
				SET @SQL = @SQL + ', [WSCurrency]'
				SET @SQL = @SQL + ', [WSBillingInterval]'
				SET @SQL = @SQL + ', [WSTotalConnectCharge]'
				SET @SQL = @SQL + ', [WSTotalBridge]'
				SET @SQL = @SQL + ', [WSTotalLD]'
				SET @SQL = @SQL + ', [WSTotal]'
				SET @SQL = @SQL + ', [WSLocalTaxRate]'
				SET @SQL = @SQL + ', [WSFederalTaxRate]'
				SET @SQL = @SQL + ', [WSLocalTax]'
				SET @SQL = @SQL + ', [WSFederalTax]'
				SET @SQL = @SQL + ', [WSTotalTax]'
				SET @SQL = @SQL + ', [BillingStatus]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProcessedDate]'
				SET @SQL = @SQL + ', [RatedToZero]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductNameAlt]'
				SET @SQL = @SQL + ' FROM [dbo].[BillableLegs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ConferenceID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Moderator],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [StartTime],'
				SET @SQL = @SQL + ' [EndTime],'
				SET @SQL = @SQL + ' [ElapsedTime],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [DNIS],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [ANI],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [Destination],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ConnectProductRateID],'
				SET @SQL = @SQL + ' [BridgeProductRateID],'
				SET @SQL = @SQL + ' [LDProductRateID],'
				SET @SQL = @SQL + ' [ProductRateTaxableValue],'
				SET @SQL = @SQL + ' [CustomerTaxableValue],'
				SET @SQL = @SQL + ' [WSTaxableValue],'
				SET @SQL = @SQL + ' [RetailConnectCharge],'
				SET @SQL = @SQL + ' [RetailBridgeRate],'
				SET @SQL = @SQL + ' [RetailLDRate],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [RetailBillingInterval],'
				SET @SQL = @SQL + ' [RetailTotalConnectCharge],'
				SET @SQL = @SQL + ' [RetailTotalBridge],'
				SET @SQL = @SQL + ' [RetailTotalLD],'
				SET @SQL = @SQL + ' [RetailTotal],'
				SET @SQL = @SQL + ' [RetailLocalTaxRate],'
				SET @SQL = @SQL + ' [RetailFederalTaxRate],'
				SET @SQL = @SQL + ' [RetailLocalTax],'
				SET @SQL = @SQL + ' [RetailFederalTax],'
				SET @SQL = @SQL + ' [RetailTotalTax],'
				SET @SQL = @SQL + ' [WSConnectCharge],'
				SET @SQL = @SQL + ' [WSBridgeRate],'
				SET @SQL = @SQL + ' [WSLDRate],'
				SET @SQL = @SQL + ' [WSCurrency],'
				SET @SQL = @SQL + ' [WSBillingInterval],'
				SET @SQL = @SQL + ' [WSTotalConnectCharge],'
				SET @SQL = @SQL + ' [WSTotalBridge],'
				SET @SQL = @SQL + ' [WSTotalLD],'
				SET @SQL = @SQL + ' [WSTotal],'
				SET @SQL = @SQL + ' [WSLocalTaxRate],'
				SET @SQL = @SQL + ' [WSFederalTaxRate],'
				SET @SQL = @SQL + ' [WSLocalTax],'
				SET @SQL = @SQL + ' [WSFederalTax],'
				SET @SQL = @SQL + ' [WSTotalTax],'
				SET @SQL = @SQL + ' [BillingStatus],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProcessedDate],'
				SET @SQL = @SQL + ' [RatedToZero],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductNameAlt]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BillableLegs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBillableLegs_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BillableLegs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Ani" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RatedToZero" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ProductNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[BillableLegs]
					(
					[ID]
					,[ConferenceID]
					,[ModeratorID]
					,[WholesalerID]
					,[ModeratorCode]
					,[PassCode]
					,[ModeratorName]
					,[Moderator]
					,[ExternalCustomerNumber]
					,[ExternalModeratorNumber]
					,[ReferenceNumber]
					,[StartTime]
					,[EndTime]
					,[ElapsedTime]
					,[BridgeID]
					,[UniqueConferenceID]
					,[AuxiliaryConferenceID]
					,[DNIS]
					,[DialNumber]
					,[ANI]
					,[ParticipantName]
					,[Destination]
					,[AccessTypeID]
					,[ConnectProductRateID]
					,[BridgeProductRateID]
					,[LDProductRateID]
					,[ProductRateTaxableValue]
					,[CustomerTaxableValue]
					,[WSTaxableValue]
					,[RetailConnectCharge]
					,[RetailBridgeRate]
					,[RetailLDRate]
					,[RetailCurrency]
					,[RetailBillingInterval]
					,[RetailTotalConnectCharge]
					,[RetailTotalBridge]
					,[RetailTotalLD]
					,[RetailTotal]
					,[RetailLocalTaxRate]
					,[RetailFederalTaxRate]
					,[RetailLocalTax]
					,[RetailFederalTax]
					,[RetailTotalTax]
					,[WSConnectCharge]
					,[WSBridgeRate]
					,[WSLDRate]
					,[WSCurrency]
					,[WSBillingInterval]
					,[WSTotalConnectCharge]
					,[WSTotalBridge]
					,[WSTotalLD]
					,[WSTotal]
					,[WSLocalTaxRate]
					,[WSFederalTaxRate]
					,[WSLocalTax]
					,[WSFederalTax]
					,[WSTotalTax]
					,[BillingStatus]
					,[BilledDate]
					,[ProcessedDate]
					,[RatedToZero]
					,[ProductName]
					,[ProductNameAlt]
					)
				VALUES
					(
					@Id
					,@ConferenceId
					,@ModeratorId
					,@WholesalerId
					,@ModeratorCode
					,@PassCode
					,@ModeratorName
					,@Moderator
					,@ExternalCustomerNumber
					,@ExternalModeratorNumber
					,@ReferenceNumber
					,@StartTime
					,@EndTime
					,@ElapsedTime
					,@BridgeId
					,@UniqueConferenceId
					,@AuxiliaryConferenceId
					,@Dnis
					,@DialNumber
					,@Ani
					,@ParticipantName
					,@Destination
					,@AccessTypeId
					,@ConnectProductRateId
					,@BridgeProductRateId
					,@LdProductRateId
					,@ProductRateTaxableValue
					,@CustomerTaxableValue
					,@WsTaxableValue
					,@RetailConnectCharge
					,@RetailBridgeRate
					,@RetailLdRate
					,@RetailCurrency
					,@RetailBillingInterval
					,@RetailTotalConnectCharge
					,@RetailTotalBridge
					,@RetailTotalLd
					,@RetailTotal
					,@RetailLocalTaxRate
					,@RetailFederalTaxRate
					,@RetailLocalTax
					,@RetailFederalTax
					,@RetailTotalTax
					,@WsConnectCharge
					,@WsBridgeRate
					,@WsldRate
					,@WsCurrency
					,@WsBillingInterval
					,@WsTotalConnectCharge
					,@WsTotalBridge
					,@WsTotalLd
					,@WsTotal
					,@WsLocalTaxRate
					,@WsFederalTaxRate
					,@WsLocalTax
					,@WsFederalTax
					,@WsTotalTax
					,@BillingStatus
					,@BilledDate
					,@ProcessedDate
					,@RatedToZero
					,@ProductName
					,@ProductNameAlt
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BillableLegs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Ani" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RatedToZero" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ProductNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BillableLegs]
				SET
					[ID] = @Id
					,[ConferenceID] = @ConferenceId
					,[ModeratorID] = @ModeratorId
					,[WholesalerID] = @WholesalerId
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[ModeratorName] = @ModeratorName
					,[Moderator] = @Moderator
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ReferenceNumber] = @ReferenceNumber
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[ElapsedTime] = @ElapsedTime
					,[BridgeID] = @BridgeId
					,[UniqueConferenceID] = @UniqueConferenceId
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[DNIS] = @Dnis
					,[DialNumber] = @DialNumber
					,[ANI] = @Ani
					,[ParticipantName] = @ParticipantName
					,[Destination] = @Destination
					,[AccessTypeID] = @AccessTypeId
					,[ConnectProductRateID] = @ConnectProductRateId
					,[BridgeProductRateID] = @BridgeProductRateId
					,[LDProductRateID] = @LdProductRateId
					,[ProductRateTaxableValue] = @ProductRateTaxableValue
					,[CustomerTaxableValue] = @CustomerTaxableValue
					,[WSTaxableValue] = @WsTaxableValue
					,[RetailConnectCharge] = @RetailConnectCharge
					,[RetailBridgeRate] = @RetailBridgeRate
					,[RetailLDRate] = @RetailLdRate
					,[RetailCurrency] = @RetailCurrency
					,[RetailBillingInterval] = @RetailBillingInterval
					,[RetailTotalConnectCharge] = @RetailTotalConnectCharge
					,[RetailTotalBridge] = @RetailTotalBridge
					,[RetailTotalLD] = @RetailTotalLd
					,[RetailTotal] = @RetailTotal
					,[RetailLocalTaxRate] = @RetailLocalTaxRate
					,[RetailFederalTaxRate] = @RetailFederalTaxRate
					,[RetailLocalTax] = @RetailLocalTax
					,[RetailFederalTax] = @RetailFederalTax
					,[RetailTotalTax] = @RetailTotalTax
					,[WSConnectCharge] = @WsConnectCharge
					,[WSBridgeRate] = @WsBridgeRate
					,[WSLDRate] = @WsldRate
					,[WSCurrency] = @WsCurrency
					,[WSBillingInterval] = @WsBillingInterval
					,[WSTotalConnectCharge] = @WsTotalConnectCharge
					,[WSTotalBridge] = @WsTotalBridge
					,[WSTotalLD] = @WsTotalLd
					,[WSTotal] = @WsTotal
					,[WSLocalTaxRate] = @WsLocalTaxRate
					,[WSFederalTaxRate] = @WsFederalTaxRate
					,[WSLocalTax] = @WsLocalTax
					,[WSFederalTax] = @WsFederalTax
					,[WSTotalTax] = @WsTotalTax
					,[BillingStatus] = @BillingStatus
					,[BilledDate] = @BilledDate
					,[ProcessedDate] = @ProcessedDate
					,[RatedToZero] = @RatedToZero
					,[ProductName] = @ProductName
					,[ProductNameAlt] = @ProductNameAlt
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BillableLegs table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[BillableLegs] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByConferenceIdBridgeIdWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BridgeId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ConferenceID] = @ConferenceId
					AND [BridgeID] = @BridgeId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByWholesalerIdModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByWholesalerIdStartTimeEndTime" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [StartTime] = @StartTime
					AND [EndTime] = @EndTime
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByReferenceNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ReferenceNumber] = @ReferenceNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_GetByBilledDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[BilledDate] = @BilledDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBillableLegs_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BillableLegs table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ModeratorCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@PassCode" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ModeratorName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Moderator" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ExternalModeratorNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ElapsedTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BridgeId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@AuxiliaryConferenceId" type="varchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@Dnis" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DialNumber" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Ani" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault="null"/>
				<parameter name="@ParticipantName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Destination" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@AccessTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ConnectProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BridgeProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LdProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WsTaxableValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailLdRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@RetailBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RetailTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@RetailLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@RetailLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@RetailFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@RetailTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsBridgeRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsldRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsCurrency" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@WsBillingInterval" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WsTotalConnectCharge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotalBridge" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotalLd" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsTotal" type="decimal" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@WsLocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsFederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@WsLocalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsFederalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@WsTotalTax" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@BillingStatus" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProcessedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RatedToZero" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ProductNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [RatedToZero]
	, [ProductName]
	, [ProductNameAlt]
    FROM
	[dbo].[BillableLegs]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ConferenceID] = @ConferenceId OR @ConferenceId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([ModeratorName] = @ModeratorName OR @ModeratorName IS NULL)
	AND ([Moderator] = @Moderator OR @Moderator IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([ElapsedTime] = @ElapsedTime OR @ElapsedTime IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([DNIS] = @Dnis OR @Dnis IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([ANI] = @Ani OR @Ani IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([Destination] = @Destination OR @Destination IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ConnectProductRateID] = @ConnectProductRateId OR @ConnectProductRateId IS NULL)
	AND ([BridgeProductRateID] = @BridgeProductRateId OR @BridgeProductRateId IS NULL)
	AND ([LDProductRateID] = @LdProductRateId OR @LdProductRateId IS NULL)
	AND ([ProductRateTaxableValue] = @ProductRateTaxableValue OR @ProductRateTaxableValue IS NULL)
	AND ([CustomerTaxableValue] = @CustomerTaxableValue OR @CustomerTaxableValue IS NULL)
	AND ([WSTaxableValue] = @WsTaxableValue OR @WsTaxableValue IS NULL)
	AND ([RetailConnectCharge] = @RetailConnectCharge OR @RetailConnectCharge IS NULL)
	AND ([RetailBridgeRate] = @RetailBridgeRate OR @RetailBridgeRate IS NULL)
	AND ([RetailLDRate] = @RetailLdRate OR @RetailLdRate IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([RetailBillingInterval] = @RetailBillingInterval OR @RetailBillingInterval IS NULL)
	AND ([RetailTotalConnectCharge] = @RetailTotalConnectCharge OR @RetailTotalConnectCharge IS NULL)
	AND ([RetailTotalBridge] = @RetailTotalBridge OR @RetailTotalBridge IS NULL)
	AND ([RetailTotalLD] = @RetailTotalLd OR @RetailTotalLd IS NULL)
	AND ([RetailTotal] = @RetailTotal OR @RetailTotal IS NULL)
	AND ([RetailLocalTaxRate] = @RetailLocalTaxRate OR @RetailLocalTaxRate IS NULL)
	AND ([RetailFederalTaxRate] = @RetailFederalTaxRate OR @RetailFederalTaxRate IS NULL)
	AND ([RetailLocalTax] = @RetailLocalTax OR @RetailLocalTax IS NULL)
	AND ([RetailFederalTax] = @RetailFederalTax OR @RetailFederalTax IS NULL)
	AND ([RetailTotalTax] = @RetailTotalTax OR @RetailTotalTax IS NULL)
	AND ([WSConnectCharge] = @WsConnectCharge OR @WsConnectCharge IS NULL)
	AND ([WSBridgeRate] = @WsBridgeRate OR @WsBridgeRate IS NULL)
	AND ([WSLDRate] = @WsldRate OR @WsldRate IS NULL)
	AND ([WSCurrency] = @WsCurrency OR @WsCurrency IS NULL)
	AND ([WSBillingInterval] = @WsBillingInterval OR @WsBillingInterval IS NULL)
	AND ([WSTotalConnectCharge] = @WsTotalConnectCharge OR @WsTotalConnectCharge IS NULL)
	AND ([WSTotalBridge] = @WsTotalBridge OR @WsTotalBridge IS NULL)
	AND ([WSTotalLD] = @WsTotalLd OR @WsTotalLd IS NULL)
	AND ([WSTotal] = @WsTotal OR @WsTotal IS NULL)
	AND ([WSLocalTaxRate] = @WsLocalTaxRate OR @WsLocalTaxRate IS NULL)
	AND ([WSFederalTaxRate] = @WsFederalTaxRate OR @WsFederalTaxRate IS NULL)
	AND ([WSLocalTax] = @WsLocalTax OR @WsLocalTax IS NULL)
	AND ([WSFederalTax] = @WsFederalTax OR @WsFederalTax IS NULL)
	AND ([WSTotalTax] = @WsTotalTax OR @WsTotalTax IS NULL)
	AND ([BillingStatus] = @BillingStatus OR @BillingStatus IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProcessedDate] = @ProcessedDate OR @ProcessedDate IS NULL)
	AND ([RatedToZero] = @RatedToZero OR @RatedToZero IS NULL)
	AND ([ProductName] = @ProductName OR @ProductName IS NULL)
	AND ([ProductNameAlt] = @ProductNameAlt OR @ProductNameAlt IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [RatedToZero]
	, [ProductName]
	, [ProductNameAlt]
    FROM
	[dbo].[BillableLegs]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ConferenceID] = @ConferenceId AND @ConferenceId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([ModeratorName] = @ModeratorName AND @ModeratorName is not null)
	OR ([Moderator] = @Moderator AND @Moderator is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([ElapsedTime] = @ElapsedTime AND @ElapsedTime is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([DNIS] = @Dnis AND @Dnis is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([ANI] = @Ani AND @Ani is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([Destination] = @Destination AND @Destination is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ConnectProductRateID] = @ConnectProductRateId AND @ConnectProductRateId is not null)
	OR ([BridgeProductRateID] = @BridgeProductRateId AND @BridgeProductRateId is not null)
	OR ([LDProductRateID] = @LdProductRateId AND @LdProductRateId is not null)
	OR ([ProductRateTaxableValue] = @ProductRateTaxableValue AND @ProductRateTaxableValue is not null)
	OR ([CustomerTaxableValue] = @CustomerTaxableValue AND @CustomerTaxableValue is not null)
	OR ([WSTaxableValue] = @WsTaxableValue AND @WsTaxableValue is not null)
	OR ([RetailConnectCharge] = @RetailConnectCharge AND @RetailConnectCharge is not null)
	OR ([RetailBridgeRate] = @RetailBridgeRate AND @RetailBridgeRate is not null)
	OR ([RetailLDRate] = @RetailLdRate AND @RetailLdRate is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([RetailBillingInterval] = @RetailBillingInterval AND @RetailBillingInterval is not null)
	OR ([RetailTotalConnectCharge] = @RetailTotalConnectCharge AND @RetailTotalConnectCharge is not null)
	OR ([RetailTotalBridge] = @RetailTotalBridge AND @RetailTotalBridge is not null)
	OR ([RetailTotalLD] = @RetailTotalLd AND @RetailTotalLd is not null)
	OR ([RetailTotal] = @RetailTotal AND @RetailTotal is not null)
	OR ([RetailLocalTaxRate] = @RetailLocalTaxRate AND @RetailLocalTaxRate is not null)
	OR ([RetailFederalTaxRate] = @RetailFederalTaxRate AND @RetailFederalTaxRate is not null)
	OR ([RetailLocalTax] = @RetailLocalTax AND @RetailLocalTax is not null)
	OR ([RetailFederalTax] = @RetailFederalTax AND @RetailFederalTax is not null)
	OR ([RetailTotalTax] = @RetailTotalTax AND @RetailTotalTax is not null)
	OR ([WSConnectCharge] = @WsConnectCharge AND @WsConnectCharge is not null)
	OR ([WSBridgeRate] = @WsBridgeRate AND @WsBridgeRate is not null)
	OR ([WSLDRate] = @WsldRate AND @WsldRate is not null)
	OR ([WSCurrency] = @WsCurrency AND @WsCurrency is not null)
	OR ([WSBillingInterval] = @WsBillingInterval AND @WsBillingInterval is not null)
	OR ([WSTotalConnectCharge] = @WsTotalConnectCharge AND @WsTotalConnectCharge is not null)
	OR ([WSTotalBridge] = @WsTotalBridge AND @WsTotalBridge is not null)
	OR ([WSTotalLD] = @WsTotalLd AND @WsTotalLd is not null)
	OR ([WSTotal] = @WsTotal AND @WsTotal is not null)
	OR ([WSLocalTaxRate] = @WsLocalTaxRate AND @WsLocalTaxRate is not null)
	OR ([WSFederalTaxRate] = @WsFederalTaxRate AND @WsFederalTaxRate is not null)
	OR ([WSLocalTax] = @WsLocalTax AND @WsLocalTax is not null)
	OR ([WSFederalTax] = @WsFederalTax AND @WsFederalTax is not null)
	OR ([WSTotalTax] = @WsTotalTax AND @WsTotalTax is not null)
	OR ([BillingStatus] = @BillingStatus AND @BillingStatus is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProcessedDate] = @ProcessedDate AND @ProcessedDate is not null)
	OR ([RatedToZero] = @RatedToZero AND @RatedToZero is not null)
	OR ([ProductName] = @ProductName AND @ProductName is not null)
	OR ([ProductNameAlt] = @ProductNameAlt AND @ProductNameAlt is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBillableLegs_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BillableLegs table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ConferenceID]
					, [ModeratorID]
					, [WholesalerID]
					, [ModeratorCode]
					, [PassCode]
					, [ModeratorName]
					, [Moderator]
					, [ExternalCustomerNumber]
					, [ExternalModeratorNumber]
					, [ReferenceNumber]
					, [StartTime]
					, [EndTime]
					, [ElapsedTime]
					, [BridgeID]
					, [UniqueConferenceID]
					, [AuxiliaryConferenceID]
					, [DNIS]
					, [DialNumber]
					, [ANI]
					, [ParticipantName]
					, [Destination]
					, [AccessTypeID]
					, [ConnectProductRateID]
					, [BridgeProductRateID]
					, [LDProductRateID]
					, [ProductRateTaxableValue]
					, [CustomerTaxableValue]
					, [WSTaxableValue]
					, [RetailConnectCharge]
					, [RetailBridgeRate]
					, [RetailLDRate]
					, [RetailCurrency]
					, [RetailBillingInterval]
					, [RetailTotalConnectCharge]
					, [RetailTotalBridge]
					, [RetailTotalLD]
					, [RetailTotal]
					, [RetailLocalTaxRate]
					, [RetailFederalTaxRate]
					, [RetailLocalTax]
					, [RetailFederalTax]
					, [RetailTotalTax]
					, [WSConnectCharge]
					, [WSBridgeRate]
					, [WSLDRate]
					, [WSCurrency]
					, [WSBillingInterval]
					, [WSTotalConnectCharge]
					, [WSTotalBridge]
					, [WSTotalLD]
					, [WSTotal]
					, [WSLocalTaxRate]
					, [WSFederalTaxRate]
					, [WSLocalTax]
					, [WSFederalTax]
					, [WSTotalTax]
					, [BillingStatus]
					, [BilledDate]
					, [ProcessedDate]
					, [RatedToZero]
					, [ProductName]
					, [ProductNameAlt]
					FROM [dbo].[BillableLegs] {0}
				)
				SELECT
				       [ID],
				       [ConferenceID],
				       [ModeratorID],
				       [WholesalerID],
				       [ModeratorCode],
				       [PassCode],
				       [ModeratorName],
				       [Moderator],
				       [ExternalCustomerNumber],
				       [ExternalModeratorNumber],
				       [ReferenceNumber],
				       [StartTime],
				       [EndTime],
				       [ElapsedTime],
				       [BridgeID],
				       [UniqueConferenceID],
				       [AuxiliaryConferenceID],
				       [DNIS],
				       [DialNumber],
				       [ANI],
				       [ParticipantName],
				       [Destination],
				       [AccessTypeID],
				       [ConnectProductRateID],
				       [BridgeProductRateID],
				       [LDProductRateID],
				       [ProductRateTaxableValue],
				       [CustomerTaxableValue],
				       [WSTaxableValue],
				       [RetailConnectCharge],
				       [RetailBridgeRate],
				       [RetailLDRate],
				       [RetailCurrency],
				       [RetailBillingInterval],
				       [RetailTotalConnectCharge],
				       [RetailTotalBridge],
				       [RetailTotalLD],
				       [RetailTotal],
				       [RetailLocalTaxRate],
				       [RetailFederalTaxRate],
				       [RetailLocalTax],
				       [RetailFederalTax],
				       [RetailTotalTax],
				       [WSConnectCharge],
				       [WSBridgeRate],
				       [WSLDRate],
				       [WSCurrency],
				       [WSBillingInterval],
				       [WSTotalConnectCharge],
				       [WSTotalBridge],
				       [WSTotalLD],
				       [WSTotal],
				       [WSLocalTaxRate],
				       [WSFederalTaxRate],
				       [WSLocalTax],
				       [WSFederalTax],
				       [WSTotalTax],
				       [BillingStatus],
				       [BilledDate],
				       [ProcessedDate],
				       [RatedToZero],
				       [ProductName],
				       [ProductNameAlt]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[BillableLegs] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [PrimaryContactName]'
				SET @SQL = @SQL + ', [PrimaryContactPhoneNumber]'
				SET @SQL = @SQL + ', [PrimaryContactEmailAddress]'
				SET @SQL = @SQL + ', [PrimaryContactAddress1]'
				SET @SQL = @SQL + ', [PrimaryContactAddress2]'
				SET @SQL = @SQL + ', [PrimaryContactCity]'
				SET @SQL = @SQL + ', [PrimaryContactCountry]'
				SET @SQL = @SQL + ', [PrimaryContactRegion]'
				SET @SQL = @SQL + ', [PrimaryContactPostalCode]'
				SET @SQL = @SQL + ', [PrimaryContactFaxNumber]'
				SET @SQL = @SQL + ', [BillingContactName]'
				SET @SQL = @SQL + ', [BillingContactPhoneNumber]'
				SET @SQL = @SQL + ', [BillingContactEmailAddress]'
				SET @SQL = @SQL + ', [BillingContactAddress1]'
				SET @SQL = @SQL + ', [BillingContactAddress2]'
				SET @SQL = @SQL + ', [BillingContactCity]'
				SET @SQL = @SQL + ', [BillingContactCountry]'
				SET @SQL = @SQL + ', [BillingContactRegion]'
				SET @SQL = @SQL + ', [BillingContactPostalCode]'
				SET @SQL = @SQL + ', [BillingContactFaxNumber]'
				SET @SQL = @SQL + ', [WebsiteURL]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [VerticalID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingPeriodCutoff]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CreditCardNameOnCard]'
				SET @SQL = @SQL + ', [CreditCardNumber]'
				SET @SQL = @SQL + ', [CreditCardExp]'
				SET @SQL = @SQL + ', [CreditCardVerCode]'
				SET @SQL = @SQL + ', [CreditCardTypeName]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [UniqueCustomerID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebGroupID]'
				SET @SQL = @SQL + ', [AccountManagerID]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [PrimaryContactName],'
				SET @SQL = @SQL + ' [PrimaryContactPhoneNumber],'
				SET @SQL = @SQL + ' [PrimaryContactEmailAddress],'
				SET @SQL = @SQL + ' [PrimaryContactAddress1],'
				SET @SQL = @SQL + ' [PrimaryContactAddress2],'
				SET @SQL = @SQL + ' [PrimaryContactCity],'
				SET @SQL = @SQL + ' [PrimaryContactCountry],'
				SET @SQL = @SQL + ' [PrimaryContactRegion],'
				SET @SQL = @SQL + ' [PrimaryContactPostalCode],'
				SET @SQL = @SQL + ' [PrimaryContactFaxNumber],'
				SET @SQL = @SQL + ' [BillingContactName],'
				SET @SQL = @SQL + ' [BillingContactPhoneNumber],'
				SET @SQL = @SQL + ' [BillingContactEmailAddress],'
				SET @SQL = @SQL + ' [BillingContactAddress1],'
				SET @SQL = @SQL + ' [BillingContactAddress2],'
				SET @SQL = @SQL + ' [BillingContactCity],'
				SET @SQL = @SQL + ' [BillingContactCountry],'
				SET @SQL = @SQL + ' [BillingContactRegion],'
				SET @SQL = @SQL + ' [BillingContactPostalCode],'
				SET @SQL = @SQL + ' [BillingContactFaxNumber],'
				SET @SQL = @SQL + ' [WebsiteURL],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [VerticalID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingPeriodCutoff],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CreditCardNameOnCard],'
				SET @SQL = @SQL + ' [CreditCardNumber],'
				SET @SQL = @SQL + ' [CreditCardExp],'
				SET @SQL = @SQL + ' [CreditCardVerCode],'
				SET @SQL = @SQL + ' [CreditCardTypeName],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [UniqueCustomerID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebGroupID],'
				SET @SQL = @SQL + ' [AccountManagerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomer_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PrimaryContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@PrimaryContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PrimaryContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PrimaryContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PrimaryContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@PrimaryContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BillingContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BillingContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@BillingContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@BillingContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebsiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VerticalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardNameOnCard" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreditCardNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CreditCardExp" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@CreditCardVerCode" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CreditCardTypeName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UniqueCustomerId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebGroupId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccountManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Customer]
					(
					[WholesalerID]
					,[PriCustomerNumber]
					,[Description]
					,[ExternalCustomerNumber]
					,[PrimaryContactName]
					,[PrimaryContactPhoneNumber]
					,[PrimaryContactEmailAddress]
					,[PrimaryContactAddress1]
					,[PrimaryContactAddress2]
					,[PrimaryContactCity]
					,[PrimaryContactCountry]
					,[PrimaryContactRegion]
					,[PrimaryContactPostalCode]
					,[PrimaryContactFaxNumber]
					,[BillingContactName]
					,[BillingContactPhoneNumber]
					,[BillingContactEmailAddress]
					,[BillingContactAddress1]
					,[BillingContactAddress2]
					,[BillingContactCity]
					,[BillingContactCountry]
					,[BillingContactRegion]
					,[BillingContactPostalCode]
					,[BillingContactFaxNumber]
					,[WebsiteURL]
					,[SalesPersonID]
					,[VerticalID]
					,[CompanyID]
					,[CurrencyID]
					,[BillingPeriodCutoff]
					,[TaxableID]
					,[CreditCardNameOnCard]
					,[CreditCardNumber]
					,[CreditCardExp]
					,[CreditCardVerCode]
					,[CreditCardTypeName]
					,[CreatedDate]
					,[LastModified]
					,[UniqueCustomerID]
					,[Enabled]
					,[UserID]
					,[WebGroupID]
					,[AccountManagerID]
					)
				VALUES
					(
					@WholesalerId
					,@PriCustomerNumber
					,@Description
					,@ExternalCustomerNumber
					,@PrimaryContactName
					,@PrimaryContactPhoneNumber
					,@PrimaryContactEmailAddress
					,@PrimaryContactAddress1
					,@PrimaryContactAddress2
					,@PrimaryContactCity
					,@PrimaryContactCountry
					,@PrimaryContactRegion
					,@PrimaryContactPostalCode
					,@PrimaryContactFaxNumber
					,@BillingContactName
					,@BillingContactPhoneNumber
					,@BillingContactEmailAddress
					,@BillingContactAddress1
					,@BillingContactAddress2
					,@BillingContactCity
					,@BillingContactCountry
					,@BillingContactRegion
					,@BillingContactPostalCode
					,@BillingContactFaxNumber
					,@WebsiteUrl
					,@SalesPersonId
					,@VerticalId
					,@CompanyId
					,@CurrencyId
					,@BillingPeriodCutoff
					,@TaxableId
					,@CreditCardNameOnCard
					,@CreditCardNumber
					,@CreditCardExp
					,@CreditCardVerCode
					,@CreditCardTypeName
					,@CreatedDate
					,@LastModified
					,@UniqueCustomerId
					,@Enabled
					,@UserId
					,@WebGroupId
					,@AccountManagerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PrimaryContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@PrimaryContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PrimaryContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PrimaryContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PrimaryContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@PrimaryContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@PrimaryContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BillingContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@BillingContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@BillingContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BillingContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@BillingContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@WebsiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VerticalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardNameOnCard" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreditCardNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CreditCardExp" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@CreditCardVerCode" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CreditCardTypeName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UniqueCustomerId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WebGroupId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AccountManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer]
				SET
					[WholesalerID] = @WholesalerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[Description] = @Description
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[PrimaryContactName] = @PrimaryContactName
					,[PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber
					,[PrimaryContactEmailAddress] = @PrimaryContactEmailAddress
					,[PrimaryContactAddress1] = @PrimaryContactAddress1
					,[PrimaryContactAddress2] = @PrimaryContactAddress2
					,[PrimaryContactCity] = @PrimaryContactCity
					,[PrimaryContactCountry] = @PrimaryContactCountry
					,[PrimaryContactRegion] = @PrimaryContactRegion
					,[PrimaryContactPostalCode] = @PrimaryContactPostalCode
					,[PrimaryContactFaxNumber] = @PrimaryContactFaxNumber
					,[BillingContactName] = @BillingContactName
					,[BillingContactPhoneNumber] = @BillingContactPhoneNumber
					,[BillingContactEmailAddress] = @BillingContactEmailAddress
					,[BillingContactAddress1] = @BillingContactAddress1
					,[BillingContactAddress2] = @BillingContactAddress2
					,[BillingContactCity] = @BillingContactCity
					,[BillingContactCountry] = @BillingContactCountry
					,[BillingContactRegion] = @BillingContactRegion
					,[BillingContactPostalCode] = @BillingContactPostalCode
					,[BillingContactFaxNumber] = @BillingContactFaxNumber
					,[WebsiteURL] = @WebsiteUrl
					,[SalesPersonID] = @SalesPersonId
					,[VerticalID] = @VerticalId
					,[CompanyID] = @CompanyId
					,[CurrencyID] = @CurrencyId
					,[BillingPeriodCutoff] = @BillingPeriodCutoff
					,[TaxableID] = @TaxableId
					,[CreditCardNameOnCard] = @CreditCardNameOnCard
					,[CreditCardNumber] = @CreditCardNumber
					,[CreditCardExp] = @CreditCardExp
					,[CreditCardVerCode] = @CreditCardVerCode
					,[CreditCardTypeName] = @CreditCardTypeName
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[UniqueCustomerID] = @UniqueCustomerId
					,[Enabled] = @Enabled
					,[UserID] = @UserId
					,[WebGroupID] = @WebGroupId
					,[AccountManagerID] = @AccountManagerId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Customer] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByCurrencyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByAccountManagerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccountManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[AccountManagerID] = @AccountManagerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByBillingContactCountry" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillingContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[BillingContactCountry] = @BillingContactCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByBillingContactRegion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillingContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[BillingContactRegion] = @BillingContactRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByPrimaryContactCountry" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PrimaryContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[PrimaryContactCountry] = @PrimaryContactCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByPrimaryContactRegion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PrimaryContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[PrimaryContactRegion] = @PrimaryContactRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByTaxableId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByVerticalId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VerticalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[VerticalID] = @VerticalId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByWholesalerIdPriCustomerNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[SalesPersonID] = @SalesPersonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByCompanyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[CompanyID] = @CompanyId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByLastModified" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[LastModified] = @LastModified
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_GetByDnisidFromCustomer_Dnis" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Customer].[ID]
       ,dbo.[Customer].[WholesalerID]
       ,dbo.[Customer].[PriCustomerNumber]
       ,dbo.[Customer].[Description]
       ,dbo.[Customer].[ExternalCustomerNumber]
       ,dbo.[Customer].[PrimaryContactName]
       ,dbo.[Customer].[PrimaryContactPhoneNumber]
       ,dbo.[Customer].[PrimaryContactEmailAddress]
       ,dbo.[Customer].[PrimaryContactAddress1]
       ,dbo.[Customer].[PrimaryContactAddress2]
       ,dbo.[Customer].[PrimaryContactCity]
       ,dbo.[Customer].[PrimaryContactCountry]
       ,dbo.[Customer].[PrimaryContactRegion]
       ,dbo.[Customer].[PrimaryContactPostalCode]
       ,dbo.[Customer].[PrimaryContactFaxNumber]
       ,dbo.[Customer].[BillingContactName]
       ,dbo.[Customer].[BillingContactPhoneNumber]
       ,dbo.[Customer].[BillingContactEmailAddress]
       ,dbo.[Customer].[BillingContactAddress1]
       ,dbo.[Customer].[BillingContactAddress2]
       ,dbo.[Customer].[BillingContactCity]
       ,dbo.[Customer].[BillingContactCountry]
       ,dbo.[Customer].[BillingContactRegion]
       ,dbo.[Customer].[BillingContactPostalCode]
       ,dbo.[Customer].[BillingContactFaxNumber]
       ,dbo.[Customer].[WebsiteURL]
       ,dbo.[Customer].[SalesPersonID]
       ,dbo.[Customer].[VerticalID]
       ,dbo.[Customer].[CompanyID]
       ,dbo.[Customer].[CurrencyID]
       ,dbo.[Customer].[BillingPeriodCutoff]
       ,dbo.[Customer].[TaxableID]
       ,dbo.[Customer].[CreditCardNameOnCard]
       ,dbo.[Customer].[CreditCardNumber]
       ,dbo.[Customer].[CreditCardExp]
       ,dbo.[Customer].[CreditCardVerCode]
       ,dbo.[Customer].[CreditCardTypeName]
       ,dbo.[Customer].[CreatedDate]
       ,dbo.[Customer].[LastModified]
       ,dbo.[Customer].[UniqueCustomerID]
       ,dbo.[Customer].[Enabled]
       ,dbo.[Customer].[UserID]
       ,dbo.[Customer].[WebGroupID]
       ,dbo.[Customer].[AccountManagerID]
  FROM dbo.[Customer]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Customer_DNIS] 
                WHERE dbo.[Customer_DNIS].[DNISID] = @Dnisid
                  AND dbo.[Customer_DNIS].[CustomerID] = dbo.[Customer].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ExternalCustomerNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@PrimaryContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PrimaryContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@PrimaryContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@PrimaryContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PrimaryContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PrimaryContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PrimaryContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@PrimaryContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@PrimaryContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@PrimaryContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@BillingContactName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingContactPhoneNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@BillingContactEmailAddress" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@BillingContactAddress1" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingContactAddress2" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingContactCity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BillingContactCountry" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingContactRegion" type="varchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingContactPostalCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@BillingContactFaxNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@WebsiteUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VerticalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BillingPeriodCutoff" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TaxableId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreditCardNameOnCard" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreditCardNumber" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@CreditCardExp" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault="null"/>
				<parameter name="@CreditCardVerCode" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@CreditCardTypeName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UniqueCustomerId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WebGroupId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@AccountManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [PriCustomerNumber]
	, [Description]
	, [ExternalCustomerNumber]
	, [PrimaryContactName]
	, [PrimaryContactPhoneNumber]
	, [PrimaryContactEmailAddress]
	, [PrimaryContactAddress1]
	, [PrimaryContactAddress2]
	, [PrimaryContactCity]
	, [PrimaryContactCountry]
	, [PrimaryContactRegion]
	, [PrimaryContactPostalCode]
	, [PrimaryContactFaxNumber]
	, [BillingContactName]
	, [BillingContactPhoneNumber]
	, [BillingContactEmailAddress]
	, [BillingContactAddress1]
	, [BillingContactAddress2]
	, [BillingContactCity]
	, [BillingContactCountry]
	, [BillingContactRegion]
	, [BillingContactPostalCode]
	, [BillingContactFaxNumber]
	, [WebsiteURL]
	, [SalesPersonID]
	, [VerticalID]
	, [CompanyID]
	, [CurrencyID]
	, [BillingPeriodCutoff]
	, [TaxableID]
	, [CreditCardNameOnCard]
	, [CreditCardNumber]
	, [CreditCardExp]
	, [CreditCardVerCode]
	, [CreditCardTypeName]
	, [CreatedDate]
	, [LastModified]
	, [UniqueCustomerID]
	, [Enabled]
	, [UserID]
	, [WebGroupID]
	, [AccountManagerID]
    FROM
	[dbo].[Customer]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([PrimaryContactName] = @PrimaryContactName OR @PrimaryContactName IS NULL)
	AND ([PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber OR @PrimaryContactPhoneNumber IS NULL)
	AND ([PrimaryContactEmailAddress] = @PrimaryContactEmailAddress OR @PrimaryContactEmailAddress IS NULL)
	AND ([PrimaryContactAddress1] = @PrimaryContactAddress1 OR @PrimaryContactAddress1 IS NULL)
	AND ([PrimaryContactAddress2] = @PrimaryContactAddress2 OR @PrimaryContactAddress2 IS NULL)
	AND ([PrimaryContactCity] = @PrimaryContactCity OR @PrimaryContactCity IS NULL)
	AND ([PrimaryContactCountry] = @PrimaryContactCountry OR @PrimaryContactCountry IS NULL)
	AND ([PrimaryContactRegion] = @PrimaryContactRegion OR @PrimaryContactRegion IS NULL)
	AND ([PrimaryContactPostalCode] = @PrimaryContactPostalCode OR @PrimaryContactPostalCode IS NULL)
	AND ([PrimaryContactFaxNumber] = @PrimaryContactFaxNumber OR @PrimaryContactFaxNumber IS NULL)
	AND ([BillingContactName] = @BillingContactName OR @BillingContactName IS NULL)
	AND ([BillingContactPhoneNumber] = @BillingContactPhoneNumber OR @BillingContactPhoneNumber IS NULL)
	AND ([BillingContactEmailAddress] = @BillingContactEmailAddress OR @BillingContactEmailAddress IS NULL)
	AND ([BillingContactAddress1] = @BillingContactAddress1 OR @BillingContactAddress1 IS NULL)
	AND ([BillingContactAddress2] = @BillingContactAddress2 OR @BillingContactAddress2 IS NULL)
	AND ([BillingContactCity] = @BillingContactCity OR @BillingContactCity IS NULL)
	AND ([BillingContactCountry] = @BillingContactCountry OR @BillingContactCountry IS NULL)
	AND ([BillingContactRegion] = @BillingContactRegion OR @BillingContactRegion IS NULL)
	AND ([BillingContactPostalCode] = @BillingContactPostalCode OR @BillingContactPostalCode IS NULL)
	AND ([BillingContactFaxNumber] = @BillingContactFaxNumber OR @BillingContactFaxNumber IS NULL)
	AND ([WebsiteURL] = @WebsiteUrl OR @WebsiteUrl IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([VerticalID] = @VerticalId OR @VerticalId IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([BillingPeriodCutoff] = @BillingPeriodCutoff OR @BillingPeriodCutoff IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([CreditCardNameOnCard] = @CreditCardNameOnCard OR @CreditCardNameOnCard IS NULL)
	AND ([CreditCardNumber] = @CreditCardNumber OR @CreditCardNumber IS NULL)
	AND ([CreditCardExp] = @CreditCardExp OR @CreditCardExp IS NULL)
	AND ([CreditCardVerCode] = @CreditCardVerCode OR @CreditCardVerCode IS NULL)
	AND ([CreditCardTypeName] = @CreditCardTypeName OR @CreditCardTypeName IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([UniqueCustomerID] = @UniqueCustomerId OR @UniqueCustomerId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([WebGroupID] = @WebGroupId OR @WebGroupId IS NULL)
	AND ([AccountManagerID] = @AccountManagerId OR @AccountManagerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [PriCustomerNumber]
	, [Description]
	, [ExternalCustomerNumber]
	, [PrimaryContactName]
	, [PrimaryContactPhoneNumber]
	, [PrimaryContactEmailAddress]
	, [PrimaryContactAddress1]
	, [PrimaryContactAddress2]
	, [PrimaryContactCity]
	, [PrimaryContactCountry]
	, [PrimaryContactRegion]
	, [PrimaryContactPostalCode]
	, [PrimaryContactFaxNumber]
	, [BillingContactName]
	, [BillingContactPhoneNumber]
	, [BillingContactEmailAddress]
	, [BillingContactAddress1]
	, [BillingContactAddress2]
	, [BillingContactCity]
	, [BillingContactCountry]
	, [BillingContactRegion]
	, [BillingContactPostalCode]
	, [BillingContactFaxNumber]
	, [WebsiteURL]
	, [SalesPersonID]
	, [VerticalID]
	, [CompanyID]
	, [CurrencyID]
	, [BillingPeriodCutoff]
	, [TaxableID]
	, [CreditCardNameOnCard]
	, [CreditCardNumber]
	, [CreditCardExp]
	, [CreditCardVerCode]
	, [CreditCardTypeName]
	, [CreatedDate]
	, [LastModified]
	, [UniqueCustomerID]
	, [Enabled]
	, [UserID]
	, [WebGroupID]
	, [AccountManagerID]
    FROM
	[dbo].[Customer]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([PrimaryContactName] = @PrimaryContactName AND @PrimaryContactName is not null)
	OR ([PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber AND @PrimaryContactPhoneNumber is not null)
	OR ([PrimaryContactEmailAddress] = @PrimaryContactEmailAddress AND @PrimaryContactEmailAddress is not null)
	OR ([PrimaryContactAddress1] = @PrimaryContactAddress1 AND @PrimaryContactAddress1 is not null)
	OR ([PrimaryContactAddress2] = @PrimaryContactAddress2 AND @PrimaryContactAddress2 is not null)
	OR ([PrimaryContactCity] = @PrimaryContactCity AND @PrimaryContactCity is not null)
	OR ([PrimaryContactCountry] = @PrimaryContactCountry AND @PrimaryContactCountry is not null)
	OR ([PrimaryContactRegion] = @PrimaryContactRegion AND @PrimaryContactRegion is not null)
	OR ([PrimaryContactPostalCode] = @PrimaryContactPostalCode AND @PrimaryContactPostalCode is not null)
	OR ([PrimaryContactFaxNumber] = @PrimaryContactFaxNumber AND @PrimaryContactFaxNumber is not null)
	OR ([BillingContactName] = @BillingContactName AND @BillingContactName is not null)
	OR ([BillingContactPhoneNumber] = @BillingContactPhoneNumber AND @BillingContactPhoneNumber is not null)
	OR ([BillingContactEmailAddress] = @BillingContactEmailAddress AND @BillingContactEmailAddress is not null)
	OR ([BillingContactAddress1] = @BillingContactAddress1 AND @BillingContactAddress1 is not null)
	OR ([BillingContactAddress2] = @BillingContactAddress2 AND @BillingContactAddress2 is not null)
	OR ([BillingContactCity] = @BillingContactCity AND @BillingContactCity is not null)
	OR ([BillingContactCountry] = @BillingContactCountry AND @BillingContactCountry is not null)
	OR ([BillingContactRegion] = @BillingContactRegion AND @BillingContactRegion is not null)
	OR ([BillingContactPostalCode] = @BillingContactPostalCode AND @BillingContactPostalCode is not null)
	OR ([BillingContactFaxNumber] = @BillingContactFaxNumber AND @BillingContactFaxNumber is not null)
	OR ([WebsiteURL] = @WebsiteUrl AND @WebsiteUrl is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([VerticalID] = @VerticalId AND @VerticalId is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([BillingPeriodCutoff] = @BillingPeriodCutoff AND @BillingPeriodCutoff is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([CreditCardNameOnCard] = @CreditCardNameOnCard AND @CreditCardNameOnCard is not null)
	OR ([CreditCardNumber] = @CreditCardNumber AND @CreditCardNumber is not null)
	OR ([CreditCardExp] = @CreditCardExp AND @CreditCardExp is not null)
	OR ([CreditCardVerCode] = @CreditCardVerCode AND @CreditCardVerCode is not null)
	OR ([CreditCardTypeName] = @CreditCardTypeName AND @CreditCardTypeName is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([UniqueCustomerID] = @UniqueCustomerId AND @UniqueCustomerId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([WebGroupID] = @WebGroupId AND @WebGroupId is not null)
	OR ([AccountManagerID] = @AccountManagerId AND @AccountManagerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [PriCustomerNumber]
					, [Description]
					, [ExternalCustomerNumber]
					, [PrimaryContactName]
					, [PrimaryContactPhoneNumber]
					, [PrimaryContactEmailAddress]
					, [PrimaryContactAddress1]
					, [PrimaryContactAddress2]
					, [PrimaryContactCity]
					, [PrimaryContactCountry]
					, [PrimaryContactRegion]
					, [PrimaryContactPostalCode]
					, [PrimaryContactFaxNumber]
					, [BillingContactName]
					, [BillingContactPhoneNumber]
					, [BillingContactEmailAddress]
					, [BillingContactAddress1]
					, [BillingContactAddress2]
					, [BillingContactCity]
					, [BillingContactCountry]
					, [BillingContactRegion]
					, [BillingContactPostalCode]
					, [BillingContactFaxNumber]
					, [WebsiteURL]
					, [SalesPersonID]
					, [VerticalID]
					, [CompanyID]
					, [CurrencyID]
					, [BillingPeriodCutoff]
					, [TaxableID]
					, [CreditCardNameOnCard]
					, [CreditCardNumber]
					, [CreditCardExp]
					, [CreditCardVerCode]
					, [CreditCardTypeName]
					, [CreatedDate]
					, [LastModified]
					, [UniqueCustomerID]
					, [Enabled]
					, [UserID]
					, [WebGroupID]
					, [AccountManagerID]
					FROM [dbo].[Customer] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [PriCustomerNumber],
				       [Description],
				       [ExternalCustomerNumber],
				       [PrimaryContactName],
				       [PrimaryContactPhoneNumber],
				       [PrimaryContactEmailAddress],
				       [PrimaryContactAddress1],
				       [PrimaryContactAddress2],
				       [PrimaryContactCity],
				       [PrimaryContactCountry],
				       [PrimaryContactRegion],
				       [PrimaryContactPostalCode],
				       [PrimaryContactFaxNumber],
				       [BillingContactName],
				       [BillingContactPhoneNumber],
				       [BillingContactEmailAddress],
				       [BillingContactAddress1],
				       [BillingContactAddress2],
				       [BillingContactCity],
				       [BillingContactCountry],
				       [BillingContactRegion],
				       [BillingContactPostalCode],
				       [BillingContactFaxNumber],
				       [WebsiteURL],
				       [SalesPersonID],
				       [VerticalID],
				       [CompanyID],
				       [CurrencyID],
				       [BillingPeriodCutoff],
				       [TaxableID],
				       [CreditCardNameOnCard],
				       [CreditCardNumber],
				       [CreditCardExp],
				       [CreditCardVerCode],
				       [CreditCardTypeName],
				       [CreatedDate],
				       [LastModified],
				       [UniqueCustomerID],
				       [Enabled],
				       [UserID],
				       [WebGroupID],
				       [AccountManagerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Customer] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Customer_Omnovia_GetCompanyLogin"  skip="true">
			<comment><![CDATA[]]></comment>
			<parameters>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select co.cid as cID,co.cpw as cPW from launchdb.dbo.company co inner join customer
		on customer.companyid=co.id where customer.id=@OmnoviaCustomerID
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_InstallDefaults"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: This procedure copies the default items from the Wholesaler to setup the Customer.
NOTE: The Customer must first be added to the system.
Examples: 

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

-- Look up Currency as rates are only added for the specific currency
Declare @SellRateCurrencyID as varchar(3), @WholesalerID char(10)
SELECT @SellRateCurrencyID=CurrencyID,@WholesalerID=WholesalerID From Customer Where ID = @ID

DECLARE @CustomerID int
SET @CustomerID = @ID --makes it easier to understand SP

BEGIN TRANSACTION
/*	
	Business Rules added to support the copying of new Rates and Features
	for the Customer from its parent Wholesaler only for the Currency specified. 
	This is done for each Wholesaler Product ie. Wholesaler_Product
*/

	--Insert Rates for each Product of the Wholesaler
		INSERT INTO [ProductRateValue] ([ProductRateID],[SellRate],[SellRateCurrencyID],[BuyRate],[BuyRateCurrencyID],[DefaultOption],[StartDate],[WholesalerID],[CustomerID])
		SELECT [ProductRateValueProductRateID],[ProductRateValueSellRate],[ProductRateValueSellRateCurrencyID],[ProductRateValueBuyRate]
		,[ProductRateValueBuyRateCurrencyID],0 AS[DefaultOption],[ProductRateValueStartDate],[WholesalerID],@CustomerID AS [CustomerID]
		FROM vw_ProductRatesForWholesaler
		WHERE     (Wholesaler_ProductEnabled = 1) AND (ProductRateValueSellRateCurrencyID = @SellRateCurrencyID) AND (WholesalerID = @WholesalerID)
		IF (@@ERROR <> 0)
			GOTO RollBackTrans
	--Copy the FeatureOptions from the Customer_Products_Features table for each Product if there are any Features
		INSERT INTO Customer_Feature ([CustomerID], [FeatureID],[FeatureOptionID],[Enabled],[FeatureOptionValue])
		SELECT @CustomerID AS [CustomerID], Wholesaler_Product_Feature.[FeatureID],Wholesaler_Product_Feature.[FeatureOptionID],Wholesaler_Product_Feature.[Enabled],Wholesaler_Product_Feature.[FeatureOptionValue]
		FROM dbo.Wholesaler_Product_Feature (NOLOCK) INNER JOIN dbo.Wholesaler_Product (NOLOCK) ON dbo.Wholesaler_Product_Feature.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
		WHERE WholesalerID = @WholesalerID

	-- Copy Default DNIS information over, ensures there is only one DNIS per DNISType.
		INSERT INTO Customer_DNIS
		SELECT DISTINCT MIN(DNIS.ID) AS DNISID, @CustomerID AS CustomerID
		FROM	DNIS WITH (NOLOCK) 
		WHERE   (DNIS.DefaultOption = 1) AND (DNIS.Enabled = 1) AND (WholesalerID = @WholesalerID)
		GROUP BY DNISTypeID
		IF (@@ERROR <> 0)
			GOTO RollBackTrans

GOTO CommitTrans
RollBackTrans:
CLOSE WSCursor
DEALLOCATE WSCursor
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetProductRates"  skip="true">
			<comment><![CDATA[/*
 Returns the Products and Rates for the Customer
Examples:
	EXEC p_Customer_GetProductRates 8
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT ProductRateValueID, CustomerID, Wholesaler_ProductName, ProductTypeDisplayName, ProductRateValueSellRate
		, ProductRateValueSellRateCurrencyID,ProductRateValueBuyRate, ProductRateValueBuyRateCurrencyID, ProductRateDisplayName
		, ProductRateDescription, ProductRateTypeDisplayName, ProductRateID
	FROM         dbo.vw_ProductRatesForCustomer
	WHERE     (CustomerID = @CustomerID) AND (Wholesaler_ProductEnabled = 1)
	ORDER BY Wholesaler_ProductDisplayOrder, ProductRateTypeDisplayOrder, ProductRateDisplayOrder, ProductRateDisplayName



			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetSeeVoghOverageCharges"  skip="true">
			<comment><![CDATA[/**********************************************************
Purpose: Get the SeeVogh Overage data used for reporting the charges.
Remarks:
The SeeVogh overages amounts are calculated in the SP dbo.p_UTIL_UpdateSeeVoghOverageData - this adds the basic information for a day and the number of concurrent participants per customer
and the billing process is done by: [p_UTIL_ProcessSeeVoghOverageCharges]
History:
JS: Nov/2014 - Created
JS: Nov/2014 - updates, get minutes from RatedCDRS for the Customer (both Per Port or Min.);
	- use raw CDR minutes, remove fields not being used:
	CustomerID,  (redundant, see query parameter), AllowedPorts,  (redundant, see monthly summary), BillingMethod,   (redundant, see monthly summary)
	MonthlyCost,  (redundant, see monthly summary), PortCost, (redundant, see monthly summary), Ranking (not used)
NOTES:
Select * From RAWCDRS.dbo.SeeVoghOverage
Examples: 
	EXEC [p_Customer_GetSeeVoghOverageCharges] @CustomerID = 8, @BilledDate = 'Oct 1 2014'
	EXEC [p_Customer_GetSeeVoghOverageCharges] @CustomerID = 8, @BilledDate = 'Sep 1 2014'
	EXEC p_Customer_GetSeeVoghOverageCharges @CustomerID = 2163, @BilledDate = 'Oct 1 2014'
	EXEC p_Customer_GetSeeVoghOverageCharges @CustomerID = 2216, @BilledDate = 'Oct 1 2014'
**********************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT OFF;
	DECLARE @StartDate datetime, @EndDate datetime
	SET @StartDate = @BilledDate
	SET @EndDate = DATEADD(second,-1,DATEADD(Month,1,@BilledDate))
/*
	PRINT @StartDate 
	PRINT @EndDate
*/	
	IF @StartDate IS NULL OR @EndDate IS NULL
	BEGIN
		PRINT 'Error: Need to pass in billing dates'
		RETURN -1
	END
	-- Get the data
	SELECT SOR.ID, SOR.MeetingDate, SOR.MaxConcurrentParticipants, SOR.OverageMultiplier, SOR.TransactionAmount, SOR.Billed, 
	ISNULL(T1.TotalMinutes,0) AS TotalMinutes
	--,*
	FROM RAWCDRS.dbo.SeeVoghOverage AS SOR LEFT JOIN 
		--Create derived table for Total Minute Calculation as it needs to match billed minutes and not raw minutes
		(SELECT CustomerID
		,CAST(CONFDB.dbo.fn_FormatDate(ConferenceStartTime, 'yyyy-mm-dd') AS DATETIME) AS MeetingDate
		,(SUM(ElapsedTime) / 60) AS TotalMinutes
		FROM RatedCDR (NOLOCK)
		WHERE CustomerID = @CustomerID AND BridgeID = 9
			AND CAST(CONFDB.dbo.fn_FormatDate(ConferenceStartTime, 'yyyy-mm-dd') AS DATETIME) BETWEEN @StartDate AND @EndDate
		GROUP BY CustomerID,CAST(CONFDB.dbo.fn_FormatDate(ConferenceStartTime, 'yyyy-mm-dd') AS DATETIME)
		) AS T1 
	ON SOR.CustomerID = T1.CustomerID AND SOR.MeetingDate = T1.MeetingDate
	WHERE SOR.CustomerID = @CustomerID AND SOR.MeetingDate BETWEEN @StartDate AND @EndDate
	ORDER BY SOR.MeetingDate
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_UpdateDNIS"  skip="true">
			<comment><![CDATA[
/* =============================================
	Updates the Customer_DNIS table for the Customer based on the DNISTypeID.
NOTE: Added the functionality to push the set down to all moderators.

Example:
	Select * from DNIS inner join customer_dnis on dnis.id = customer_dnis.dnisid
	Select * from DNIS inner join moderator_dnis on dnis.id = moderator_dnis.dnisid
	EXEC p_DNIS_GetByWholesalerIdDDL '0000000001'

	EXEC p_Customer_UpdateDNIS @CustomerID=14, @DNISID=20, @DNISTypeID=1
	--EXEC p_Customer_UpdateDNIS @CustomerID=14, @DNISID=20, @DNISTypeID=1,@UpdateModerators=1

*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DNISID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DNISTypeID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UpdateModerators" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN

	UPDATE Customer_DNIS SET DNISID=@DNISID
	FROM Customer_DNIS INNER JOIN DNIS ON DNIS.ID = Customer_DNIS.DNISID
	WHERE DNIS.DNISTypeID = @DNISTypeID AND Customer_DNIS.CustomerID = @CustomerID

	IF @UpdateModerators = 1
	BEGIN
		--Update all of the Modertors to match
		UPDATE Moderator_DNIS SET DNISID=@DNISID
		FROM Moderator_DNIS INNER JOIN DNIS ON DNIS.ID = Moderator_DNIS.DNISID
			INNER JOIN Moderator ON Moderator.ID = Moderator_DNIS.ModeratorID
		WHERE DNIS.DNISTypeID = @DNISTypeID AND Moderator.CustomerID = @CustomerID
	END

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_Omnovia_addArchiveDetails"  skip="true">
			<comment><![CDATA[
/*
DESCRIPTION

NOTE
CUSTOMER ID and MODERATOR ID are not always linked
For managed event, particularly for Hybrid (webinar + teleconference), in order to avoid extra "teleconference",
Redback managed event team configures managed Event with moderator that is configured under Redback internal customer 
(NOT moderator under real Customer account).
For example: in EventRego, Company: Television Education Network	(NOTE: Customer Admin: 2087 - Television Education Network)
						   Moderator: Moderator Code: 30893091 | Participant Code: 31558181 (NOTE: 8 - Customer Admin: Redback Internal Use)

The reason is, we don't want it to show extra "teleconference" charges for managed event.
25/6/2015 Additional note for managed event, for a managed webinar-only event (non hybrid),
Redback managed event team use customer's moderator code and flag the event as managed event (is_managed=1). 
Do not charged when Event's is_managed=1.

FOR AMP, we use CustomerID to let customer admin to see their recast activity
FOR Billing, we use ModeratorID

LOG
2015/02/23 | Topo | ADD | Init
2015/04/14 | Topo | MOD | use both movieid and omnoviacusomerid check to avoid duplicate
2015/04/22 | Topo | MOD | host all recordings
2015/04/29 | Topo | MOD | remove @ArchiveID parameter and add @ArchiveHostedID
2015/05/01 | Topo | FIX | fix Moderator
2015/05/11 | Topo | FIX | change to 30 days expiry instead of 1 month
2015/05/19 | Topo | ADD | track event_id field for recast from Event webinar (not day to day conference)
2015/05/21 | Topo | FIX | fix for Event, use LaunchDB.dbo.EVENT [Company_id] field to find Redback Customer ID
							  for day to day, use [Moderator] table to find Redback Customer ID
2015/05/27 | Topo | FIX | set @RedbackCustomerID to @OmnoviaCustomerID for day to day conference
2015/05/28 | Topo | FIX | remove redbackcustomerid and omnoviacompanyid
						  update descriptions
2015/06/15 | JS   | ADD | added logic to bill ReCast recordings when created
2015/06/25 | Topo | FIX | dont charge for managed event (when is_managed=1)

*/
]]></comment>
			<parameters>
				<parameter name="@MovieID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieTitle" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RoomID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieDateAdded" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@MovieLength" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoomName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CompanyShortLink" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ArchiveHostedID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @HostedShortLink as varchar(20), @HostedLinkAlias as varchar(20)
	DECLARE @EventID int, @IsManagedEvent int
	SET @EventID=NULL

	SET @HostedLinkAlias=''
	SET @HostedShortLink=''

	DECLARE @tempmovieid as int
	SET @tempmovieid=0
	SELECT @tempmovieid=movieid from OmnoviaHostedArchive where movieid=@MovieID and omnoviacustomerid=@omnoviacustomerid

	--Avoid Duplicate
	if @tempmovieid > 0 
		RETURN

	SET @ModeratorID=NULL

	--get moderator id using Omnovia's roomID
	--find in moderator table for day to day conference 	
	SELECT Top 1 @ModeratorID=m.id from moderator m 
			inner join launchdb.dbo.room r on m.omnovia_room_id=r.id 
			inner join customer cust on r.company_id=cust.companyid
			where r.rid=@RoomID

	--find in launchdb.dbo.room table for Event
	if @ModeratorID is null
	BEGIN
		--omnovia rooms for moderator
		SELECT top 1 @ModeratorID=e.moderator_id, @HostedLinkAlias=e.customid, @EventID=e.id, @IsManagedEvent=e.is_managed
			FROM launchdb.dbo.[event] e
				 INNER JOIN launchdb.dbo.room r on e.room_id=r.id 
			WHERE r.rid=@RoomID
	END	

	BEGIN TRANSACTION
		SET @HostedShortLink = dbo.[fn_GetOmnoviaUniqueHostedRecordingURLShortened](5)
		
		DECLARE @HostingPeriod as int 
		SET @HostingPeriod = 30 -- 30 days
		INSERT INTO OmnoviaHostedArchive(OmnoviaCustomerID,ModeratorID,MovieID,MovieDateAdded,MovieDate,MovieLength, RoomName, MovieRoomID, MovieTitle, CompanyShortLink, HostedLinkShortened, HostedLinkAlias, HostedLinkExpiryDate,HostingPeriod, event_id) 
			VALUES (@OmnoviaCustomerID, @ModeratorID, @MovieID, @MovieDateAdded, @MovieDate, @MovieLength, @RoomName, @RoomID, @MovieTitle,@CompanyShortLink, @HostedShortLink, @HostedLinkAlias, dateadd(day,@HostingPeriod, @MovieDateAdded),@HostingPeriod, @EventID )

		SET @ArchiveHostedID =@@Identity
		
		--Add to Action Queue for Billing, start billing after July 1/2015
		DECLARE @StartBillingDate datetime
		SELECT @StartBillingDate = CAST('jul 1 2015' as datetime)
		IF GETDATE() >= @StartBillingDate
		BEGIN
		   IF (IsNull(@IsManagedEvent,0)=0 AND -- If NOT a managed event
			   ((@MovieLength /60) >= 10))	   -- Bill if greater than 10 mins
		   BEGIN
			  EXEC dbo.usp_ActionInsert @ActionTypeID = 11, @ActionFrom = 'p_Customer_Omnovia_addArchiveDetails',@ExtraInfo = @ArchiveHostedID
		   END
		END
	COMMIT
END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetSeeVoghMonthlySummary"  skip="true">
			<comment><![CDATA[/**********************************************************
Purpose: Get the SeeVogh Monthly Summary data used for reporting the charges.
Remarks:
The SeeVogh overages amounts are calculated in the SP dbo.p_UTIL_UpdateSeeVoghOverageData - this adds the basic information for a day and the number of concurrent participants per customer
and the billing process is done by: [p_UTIL_ProcessSeeVoghOverageCharges]
History:
JS: Nov/2014 - Created
JS: Nov/2014 - updated, fix charges and minutes for Per Port customer,
	- remove the following fields
	CustomerID, (redundant, see query parameter)
	MeetingDate, (redundant, see query parameter)
	TotalMinutes, (redundant, TotalVideoMinutes)
	Ranking (not used)
JS: May 7/2015 - Added fix to return the monthly costs regardless of no usage

NOTES:
Select * From RAWCDRS.dbo.SeeVoghOverage
Examples: 
	EXEC [p_Customer_GetSeeVoghMonthlySummary] @CustomerID = 8, @BilledDate = 'Sep 1 2014'
	EXEC [p_Customer_GetSeeVoghMonthlySummary] @CustomerID = 8, @BilledDate = 'Oct 1 2014'
	EXEC [p_Customer_GetSeeVoghMonthlySummary] @CustomerID = 2163, @BilledDate = 'Oct 1 2014'
	EXEC [p_Customer_GetSeeVoghMonthlySummary] @CustomerID = 2216, @BilledDate = 'apr 1 2015'
**********************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BilledDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT OFF;
	DECLARE @StartDate datetime, @EndDate datetime, @TotalVideoMinutes int, @TotalVideoChages decimal(9,2),@BillingMethod varchar(50)
	SET @StartDate = @BilledDate
	SET @EndDate = DATEADD(second,-1,DATEADD(Month,1,@BilledDate))
	
	IF @StartDate IS NULL OR @EndDate IS NULL
	BEGIN
		PRINT 'Error: Need to pass in billing dates'
		RETURN -1
	END
	--For the period, get the setting for the Customer, i.e. Per Port or Per Minute
	SELECT TOP 1 @BillingMethod = [BillingMethod] 
	FROM [RAWCDRS].[dbo].[SeeVoghOverage] 
	WHERE CustomerID = @CustomerID AND MeetingDate BETWEEN @StartDate AND @EndDate
	IF ISNULL(@BillingMethod,'') = ''
	BEGIN
		SELECT @BillingMethod = dbo.fn_GetCustomerFeatureOptionName(@CustomerID,3,84) --[BillingMethod]
	END 
	
	IF @BillingMethod = 'PerPort'
	BEGIN
		-- Get the Total Video charges for Per Port
		SELECT @TotalVideoChages = SUM(TransactionAmount)
		FROM InvoiceCharges LEFT OUTER JOIN vw_ProductRatesForCustomer ON dbo.InvoiceCharges.CustomerID = vw_ProductRatesForCustomer.CustomerID
			AND InvoiceCharges.ProductRateID = vw_ProductRatesForCustomer.ProductRateID
		WHERE InvoiceCharges.CustomerID = @CustomerID AND InvoiceCharges.StartDate = @BilledDate 
		AND InvoiceCharges.CustomerTransactionTypeID = 6 AND vw_ProductRatesForCustomer.ProductID = 3 -- Video Conferencing (or use name?)
		
		-- Get the Total Minutes for Per Port
		SELECT @TotalVideoMinutes = (SUM(ElapsedTime) / 60)
		FROM RatedCDR (NOLOCK)
		WHERE CustomerID = @CustomerID AND ConferenceStartTime BETWEEN @StartDate AND @EndDate AND BridgeID = 9 -- Video bridge
	END
	ELSE
	BEGIN
		-- Get the Total Video charges and minutes for Per Minute
		SELECT @TotalVideoMinutes = (SUM(ElapsedTimeSeconds)/60), @TotalVideoChages = SUM(TransactionAmount)
		--SELECT (SUM(ElapsedTimeSeconds)/60) AS TotalVideoMinutes, SUM(TransactionAmount) AS TotalVideoCharges
		FROM CONFDB.dbo.vw_InvoiceChargesBridgeVideo WHERE  CustomerID = @CustomerID AND StartDate = @BilledDate
	END
	-- Return the data
	IF EXISTS(SELECT 1 FROM RAWCDRS.dbo.SeeVoghOverage
		WHERE CustomerID = @CustomerID AND MeetingDate BETWEEN @StartDate AND @EndDate AND Ranking = 1)
	BEGIN
		SELECT [ID],[MaxConcurrentParticipants],[AllowedPorts],[OveragePorts],[MonthlyCost],[PortCost],[OverageMultiplier]
			,[TransactionAmount],[Billed],[BillingMethod]
			,ISNULL(@TotalVideoMinutes,0) AS TotalVideoMinutes, ISNULL(@TotalVideoChages,0.00) AS TotalVideoCharges
			,(CASE WHEN ISNULL(OveragePorts,0) = 0 THEN '' ELSE 
				CAST(ISNULL(OveragePorts,0) as varchar(10)) + ' Ports X $' + CAST(CAST(ISNULL(PortCost,0) * ISNULL(OverageMultiplier,0.00) AS money) as varchar(20)) + ' = $' + CAST(ISNULL(TransactionAmount,'') AS varchar(10))
				END) AS [OverageCalculationDescription]
		FROM RAWCDRS.dbo.SeeVoghOverage
		WHERE CustomerID = @CustomerID AND MeetingDate BETWEEN @StartDate AND @EndDate AND Ranking = 1
		ORDER BY MeetingDate
	END
	ELSE
	BEGIN
		--Return just the charges, no usage
		SELECT -1 AS [ID], 0 AS [MaxConcurrentParticipants],
			--NumberofPorts (AllowedPorts) 
			ISNULL(dbo.fn_GetCustomerFeatureOptionValue(@CustomerID,3,85),0) AS [AllowedPorts], 
			0 AS [OveragePorts],ISNULL(@TotalVideoChages,0.00) AS [MonthlyCost],0 AS [PortCost], 
			dbo.fn_GetCustomerFeatureOptionValue(@CustomerID,3,86) AS [OverageMultiplier]
			,0.00 AS[TransactionAmount], 0 AS[Billed], @BillingMethod AS [BillingMethod]
			,ISNULL(@TotalVideoMinutes,0) AS TotalVideoMinutes, ISNULL(@TotalVideoChages,0.00) AS TotalVideoCharges
			,'' AS [OverageCalculationDescription]
	END
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_Omnovia_GetRecordings"  skip="true">
			<comment><![CDATA[/*
DESCRIPTION


LOG
2015/02/23 | Topo | ADD | Init
2015/03/27 | Topo | FIX | Make sure that hosted links are returned (even when archive cache records are removed)
2015/04/09 | Topo | ADD | Add moderator and conference name
2015/04/20 | Topo | MOD | remove cache table OmnoviaArchive, all recordings are hosted, use OmnoviaHostedArchive only
					ADD | isMP4Requested field
2015/04/28 | Topo | MOD | rename isMP3Requested to mp4RequestID
2015/05/05 | Topo | FIX | remove expired mp4
2015/05/05 | Topo | FIX | set mp4DownloadUrl='' for expired mp4
2015/05/15 | Topo | ADD | Participant counter
2015/05/19 | Topo | ADD | event custom id and event title for Event webinar
2015/05/28 | Topo | FIX | replace RedbackCustomerID to OmnoviaCustomerID

example
[p_Customer_Omnovia_GetRecordings] 240
[p_Customer_Omnovia_GetRecordings] 8
 */
]]></comment>
			<parameters>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT conferenceName=m.description,moderatorName=u.displayname,hostedId=a.id, title=a.MovieTitle,movieDateAdded=a.MovieDateAdded,roomName=a.RoomName,movieLength=a.MovieLength, 
			movieDate=a.MovieDate, url=a.HostedLinkShortened, urlAlias=isnull(a.HostedLinkAlias,''), 
			urlExpiry=a.HostedLinkExpiryDate, mp4RequestID=mp4.id, mp4DownloadUrl=CASE WHEN mp4.OmnoviaHostedUrlExpiryDate>getdate() then mp4.OmnoviaHostedURL
																					   ELSE ''
																				  END,
			numOfParticipant=(SELECT count(*) FROM OmnoviaHostedArchiveParticipant WHERE HostedArchiveID=a.id),
			eventCustomID=e.customid, eventTitle=e.title
			FROM OmnoviaHostedArchive a 
				inner join moderator m on a.moderatorid = m.id
				inner join [user] u on u.userid=m.userid
				left join (select * from [OmnoviaMP4Request] where OmnoviaHostedURLExpiryDate > getdate() or OmnoviaHostedURLExpiryDate is null) mp4 on mp4.hostedID=a.id
				left join launchdb.dbo.event e on a.event_id = e.id
		WHERE a.OmnoviaCustomerID = @OmnoviaCustomerID --and mp4.OmnoviaHostedURLExpiryDate > getdate()
	order by MovieDateAdded 

END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_DisableCustomer"  skip="true">
			<comment><![CDATA[/* ================================================
Purpose: To disable the Customer and all Moderators in a controlled 
	way.

Examples:
	select * from [user]
	select * from customer
	EXEC p_Customer_DisableCustomer @CustomerID=
 ================================================*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--Disable all Mods, Users, and Customer record(s).
	UPDATE Moderator SET Enabled = 0 WHERE CustomerID = @CustomerID
	--Disable all Users pointing to the Moderators of the Customer and the Customer user login
	UPDATE [User] SET Enabled = 0 WHERE UserID IN (SELECT UserID FROM Moderator WHERE CustomerID = @CustomerID) 
	UPDATE [User] SET Enabled = 0 WHERE UserID IN (SELECT UserID FROM Customer WHERE ID = @CustomerID) 
	--Disable the Customer record
	UPDATE Customer SET Enabled = 0 WHERE ID = @CustomerID	
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetRecordingRates"  skip="true">
			<comment><![CDATA[/*
 Returns the Recording Rates for the Customer
Examples:
	EXEC [p_Customer_GetRecordingRates] 8
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     Wholesaler_ProductName, ProductRateValueID, ProductRateID, ProductRateProductID, ProductRateValueSellRate, 
	ProductRateValueSellRateCurrencyID, ProductRateName, ProductRateDisplayName, ProductRateDescription
	FROM         dbo.vw_ProductRatesForCustomer
	WHERE     (CustomerID = @CustomerID) AND ProductRateID IN (245,626,627,628)
	ORDER BY ProductRateDisplayName

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetBalanceInfoDataSet"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Returns the Customers balance owing along with some other info. 

Returns: Only a DataSet as it is easier to use from the Client Teir.

Example: 
select * from Customer

	EXEC [p_Customer_GetBalanceInfoDataSet] @WholesalerID='0000000001',@CustomerID=14
	EXEC [p_Customer_GetBalanceInfoDataSet] @WholesalerID='0000000001',@CustomerID=8

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


	Declare @CurrencyID char(3), @CurrentBalance decimal(10,2)

--Get the current balance for the account
	--IF nothing is passed in then return nothing so that the wrong user information is not returned
	IF @CustomerID IS NULL AND @PriCustomerNumber IS NULL
	BEGIN
		SET @CustomerID = 0
	END
	-- Set CustomerID and PriCustomerNumber
	SELECT @CustomerID = Customer.ID, @PriCustomerNumber = PriCustomerNumber, @CurrencyID = CurrencyID
	FROM Customer
	WHERE
		(@CustomerID is null OR Customer.ID = @CustomerID) AND
		(@PriCustomerNumber is null OR Customer.PriCustomerNumber = @PriCustomerNumber)
		AND (WholesalerID = @WholesalerID)
		
	-- Set the Customers current balance
	SET @CurrentBalance = 0.00
	SELECT    TOP 1 @CurrentBalance = ISNULL(CustomerTransaction.CustomerBalance, 0.00)
	FROM        CustomerTransaction INNER JOIN Customer ON CustomerTransaction.CustomerID = Customer.ID
	WHERE		CustomerTransaction.CustomerID = @CustomerID
	ORDER BY CustomerTransaction.ID DESC

-- Return all the information together
	SELECT    Customer.ID, Customer.PriCustomerNumber, Customer.PrimaryContactName, Company.Description AS CompanyDescription, @CurrentBalance AS CurrentBalance, Customer.CurrencyID
	FROM        Customer INNER JOIN
						Company ON Customer.CompanyID = Company.ID
	WHERE	
		(Customer.ID = @CustomerID)

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_CreateUser"  skip="true">
			<comment><![CDATA[
/****************************************************************************
Purpose: This procedure creates a user that is associated to a Customer.
NOTE: The Customer must first be added to the system.
Examples: 
DECLARE @CustomerID int
DECLARE @UserName varchar(100)
DECLARE @Password varchar(50)
DECLARE @MustChangePassword bit
DECLARE @UserID int

-- TODO: Set parameter values here.
SET @CustomerID = 8
SET @UserName = 'NewCustomer8'
SET @Password = 'NewPassword8' --Can be NULL to auto gen.
SET @MustChangePassword = 0

EXECUTE p_Customer_CreateUser @CustomerID,@UserName,@Password,@MustChangePassword,@UserID OUTPUT
PRINT @UserID

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MustChangePassword" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Declare @Email varchar(100), @Telephone varchar(50), @DisplayName varchar(60), @RoleID int, @TempPWD varchar(50)

	--Get the User Info from the main table
	SELECT @DisplayName=PrimaryContactName,@Email=PrimaryContactEmailAddress,@Telephone=PrimaryContactPhoneNumber From Customer Where ID = @CustomerID
	--Enforce Biz Rules for Role
	SELECT @RoleID=ID FROM [Role] WHERE Name = 'Customer'
	IF @Password IS NULL
	BEGIN
		--Using NULL as there are no other defaults in the system currently
		EXECUTE p_UTIL_GeneratePassword @Password=@Password OUTPUT,@WholesalerID=NULL,@CustomerID=NULL,@ModeratorID=NULL,@PasswordLength=8
		--PRINT @Password
	END

BEGIN TRANSACTION
	
	INSERT INTO [dbo].[User]
        ([Username],[Password],[DisplayName],[Email],[Telephone],[Enabled],[CompanyID],[SalesPersonID],[RoleID],[MustChangePassword])
	VALUES
		(@UserName, @Password, @DisplayName, @Email, @Telephone, 1, NULL, NULL, @RoleID, @MustChangePassword)
	SET @UserID = SCOPE_IDENTITY()

	IF NOT @UserID > 0
	BEGIN
		SET @UserID = -1
		GOTO RollBackTrans
	END
	--Link the new User to the parent table
	UPDATE Customer SET UserID = @UserID WHERE ID = @CustomerID

GOTO CommitTrans
RollBackTrans:
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetBalanceInfo"  skip="true">
			<comment><![CDATA[/*****************************************************************************
Purpose: Returns the Customers balance owing along with some other info. 

Returns: Both a Select stmt and OUTPUT parameters.

Example: 
select * from Customer

	EXEC [p_Customer_GetBalanceInfo] @WholesalerID='0000000001',@CustomerID=14
Declare @CurrentBalance decimal(10,2)
	EXEC [p_Customer_GetBalanceInfo] @WholesalerID='0000000001',@ReturnRowSet = 1, @CustomerID=14,@CurrentBalance=@CurrentBalance OUTPUT
PRINT @CurrentBalance

Declare @CurrentBalance decimal(10,2)
	EXEC [p_Customer_GetBalanceInfo] @WholesalerID='0000000001',@ReturnRowSet = 0, @CustomerID=14,@CurrentBalance=@CurrentBalance OUTPUT
PRINT @CurrentBalance

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ReturnRowSet" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="char" direction="InputOutput" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CurrentBalance" type="decimal" direction="InputOutput" size="0" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@CurrencyID" type="varchar" direction="InputOutput" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

--Get the current balance for the account
	--IF nothing is passed in then return nothing so that the wrong user information is not returned
	IF @CustomerID IS NULL AND @PriCustomerNumber IS NULL
	BEGIN
		SET @CustomerID = 0
	END
	-- Set CustomerID and PriCustomerNumber
	SELECT @CustomerID = Customer.ID, @PriCustomerNumber = PriCustomerNumber, @CurrencyID = CurrencyID
	FROM Customer
	WHERE
		(@CustomerID is null OR Customer.ID = @CustomerID) AND
		(@PriCustomerNumber is null OR Customer.PriCustomerNumber = @PriCustomerNumber)
		AND (WholesalerID = @WholesalerID)
		
	-- Set the Customers current balance
	SET @CurrentBalance = 0.00
	SELECT    TOP 1 @CurrentBalance = ISNULL(CustomerTransaction.CustomerBalance, 0.00)
	FROM        CustomerTransaction INNER JOIN Customer ON CustomerTransaction.CustomerID = Customer.ID
	WHERE		CustomerTransaction.CustomerID = @CustomerID
	ORDER BY CustomerTransaction.ID DESC

-- Return all the information together
IF @ReturnRowSet = 1
BEGIN
	SELECT    Customer.ID, Customer.PriCustomerNumber, Customer.PrimaryContactName, Company.Description AS CompanyDescription, @CurrentBalance AS CurrentBalance, Customer.CurrencyID
	FROM        Customer INNER JOIN
						Company ON Customer.CompanyID = Company.ID
	WHERE	
		(Customer.ID = @CustomerID)
END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetProductRatesByProductRateTypeDisplayName"  skip="true">
			<comment><![CDATA[/*
 Returns the Products and Rates for the Customer
Examples:
	EXEC [p_Customer_GetProductRatesByProductRateTypeDisplayName] 8, 'Miscellaneous'
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateTypeDisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT ProductRateValueID, CustomerID, Wholesaler_ProductName, ProductTypeDisplayName, ProductRateValueSellRate
		, ProductRateValueSellRateCurrencyID,ProductRateValueBuyRate, ProductRateValueBuyRateCurrencyID, ProductRateDisplayName
		, ProductRateDescription, ProductRateTypeDisplayName, ProductRateID
	FROM         dbo.vw_ProductRatesForCustomer
	WHERE     (CustomerID = @CustomerID) AND (Wholesaler_ProductEnabled = 1) AND (ProductRateTypeDisplayName = @ProductRateTypeDisplayName)
	ORDER BY Wholesaler_ProductDisplayOrder, ProductRateTypeDisplayOrder, ProductRateDisplayOrder


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetWebconferenceRecordingRates"  skip="true">
			<comment><![CDATA[/*
2015/05/22 | Topo | ADD | add MP4 web recording charges
 Returns the Recording Rates for the Customer
Examples:
	EXEC [p_Customer_GetWebconferenceRecordingRates] 8
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     Wholesaler_ProductName, ProductRateValueID, ProductRateID, ProductRateProductID, ProductRateValueSellRate, 
	ProductRateValueSellRateCurrencyID, ProductRateName, ProductRateDisplayName, ProductRateDescription
	FROM         dbo.vw_ProductRatesForCustomer
	WHERE     (CustomerID = @CustomerID) AND ProductRateID IN (703,702,261)
	ORDER BY ProductRateDisplayName

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_Omnovia_RequestMP4"  skip="true">
			<comment><![CDATA[/*
	2015/04/23 | Topo | ADD | Init
	2015/05/03 | Topo | Fix | CustomerID parameter should be OmnoviaCustomerID
	2015/05/19 | Topo | Fix | 1. Remove CustomerID parameter
							  2. Add update expiry mp4 renewal scenario 	

*/

]]></comment>
			<parameters>
				<parameter name="@OmnoviaCustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@HostedID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ExtraInfo" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MP4RequestID" type="int" direction="InputOutput" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Message" type="varchar" direction="InputOutput" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
 
BEGIN
	DECLARE @id			int,
			@MovieID	int,
			@RoomID		int,
			@RoomName	varchar(50),
			@MovieTitle	varchar(50)

--	SELECT @id=id, @movieid=movieid, @RoomID=movieroomid, @roomname=roomname, @movietitle=movietitle FROM OmnoviaHostedArchive 
--	WHERE id=@HostedID and RedbackCustomerID=@RedbackCustomerID
	SELECT @id=id, @movieid=movieid, @RoomID=movieroomid, @roomname=roomname, @movietitle=movietitle FROM OmnoviaHostedArchive 
	WHERE id=@HostedID 
			--and OmnoviaCustomerID=@OmnoviaCustomerID -- replace this with @OmnoviaCustomerID or remove this parameter
	
	DECLARE @NEWLINE varchar(1)
	SET @NEWLINE = Char(13)
	
	SET @message= 'Dear support,' + @NEWLINE + @NEWLINE 
				+ @RequestedBy + ' request an MP4 recording for the following recast:' + @NEWLINE
				+ 'Title:' + @MovieTitle + @NEWLINE
				+ 'RoomID:' + cast(@RoomID as varchar(10)) + @NEWLINE
				+ 'HostedID:' + cast(@id as varchar(10)) + @NEWLINE
				+ 'MovieID:' + cast(@movieid as varchar(10)) + @NEWLINE
				+ 'ExtraInfo:' + @ExtraInfo + @NEWLINE

	set @MP4RequestID=NULL
	SELECT @MP4RequestID=id FROM OmnoviaMP4Request WHERE hostedID=@HostedID
	IF @MP4RequestID is NULL
	BEGIN
		-- New record
		INSERT INTO OmnoviaMP4Request(hostedID, RequestedBy, ExtraInfo)
			values (@id, @RequestedBy, @ExtraInfo)

		SET @MP4RequestID = @@Identity
	END
	ELSE
	BEGIN
		-- Renew expired mp4
		UPDATE OmnoviaMP4Request
		SET OmnoviaHostedURLExpiryDate=NULL,
			RequestedBy = @RequestedBy,
			ExtraInfo = @ExtraInfo
		WHERE id=@MP4RequestID
	END
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_UpdateFeature"  skip="true">
			<comment><![CDATA[/* =============================================
	Updates the Customer_Feature table for the Customer based on the Customer_FeatureID.
NOTE: Added the functionality to push the set down to all moderators.

JS: Nov 26/2014 - Add new check to so that Moderators/Conference Features are not overridden

Example:
	Select * from Feature inner join customer_Feature on Feature.id = customer_Feature.Featureid where featureid = 33
	Select * from Feature inner join moderator_Feature on Feature.id = moderator_Feature.Featureid

	EXEC p_Customer_UpdateFeature @CustomerID=14, @FeatureID=33, @FeatureOptionID=254,@FeatureOptionValue=null
	--EXEC p_Customer_UpdateFeature @CustomerID=8, @FeatureID=33, @FeatureOptionID=254,@FeatureOptionValue=null,@UpdateModerators=1

*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UpdateModerators" type="bit" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN

	UPDATE Customer_Feature SET FeatureOptionID=@FeatureOptionID, 
		FeatureOptionValue=@FeatureOptionValue
	WHERE Customer_Feature.FeatureID = @FeatureID AND Customer_Feature.CustomerID = @CustomerID --Makes it unique

	IF @UpdateModerators = 1
	BEGIN
		--Update all of the Modertors to match
		UPDATE Moderator_Feature SET FeatureOptionID=@FeatureOptionID, FeatureOptionValue=@FeatureOptionValue
		--Select *
		FROM Moderator_Feature INNER JOIN Moderator ON Moderator.ID = Moderator_Feature.ModeratorID
		WHERE Moderator_Feature.FeatureID = @FeatureID AND Moderator.CustomerID = @CustomerID
		--JS: Nov 26/2014 - Add new check to so that Moderators/Conference Features are not overridden
		AND Moderator_Feature.ModeratorID NOT IN (
		SELECT ModeratorID
		FROM vw_FeatureOptionsForModerators T1
		WHERE T1.ModeratorID = Moderator_Feature.ModeratorID AND FeatureName = 'LockConferenceFeatures'	AND FeatureOptionValue = '1' --Yes
		)

	END
END


			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetNextCustomerNumber"  skip="true">
			<comment><![CDATA[
/***************************************************
Get the next available Primary Customer number in the Customer table.

Examples: 
	DECLARE @PriCustomerNumber varchar(10)
	EXEC p_Customer_GetNextCustomerNumber '0000000001',@PriCustomerNumber OUTPUT
	Print @PriCustomerNumber
******************************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="InputOutput" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

DECLARE @TempCustomerNum varchar(10)
DECLARE @StartingValue varchar(10) -- Each Wholesale Customer will have their own ranges

/*******************************
	@LIKEStartingNumberExp - This is set to the first digits that you are looking for within an Customer number range.
	This is required to provide flexibility in Customer numbering.
	Another advantage to this is that you can control the Customer numbers generated so that many companies could
	have a 400XXX range that differs by the lower digits. ie. 4100000000, and 4101000000 can be different companies
	but the latter would be a sub-wholesaler to the former.
E.G.'s
	'9700%' - would find the max number that start with 97 and 2 zero's.
	'6700%' - would find the max number that start with 67 and 2 zero's.

***********************************/
DECLARE @RetailPriCustomerNumberLIKEExp varchar(10) 

	--INIT VARs
	SET @StartingValue = ''

	--Get the values for the Wholesaler
	SELECT @StartingValue=ISNULL(RetailPriCustomerNumber,''), @RetailPriCustomerNumberLIKEExp=RetailPriCustomerNumberLIKEExp
	FROM Wholesaler WHERE ID = @WholesalerID AND ENABLED=1
--Print @StartingValue
	
	IF @StartingValue <> ''
	BEGIN
		--Determine the Max number in Customer Table, or return blank 
		SELECT     @TempCustomerNum = ISNULL(MAX(PriCustomerNumber),'')
		FROM         Customer
		WHERE     WholesalerID = @WholesalerID AND PriCustomerNumber LIKE @RetailPriCustomerNumberLIKEExp
		IF @TempCustomerNum = ''
		BEGIN
			--Nothing found, return starting value
			SET @PriCustomerNumber = CAST(@StartingValue as varchar)
		END
		ELSE
		BEGIN
			-- Max value found so increment and return
			SET @PriCustomerNumber = CAST(@TempCustomerNum as BigInt) + 1
		END  
	END
			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_DeleteCustomer"  skip="true">
			<comment><![CDATA[/* ================================================
Purpose: To delete the Customer and foreign key table data in a controlled 
	way without the use of cascasding deletes.
Examples:
	Select * from Customer
	EXEC p_Customer_DeleteCustomer 2027
 ================================================*/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--TODO: Remove all Mods and related data
/*
	DECLARE <cursor_name, sysname, test_cursor> CURSOR
	READ_ONLY
	FOR <select_statement, , SELECT au_fname FROM pubs.dbo.authors>

	DECLARE @name varchar(40)
	OPEN <cursor_name, sysname, test_cursor>

	FETCH NEXT FROM <cursor_name, sysname, test_cursor> INTO @name
	WHILE (@@fetch_status <> -1)
	BEGIN
		IF (@@fetch_status <> -2)
		BEGIN
	--		PRINT 'add user defined code here'
	--		eg.
			DECLARE @message varchar(100)
			SELECT @message = 'my name is: ' + @name
			PRINT @message
		END
		FETCH NEXT FROM <cursor_name, sysname, test_cursor> INTO @name
	END

	CLOSE <cursor_name, sysname, test_cursor>
	DEALLOCATE <cursor_name, sysname, test_cursor>
*/
	--Remove all foreign key table data
	DELETE FROM Department WHERE CustomerID = @CustomerID
	DELETE FROM Customer_DNIS WHERE CustomerID = @CustomerID
	DELETE FROM Customer_Feature WHERE CustomerID = @CustomerID
	DELETE FROM CommissionCustomer WHERE CustomerID = @CustomerID
	DELETE FROM ProductRateValue WHERE CustomerID = @CustomerID
	DELETE FROM InvoiceSummary WHERE CustomerID = @CustomerID
	DELETE FROM [User] WHERE UserID IN (SELECT UserID FROM Customer C WHERE C.ID = @CustomerID)
	DELETE FROM Customer WHERE ID = @CustomerID

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_Customer_GetProductFeatures"  skip="true">
			<comment><![CDATA[/* ================================================
Returns information for Customer Features. Multiple
selects are performed to simplify the UI layer.

History:
JS Oct/2014 - adding new options for Feature hiding, Adding a FeatureDisplayInAMPSite so AMP can filter this out as both Admin Site and AMP can call this SP.

Examples:
	EXEC p_Customer_GetProductFeatures 8
 ================================================ */
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT     TOP (100) PERCENT Customer_FeatureID, CustomerID, Customer_FeatureFeatureID, Customer_FeatureFeatureOptionID, Customer_FeatureEnabled, 
						  Customer_FeatureFeatureOptionValue, FeatureDisplayName, FeatureDescription, FeatureDisplayNameAlt, FeatureDescriptionAlt, FeatureOptionID, 
						  FeatureOptionDisplayName, FeatureOptionDescription, FeatureOptionDisplayNameAlt, FeatureOptionDescriptionAlt, FeatureOptionValue, 
						  Wholesaler_ProductName, Wholesaler_ProductDescription, Wholesaler_ProductDisplayNameAlt, Wholesaler_ProductDescriptionAlt
						  ,FeatureDisplayInAMPSite
	FROM         dbo.vw_FeatureOptionsForCustomers
	WHERE     (FeatureEnabled = 1) AND (Wholesaler_ProductEnabled = 1) AND (FeatureOptionEnabled = 1) AND CustomerID = @CustomerID
	AND FeatureDisplayToCustomer = 1
	ORDER BY Wholesaler_ProductDisplayOrder, FeatureDisplayOrder, FeatureOptionDisplayOrder
END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pAverageRates_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AverageRates table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UsageMonth],
					[ProductRateID],
					[WholesalerID],
					[MedianRetailRate],
					[AverageRetailRate],
					[WeightedAverageRetailRate],
					[MedianWSRate],
					[AverageWSRate],
					[WeightedAverageWSRate],
					[UsageSeconds],
					[UsageQuantity]
				FROM
					[dbo].[AverageRates]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pAverageRates_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AverageRates table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UsageMonth]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UsageMonth]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [MedianRetailRate]'
				SET @SQL = @SQL + ', [AverageRetailRate]'
				SET @SQL = @SQL + ', [WeightedAverageRetailRate]'
				SET @SQL = @SQL + ', [MedianWSRate]'
				SET @SQL = @SQL + ', [AverageWSRate]'
				SET @SQL = @SQL + ', [WeightedAverageWSRate]'
				SET @SQL = @SQL + ', [UsageSeconds]'
				SET @SQL = @SQL + ', [UsageQuantity]'
				SET @SQL = @SQL + ' FROM [dbo].[AverageRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UsageMonth],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [MedianRetailRate],'
				SET @SQL = @SQL + ' [AverageRetailRate],'
				SET @SQL = @SQL + ' [WeightedAverageRetailRate],'
				SET @SQL = @SQL + ' [MedianWSRate],'
				SET @SQL = @SQL + ' [AverageWSRate],'
				SET @SQL = @SQL + ' [WeightedAverageWSRate],'
				SET @SQL = @SQL + ' [UsageSeconds],'
				SET @SQL = @SQL + ' [UsageQuantity]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AverageRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pAverageRates_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AverageRates table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@MedianRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@AverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WeightedAverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@MedianWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@AverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WeightedAverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@UsageSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UsageQuantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[AverageRates]
					(
					[UsageMonth]
					,[ProductRateID]
					,[WholesalerID]
					,[MedianRetailRate]
					,[AverageRetailRate]
					,[WeightedAverageRetailRate]
					,[MedianWSRate]
					,[AverageWSRate]
					,[WeightedAverageWSRate]
					,[UsageSeconds]
					,[UsageQuantity]
					)
				VALUES
					(
					@UsageMonth
					,@ProductRateId
					,@WholesalerId
					,@MedianRetailRate
					,@AverageRetailRate
					,@WeightedAverageRetailRate
					,@MedianWsRate
					,@AverageWsRate
					,@WeightedAverageWsRate
					,@UsageSeconds
					,@UsageQuantity
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAverageRates_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AverageRates table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalUsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalWholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@MedianRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@AverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WeightedAverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@MedianWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@AverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WeightedAverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@UsageSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UsageQuantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AverageRates]
				SET
					[UsageMonth] = @UsageMonth
					,[ProductRateID] = @ProductRateId
					,[WholesalerID] = @WholesalerId
					,[MedianRetailRate] = @MedianRetailRate
					,[AverageRetailRate] = @AverageRetailRate
					,[WeightedAverageRetailRate] = @WeightedAverageRetailRate
					,[MedianWSRate] = @MedianWsRate
					,[AverageWSRate] = @AverageWsRate
					,[WeightedAverageWSRate] = @WeightedAverageWsRate
					,[UsageSeconds] = @UsageSeconds
					,[UsageQuantity] = @UsageQuantity
				WHERE
[UsageMonth] = @OriginalUsageMonth 
AND [ProductRateID] = @OriginalProductRateId 
AND [WholesalerID] = @OriginalWholesalerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAverageRates_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AverageRates table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AverageRates] WITH (ROWLOCK) 
				WHERE
					[UsageMonth] = @UsageMonth
					AND [ProductRateID] = @ProductRateId
					AND [WholesalerID] = @WholesalerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pAverageRates_GetByUsageMonthProductRateIdWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AverageRates table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UsageMonth],
					[ProductRateID],
					[WholesalerID],
					[MedianRetailRate],
					[AverageRetailRate],
					[WeightedAverageRetailRate],
					[MedianWSRate],
					[AverageWSRate],
					[WeightedAverageWSRate],
					[UsageSeconds],
					[UsageQuantity]
				FROM
					[dbo].[AverageRates]
				WHERE
					[UsageMonth] = @UsageMonth
					AND [ProductRateID] = @ProductRateId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pAverageRates_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AverageRates table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UsageMonth" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@MedianRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@AverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@WeightedAverageRetailRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@MedianWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@AverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@WeightedAverageWsRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@UsageSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UsageQuantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UsageMonth]
	, [ProductRateID]
	, [WholesalerID]
	, [MedianRetailRate]
	, [AverageRetailRate]
	, [WeightedAverageRetailRate]
	, [MedianWSRate]
	, [AverageWSRate]
	, [WeightedAverageWSRate]
	, [UsageSeconds]
	, [UsageQuantity]
    FROM
	[dbo].[AverageRates]
    WHERE 
	 ([UsageMonth] = @UsageMonth OR @UsageMonth IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([MedianRetailRate] = @MedianRetailRate OR @MedianRetailRate IS NULL)
	AND ([AverageRetailRate] = @AverageRetailRate OR @AverageRetailRate IS NULL)
	AND ([WeightedAverageRetailRate] = @WeightedAverageRetailRate OR @WeightedAverageRetailRate IS NULL)
	AND ([MedianWSRate] = @MedianWsRate OR @MedianWsRate IS NULL)
	AND ([AverageWSRate] = @AverageWsRate OR @AverageWsRate IS NULL)
	AND ([WeightedAverageWSRate] = @WeightedAverageWsRate OR @WeightedAverageWsRate IS NULL)
	AND ([UsageSeconds] = @UsageSeconds OR @UsageSeconds IS NULL)
	AND ([UsageQuantity] = @UsageQuantity OR @UsageQuantity IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UsageMonth]
	, [ProductRateID]
	, [WholesalerID]
	, [MedianRetailRate]
	, [AverageRetailRate]
	, [WeightedAverageRetailRate]
	, [MedianWSRate]
	, [AverageWSRate]
	, [WeightedAverageWSRate]
	, [UsageSeconds]
	, [UsageQuantity]
    FROM
	[dbo].[AverageRates]
    WHERE 
	 ([UsageMonth] = @UsageMonth AND @UsageMonth is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([MedianRetailRate] = @MedianRetailRate AND @MedianRetailRate is not null)
	OR ([AverageRetailRate] = @AverageRetailRate AND @AverageRetailRate is not null)
	OR ([WeightedAverageRetailRate] = @WeightedAverageRetailRate AND @WeightedAverageRetailRate is not null)
	OR ([MedianWSRate] = @MedianWsRate AND @MedianWsRate is not null)
	OR ([AverageWSRate] = @AverageWsRate AND @AverageWsRate is not null)
	OR ([WeightedAverageWSRate] = @WeightedAverageWsRate AND @WeightedAverageWsRate is not null)
	OR ([UsageSeconds] = @UsageSeconds AND @UsageSeconds is not null)
	OR ([UsageQuantity] = @UsageQuantity AND @UsageQuantity is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pAverageRates_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AverageRates table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UsageMonth]
					, [ProductRateID]
					, [WholesalerID]
					, [MedianRetailRate]
					, [AverageRetailRate]
					, [WeightedAverageRetailRate]
					, [MedianWSRate]
					, [AverageWSRate]
					, [WeightedAverageWSRate]
					, [UsageSeconds]
					, [UsageQuantity]
					FROM [dbo].[AverageRates] {0}
				)
				SELECT
				       [UsageMonth],
				       [ProductRateID],
				       [WholesalerID],
				       [MedianRetailRate],
				       [AverageRetailRate],
				       [WeightedAverageRetailRate],
				       [MedianWSRate],
				       [AverageWSRate],
				       [WeightedAverageWSRate],
				       [UsageSeconds],
				       [UsageQuantity]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AverageRates] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeQueue_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pBridgeQueue_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeQueue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeQueue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [ProcessFlag]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeQueue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pBridgeQueue_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[BridgeQueue]
					(
					[ModeratorID]
					,[BridgeID]
					,[ProcessFlag]
					)
				VALUES
					(
					@ModeratorId
					,@BridgeId
					,@ProcessFlag
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeQueue]
				SET
					[ModeratorID] = @ModeratorId
					,[BridgeID] = @BridgeId
					,[ProcessFlag] = @ProcessFlag
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[BridgeQueue] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_GetByBridgeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[BridgeID] = @BridgeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_GetByModeratorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pBridgeQueue_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeQueue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BridgeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProcessFlag" type="char" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [BridgeID]
	, [ProcessFlag]
    FROM
	[dbo].[BridgeQueue]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [BridgeID]
	, [ProcessFlag]
    FROM
	[dbo].[BridgeQueue]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pBridgeQueue_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeQueue table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ModeratorID]
					, [BridgeID]
					, [ProcessFlag]
					FROM [dbo].[BridgeQueue] {0}
				)
				SELECT
				       [ID],
				       [ModeratorID],
				       [BridgeID],
				       [ProcessFlag]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[BridgeQueue] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pForEx_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ForEx table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pForEx_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ForEx table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [FromCcy]'
				SET @SQL = @SQL + ', [ToCcy]'
				SET @SQL = @SQL + ', [Rate]'
				SET @SQL = @SQL + ', [CurveID]'
				SET @SQL = @SQL + ', [EffectiveDate]'
				SET @SQL = @SQL + ' FROM [dbo].[ForEx]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [FromCcy],'
				SET @SQL = @SQL + ' [ToCcy],'
				SET @SQL = @SQL + ' [Rate],'
				SET @SQL = @SQL + ' [CurveID],'
				SET @SQL = @SQL + ' [EffectiveDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ForEx]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pForEx_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ForEx table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FromCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ToCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Rate" type="decimal" direction="Input" size="9" precision="18" scale="9" param="(18, 9)" nulldefault=""/>
				<parameter name="@CurveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EffectiveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ForEx]
					(
					[ID]
					,[FromCcy]
					,[ToCcy]
					,[Rate]
					,[CurveID]
					,[EffectiveDate]
					)
				VALUES
					(
					@Id
					,@FromCcy
					,@ToCcy
					,@Rate
					,@CurveId
					,@EffectiveDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pForEx_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ForEx table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FromCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ToCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Rate" type="decimal" direction="Input" size="9" precision="18" scale="9" param="(18, 9)" nulldefault=""/>
				<parameter name="@CurveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EffectiveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ForEx]
				SET
					[ID] = @Id
					,[FromCcy] = @FromCcy
					,[ToCcy] = @ToCcy
					,[Rate] = @Rate
					,[CurveID] = @CurveId
					,[EffectiveDate] = @EffectiveDate
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pForEx_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ForEx table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ForEx] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pForEx_GetByCurveId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ForEx table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
				WHERE
					[CurveID] = @CurveId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pForEx_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ForEx table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pForEx_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ForEx table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FromCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@ToCcy" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Rate" type="decimal" direction="Input" size="9" precision="18" scale="9" param="(18, 9)" nulldefault="null"/>
				<parameter name="@CurveId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@EffectiveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [FromCcy]
	, [ToCcy]
	, [Rate]
	, [CurveID]
	, [EffectiveDate]
    FROM
	[dbo].[ForEx]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([FromCcy] = @FromCcy OR @FromCcy IS NULL)
	AND ([ToCcy] = @ToCcy OR @ToCcy IS NULL)
	AND ([Rate] = @Rate OR @Rate IS NULL)
	AND ([CurveID] = @CurveId OR @CurveId IS NULL)
	AND ([EffectiveDate] = @EffectiveDate OR @EffectiveDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [FromCcy]
	, [ToCcy]
	, [Rate]
	, [CurveID]
	, [EffectiveDate]
    FROM
	[dbo].[ForEx]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([FromCcy] = @FromCcy AND @FromCcy is not null)
	OR ([ToCcy] = @ToCcy AND @ToCcy is not null)
	OR ([Rate] = @Rate AND @Rate is not null)
	OR ([CurveID] = @CurveId AND @CurveId is not null)
	OR ([EffectiveDate] = @EffectiveDate AND @EffectiveDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pForEx_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ForEx table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [FromCcy]
					, [ToCcy]
					, [Rate]
					, [CurveID]
					, [EffectiveDate]
					FROM [dbo].[ForEx] {0}
				)
				SELECT
				       [ID],
				       [FromCcy],
				       [ToCcy],
				       [Rate],
				       [CurveID],
				       [EffectiveDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ForEx] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_DNIS_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_DNIS_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DNISID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DNISID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DNISID],'
				SET @SQL = @SQL + ' [CustomerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomer_DNIS_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Customer_DNIS]
					(
					[DNISID]
					,[CustomerID]
					)
				VALUES
					(
					@Dnisid
					,@CustomerId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalDnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer_DNIS]
				SET
					[DNISID] = @Dnisid
					,[CustomerID] = @CustomerId
				WHERE
[DNISID] = @OriginalDnisid 
AND [CustomerID] = @OriginalCustomerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Customer_DNIS] WITH (ROWLOCK) 
				WHERE
					[DNISID] = @Dnisid
					AND [CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_GetByDnisidCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[DNISID] = @Dnisid
					AND [CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_GetByDnisid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[DNISID] = @Dnisid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_DNIS_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer_DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Dnisid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DNISID]
	, [CustomerID]
    FROM
	[dbo].[Customer_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid OR @Dnisid IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DNISID]
	, [CustomerID]
    FROM
	[dbo].[Customer_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid AND @Dnisid is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomer_DNIS_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_DNIS table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DNISID]
					, [CustomerID]
					FROM [dbo].[Customer_DNIS] {0}
				)
				SELECT
				       [DNISID],
				       [CustomerID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Customer_DNIS] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeatureOptionType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder]
				FROM
					[dbo].[FeatureOptionType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeatureOptionType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOptionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOptionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOptionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pFeatureOptionType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[FeatureOptionType]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOptionType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FeatureOptionType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOptionType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[FeatureOptionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOptionType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOptionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder]
				FROM
					[dbo].[FeatureOptionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeatureOptionType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FeatureOptionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
    FROM
	[dbo].[FeatureOptionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
    FROM
	[dbo].[FeatureOptionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pFeatureOptionType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOptionType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayOrder]
					FROM [dbo].[FeatureOptionType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[FeatureOptionType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeature_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeature_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [DisplayInAMPSite]'
				SET @SQL = @SQL + ', [DisplayToCustomer]'
				SET @SQL = @SQL + ', [DisplayToModerator]'
				SET @SQL = @SQL + ' FROM [dbo].[Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [DisplayInAMPSite],'
				SET @SQL = @SQL + ' [DisplayToCustomer],'
				SET @SQL = @SQL + ' [DisplayToModerator]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pFeature_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOnlyToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayInAmpSite" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Feature]
					(
					[ProductID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DefaultOption]
					,[Enabled]
					,[DisplayOrder]
					,[DisplayOnlyToCustomer]
					,[DisplayInAMPSite]
					,[DisplayToCustomer]
					,[DisplayToModerator]
					)
				VALUES
					(
					@ProductId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DefaultOption
					,@Enabled
					,@DisplayOrder
					,@DisplayOnlyToCustomer
					,@DisplayInAmpSite
					,@DisplayToCustomer
					,@DisplayToModerator
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeature_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOnlyToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayInAmpSite" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Feature]
				SET
					[ProductID] = @ProductId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DefaultOption] = @DefaultOption
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
					,[DisplayOnlyToCustomer] = @DisplayOnlyToCustomer
					,[DisplayInAMPSite] = @DisplayInAmpSite
					,[DisplayToCustomer] = @DisplayToCustomer
					,[DisplayToModerator] = @DisplayToModerator
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeature_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeature_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeature_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeature_GetByNameId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[Name] = @Name
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeature_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOnlyToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayInAmpSite" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayToCustomer" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [Enabled]
	, [DisplayOrder]
	, [DisplayOnlyToCustomer]
	, [DisplayInAMPSite]
	, [DisplayToCustomer]
	, [DisplayToModerator]
    FROM
	[dbo].[Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DisplayOnlyToCustomer] = @DisplayOnlyToCustomer OR @DisplayOnlyToCustomer IS NULL)
	AND ([DisplayInAMPSite] = @DisplayInAmpSite OR @DisplayInAmpSite IS NULL)
	AND ([DisplayToCustomer] = @DisplayToCustomer OR @DisplayToCustomer IS NULL)
	AND ([DisplayToModerator] = @DisplayToModerator OR @DisplayToModerator IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [Enabled]
	, [DisplayOrder]
	, [DisplayOnlyToCustomer]
	, [DisplayInAMPSite]
	, [DisplayToCustomer]
	, [DisplayToModerator]
    FROM
	[dbo].[Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DisplayOnlyToCustomer] = @DisplayOnlyToCustomer AND @DisplayOnlyToCustomer is not null)
	OR ([DisplayInAMPSite] = @DisplayInAmpSite AND @DisplayInAmpSite is not null)
	OR ([DisplayToCustomer] = @DisplayToCustomer AND @DisplayToCustomer is not null)
	OR ([DisplayToModerator] = @DisplayToModerator AND @DisplayToModerator is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pFeature_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Feature table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [ProductID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [DisplayNameAlt]
					, [DescriptionAlt]
					, [DefaultOption]
					, [Enabled]
					, [DisplayOrder]
					, [DisplayOnlyToCustomer]
					, [DisplayInAMPSite]
					, [DisplayToCustomer]
					, [DisplayToModerator]
					FROM [dbo].[Feature] {0}
				)
				SELECT
				       [ID],
				       [ProductID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [DisplayNameAlt],
				       [DescriptionAlt],
				       [DefaultOption],
				       [Enabled],
				       [DisplayOrder],
				       [DisplayOnlyToCustomer],
				       [DisplayInAMPSite],
				       [DisplayToCustomer],
				       [DisplayToModerator]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Feature] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pGLPostingType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GLPostingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pGLPostingType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GLPostingType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Multiplier]'
				SET @SQL = @SQL + ', [CalculateTax]'
				SET @SQL = @SQL + ' FROM [dbo].[GLPostingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Multiplier],'
				SET @SQL = @SQL + ' [CalculateTax]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GLPostingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pGLPostingType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GLPostingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Multiplier" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@CalculateTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[GLPostingType]
					(
					[Name]
					,[DisplayName]
					,[DisplayOrder]
					,[Multiplier]
					,[CalculateTax]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@DisplayOrder
					,@Multiplier
					,@CalculateTax
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pGLPostingType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GLPostingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Multiplier" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@CalculateTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GLPostingType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
					,[Multiplier] = @Multiplier
					,[CalculateTax] = @CalculateTax
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pGLPostingType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GLPostingType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[GLPostingType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pGLPostingType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GLPostingType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pGLPostingType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GLPostingType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pGLPostingType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GLPostingType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Multiplier" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@CalculateTax" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [DisplayOrder]
	, [Multiplier]
	, [CalculateTax]
    FROM
	[dbo].[GLPostingType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Multiplier] = @Multiplier OR @Multiplier IS NULL)
	AND ([CalculateTax] = @CalculateTax OR @CalculateTax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [DisplayOrder]
	, [Multiplier]
	, [CalculateTax]
    FROM
	[dbo].[GLPostingType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Multiplier] = @Multiplier AND @Multiplier is not null)
	OR ([CalculateTax] = @CalculateTax AND @CalculateTax is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pGLPostingType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GLPostingType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [DisplayName]
					, [DisplayOrder]
					, [Multiplier]
					, [CalculateTax]
					FROM [dbo].[GLPostingType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [DisplayName],
				       [DisplayOrder],
				       [Multiplier],
				       [CalculateTax]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GLPostingType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeatureOption_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FeatureOption table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pFeatureOption_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOption table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [RegularExpression]'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOption]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [RegularExpression]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOption]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pFeatureOption_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FeatureOption table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RegularExpression" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[FeatureOption]
					(
					[FeatureID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[Value]
					,[DisplayOrder]
					,[DefaultOption]
					,[Enabled]
					,[FeatureOptionTypeID]
					,[RegularExpression]
					)
				VALUES
					(
					@FeatureId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@Value
					,@DisplayOrder
					,@DefaultOption
					,@Enabled
					,@FeatureOptionTypeId
					,@RegularExpression
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FeatureOption table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Value" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RegularExpression" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FeatureOption]
				SET
					[FeatureID] = @FeatureId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
					,[DefaultOption] = @DefaultOption
					,[Enabled] = @Enabled
					,[FeatureOptionTypeID] = @FeatureOptionTypeId
					,[RegularExpression] = @RegularExpression
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FeatureOption table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[FeatureOption] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_GetByFeatureOptionTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureOptionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[FeatureOptionTypeID] = @FeatureOptionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_GetByNameFeatureIdId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[Name] = @Name
					AND [FeatureID] = @FeatureId
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_GetByFeatureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pFeatureOption_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FeatureOption table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@DisplayNameAlt" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DescriptionAlt" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@Value" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DefaultOption" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RegularExpression" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [FeatureID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [Value]
	, [DisplayOrder]
	, [DefaultOption]
	, [Enabled]
	, [FeatureOptionTypeID]
	, [RegularExpression]
    FROM
	[dbo].[FeatureOption]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionTypeID] = @FeatureOptionTypeId OR @FeatureOptionTypeId IS NULL)
	AND ([RegularExpression] = @RegularExpression OR @RegularExpression IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [FeatureID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [Value]
	, [DisplayOrder]
	, [DefaultOption]
	, [Enabled]
	, [FeatureOptionTypeID]
	, [RegularExpression]
    FROM
	[dbo].[FeatureOption]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionTypeID] = @FeatureOptionTypeId AND @FeatureOptionTypeId is not null)
	OR ([RegularExpression] = @RegularExpression AND @RegularExpression is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pFeatureOption_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOption table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [FeatureID]
					, [Name]
					, [DisplayName]
					, [Description]
					, [DisplayNameAlt]
					, [DescriptionAlt]
					, [Value]
					, [DisplayOrder]
					, [DefaultOption]
					, [Enabled]
					, [FeatureOptionTypeID]
					, [RegularExpression]
					FROM [dbo].[FeatureOption] {0}
				)
				SELECT
				       [ID],
				       [FeatureID],
				       [Name],
				       [DisplayName],
				       [Description],
				       [DisplayNameAlt],
				       [DescriptionAlt],
				       [Value],
				       [DisplayOrder],
				       [DefaultOption],
				       [Enabled],
				       [FeatureOptionTypeID],
				       [RegularExpression]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[FeatureOption] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceCharges_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[InvoiceCharges]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceCharges_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceCharges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceCharges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceCharges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pInvoiceCharges_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[InvoiceCharges]
					(
					[StartDate]
					,[EndDate]
					,[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[CustomerTransactionTypeID]
					,[TransactionDescription]
					,[TransactionDate]
					,[TransactionAmount]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TransactionTotal]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@StartDate
					,@EndDate
					,@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@CustomerTransactionTypeId
					,@TransactionDescription
					,@TransactionDate
					,@TransactionAmount
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TransactionTotal
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ReferenceNumber
					,@UniqueConferenceId
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceCharges_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceCharges]
				SET
					[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[TransactionDescription] = @TransactionDescription
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TransactionTotal] = @TransactionTotal
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceCharges_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[InvoiceCharges] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceCharges_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceCharges table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[InvoiceCharges]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceCharges_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceCharges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[InvoiceCharges]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TransactionTotal] = @TransactionTotal OR @TransactionTotal IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[InvoiceCharges]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TransactionTotal] = @TransactionTotal AND @TransactionTotal is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pInvoiceCharges_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceCharges table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [StartDate]
					, [EndDate]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [CustomerTransactionTypeID]
					, [TransactionDescription]
					, [TransactionDate]
					, [TransactionAmount]
					, [LocalTaxRate]
					, [FederalTaxRate]
					, [LocalTaxAmount]
					, [FederalTaxAmount]
					, [TransactionTotal]
					, [Wholesaler_ProductID]
					, [ProductRateID]
					, [Quantity]
					, [SellRate]
					, [BuyRate]
					, [WSTransactionAmount]
					, [ReferenceNumber]
					, [UniqueConferenceID]
					, [ElapsedTimeSeconds]
					FROM [dbo].[InvoiceCharges] {0}
				)
				SELECT
				       [ID],
				       [StartDate],
				       [EndDate],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [CustomerTransactionTypeID],
				       [TransactionDescription],
				       [TransactionDate],
				       [TransactionAmount],
				       [LocalTaxRate],
				       [FederalTaxRate],
				       [LocalTaxAmount],
				       [FederalTaxAmount],
				       [TransactionTotal],
				       [Wholesaler_ProductID],
				       [ProductRateID],
				       [Quantity],
				       [SellRate],
				       [BuyRate],
				       [WSTransactionAmount],
				       [ReferenceNumber],
				       [UniqueConferenceID],
				       [ElapsedTimeSeconds]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[InvoiceCharges] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceNotes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceNotes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [Note]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [Note],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [ModifiedBy]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pInvoiceNotes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[InvoiceNotes]
					(
					[WholesalerID]
					,[StartDate]
					,[EndDate]
					,[Note]
					,[Enabled]
					,[ModifiedBy]
					)
				VALUES
					(
					@WholesalerId
					,@StartDate
					,@EndDate
					,@Note
					,@Enabled
					,@ModifiedBy
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceNotes]
				SET
					[WholesalerID] = @WholesalerId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[Note] = @Note
					,[Enabled] = @Enabled
					,[ModifiedBy] = @ModifiedBy
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[InvoiceNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_GetByStartDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_GetByEndDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[EndDate] = @EndDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceNotes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [StartDate]
	, [EndDate]
	, [Note]
	, [Enabled]
	, [ModifiedBy]
    FROM
	[dbo].[InvoiceNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [StartDate]
	, [EndDate]
	, [Note]
	, [Enabled]
	, [ModifiedBy]
    FROM
	[dbo].[InvoiceNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pInvoiceNotes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceNotes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [StartDate]
					, [EndDate]
					, [Note]
					, [Enabled]
					, [ModifiedBy]
					FROM [dbo].[InvoiceNotes] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [StartDate],
				       [EndDate],
				       [Note],
				       [Enabled],
				       [ModifiedBy]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[InvoiceNotes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLead_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Lead table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLead_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Lead table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [AssignedDate]'
				SET @SQL = @SQL + ', [ExpiryDate]'
				SET @SQL = @SQL + ', [ContactName]'
				SET @SQL = @SQL + ', [ContactNumber]'
				SET @SQL = @SQL + ', [ContactEmail]'
				SET @SQL = @SQL + ' FROM [dbo].[Lead]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [AssignedDate],'
				SET @SQL = @SQL + ' [ExpiryDate],'
				SET @SQL = @SQL + ' [ContactName],'
				SET @SQL = @SQL + ' [ContactNumber],'
				SET @SQL = @SQL + ' [ContactEmail]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Lead]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLead_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Lead table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ContactName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ContactNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactEmail" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Lead]
					(
					[ID]
					,[WholesalerID]
					,[CompanyName]
					,[SalesPersonID]
					,[CreatedDate]
					,[AssignedDate]
					,[ExpiryDate]
					,[ContactName]
					,[ContactNumber]
					,[ContactEmail]
					)
				VALUES
					(
					@Id
					,@WholesalerId
					,@CompanyName
					,@SalesPersonId
					,@CreatedDate
					,@AssignedDate
					,@ExpiryDate
					,@ContactName
					,@ContactNumber
					,@ContactEmail
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLead_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Lead table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ContactName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ContactNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactEmail" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Lead]
				SET
					[ID] = @Id
					,[WholesalerID] = @WholesalerId
					,[CompanyName] = @CompanyName
					,[SalesPersonID] = @SalesPersonId
					,[CreatedDate] = @CreatedDate
					,[AssignedDate] = @AssignedDate
					,[ExpiryDate] = @ExpiryDate
					,[ContactName] = @ContactName
					,[ContactNumber] = @ContactNumber
					,[ContactEmail] = @ContactEmail
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLead_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Lead table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Lead] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLead_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLead_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLead_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLead_GetByContactEmail" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactEmail" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[ContactEmail] = @ContactEmail
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLead_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Lead table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CompanyName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@AssignedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ExpiryDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ContactName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ContactNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@ContactEmail" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CompanyName]
	, [SalesPersonID]
	, [CreatedDate]
	, [AssignedDate]
	, [ExpiryDate]
	, [ContactName]
	, [ContactNumber]
	, [ContactEmail]
    FROM
	[dbo].[Lead]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([AssignedDate] = @AssignedDate OR @AssignedDate IS NULL)
	AND ([ExpiryDate] = @ExpiryDate OR @ExpiryDate IS NULL)
	AND ([ContactName] = @ContactName OR @ContactName IS NULL)
	AND ([ContactNumber] = @ContactNumber OR @ContactNumber IS NULL)
	AND ([ContactEmail] = @ContactEmail OR @ContactEmail IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CompanyName]
	, [SalesPersonID]
	, [CreatedDate]
	, [AssignedDate]
	, [ExpiryDate]
	, [ContactName]
	, [ContactNumber]
	, [ContactEmail]
    FROM
	[dbo].[Lead]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([AssignedDate] = @AssignedDate AND @AssignedDate is not null)
	OR ([ExpiryDate] = @ExpiryDate AND @ExpiryDate is not null)
	OR ([ContactName] = @ContactName AND @ContactName is not null)
	OR ([ContactNumber] = @ContactNumber AND @ContactNumber is not null)
	OR ([ContactEmail] = @ContactEmail AND @ContactEmail is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLead_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Lead table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CompanyName]
					, [SalesPersonID]
					, [CreatedDate]
					, [AssignedDate]
					, [ExpiryDate]
					, [ContactName]
					, [ContactNumber]
					, [ContactEmail]
					FROM [dbo].[Lead] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CompanyName],
				       [SalesPersonID],
				       [CreatedDate],
				       [AssignedDate],
				       [ExpiryDate],
				       [ContactName],
				       [ContactNumber],
				       [ContactEmail]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Lead] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLanguage_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Language table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[Language]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pLanguage_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Language table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Language]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Language]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pLanguage_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Language table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Language]
					(
					[ID]
					,[DisplayName]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@DisplayName
					,@DisplayOrder
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLanguage_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Language table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@OriginalId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Language]
				SET
					[ID] = @Id
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLanguage_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Language table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Language] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pLanguage_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Language table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[Language]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pLanguage_GetByWholesalerIdFromIrWholesaler" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Language].[ID]
       ,dbo.[Language].[DisplayName]
       ,dbo.[Language].[DisplayOrder]
  FROM dbo.[Language]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[IRWholesaler] 
                WHERE dbo.[IRWholesaler].[WholesalerID] = @WholesalerId
                  AND dbo.[IRWholesaler].[LanguageID] = dbo.[Language].[ID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="pLanguage_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Language table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[Language]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[Language]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pLanguage_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Language table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [DisplayName]
					, [DisplayOrder]
					FROM [dbo].[Language] {0}
				)
				SELECT
				       [ID],
				       [DisplayName],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Language] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pIRWholesaler_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pIRWholesaler_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the IRWholesaler table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WholesalerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [IRCustomerID]'
				SET @SQL = @SQL + ', [LocalDNIS]'
				SET @SQL = @SQL + ', [LocalDialNumber]'
				SET @SQL = @SQL + ', [LocalAccessType]'
				SET @SQL = @SQL + ', [TollFreeDNIS]'
				SET @SQL = @SQL + ', [TollFreeDialNumber]'
				SET @SQL = @SQL + ', [TollFreeAccessType]'
				SET @SQL = @SQL + ', [InstantReplayURL]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [InstantReplayLoginURL]'
				SET @SQL = @SQL + ' FROM [dbo].[IRWholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [IRCustomerID],'
				SET @SQL = @SQL + ' [LocalDNIS],'
				SET @SQL = @SQL + ' [LocalDialNumber],'
				SET @SQL = @SQL + ' [LocalAccessType],'
				SET @SQL = @SQL + ' [TollFreeDNIS],'
				SET @SQL = @SQL + ' [TollFreeDialNumber],'
				SET @SQL = @SQL + ' [TollFreeAccessType],'
				SET @SQL = @SQL + ' [InstantReplayURL],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [InstantReplayLoginURL]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[IRWholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pIRWholesaler_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@IrCustomerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LocalDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@LocalDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@LocalAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TollFreeDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@TollFreeDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@TollFreeAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@InstantReplayUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@InstantReplayLoginUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[IRWholesaler]
					(
					[WholesalerID]
					,[LanguageID]
					,[IRCustomerID]
					,[LocalDNIS]
					,[LocalDialNumber]
					,[LocalAccessType]
					,[TollFreeDNIS]
					,[TollFreeDialNumber]
					,[TollFreeAccessType]
					,[InstantReplayURL]
					,[StorageDuration]
					,[InstantReplayLoginURL]
					)
				VALUES
					(
					@WholesalerId
					,@LanguageId
					,@IrCustomerId
					,@LocalDnis
					,@LocalDialNumber
					,@LocalAccessType
					,@TollFreeDnis
					,@TollFreeDialNumber
					,@TollFreeAccessType
					,@InstantReplayUrl
					,@StorageDuration
					,@InstantReplayLoginUrl
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalWholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@OriginalLanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@IrCustomerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LocalDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@LocalDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@LocalAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TollFreeDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@TollFreeDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault=""/>
				<parameter name="@TollFreeAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@InstantReplayUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@InstantReplayLoginUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[IRWholesaler]
				SET
					[WholesalerID] = @WholesalerId
					,[LanguageID] = @LanguageId
					,[IRCustomerID] = @IrCustomerId
					,[LocalDNIS] = @LocalDnis
					,[LocalDialNumber] = @LocalDialNumber
					,[LocalAccessType] = @LocalAccessType
					,[TollFreeDNIS] = @TollFreeDnis
					,[TollFreeDialNumber] = @TollFreeDialNumber
					,[TollFreeAccessType] = @TollFreeAccessType
					,[InstantReplayURL] = @InstantReplayUrl
					,[StorageDuration] = @StorageDuration
					,[InstantReplayLoginURL] = @InstantReplayLoginUrl
				WHERE
[WholesalerID] = @OriginalWholesalerId 
AND [LanguageID] = @OriginalLanguageId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[IRWholesaler] WITH (ROWLOCK) 
				WHERE
					[WholesalerID] = @WholesalerId
					AND [LanguageID] = @LanguageId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_GetByLanguageId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_GetByWholesalerIdLanguageId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [LanguageID] = @LanguageId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pIRWholesaler_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the IRWholesaler table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@IrCustomerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@LocalDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault="null"/>
				<parameter name="@LocalDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault="null"/>
				<parameter name="@LocalAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TollFreeDnis" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault="null"/>
				<parameter name="@TollFreeDialNumber" type="varchar" direction="Input" size="36" precision="0" scale="0" param="(36)" nulldefault="null"/>
				<parameter name="@TollFreeAccessType" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@InstantReplayUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@StorageDuration" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@InstantReplayLoginUrl" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [WholesalerID]
	, [LanguageID]
	, [IRCustomerID]
	, [LocalDNIS]
	, [LocalDialNumber]
	, [LocalAccessType]
	, [TollFreeDNIS]
	, [TollFreeDialNumber]
	, [TollFreeAccessType]
	, [InstantReplayURL]
	, [StorageDuration]
	, [InstantReplayLoginURL]
    FROM
	[dbo].[IRWholesaler]
    WHERE 
	 ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([IRCustomerID] = @IrCustomerId OR @IrCustomerId IS NULL)
	AND ([LocalDNIS] = @LocalDnis OR @LocalDnis IS NULL)
	AND ([LocalDialNumber] = @LocalDialNumber OR @LocalDialNumber IS NULL)
	AND ([LocalAccessType] = @LocalAccessType OR @LocalAccessType IS NULL)
	AND ([TollFreeDNIS] = @TollFreeDnis OR @TollFreeDnis IS NULL)
	AND ([TollFreeDialNumber] = @TollFreeDialNumber OR @TollFreeDialNumber IS NULL)
	AND ([TollFreeAccessType] = @TollFreeAccessType OR @TollFreeAccessType IS NULL)
	AND ([InstantReplayURL] = @InstantReplayUrl OR @InstantReplayUrl IS NULL)
	AND ([StorageDuration] = @StorageDuration OR @StorageDuration IS NULL)
	AND ([InstantReplayLoginURL] = @InstantReplayLoginUrl OR @InstantReplayLoginUrl IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [WholesalerID]
	, [LanguageID]
	, [IRCustomerID]
	, [LocalDNIS]
	, [LocalDialNumber]
	, [LocalAccessType]
	, [TollFreeDNIS]
	, [TollFreeDialNumber]
	, [TollFreeAccessType]
	, [InstantReplayURL]
	, [StorageDuration]
	, [InstantReplayLoginURL]
    FROM
	[dbo].[IRWholesaler]
    WHERE 
	 ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([IRCustomerID] = @IrCustomerId AND @IrCustomerId is not null)
	OR ([LocalDNIS] = @LocalDnis AND @LocalDnis is not null)
	OR ([LocalDialNumber] = @LocalDialNumber AND @LocalDialNumber is not null)
	OR ([LocalAccessType] = @LocalAccessType AND @LocalAccessType is not null)
	OR ([TollFreeDNIS] = @TollFreeDnis AND @TollFreeDnis is not null)
	OR ([TollFreeDialNumber] = @TollFreeDialNumber AND @TollFreeDialNumber is not null)
	OR ([TollFreeAccessType] = @TollFreeAccessType AND @TollFreeAccessType is not null)
	OR ([InstantReplayURL] = @InstantReplayUrl AND @InstantReplayUrl is not null)
	OR ([StorageDuration] = @StorageDuration AND @StorageDuration is not null)
	OR ([InstantReplayLoginURL] = @InstantReplayLoginUrl AND @InstantReplayLoginUrl is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pIRWholesaler_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the IRWholesaler table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [WholesalerID]
					, [LanguageID]
					, [IRCustomerID]
					, [LocalDNIS]
					, [LocalDialNumber]
					, [LocalAccessType]
					, [TollFreeDNIS]
					, [TollFreeDialNumber]
					, [TollFreeAccessType]
					, [InstantReplayURL]
					, [StorageDuration]
					, [InstantReplayLoginURL]
					FROM [dbo].[IRWholesaler] {0}
				)
				SELECT
				       [WholesalerID],
				       [LanguageID],
				       [IRCustomerID],
				       [LocalDNIS],
				       [LocalDialNumber],
				       [LocalAccessType],
				       [TollFreeDNIS],
				       [TollFreeDialNumber],
				       [TollFreeAccessType],
				       [InstantReplayURL],
				       [StorageDuration],
				       [InstantReplayLoginURL]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[IRWholesaler] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceSummary_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pInvoiceSummary_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceSummary table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [InvoiceNumber]'
				SET @SQL = @SQL + ', [AmountOfLastBill]'
				SET @SQL = @SQL + ', [Payment1]'
				SET @SQL = @SQL + ', [TotalCredits]'
				SET @SQL = @SQL + ', [TotalLatePaymentCharges]'
				SET @SQL = @SQL + ', [BalForward]'
				SET @SQL = @SQL + ', [ProductCharges]'
				SET @SQL = @SQL + ', [MiscCharges]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TotalCurrent]'
				SET @SQL = @SQL + ', [BalanceForward]'
				SET @SQL = @SQL + ', [InvoiceDate]'
				SET @SQL = @SQL + ', [DueDate]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [TotalFreeCredits]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [BPayCustomerRefNumber]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [InvoiceNumber],'
				SET @SQL = @SQL + ' [AmountOfLastBill],'
				SET @SQL = @SQL + ' [Payment1],'
				SET @SQL = @SQL + ' [TotalCredits],'
				SET @SQL = @SQL + ' [TotalLatePaymentCharges],'
				SET @SQL = @SQL + ' [BalForward],'
				SET @SQL = @SQL + ' [ProductCharges],'
				SET @SQL = @SQL + ' [MiscCharges],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TotalCurrent],'
				SET @SQL = @SQL + ' [BalanceForward],'
				SET @SQL = @SQL + ' [InvoiceDate],'
				SET @SQL = @SQL + ' [DueDate],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [TotalFreeCredits],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [BPayCustomerRefNumber]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pInvoiceSummary_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@InvoiceNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@AmountOfLastBill" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@Payment1" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalLatePaymentCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@BalForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCurrent" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@BalanceForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TotalFreeCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BpayCustomerRefNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[InvoiceSummary]
					(
					[StartDate]
					,[EndDate]
					,[CustomerID]
					,[PriCustomerNumber]
					,[InvoiceNumber]
					,[AmountOfLastBill]
					,[Payment1]
					,[TotalCredits]
					,[TotalLatePaymentCharges]
					,[BalForward]
					,[ProductCharges]
					,[MiscCharges]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TotalCurrent]
					,[BalanceForward]
					,[InvoiceDate]
					,[DueDate]
					,[CurrencyID]
					,[WholesalerID]
					,[TotalFreeCredits]
					,[Wholesaler_ProductID]
					,[BPayCustomerRefNumber]
					)
				VALUES
					(
					@StartDate
					,@EndDate
					,@CustomerId
					,@PriCustomerNumber
					,@InvoiceNumber
					,@AmountOfLastBill
					,@Payment1
					,@TotalCredits
					,@TotalLatePaymentCharges
					,@BalForward
					,@ProductCharges
					,@MiscCharges
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TotalCurrent
					,@BalanceForward
					,@InvoiceDate
					,@DueDate
					,@CurrencyId
					,@WholesalerId
					,@TotalFreeCredits
					,@Wholesaler_ProductId
					,@BpayCustomerRefNumber
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@InvoiceNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@AmountOfLastBill" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@Payment1" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalLatePaymentCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@BalForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@TotalCurrent" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@BalanceForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TotalFreeCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BpayCustomerRefNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceSummary]
				SET
					[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[InvoiceNumber] = @InvoiceNumber
					,[AmountOfLastBill] = @AmountOfLastBill
					,[Payment1] = @Payment1
					,[TotalCredits] = @TotalCredits
					,[TotalLatePaymentCharges] = @TotalLatePaymentCharges
					,[BalForward] = @BalForward
					,[ProductCharges] = @ProductCharges
					,[MiscCharges] = @MiscCharges
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TotalCurrent] = @TotalCurrent
					,[BalanceForward] = @BalanceForward
					,[InvoiceDate] = @InvoiceDate
					,[DueDate] = @DueDate
					,[CurrencyID] = @CurrencyId
					,[WholesalerID] = @WholesalerId
					,[TotalFreeCredits] = @TotalFreeCredits
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[BPayCustomerRefNumber] = @BpayCustomerRefNumber
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[InvoiceSummary] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByStartDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByEndDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[EndDate] = @EndDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByPriCustomerNumberWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByInvoiceNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@InvoiceNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[InvoiceNumber] = @InvoiceNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pInvoiceSummary_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceSummary table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@InvoiceNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@AmountOfLastBill" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@Payment1" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@TotalCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@TotalLatePaymentCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@BalForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@ProductCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@MiscCharges" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@TotalCurrent" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@BalanceForward" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@InvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CurrencyId" type="char" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@TotalFreeCredits" type="decimal" direction="Input" size="9" precision="10" scale="2" param="(10, 2)" nulldefault="null"/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BpayCustomerRefNumber" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [CustomerID]
	, [PriCustomerNumber]
	, [InvoiceNumber]
	, [AmountOfLastBill]
	, [Payment1]
	, [TotalCredits]
	, [TotalLatePaymentCharges]
	, [BalForward]
	, [ProductCharges]
	, [MiscCharges]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TotalCurrent]
	, [BalanceForward]
	, [InvoiceDate]
	, [DueDate]
	, [CurrencyID]
	, [WholesalerID]
	, [TotalFreeCredits]
	, [Wholesaler_ProductID]
	, [BPayCustomerRefNumber]
    FROM
	[dbo].[InvoiceSummary]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([InvoiceNumber] = @InvoiceNumber OR @InvoiceNumber IS NULL)
	AND ([AmountOfLastBill] = @AmountOfLastBill OR @AmountOfLastBill IS NULL)
	AND ([Payment1] = @Payment1 OR @Payment1 IS NULL)
	AND ([TotalCredits] = @TotalCredits OR @TotalCredits IS NULL)
	AND ([TotalLatePaymentCharges] = @TotalLatePaymentCharges OR @TotalLatePaymentCharges IS NULL)
	AND ([BalForward] = @BalForward OR @BalForward IS NULL)
	AND ([ProductCharges] = @ProductCharges OR @ProductCharges IS NULL)
	AND ([MiscCharges] = @MiscCharges OR @MiscCharges IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TotalCurrent] = @TotalCurrent OR @TotalCurrent IS NULL)
	AND ([BalanceForward] = @BalanceForward OR @BalanceForward IS NULL)
	AND ([InvoiceDate] = @InvoiceDate OR @InvoiceDate IS NULL)
	AND ([DueDate] = @DueDate OR @DueDate IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([TotalFreeCredits] = @TotalFreeCredits OR @TotalFreeCredits IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([BPayCustomerRefNumber] = @BpayCustomerRefNumber OR @BpayCustomerRefNumber IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [CustomerID]
	, [PriCustomerNumber]
	, [InvoiceNumber]
	, [AmountOfLastBill]
	, [Payment1]
	, [TotalCredits]
	, [TotalLatePaymentCharges]
	, [BalForward]
	, [ProductCharges]
	, [MiscCharges]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TotalCurrent]
	, [BalanceForward]
	, [InvoiceDate]
	, [DueDate]
	, [CurrencyID]
	, [WholesalerID]
	, [TotalFreeCredits]
	, [Wholesaler_ProductID]
	, [BPayCustomerRefNumber]
    FROM
	[dbo].[InvoiceSummary]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([InvoiceNumber] = @InvoiceNumber AND @InvoiceNumber is not null)
	OR ([AmountOfLastBill] = @AmountOfLastBill AND @AmountOfLastBill is not null)
	OR ([Payment1] = @Payment1 AND @Payment1 is not null)
	OR ([TotalCredits] = @TotalCredits AND @TotalCredits is not null)
	OR ([TotalLatePaymentCharges] = @TotalLatePaymentCharges AND @TotalLatePaymentCharges is not null)
	OR ([BalForward] = @BalForward AND @BalForward is not null)
	OR ([ProductCharges] = @ProductCharges AND @ProductCharges is not null)
	OR ([MiscCharges] = @MiscCharges AND @MiscCharges is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TotalCurrent] = @TotalCurrent AND @TotalCurrent is not null)
	OR ([BalanceForward] = @BalanceForward AND @BalanceForward is not null)
	OR ([InvoiceDate] = @InvoiceDate AND @InvoiceDate is not null)
	OR ([DueDate] = @DueDate AND @DueDate is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([TotalFreeCredits] = @TotalFreeCredits AND @TotalFreeCredits is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([BPayCustomerRefNumber] = @BpayCustomerRefNumber AND @BpayCustomerRefNumber is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pInvoiceSummary_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceSummary table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [StartDate]
					, [EndDate]
					, [CustomerID]
					, [PriCustomerNumber]
					, [InvoiceNumber]
					, [AmountOfLastBill]
					, [Payment1]
					, [TotalCredits]
					, [TotalLatePaymentCharges]
					, [BalForward]
					, [ProductCharges]
					, [MiscCharges]
					, [LocalTaxAmount]
					, [FederalTaxAmount]
					, [TotalCurrent]
					, [BalanceForward]
					, [InvoiceDate]
					, [DueDate]
					, [CurrencyID]
					, [WholesalerID]
					, [TotalFreeCredits]
					, [Wholesaler_ProductID]
					, [BPayCustomerRefNumber]
					FROM [dbo].[InvoiceSummary] {0}
				)
				SELECT
				       [ID],
				       [StartDate],
				       [EndDate],
				       [CustomerID],
				       [PriCustomerNumber],
				       [InvoiceNumber],
				       [AmountOfLastBill],
				       [Payment1],
				       [TotalCredits],
				       [TotalLatePaymentCharges],
				       [BalForward],
				       [ProductCharges],
				       [MiscCharges],
				       [LocalTaxAmount],
				       [FederalTaxAmount],
				       [TotalCurrent],
				       [BalanceForward],
				       [InvoiceDate],
				       [DueDate],
				       [CurrencyID],
				       [WholesalerID],
				       [TotalFreeCredits],
				       [Wholesaler_ProductID],
				       [BPayCustomerRefNumber]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[InvoiceSummary] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_InvoiceSummary_GetInvoiceSummary"  skip="true">
			<comment><![CDATA[-- Stored procedure
/*****************************************
Purpose: Used to return the main invoice summary report section.

Example:
	EXEC p_InvoiceSummary_GetInvoiceSummary 'apr 1 2008', 8
	EXEC p_InvoiceSummary_GetInvoiceSummary 'september 1 2008', -1

*****************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
SELECT     dbo.InvoiceSummary.*, dbo.Customer.BillingContactName, dbo.Customer.BillingContactPhoneNumber, dbo.Customer.BillingContactEmailAddress, 
          dbo.Customer.BillingContactAddress1, dbo.Customer.BillingContactAddress2, dbo.Customer.BillingContactCity, dbo.Customer.BillingContactCountry, 
          dbo.Customer.BillingContactRegion, dbo.Customer.BillingContactPostalCode, dbo.Customer.CompanyID, dbo.Customer.BillingPeriodCutoff, 
          dbo.Customer.Enabled, dbo.Company.Description AS ComanyName
FROM      dbo.InvoiceSummary INNER JOIN
          dbo.Customer ON dbo.InvoiceSummary.CustomerID = dbo.Customer.ID INNER JOIN
          dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID
WHERE StartDate = @StartDate 
	AND (CustomerID = @CustomerID or @CustomerID = -1)
AND NOT 
(AmountOfLastBill = 0 AND Payment1 = 0 AND TotalCredits = 0 AND TotalLatePaymentCharges = 0 
 AND BalForward = 0 AND ProductCharges = 0 AND MiscCharges = 0 AND TotalCurrent = 0
 AND BalanceForward = 0) 
 
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail"  skip="true">
			<comment><![CDATA[-- Stored procedure
/*****************************************
Purpose: Used to return invoice for mailing or emailing to customers.

NOTES:
--March/2013 - this SP is used to get the data for send Conference Summary emails to customers so the logic
	has changed from the previous version which was used for send Invoices to customers.

Example:
	EXEC [p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail] '0000000001', 'apr 1 2011', 8
	EXEC [p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail] '0000000001', 'feb 1 2013', -1

*****************************************/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
SELECT     dbo.InvoiceSummary.*, dbo.Customer.BillingContactName, dbo.Customer.BillingContactPhoneNumber, dbo.Customer.BillingContactEmailAddress, 
	dbo.Customer.BillingContactAddress1, dbo.Customer.BillingContactAddress2, dbo.Customer.BillingContactCity, dbo.Customer.BillingContactCountry, 
	dbo.Customer.BillingContactRegion, dbo.Customer.BillingContactPostalCode, dbo.Customer.CompanyID, dbo.Customer.BillingPeriodCutoff, 
	dbo.Customer.Enabled, dbo.Company.Description AS CompanyName
	, (SELECT TOP 1 FeatureOptionDisplayName FROM dbo.vw_FeatureOptionsForCustomers FOFC WHERE FOFC.FeatureID = 18 AND FOFC.CustomerID = dbo.InvoiceSummary.CustomerID) AS InvoiceDeliveryMethod
--March/2013 - added a new setting to key off of for send Conf. Summaries.
	, (SELECT TOP 1 FeatureOptionDisplayName FROM dbo.vw_FeatureOptionsForCustomers FOFC WHERE FOFC.FeatureID = 46 AND FOFC.CustomerID = dbo.InvoiceSummary.CustomerID) AS ConferenceSummaryEmail
FROM      dbo.InvoiceSummary INNER JOIN
          dbo.Customer ON dbo.InvoiceSummary.CustomerID = dbo.Customer.ID INNER JOIN
          dbo.Company ON dbo.Customer.CompanyID = dbo.Company.ID
WHERE Customer.WholesalerID = @WholesalerID AND 
	StartDate = @StartDate AND
	(CustomerID = @CustomerID or @CustomerID = -1) 
--AND	(CustomerID IN (Select DISTINCT CustomerID FROM dbo.vw_FeatureOptionsForCustomers FOFC WHERE FOFC.FeatureID = @FeatureID))
/* March/2013 Logic used before when emailing Invoices
AND NOT --DON"T INCLUDE IF ALL ZERO
(AmountOfLastBill = 0 AND Payment1 = 0 AND TotalCredits = 0 AND TotalLatePaymentCharges = 0 
 AND BalForward = 0 AND ProductCharges = 0 AND MiscCharges = 0 AND TotalCurrent = 0
 AND BalanceForward = 0) 
*/
--Jan 30/2012 -- not between these values and without a pmt
AND NOT (BalanceForward BETWEEN -1.00 AND 1.00 AND Payment1 = 0) 
--March/2013 - care that customers are Enabled and that they used services
AND Enabled = 1
AND NOT --DON"T INCLUDE IF ZERO
	(ProductCharges = 0 AND MiscCharges = 0) 

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_InvoiceSummary_GetServiceSummary"  skip="true">
			<comment><![CDATA[/*****************************************
Purpose: Used to return a subreport for the invoice Service Summary section.

Example:
	EXEC [p_InvoiceSummary_GetServiceSummary] 'July 1 2011', 223

*****************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Select * from (
	--Return Only Service base charge (bridge) items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 1 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, dbo.Wholesaler_Product.Name AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (1))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only LD and Toll Charge items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 2 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Long Distance and Toll Charges' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (12))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name



/* --- Replaced by more detiled Breakdown
	--Return Only LD and Toll Charge items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 2 AS DisplayOrder,

			--Used to map different names to the same field. Makes it easier to update.
			dbo.vw_ProductRatesForCustomer.ProductRateDisplayName AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges LEFT OUTER JOIN
                      dbo.vw_ProductRatesForCustomer ON dbo.InvoiceCharges.CustomerID = dbo.vw_ProductRatesForCustomer.CustomerID AND 
                      dbo.InvoiceCharges.ProductRateID = dbo.vw_ProductRatesForCustomer.ProductRateID LEFT OUTER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (12))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name,
	dbo.vw_ProductRatesForCustomer.ProductRateDisplayName

*/


	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only Misc Charge items, even if they are linked to a Service as this matches the Invoice logic.
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 3 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Miscellaneous Charges' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (2,6,8)) AND TransactionAmount>0
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only Free Credit items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 4 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Free Conferencing Credit' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (11))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name

	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Credit items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 4 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Credits' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (7))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name

) DT1
WHERE StartDate = @StartDate AND CustomerID = @CustomerID
ORDER BY CustomerID, DisplayOrder

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_InvoiceSummary_GetServiceDetails"  skip="true">
			<comment><![CDATA[/*****************************************
Purpose: Used to return a subreport for the invoice Service Summary section.

Example:
	EXEC p_InvoiceSummary_GetServiceDetails 'Feb 1 2009', 8
*****************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Select * from (
	--Return Only Service base charge (bridge) items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 1 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, dbo.Wholesaler_Product.Name AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (1))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only LD and Toll Charge items
SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
                      dbo.ProductRate.DisplayName AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount), SUM(dbo.InvoiceCharges.ElapsedTimeSeconds), 
                      2 AS DisplayOrder, 'Long Distance and Toll Charges - ' + dbo.ProductRate.DisplayName AS InvoiceServiceName
FROM         dbo.InvoiceCharges INNER JOIN
                      dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID INNER JOIN
                      dbo.ProductRate ON dbo.InvoiceCharges.ProductRateID = dbo.ProductRate.ID LEFT OUTER JOIN
                      dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (12))	
GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.ProductRate.DisplayName

UNION ALL -- Need UNION ALL TO allow duplicates where are not really dups. --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only Misc Charge items, even if they are linked to a Service as this matches the Invoice logic.
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, dbo.InvoiceCharges.TransactionAmount AS TransactionAmount, 
			  dbo.InvoiceCharges.ElapsedTimeSeconds AS ElapsedTimeSeconds, 3 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Miscellaneous Charges - ' + dbo.InvoiceCharges.TransactionDescription AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	--REMOVED CustomerTransactionTypeID = 8 as this is a Non-Rev. Affect item and should be listed here as it will incr. Rev. falsely
	--WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (2,6,8))
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (2,6)) AND TransactionAmount > 0

--	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
/*
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder


	--Return Only Free Credit items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 4 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Free Conferencing Credit' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (11))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
*/
) DT1
WHERE StartDate = @StartDate AND CustomerID = @CustomerID
ORDER BY CustomerID, DisplayOrder

END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_InvoiceSummary_GetServiceSummaryTest"  skip="true">
			<comment><![CDATA[/*****************************************
Purpose: Used to return a subreport for the invoice Service Summary section.

Example:
	EXEC [p_InvoiceSummary_GetServiceSummaryTest] 'July 1 2011', 223

*****************************************/
]]></comment>
			<parameters>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Select * from (
	--Return Only Service base charge (bridge) items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 1 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, dbo.Wholesaler_Product.Name AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (1))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only LD and Toll Charge items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 2 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Long Distance and Toll Charges' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (12))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name



/* --- Replaced by more detiled Breakdown
	--Return Only LD and Toll Charge items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 2 AS DisplayOrder,

			--Used to map different names to the same field. Makes it easier to update.
			dbo.vw_ProductRatesForCustomer.ProductRateDisplayName AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges LEFT OUTER JOIN
                      dbo.vw_ProductRatesForCustomer ON dbo.InvoiceCharges.CustomerID = dbo.vw_ProductRatesForCustomer.CustomerID AND 
                      dbo.InvoiceCharges.ProductRateID = dbo.vw_ProductRatesForCustomer.ProductRateID LEFT OUTER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (12))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name,
	dbo.vw_ProductRatesForCustomer.ProductRateDisplayName

*/


	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only Misc Charge items, even if they are linked to a Service as this matches the Invoice logic.
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 3 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Miscellaneous Charges' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (2,6,8)) AND TransactionAmount>0
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name
	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Only Free Credit items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 4 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Free Conferencing Credit' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (11))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name

	UNION --ORDER BY dbo.InvoiceCharges.CustomerID, 1 AS DisplayOrder

	--Return Credit items
	SELECT     TOP (100) PERCENT dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, 
			  dbo.Wholesaler_Product.Name AS Wholesaler_ProductName, SUM(dbo.InvoiceCharges.TransactionAmount) AS TransactionAmount, 
			  SUM(dbo.InvoiceCharges.ElapsedTimeSeconds) AS ElapsedTimeSeconds, 4 AS DisplayOrder
			--Used to map different names to the same field. Makes it easier to update.
			, 'Conferencing Credit' AS InvoiceServiceName 
	FROM         dbo.InvoiceCharges INNER JOIN
						  dbo.CustomerTransactionType ON dbo.InvoiceCharges.CustomerTransactionTypeID = dbo.CustomerTransactionType.ID LEFT OUTER JOIN
						  dbo.Wholesaler_Product ON dbo.InvoiceCharges.Wholesaler_ProductID = dbo.Wholesaler_Product.ID
	WHERE     (dbo.InvoiceCharges.CustomerTransactionTypeID IN (7))
	GROUP BY dbo.InvoiceCharges.StartDate, dbo.InvoiceCharges.EndDate, dbo.InvoiceCharges.CustomerID, dbo.Wholesaler_Product.Name

) DT1
WHERE StartDate = @StartDate AND CustomerID = @CustomerID
ORDER BY CustomerID, DisplayOrder

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pExtensionTypeCategory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pExtensionTypeCategory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionTypeCategory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CategoryName]'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionTypeCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CategoryName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionTypeCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pExtensionTypeCategory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ExtensionTypeCategory]
					(
					[id]
					,[CategoryName]
					)
				VALUES
					(
					@Id
					,@CategoryName
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionTypeCategory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ExtensionTypeCategory]
				SET
					[id] = @Id
					,[CategoryName] = @CategoryName
				WHERE
[id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionTypeCategory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ExtensionTypeCategory] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionTypeCategory_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionTypeCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pExtensionTypeCategory_GetByCategoryName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionTypeCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
				WHERE
					[CategoryName] = @CategoryName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pExtensionTypeCategory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ExtensionTypeCategory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CategoryName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CategoryName]
    FROM
	[dbo].[ExtensionTypeCategory]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CategoryName] = @CategoryName OR @CategoryName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CategoryName]
    FROM
	[dbo].[ExtensionTypeCategory]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CategoryName] = @CategoryName AND @CategoryName is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pExtensionTypeCategory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionTypeCategory table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [CategoryName]
					FROM [dbo].[ExtensionTypeCategory] {0}
				)
				SELECT
				       [id],
				       [CategoryName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ExtensionTypeCategory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pExtensionType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ExtensionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pExtensionType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pExtensionType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ExtensionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ExtensionTypeCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ExtensionType]
					(
					[Name]
					,[DisplayName]
					,[ExtensionTypeCategoryID]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@ExtensionTypeCategoryId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ExtensionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ExtensionTypeCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ExtensionType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[ExtensionTypeCategoryID] = @ExtensionTypeCategoryId
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ExtensionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ExtensionType] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pExtensionType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pExtensionType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pExtensionType_GetByExtensionTypeCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ExtensionTypeCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[ExtensionTypeCategoryID] = @ExtensionTypeCategoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pExtensionType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ExtensionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ExtensionTypeCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [Name]
	, [DisplayName]
	, [ExtensionTypeCategoryID]
    FROM
	[dbo].[ExtensionType]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([ExtensionTypeCategoryID] = @ExtensionTypeCategoryId OR @ExtensionTypeCategoryId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [Name]
	, [DisplayName]
	, [ExtensionTypeCategoryID]
    FROM
	[dbo].[ExtensionType]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([ExtensionTypeCategoryID] = @ExtensionTypeCategoryId AND @ExtensionTypeCategoryId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pExtensionType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [Name]
					, [DisplayName]
					, [ExtensionTypeCategoryID]
					FROM [dbo].[ExtensionType] {0}
				)
				SELECT
				       [id],
				       [Name],
				       [DisplayName],
				       [ExtensionTypeCategoryID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ExtensionType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pEventManager_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EventManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pEventManager_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EventManager table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [Created]'
				SET @SQL = @SQL + ' FROM [dbo].[EventManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [Created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EventManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pEventManager_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EventManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[EventManager]
					(
					[CustomerID]
					,[UserID]
					,[Description]
					,[Enabled]
					,[Created]
					)
				VALUES
					(
					@CustomerId
					,@UserId
					,@Description
					,@Enabled
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEventManager_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EventManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EventManager]
				SET
					[CustomerID] = @CustomerId
					,[UserID] = @UserId
					,[Description] = @Description
					,[Enabled] = @Enabled
					,[Created] = @Created
				WHERE
[id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEventManager_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EventManager table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[EventManager] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEventManager_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[UserID] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEventManager_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEventManager_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEventManager_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EventManager table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Created" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [UserID]
	, [Description]
	, [Enabled]
	, [Created]
    FROM
	[dbo].[EventManager]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([Created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [UserID]
	, [Description]
	, [Enabled]
	, [Created]
    FROM
	[dbo].[EventManager]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([Created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pEventManager_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EventManager table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [id]
					, [CustomerID]
					, [UserID]
					, [Description]
					, [Enabled]
					, [Created]
					FROM [dbo].[EventManager] {0}
				)
				SELECT
				       [id],
				       [CustomerID],
				       [UserID],
				       [Description],
				       [Enabled],
				       [Created]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[EventManager] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransactionImport_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TransactionDate],
					[TransactionAmount],
					[TransactionDescription],
					[CustomerTransactionTypeID],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ModifiedBy],
					[CreatedDate],
					[PostedToCustTrans],
					[PostedToCustTransDate],
					[ImportType],
					[ErrorCodesID],
					[ReferenceNumber],
					[UniqueConferenceID],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransactionImport]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransactionImport_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionImport table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToCustTrans]'
				SET @SQL = @SQL + ', [PostedToCustTransDate]'
				SET @SQL = @SQL + ', [ImportType]'
				SET @SQL = @SQL + ', [ErrorCodesID]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionImport]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToCustTrans],'
				SET @SQL = @SQL + ' [PostedToCustTransDate],'
				SET @SQL = @SQL + ' [ImportType],'
				SET @SQL = @SQL + ' [ErrorCodesID],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionImport]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomerTransactionImport_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PostedToCustTrans" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PostedToCustTransDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ImportType" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ErrorCodesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CustomerTransactionImport]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[TransactionDate]
					,[TransactionAmount]
					,[TransactionDescription]
					,[CustomerTransactionTypeID]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ModifiedBy]
					,[CreatedDate]
					,[PostedToCustTrans]
					,[PostedToCustTransDate]
					,[ImportType]
					,[ErrorCodesID]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@TransactionDate
					,@TransactionAmount
					,@TransactionDescription
					,@CustomerTransactionTypeId
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ModifiedBy
					,@CreatedDate
					,@PostedToCustTrans
					,@PostedToCustTransDate
					,@ImportType
					,@ErrorCodesId
					,@ReferenceNumber
					,@UniqueConferenceId
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionImport_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PostedToCustTrans" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PostedToCustTransDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ImportType" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ErrorCodesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransactionImport]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[TransactionDescription] = @TransactionDescription
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[PostedToCustTrans] = @PostedToCustTrans
					,[PostedToCustTransDate] = @PostedToCustTransDate
					,[ImportType] = @ImportType
					,[ErrorCodesID] = @ErrorCodesId
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionImport_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerTransactionImport] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionImport_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionImport table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TransactionDate],
					[TransactionAmount],
					[TransactionDescription],
					[CustomerTransactionTypeID],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ModifiedBy],
					[CreatedDate],
					[PostedToCustTrans],
					[PostedToCustTransDate],
					[ImportType],
					[ErrorCodesID],
					[ReferenceNumber],
					[UniqueConferenceID],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransactionImport]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionImport_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransactionImport table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@PostedToCustTrans" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PostedToCustTransDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ImportType" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ErrorCodesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TransactionDate]
	, [TransactionAmount]
	, [TransactionDescription]
	, [CustomerTransactionTypeID]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToCustTrans]
	, [PostedToCustTransDate]
	, [ImportType]
	, [ErrorCodesID]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransactionImport]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PostedToCustTrans] = @PostedToCustTrans OR @PostedToCustTrans IS NULL)
	AND ([PostedToCustTransDate] = @PostedToCustTransDate OR @PostedToCustTransDate IS NULL)
	AND ([ImportType] = @ImportType OR @ImportType IS NULL)
	AND ([ErrorCodesID] = @ErrorCodesId OR @ErrorCodesId IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TransactionDate]
	, [TransactionAmount]
	, [TransactionDescription]
	, [CustomerTransactionTypeID]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToCustTrans]
	, [PostedToCustTransDate]
	, [ImportType]
	, [ErrorCodesID]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransactionImport]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PostedToCustTrans] = @PostedToCustTrans AND @PostedToCustTrans is not null)
	OR ([PostedToCustTransDate] = @PostedToCustTransDate AND @PostedToCustTransDate is not null)
	OR ([ImportType] = @ImportType AND @ImportType is not null)
	OR ([ErrorCodesID] = @ErrorCodesId AND @ErrorCodesId is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomerTransactionImport_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionImport table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [TransactionDate]
					, [TransactionAmount]
					, [TransactionDescription]
					, [CustomerTransactionTypeID]
					, [Wholesaler_ProductID]
					, [ProductRateID]
					, [Quantity]
					, [SellRate]
					, [BuyRate]
					, [WSTransactionAmount]
					, [ModifiedBy]
					, [CreatedDate]
					, [PostedToCustTrans]
					, [PostedToCustTransDate]
					, [ImportType]
					, [ErrorCodesID]
					, [ReferenceNumber]
					, [UniqueConferenceID]
					, [LocalTaxRate]
					, [FederalTaxRate]
					, [LocalTaxAmount]
					, [FederalTaxAmount]
					, [ElapsedTimeSeconds]
					FROM [dbo].[CustomerTransactionImport] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [TransactionDate],
				       [TransactionAmount],
				       [TransactionDescription],
				       [CustomerTransactionTypeID],
				       [Wholesaler_ProductID],
				       [ProductRateID],
				       [Quantity],
				       [SellRate],
				       [BuyRate],
				       [WSTransactionAmount],
				       [ModifiedBy],
				       [CreatedDate],
				       [PostedToCustTrans],
				       [PostedToCustTransDate],
				       [ImportType],
				       [ErrorCodesID],
				       [ReferenceNumber],
				       [UniqueConferenceID],
				       [LocalTaxRate],
				       [FederalTaxRate],
				       [LocalTaxAmount],
				       [FederalTaxAmount],
				       [ElapsedTimeSeconds]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerTransactionImport] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_CustomerTransactionImport_PostCustomerTransactionCharges"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To post items to the CustomerTransaction table from the CustomerTransactionImport table.
NOTES: 
1) The default workflow is to process all charges where the PostedToCustTrans flag is set to zero thus 
transactions that were missed for a particular month would still be processed.
2) Some transaction types require that additional taxes be applied. The tax amount can be either positive or negative
depending of if the transaction type is a credit or debt to the customers account.
3) All amounts are entered as positive number but depending on the transaction type, the value is change to either negative or positive.
4) The process to gather and post the monthly Product charges (where services/products were used), is [p_UTIL_INV_PostMonthlyCharges].
This SP was reworked to handle the special cases of those items being posted here as the correct Customer Bal. wasn't being calculated.

--The process to consolidate the all monthly charges for invoice creation is p_UTIL_INV_GenerateInvoiceSummary

Testing Scripts:
Select * from CustomerTransactionImport where customerid = 14
--Update CustomerTransactionImport Set PostedToCustTrans = 0, PostedToCustTransDate = NULL WHERE CustomerID = 14
Select * from CustomerTransaction WHERE CustomerID = 14 AND PostedToInvoiceDate IS NULL
--DELETE from CustomerTransaction WHERE CustomerID = 14 AND PostedToInvoiceDate IS NULL

Select CTT.Name,TransactionAmount, WSTransactionAmount,LocalTaxrate, federaltaxrate,LocalTaxAmount, FederalTaxAmount,TransactionTotal,CustomerBalance
,Quantity, SellRate, BuyRate, CustomerID, ModeratorID from CustomerTransaction CT inner join CustomerTransactionType CTT on CT.CustomerTransactionTypeID = CTT.ID
Order by CT.ID

-- Which ones have the neg. multiplier and taxing
	Select CustomerTransactionType.Name,GLPostingType.multiplier, GLPostingType.calculatetax, CustomerTransactionTypeID, customertransactionimport.*
		FROM      dbo.GLPostingType INNER JOIN
				  dbo.CustomerTransactionType ON dbo.GLPostingType.ID = dbo.CustomerTransactionType.GLPostingTypeID INNER JOIN
				  dbo.CustomerTransactionImport ON dbo.CustomerTransactionType.ID = dbo.CustomerTransactionImport.CustomerTransactionTypeID
Exec p_Customer_GetBalanceInfo @WholesalerID='0000000001',@CustomerID=14
Exec p_Customer_GetBalanceInfo @WholesalerID='0000000001',@CustomerID=18

EXAMPLES:
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 'admin' --Process anything in the CustomerTransactionImport table.
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 'admin', 2 --Process only specific record
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 'admin', null, 11 --Process all records with the specific CustomerTransactionType value
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 'admin', null, null, 'Mar 1 2008' --Process all records greater then or equal to this date in the CustomerTransactionImport table.
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 'admin', null, null, 'Mar 1 2008', 'Apr 1 2008'  --Process all between these dates.
REPOST SCENARIO:
	--Process anything in the CustomerTransactionImport table and use Name Of ModifiedBy field for UserName
	EXEC p_CustomerTransactionImport_PostCustomerTransactionCharges 

NOTES:
The logic is simple, most of the work is tons in SQL Clean Up scripts. Wholesaler Amounts are calculated and passed thru as no tax and other
items are calculated. Basically, each record is process as we want to make sure the Current Balance is updated correctly for each transaction posted.
The script gets the Current Balance and if the GLPostingTypeID is one that taxes should be calculated on this is done. Then everything is 
totaled and posted.

History:
JS - Oct/2/2015 - Updated script to use Customer PriCustomerNumber instead of Moderator value as Mod's might be moved to a different Customer
	and the scripts should work off of Customer data.

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@UserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CustomerTransactionImportID" type="bigint" direction="Input" size="0" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerTransactionTypeID2" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

--MOD: Added to Optimize SQL Performance when using dates.
DECLARE @TempStartDate datetime, @TempEndDate datetime, @DebuggingOn bit
SET @DebuggingOn = 0 -- Set to 1 to turn debugging on, prints out info when run in Query Analyzer.
SET @TempStartDate = @StartDate
SET @TempEndDate = @EndDate

-- PERFORM DATE VALIDATION
	--Update the Start date if passed in to the beginning of the day
	IF @TempStartDate IS NOT NULL
	BEGIN
		--Update the dates passed in
		-- Set the start date to today as 12am, this is done by converting to USA without a time and then converting it back to DateTime type
		SET @TempStartDate = Cast(dbo.fn_FormatDate(@TempStartDate,'mm-dd-yyyy') as datetime)  --Midnight of the StartDate, it doesn't effect datetime data types
	END

	--Update the End date if passed in to the end the day
	IF @TempEndDate IS NOT NULL
	BEGIN
		--Update the dates passed in
		-- Set the End date as 12am, this is done by converting to USA without a time and then converting it back to DateTime type
		SET @TempEndDate = Cast(dbo.fn_FormatDate(@TempEndDate,'mm-dd-yyyy') as datetime)  --Midnight of the EndDate, it doesn't effect datetime data types
	END

SET NOCOUNT ON
	-- Added Special logic to skips these items when posting Monthly charges as all the work is done already.
	IF @CustomerTransactionTypeID2 IS NULL OR @CustomerTransactionTypeID2 NOT IN (1, 11, 12)
	BEGIN
		--CLEAN UP DATA IN IMPORT TABLE TO MAKE SURE ALL FK ITEMS ARE SET, WSID is always in the data (req.)
		-- COULD BE REFACTORED IF SOME OTHER PROCESS NEEDS TO RUN THIS.
		-- If ModeratorID is set
		UPDATE CustomerTransactionImport
		SET CustomerID = M.CustomerID, PriCustomerNumber = C.PriCustomerNumber, SecCustomerNumber = M.SecCustomerNumber
--SELECT TOP 100 *
		FROM dbo.CustomerTransactionImport AS CTI INNER JOIN
               dbo.Moderator AS M ON CTI.ModeratorID = M.ID AND CTI.WholesalerID = M.WholesalerID INNER JOIN
               dbo.Customer AS C ON M.CustomerID = C.ID
		WHERE PostedToCustTrans = 0

		-- If CustomerID and WholesalerID is set
		UPDATE CustomerTransactionImport
		SET PriCustomerNumber = C.PriCustomerNumber
--SELECT TOP 100 *
		FROM	dbo.CustomerTransactionImport AS CTI INNER JOIN
               dbo.Customer AS C ON CTI.CustomerID = C.ID AND CTI.WholesalerID = C.WholesalerID
		WHERE PostedToCustTrans = 0

		-- If WSID and PriCustomerNumber is set --Usually set when importing transaction files in batch
		UPDATE CustomerTransactionImport
		SET CustomerID = C.ID
--SELECT TOP 100 *
		FROM	dbo.CustomerTransactionImport AS CTI INNER JOIN
			dbo.Customer AS C ON CTI.PriCustomerNumber = C.PriCustomerNumber AND CTI.WholesalerID = C.WholesalerID
		WHERE PostedToCustTrans = 0 AND CustomerID IS NULL --Stops it from update already updated items

		-- If WSID, PriCustomerNumber, and SecCustomerNumber --Usually set when importing transaction files in batch
		UPDATE CustomerTransactionImport
		SET CustomerID = M.CustomerID, ModeratorID = M.ID, PriCustomerNumber = C.PriCustomerNumber, SecCustomerNumber = M.SecCustomerNumber
--SELECT TOP 100 *
		FROM	dbo.CustomerTransactionImport AS CTI INNER JOIN
			dbo.Customer AS C ON CTI.WholesalerID = C.WholesalerID AND CTI.PriCustomerNumber = C.PriCustomerNumber INNER JOIN 
			dbo.Moderator AS M ON C.ID = M.CustomerID AND CTI.SecCustomerNumber = M.SecCustomerNumber
		WHERE PostedToCustTrans = 0

	--CLEAN UP - Calculate the Wholesaler_ProductID, SellRate, and/or BuyRate if not passed in, USED IN CASE WHERE Misc. Charges are Auto Posted or other similar scenario's
		UPDATE CustomerTransactionImport
		SET Wholesaler_ProductID = (SELECT TOP 1 Wholesaler_ProductID FROM dbo.vw_ProductRatesForWholesaler WHERE ProductRateID = CTI.ProductRateID)
		,SellRate = (SELECT TOP 1 ProductRateValueSellRate FROM dbo.vw_ProductRatesForCustomer WHERE CustomerID = CTI.CustomerID AND ProductRateID = CTI.ProductRateID) 
		,BuyRate = (SELECT TOP 1 ProductRateValueBuyRate FROM dbo.vw_ProductRatesForCustomer WHERE CustomerID = CTI.CustomerID AND ProductRateID = CTI.ProductRateID) 
--SELECT TOP 100 *
		FROM dbo.CustomerTransactionImport CTI
		WHERE CTI.PostedToCustTrans = 0 AND CTI.ProductRateID IS NOT NULL 
			AND CTI.Wholesaler_ProductID IS NULL

	--CLEAN UP - Calculate the Retail and WS Amounts when ProductRateID passed in(basically Quantity * Rate). 
/*
BIG NOTE: This part is used when running automated posting of items, such as recording biz process. The logic is based on the fact
that the Quantity is set.
For Biz processes, such as Posting of Misc Charges, the Quantity is set and the amt might passed in so the Calculation of Sell Rate * Quantity
would be wrong. The first case handles this by only doing it when the Transacation amount is Zero.
*/
		-- DONE HERE TO Simplify logical and Speed things up.
		UPDATE CustomerTransactionImport
		SET TransactionAmount = ISNULL((Quantity * SellRate),0.00), WSTransactionAmount = ISNULL((Quantity * BuyRate),0.00)
--Select *
		FROM dbo.CustomerTransactionImport
		WHERE PostedToCustTrans = 0 AND ProductRateID IS NOT NULL AND Quantity IS NOT NULL AND TransactionAmount = 0

	--CLEAN UP - Mark any Bad Transaction Types.
		UPDATE CustomerTransactionImport
		SET PostedToCustTrans = 0, PostedToCustTransDate=NULL, ErrorCodesID = 2
--Select *
		FROM  dbo.GLPostingType INNER JOIN
			  dbo.CustomerTransactionType ON dbo.GLPostingType.ID = dbo.CustomerTransactionType.GLPostingTypeID RIGHT OUTER JOIN
			  dbo.CustomerTransactionImport ON dbo.CustomerTransactionType.ID = dbo.CustomerTransactionImport.CustomerTransactionTypeID
		WHERE     (dbo.CustomerTransactionType.ID IS NULL) OR (dbo.GLPostingType.ID IS NULL)

	END -- End Special Case

	--CLEAN UP - Set the transaction Multipler for the Trans (1 for charge, -1 for credit). Basically, turns Credits in Neg. values as this decreases the Balance owing.
		-- DONE HERE TO Simplify logical and Speed things up.
		UPDATE CustomerTransactionImport
		SET TransactionAmount = ISNULL((GLPostingType.Multiplier * TransactionAmount),0.00), WSTransactionAmount = ISNULL((GLPostingType.Multiplier * WSTransactionAmount),0.00)
		,LocalTaxAmount = ISNULL((GLPostingType.Multiplier * LocalTaxAmount),0.00), FederalTaxAmount = ISNULL((GLPostingType.Multiplier * FederalTaxAmount),0.00)
--Select CustomerTransactionTypeID, GLPostingType.Multiplier, TransactionAmount, WSTransactionAmount, LocalTaxAmount, FederalTaxAmount, ISNULL((GLPostingType.Multiplier * TransactionAmount),0.00)
		FROM      dbo.GLPostingType INNER JOIN
				  dbo.CustomerTransactionType ON dbo.GLPostingType.ID = dbo.CustomerTransactionType.GLPostingTypeID INNER JOIN
				  dbo.CustomerTransactionImport ON dbo.CustomerTransactionType.ID = dbo.CustomerTransactionImport.CustomerTransactionTypeID
		WHERE PostedToCustTrans = 0

--SET TO VERY RESTRICTIVE TRANSACTION LEVEL SO ONLY THE SELECTED ROWS GET LOCKED UNTIL SP DONE
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE 
BEGIN TRANSACTION
	--GO THRU EVER RECORD AND POST THE TRANS, 
	-- NOTE: Have to use Cursors as the transaction amounts and balance need to be calculated on each row and Functions might not see the latest balance
	-- when posting serveral transactions for the same customer. Either way, this process can still handle serveral '000 of trans per sec. so not a big deal.
	-- Declare var's
		DECLARE @CustomerTransactionImportID2 bigint,@WholesalerID char(10),@CustomerID int,@ModeratorID int,@PriCustomerNumber varchar(50),@SecCustomerNumber varchar(6),
		@TransactionDate datetime ,@TransactionAmount decimal(9, 3) ,@TransactionDescription varchar(100),@CustomerTransactionTypeID int ,@Wholesaler_ProductID int,
		@ProductRateID int,@Quantity int,@SellRate decimal(9, 4),@BuyRate decimal(9, 4),@WSTransactionAmount decimal(9, 2)
		,@ModifiedBy varchar(50),@CreatedDate datetime,@PostedToCustTrans bit,@PostedToCustTransDate datetime,
		@ImportType varchar(100),@ErrorCodesID int, @ReferenceNumber varchar(100),@UniqueConferenceID	varchar(50),@ElapsedTimeSeconds	int
		DECLARE @CalculateTax bit -- From a different table but used for Posting rules

		DECLARE @ReturnValue int --Used because @@ERROR is not reliable when calling another SP.
		DECLARE @CurrentBalance decimal(9,2), @TransactionTotal decimal(9,2) --Used to calculate running items
		DECLARE @FederalTaxAmount decimal(18,7), @LocalTaxAmount decimal(18,7) -- Used to store Tax Amounts
		DECLARE @FederalTaxRate decimal(9,5), @LocalTaxRate decimal(9,5) -- Used to store tax rates for history
		DECLARE @TempPostedDate datetime --used to pass the posted date to several SP's, keeps it consistent

--/*
	DECLARE TempCursor CURSOR LOCAL FAST_FORWARD FOR
	--The order here needs to match the "INTO" order below.
	SELECT CTI.[ID],[WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[TransactionDate],[TransactionAmount]
	,[TransactionDescription],[CustomerTransactionTypeID],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate]
	,[WSTransactionAmount], ModifiedBy, ReferenceNumber,UniqueConferenceID,LocalTaxRate,FederalTaxRate,LocalTaxAmount,FederalTaxAmount,ElapsedTimeSeconds
-- From a different table but used to for Posting rules
	, GLPT.CalculateTax
	FROM dbo.CustomerTransactionImport AS CTI INNER JOIN dbo.CustomerTransactionType AS CTT ON CTI.CustomerTransactionTypeID = CTT.ID INNER JOIN
	dbo.GLPostingType AS GLPT ON CTT.GLPostingTypeID = GLPT.ID
	WHERE	(@CustomerTransactionImportID is null OR CTI.ID = @CustomerTransactionImportID) AND
		(@CustomerTransactionTypeID2 is null OR CTI.CustomerTransactionTypeID = @CustomerTransactionTypeID2) AND
		(@TempStartDate is null OR TransactionDate >= @TempStartDate) AND
		(@TempEndDate is null OR TransactionDate < @TempEndDate) AND
		(PostedToCustTrans = 0) AND (ErrorCodesID = 0) --don't process errors, they need to be fixed and resubmited.

	OPEN TempCursor
	FETCH NEXT FROM TempCursor
	INTO @CustomerTransactionImportID2,@WholesalerID,@CustomerID,@ModeratorID,@PriCustomerNumber,@SecCustomerNumber,@TransactionDate,@TransactionAmount
	,@TransactionDescription,@CustomerTransactionTypeID,@Wholesaler_ProductID,@ProductRateID,@Quantity,@SellRate,@BuyRate
	,@WSTransactionAmount,@ModifiedBy, @ReferenceNumber,@UniqueConferenceID,@LocalTaxRate,@FederalTaxRate,@LocalTaxAmount,@FederalTaxAmount,@ElapsedTimeSeconds
-- From a different table but used to for Posting rules	
	,@CalculateTax
	
	SET @TempPostedDate = GetDate() -- Post everything at the same time to make it easier to find procedure runs

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Init Local Var's each time to ensure no math errors
		SET @CurrentBalance = 0
		SET @TransactionTotal = 0
		-- Added Special logic to skips these items when posting Monthly charges as all the work is done already.
		IF @CustomerTransactionTypeID2 IS NULL OR @CustomerTransactionTypeID2 NOT IN (1, 11, 12)
		BEGIN
			SET @FederalTaxAmount = 0
			SET @LocalTaxAmount = 0
			SET @FederalTaxRate = 0
			SET @LocalTaxRate = 0
		END
		--Get the Customer's current balance, CustomerID, and PriCustomerNumber
		SET @ReturnValue = 0
		SET @CustomerID = null --Reset the value so we can test it
		EXEC @ReturnValue = p_Customer_GetBalanceInfo @WholesalerID=@WholesalerID,@ReturnRowSet=0,@CustomerID=@CustomerID OUTPUT,@PriCustomerNumber=@PriCustomerNumber OUTPUT,@CurrentBalance=@CurrentBalance OUTPUT
		IF @ReturnValue != 0
			GOTO RollBackTrans		
		If @DebuggingON = 1
		BEGIN
			--For debugging
			PRINT 'CustomerTransactionImportID2: ' + CAST(@CustomerTransactionImportID2 AS varchar(20))
			PRINT 'PriCustomerNumber: ' +  @PriCustomerNumber
			PRINT 'CustomerTransactionTypeID: ' +  CAST(@CustomerTransactionTypeID AS varchar(20))
			PRINT '@CustomerID: ' +  CAST(@CustomerID AS varchar(20))
			PRINT '@CurrentBalance: ' +  CAST(@CurrentBalance AS varchar(20))
		END 

		--Test if Customer on system. If not mark record with an Error Code.
		IF @CustomerID IS Null
		BEGIN
			--Bad Customer. Mark as bad.
			-- Update the processed CustomerTransactonImport Record
			UPDATE CustomerTransactonImport Set @ErrorCodesID = 1 WHERE ID = @CustomerTransactionImportID2 --Customer info invalid or not found.
		END
		ELSE
		BEGIN
	-- POST THE TRANSACTIONS, Based on GLPostingTypes as this groups similar Accounting rules together
			/* For info:
			Select * from CustomerTransactionType order by GLPostingTypeID
			Select * from Glpostingtype
				ID	Name
				1	Charge - NonRevenue Affecting
				2	Charge - NonTaxable
				3	Charge - Taxable
				4	Credit - NonRevenue Affecting
				5	Credit - NonTaxable
				6	Credit - Taxable
			*/
			IF @CalculateTax = 1 	--TAXES CALCULATED 
			BEGIN
				-- Calculate Taxes 
				SET @ReturnValue = 0
				EXEC @ReturnValue = p_UTIL_CalculateTax @CustomerID=@CustomerID,@WholesalerID=@WholesalerID,@Amount=@TransactionAmount,
					@FederalTaxRate=@FederalTaxRate OUTPUT,@LocalTaxRate=@LocalTaxRate OUTPUT,@FederalTaxAmount=@FederalTaxAmount OUTPUT
					,@LocalTaxAmount=@LocalTaxAmount OUTPUT
				IF @ReturnValue != 0
					GOTO RollBackTrans
			END

		--FINAL LOGIC, CALCULATE AND POST
			SET @LocalTaxAmount = ROUND(@LocalTaxAmount,2)
			SET @FederalTaxAmount = ROUND(@FederalTaxAmount,2)

			-- Total the Transaction
			SET @TransactionTotal = ISNULL((@TransactionAmount + @LocalTaxAmount + @FederalTaxAmount),0.00)
			-- Calculate the Customer's New Current Balance
			SET @CurrentBalance = @CurrentBalance + ROUND(@TransactionTotal,2)

			-- Post CustomerTransactionImport to the CustomerTransaction table
			INSERT INTO CustomerTransaction ([WholesalerID],[CustomerID],[ModeratorID],[PriCustomerNumber],[SecCustomerNumber],[CustomerTransactionTypeID]
			,[TransactionDescription],[TransactionDate],[TransactionAmount],[LocalTaxRate],[FederalTaxRate],[LocalTaxAmount],[FederalTaxAmount],[TransactionTotal]
			,[CustomerBalance],[Wholesaler_ProductID],[ProductRateID],[Quantity],[SellRate],[BuyRate],[WSTransactionAmount],[ReferenceNumber]
			,[UniqueConferenceID],[PostedDate],[ModifiedBy],[CreatedDate],[PostedToInvoice],[PostedToInvoiceDate],[ElapsedTimeSeconds])
			VALUES
			(
			@WholesalerID,@CustomerID,@ModeratorID,@PriCustomerNumber,@SecCustomerNumber,@CustomerTransactionTypeID,@TransactionDescription,
			@TransactionDate,ROUND(@TransactionAmount,2),@LocalTaxRate,@FederalTaxRate,@LocalTaxAmount,@FederalTaxAmount,@TransactionTotal,@CurrentBalance,
			@Wholesaler_ProductID,@ProductRateID,@Quantity,@SellRate,@BuyRate,@WSTransactionAmount,@ReferenceNumber,@UniqueConferenceID,
		--Custom Values
			@TempPostedDate,ISNULL(@UserName,@ModifiedBy), GETDATE(), 0, NULL,@ElapsedTimeSeconds
			)

		If @DebuggingON = 1
		BEGIN
			--For debugging
			PRINT 'CustomerTransactionImportID2: ' + CAST(@CustomerTransactionImportID2 AS varchar(20))
			PRINT 'PriCustomerNumber: ' +  @PriCustomerNumber
			PRINT 'CustomerTransactionTypeID: ' +  CAST(@CustomerTransactionTypeID AS varchar(20))
			PRINT '@CustomerID: ' +  CAST(@CustomerID AS varchar(20))
			PRINT '@CurrentBalance: ' +  CAST(@CurrentBalance AS varchar(20))
		END 

			-- UPDATE THE CustomerTransactionImport RECORD BY SETTING THE POSTEDTOCustTRANS FLAG
			UPDATE CustomerTransactionImport SET PostedToCustTrans = 1, PostedToCustTransDate=@TempPostedDate, ErrorCodesID = 0
			WHERE ID = @CustomerTransactionImportID2
		END
		FETCH NEXT FROM TempCursor
		INTO @CustomerTransactionImportID2,@WholesalerID,@CustomerID,@ModeratorID,@PriCustomerNumber,@SecCustomerNumber,@TransactionDate,@TransactionAmount
		,@TransactionDescription,@CustomerTransactionTypeID,@Wholesaler_ProductID,@ProductRateID,@Quantity,@SellRate,@BuyRate
		,@WSTransactionAmount,@ModifiedBy, @ReferenceNumber,@UniqueConferenceID,@LocalTaxRate,@FederalTaxRate,@LocalTaxAmount,@FederalTaxAmount,@ElapsedTimeSeconds
	-- From a different table but used to for Posting rules	
		,@CalculateTax

	END
	CLOSE TempCursor
	DEALLOCATE TempCursor
	GOTO CommitTrans
--*/
RollBackTrans:
CLOSE TempCursor
DEALLOCATE TempCursor
PRINT 'ERROR OCCURRED PROCESSING: '	+ '@CustomerTransactionImportID2: ' + CAST(@CustomerTransactionImportID2 as varchar(10)) + '@PriCustomerNumber: ' + @PriCustomerNumber
ROLLBACK TRANSACTION
GOTO END_SP -- Have to skip commit trans if rollback called
CommitTrans:
COMMIT TRANSACTION
END_SP:
SET NOCOUNT OFF

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pCustomerReview_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerReview table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CompanyID],
					[GeneralSatisfaction],
					[AreasOfImprovement],
					[ProductDiscussed],
					[Referrals],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[CustomerReview]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerReview_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerReview table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [GeneralSatisfaction]'
				SET @SQL = @SQL + ', [AreasOfImprovement]'
				SET @SQL = @SQL + ', [ProductDiscussed]'
				SET @SQL = @SQL + ', [Referrals]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [GeneralSatisfaction],'
				SET @SQL = @SQL + ' [AreasOfImprovement],'
				SET @SQL = @SQL + ' [ProductDiscussed],'
				SET @SQL = @SQL + ' [Referrals],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomerReview_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerReview table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GeneralSatisfaction" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@AreasOfImprovement" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductDiscussed" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Referrals" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CustomerReview]
					(
					[ID]
					,[CompanyID]
					,[GeneralSatisfaction]
					,[AreasOfImprovement]
					,[ProductDiscussed]
					,[Referrals]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					)
				VALUES
					(
					@Id
					,@CompanyId
					,@GeneralSatisfaction
					,@AreasOfImprovement
					,@ProductDiscussed
					,@Referrals
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerReview_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerReview table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GeneralSatisfaction" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@AreasOfImprovement" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductDiscussed" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Referrals" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerReview]
				SET
					[ID] = @Id
					,[CompanyID] = @CompanyId
					,[GeneralSatisfaction] = @GeneralSatisfaction
					,[AreasOfImprovement] = @AreasOfImprovement
					,[ProductDiscussed] = @ProductDiscussed
					,[Referrals] = @Referrals
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerReview_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerReview table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerReview] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerReview_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerReview table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CompanyID],
					[GeneralSatisfaction],
					[AreasOfImprovement],
					[ProductDiscussed],
					[Referrals],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[CustomerReview]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerReview_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerReview table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@GeneralSatisfaction" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@AreasOfImprovement" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ProductDiscussed" type="varchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@Referrals" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyID]
	, [GeneralSatisfaction]
	, [AreasOfImprovement]
	, [ProductDiscussed]
	, [Referrals]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[CustomerReview]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([GeneralSatisfaction] = @GeneralSatisfaction OR @GeneralSatisfaction IS NULL)
	AND ([AreasOfImprovement] = @AreasOfImprovement OR @AreasOfImprovement IS NULL)
	AND ([ProductDiscussed] = @ProductDiscussed OR @ProductDiscussed IS NULL)
	AND ([Referrals] = @Referrals OR @Referrals IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyID]
	, [GeneralSatisfaction]
	, [AreasOfImprovement]
	, [ProductDiscussed]
	, [Referrals]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[CustomerReview]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([GeneralSatisfaction] = @GeneralSatisfaction AND @GeneralSatisfaction is not null)
	OR ([AreasOfImprovement] = @AreasOfImprovement AND @AreasOfImprovement is not null)
	OR ([ProductDiscussed] = @ProductDiscussed AND @ProductDiscussed is not null)
	OR ([Referrals] = @Referrals AND @Referrals is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomerReview_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerReview table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CompanyID]
					, [GeneralSatisfaction]
					, [AreasOfImprovement]
					, [ProductDiscussed]
					, [Referrals]
					, [Notes]
					, [ModifiedBy]
					, [CreatedDate]
					FROM [dbo].[CustomerReview] {0}
				)
				SELECT
				       [ID],
				       [CompanyID],
				       [GeneralSatisfaction],
				       [AreasOfImprovement],
				       [ProductDiscussed],
				       [Referrals],
				       [Notes],
				       [ModifiedBy],
				       [CreatedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerReview] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerDocument_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerDocument_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerDocument table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [DocumentDate]'
				SET @SQL = @SQL + ', [DocumentTypeID]'
				SET @SQL = @SQL + ', [KBSize]'
				SET @SQL = @SQL + ', [DocumentDirectory]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [DocumentDate],'
				SET @SQL = @SQL + ' [DocumentTypeID],'
				SET @SQL = @SQL + ' [KBSize],'
				SET @SQL = @SQL + ' [DocumentDirectory],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomerDocument_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@DocumentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DocumentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@KbSize" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CustomerDocument]
					(
					[WholesalerID]
					,[CustomerID]
					,[PriCustomerNumber]
					,[DocumentDate]
					,[DocumentTypeID]
					,[KBSize]
					,[DocumentDirectory]
					,[CreatedDate]
					,[Notes]
					,[LanguageID]
					,[Enabled]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PriCustomerNumber
					,@DocumentDate
					,@DocumentTypeId
					,@KbSize
					,@DocumentDirectory
					,@CreatedDate
					,@Notes
					,@LanguageId
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@DocumentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DocumentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@KbSize" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerDocument]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[DocumentDate] = @DocumentDate
					,[DocumentTypeID] = @DocumentTypeId
					,[KBSize] = @KbSize
					,[DocumentDirectory] = @DocumentDirectory
					,[CreatedDate] = @CreatedDate
					,[Notes] = @Notes
					,[LanguageID] = @LanguageId
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerDocument] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_GetByDocumentTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[DocumentTypeID] = @DocumentTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_GetByLanguageId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerDocument_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerDocument table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@DocumentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DocumentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@KbSize" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DocumentDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [DocumentDate]
	, [DocumentTypeID]
	, [KBSize]
	, [DocumentDirectory]
	, [CreatedDate]
	, [Notes]
	, [LanguageID]
	, [Enabled]
    FROM
	[dbo].[CustomerDocument]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([DocumentDate] = @DocumentDate OR @DocumentDate IS NULL)
	AND ([DocumentTypeID] = @DocumentTypeId OR @DocumentTypeId IS NULL)
	AND ([KBSize] = @KbSize OR @KbSize IS NULL)
	AND ([DocumentDirectory] = @DocumentDirectory OR @DocumentDirectory IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [DocumentDate]
	, [DocumentTypeID]
	, [KBSize]
	, [DocumentDirectory]
	, [CreatedDate]
	, [Notes]
	, [LanguageID]
	, [Enabled]
    FROM
	[dbo].[CustomerDocument]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([DocumentDate] = @DocumentDate AND @DocumentDate is not null)
	OR ([DocumentTypeID] = @DocumentTypeId AND @DocumentTypeId is not null)
	OR ([KBSize] = @KbSize AND @KbSize is not null)
	OR ([DocumentDirectory] = @DocumentDirectory AND @DocumentDirectory is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomerDocument_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerDocument table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [PriCustomerNumber]
					, [DocumentDate]
					, [DocumentTypeID]
					, [KBSize]
					, [DocumentDirectory]
					, [CreatedDate]
					, [Notes]
					, [LanguageID]
					, [Enabled]
					FROM [dbo].[CustomerDocument] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [PriCustomerNumber],
				       [DocumentDate],
				       [DocumentTypeID],
				       [KBSize],
				       [DocumentDirectory],
				       [CreatedDate],
				       [Notes],
				       [LanguageID],
				       [Enabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerDocument] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_Feature_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomer_Feature_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomer_Feature_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Customer_Feature]
					(
					[CustomerID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@CustomerId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer_Feature]
				SET
					[CustomerID] = @CustomerId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Customer_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetByFeatureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureID] = @FeatureId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetByFeatureOptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetByFeatureIdCustomerIdFeatureOptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [CustomerID] = @CustomerId
					AND [FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_GetByCustomerIdFeatureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[CustomerID] = @CustomerId
					AND [FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomer_Feature_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Customer_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Customer_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomer_Feature_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_Feature table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [CustomerID]
					, [FeatureID]
					, [FeatureOptionID]
					, [Enabled]
					, [FeatureOptionValue]
					FROM [dbo].[Customer_Feature] {0}
				)
				SELECT
				       [ID],
				       [CustomerID],
				       [FeatureID],
				       [FeatureOptionID],
				       [Enabled],
				       [FeatureOptionValue]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Customer_Feature] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransactionType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransactionType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [GLPostingTypeID]'
				SET @SQL = @SQL + ', [ActionValue]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Visible]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [GLPostingTypeID],'
				SET @SQL = @SQL + ' [ActionValue],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Visible]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomerTransactionType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GlPostingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActionValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Visible" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CustomerTransactionType]
					(
					[Name]
					,[Description]
					,[DisplayName]
					,[GLPostingTypeID]
					,[ActionValue]
					,[DisplayOrder]
					,[Visible]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayName
					,@GlPostingTypeId
					,@ActionValue
					,@DisplayOrder
					,@Visible
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GlPostingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActionValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Visible" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransactionType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayName] = @DisplayName
					,[GLPostingTypeID] = @GlPostingTypeId
					,[ActionValue] = @ActionValue
					,[DisplayOrder] = @DisplayOrder
					,[Visible] = @Visible
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerTransactionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_GetByGlPostingTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GlPostingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[GLPostingTypeID] = @GlPostingTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_GetByActionValue" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ActionValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[ActionValue] = @ActionValue
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransactionType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransactionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@DisplayName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@GlPostingTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ActionValue" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Visible" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [GLPostingTypeID]
	, [ActionValue]
	, [DisplayOrder]
	, [Visible]
    FROM
	[dbo].[CustomerTransactionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([GLPostingTypeID] = @GlPostingTypeId OR @GlPostingTypeId IS NULL)
	AND ([ActionValue] = @ActionValue OR @ActionValue IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Visible] = @Visible OR @Visible IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [GLPostingTypeID]
	, [ActionValue]
	, [DisplayOrder]
	, [Visible]
    FROM
	[dbo].[CustomerTransactionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([GLPostingTypeID] = @GlPostingTypeId AND @GlPostingTypeId is not null)
	OR ([ActionValue] = @ActionValue AND @ActionValue is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Visible] = @Visible AND @Visible is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomerTransactionType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [Description]
					, [DisplayName]
					, [GLPostingTypeID]
					, [ActionValue]
					, [DisplayOrder]
					, [Visible]
					FROM [dbo].[CustomerTransactionType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [Description],
				       [DisplayName],
				       [GLPostingTypeID],
				       [ActionValue],
				       [DisplayOrder],
				       [Visible]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerTransactionType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDepartment_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Department table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDepartment_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Department table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ParentID]'
				SET @SQL = @SQL + ' FROM [dbo].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ParentID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pDepartment_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Department table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Department]
					(
					[WholesalerID]
					,[CustomerID]
					,[Name]
					,[ParentID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@Name
					,@ParentId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDepartment_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Department table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Department]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[Name] = @Name
					,[ParentID] = @ParentId
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDepartment_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Department table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Department] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetByParentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[ParentID] = @ParentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_GetByWholesalerIdCustomerIdName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					AND [Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDepartment_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Department table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [Name]
	, [ParentID]
    FROM
	[dbo].[Department]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ParentID] = @ParentId OR @ParentId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [Name]
	, [ParentID]
    FROM
	[dbo].[Department]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ParentID] = @ParentId AND @ParentId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pDepartment_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Department table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [Name]
					, [ParentID]
					FROM [dbo].[Department] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [Name],
				       [ParentID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Department] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_Department_GetByCustomerIdCustom"  skip="true">
			<comment><![CDATA[/* =============================================
	Returns the Department info with default null value since
	the 'No Department' value doesn't point to anyone.
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[CustomerID] = @CustomerId 
				--Added as no other way to return specific null item
					OR ID = 0
				SELECT @@ROWCOUNT

END

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pErrorCodes_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[ErrorCodes]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pErrorCodes_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ErrorCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pErrorCodes_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[ErrorCodes]
					(
					[ID]
					,[Description]
					)
				VALUES
					(
					@Id
					,@Description
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pErrorCodes_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ErrorCodes]
				SET
					[ID] = @Id
					,[Description] = @Description
				WHERE
[ID] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pErrorCodes_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ErrorCodes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pErrorCodes_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ErrorCodes table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[ErrorCodes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pErrorCodes_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ErrorCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[ErrorCodes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[ErrorCodes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pErrorCodes_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ErrorCodes table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Description]
					FROM [dbo].[ErrorCodes] {0}
				)
				SELECT
				       [ID],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ErrorCodes] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pEmailTemplate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pEmailTemplate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailTemplate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [SMTPServer]'
				SET @SQL = @SQL + ', [SMTPUserName]'
				SET @SQL = @SQL + ', [SMTPPassword]'
				SET @SQL = @SQL + ', [BaseFileDirectory]'
				SET @SQL = @SQL + ', [TemplateName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [FileName]'
				SET @SQL = @SQL + ', [Subject]'
				SET @SQL = @SQL + ', [Sender]'
				SET @SQL = @SQL + ', [BCCList]'
				SET @SQL = @SQL + ', [CCList]'
				SET @SQL = @SQL + ', [SendToContact]'
				SET @SQL = @SQL + ', [SendToModerator]'
				SET @SQL = @SQL + ', [IncludeAttachment]'
				SET @SQL = @SQL + ', [AttachmentFileName]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [EmailTemplateContentTypeID]'
				SET @SQL = @SQL + ', [EmailTemplateGroupID]'
				SET @SQL = @SQL + ', [CallFlowID]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[EmailTemplate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [SMTPServer],'
				SET @SQL = @SQL + ' [SMTPUserName],'
				SET @SQL = @SQL + ' [SMTPPassword],'
				SET @SQL = @SQL + ' [BaseFileDirectory],'
				SET @SQL = @SQL + ' [TemplateName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [FileName],'
				SET @SQL = @SQL + ' [Subject],'
				SET @SQL = @SQL + ' [Sender],'
				SET @SQL = @SQL + ' [BCCList],'
				SET @SQL = @SQL + ' [CCList],'
				SET @SQL = @SQL + ' [SendToContact],'
				SET @SQL = @SQL + ' [SendToModerator],'
				SET @SQL = @SQL + ' [IncludeAttachment],'
				SET @SQL = @SQL + ' [AttachmentFileName],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [EmailTemplateContentTypeID],'
				SET @SQL = @SQL + ' [EmailTemplateGroupID],'
				SET @SQL = @SQL + ' [CallFlowID],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EmailTemplate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pEmailTemplate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SmtpServer" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SmtpUserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SmtpPassword" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BaseFileDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@FileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Subject" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Sender" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BccList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CcList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@SendToContact" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SendToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IncludeAttachment" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@AttachmentFileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@EmailTemplateContentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EmailTemplateGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[EmailTemplate]
					(
					[WholesalerID]
					,[SMTPServer]
					,[SMTPUserName]
					,[SMTPPassword]
					,[BaseFileDirectory]
					,[TemplateName]
					,[Description]
					,[FileName]
					,[Subject]
					,[Sender]
					,[BCCList]
					,[CCList]
					,[SendToContact]
					,[SendToModerator]
					,[IncludeAttachment]
					,[AttachmentFileName]
					,[PriCustomerNumber]
					,[EmailTemplateContentTypeID]
					,[EmailTemplateGroupID]
					,[CallFlowID]
					,[LanguageID]
					,[Enabled]
					,[DisplayOrder]
					)
				VALUES
					(
					@WholesalerId
					,@SmtpServer
					,@SmtpUserName
					,@SmtpPassword
					,@BaseFileDirectory
					,@TemplateName
					,@Description
					,@FileName
					,@Subject
					,@Sender
					,@BccList
					,@CcList
					,@SendToContact
					,@SendToModerator
					,@IncludeAttachment
					,@AttachmentFileName
					,@PriCustomerNumber
					,@EmailTemplateContentTypeId
					,@EmailTemplateGroupId
					,@CallFlowId
					,@LanguageId
					,@Enabled
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SmtpServer" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SmtpUserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SmtpPassword" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BaseFileDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@FileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Subject" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Sender" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BccList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CcList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@SendToContact" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SendToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IncludeAttachment" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@AttachmentFileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@EmailTemplateContentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EmailTemplateGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EmailTemplate]
				SET
					[WholesalerID] = @WholesalerId
					,[SMTPServer] = @SmtpServer
					,[SMTPUserName] = @SmtpUserName
					,[SMTPPassword] = @SmtpPassword
					,[BaseFileDirectory] = @BaseFileDirectory
					,[TemplateName] = @TemplateName
					,[Description] = @Description
					,[FileName] = @FileName
					,[Subject] = @Subject
					,[Sender] = @Sender
					,[BCCList] = @BccList
					,[CCList] = @CcList
					,[SendToContact] = @SendToContact
					,[SendToModerator] = @SendToModerator
					,[IncludeAttachment] = @IncludeAttachment
					,[AttachmentFileName] = @AttachmentFileName
					,[PriCustomerNumber] = @PriCustomerNumber
					,[EmailTemplateContentTypeID] = @EmailTemplateContentTypeId
					,[EmailTemplateGroupID] = @EmailTemplateGroupId
					,[CallFlowID] = @CallFlowId
					,[LanguageID] = @LanguageId
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[EmailTemplate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetByCallFlowId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[CallFlowID] = @CallFlowId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetByLanguageId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetByWholesalerIdTemplateNamePriCustomerNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [TemplateName] = @TemplateName
					AND [PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_GetByWholesalerIdTemplateName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [TemplateName] = @TemplateName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailTemplate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EmailTemplate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SmtpServer" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SmtpUserName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SmtpPassword" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BaseFileDirectory" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@FileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Subject" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Sender" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BccList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CcList" type="varchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@SendToContact" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SendToModerator" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IncludeAttachment" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@AttachmentFileName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@EmailTemplateContentTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmailTemplateGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CallFlowId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LanguageId" type="varchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DisplayOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [SMTPServer]
	, [SMTPUserName]
	, [SMTPPassword]
	, [BaseFileDirectory]
	, [TemplateName]
	, [Description]
	, [FileName]
	, [Subject]
	, [Sender]
	, [BCCList]
	, [CCList]
	, [SendToContact]
	, [SendToModerator]
	, [IncludeAttachment]
	, [AttachmentFileName]
	, [PriCustomerNumber]
	, [EmailTemplateContentTypeID]
	, [EmailTemplateGroupID]
	, [CallFlowID]
	, [LanguageID]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[EmailTemplate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([SMTPServer] = @SmtpServer OR @SmtpServer IS NULL)
	AND ([SMTPUserName] = @SmtpUserName OR @SmtpUserName IS NULL)
	AND ([SMTPPassword] = @SmtpPassword OR @SmtpPassword IS NULL)
	AND ([BaseFileDirectory] = @BaseFileDirectory OR @BaseFileDirectory IS NULL)
	AND ([TemplateName] = @TemplateName OR @TemplateName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([FileName] = @FileName OR @FileName IS NULL)
	AND ([Subject] = @Subject OR @Subject IS NULL)
	AND ([Sender] = @Sender OR @Sender IS NULL)
	AND ([BCCList] = @BccList OR @BccList IS NULL)
	AND ([CCList] = @CcList OR @CcList IS NULL)
	AND ([SendToContact] = @SendToContact OR @SendToContact IS NULL)
	AND ([SendToModerator] = @SendToModerator OR @SendToModerator IS NULL)
	AND ([IncludeAttachment] = @IncludeAttachment OR @IncludeAttachment IS NULL)
	AND ([AttachmentFileName] = @AttachmentFileName OR @AttachmentFileName IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([EmailTemplateContentTypeID] = @EmailTemplateContentTypeId OR @EmailTemplateContentTypeId IS NULL)
	AND ([EmailTemplateGroupID] = @EmailTemplateGroupId OR @EmailTemplateGroupId IS NULL)
	AND ([CallFlowID] = @CallFlowId OR @CallFlowId IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [SMTPServer]
	, [SMTPUserName]
	, [SMTPPassword]
	, [BaseFileDirectory]
	, [TemplateName]
	, [Description]
	, [FileName]
	, [Subject]
	, [Sender]
	, [BCCList]
	, [CCList]
	, [SendToContact]
	, [SendToModerator]
	, [IncludeAttachment]
	, [AttachmentFileName]
	, [PriCustomerNumber]
	, [EmailTemplateContentTypeID]
	, [EmailTemplateGroupID]
	, [CallFlowID]
	, [LanguageID]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[EmailTemplate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([SMTPServer] = @SmtpServer AND @SmtpServer is not null)
	OR ([SMTPUserName] = @SmtpUserName AND @SmtpUserName is not null)
	OR ([SMTPPassword] = @SmtpPassword AND @SmtpPassword is not null)
	OR ([BaseFileDirectory] = @BaseFileDirectory AND @BaseFileDirectory is not null)
	OR ([TemplateName] = @TemplateName AND @TemplateName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([FileName] = @FileName AND @FileName is not null)
	OR ([Subject] = @Subject AND @Subject is not null)
	OR ([Sender] = @Sender AND @Sender is not null)
	OR ([BCCList] = @BccList AND @BccList is not null)
	OR ([CCList] = @CcList AND @CcList is not null)
	OR ([SendToContact] = @SendToContact AND @SendToContact is not null)
	OR ([SendToModerator] = @SendToModerator AND @SendToModerator is not null)
	OR ([IncludeAttachment] = @IncludeAttachment AND @IncludeAttachment is not null)
	OR ([AttachmentFileName] = @AttachmentFileName AND @AttachmentFileName is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([EmailTemplateContentTypeID] = @EmailTemplateContentTypeId AND @EmailTemplateContentTypeId is not null)
	OR ([EmailTemplateGroupID] = @EmailTemplateGroupId AND @EmailTemplateGroupId is not null)
	OR ([CallFlowID] = @CallFlowId AND @CallFlowId is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pEmailTemplate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailTemplate table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [SMTPServer]
					, [SMTPUserName]
					, [SMTPPassword]
					, [BaseFileDirectory]
					, [TemplateName]
					, [Description]
					, [FileName]
					, [Subject]
					, [Sender]
					, [BCCList]
					, [CCList]
					, [SendToContact]
					, [SendToModerator]
					, [IncludeAttachment]
					, [AttachmentFileName]
					, [PriCustomerNumber]
					, [EmailTemplateContentTypeID]
					, [EmailTemplateGroupID]
					, [CallFlowID]
					, [LanguageID]
					, [Enabled]
					, [DisplayOrder]
					FROM [dbo].[EmailTemplate] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [SMTPServer],
				       [SMTPUserName],
				       [SMTPPassword],
				       [BaseFileDirectory],
				       [TemplateName],
				       [Description],
				       [FileName],
				       [Subject],
				       [Sender],
				       [BCCList],
				       [CCList],
				       [SendToContact],
				       [SendToModerator],
				       [IncludeAttachment],
				       [AttachmentFileName],
				       [PriCustomerNumber],
				       [EmailTemplateContentTypeID],
				       [EmailTemplateGroupID],
				       [CallFlowID],
				       [LanguageID],
				       [Enabled],
				       [DisplayOrder]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[EmailTemplate] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_EmailTemplate_GetEmailTemplates"  skip="true">
			<comment><![CDATA[/*
PURPOSE: Returns all the email templates or just the specific one based on the moderators subscribed services.
Also, only returns items that are enabled and the sorted by the display order.

JS: Created Sep/25/2014
JS: Mod - Aug/9/2015 - added new logic to handle Auto Meeting Invites as these are based on the users subscribed services
	- TODO: Maybe break the 'auto' logic out into a different SP

Basic logic for Subscribed Services:
1. All services – Tele, Web, Video - All "Subscribed Service" would be equal Yes
2. Tele and Web (no video) - "Subscribed Service" Teleconf = Yes, Web = Yes, Video = No
3. Web Only - (OmNovia Customer) = "Subscribed Service" Web = Yes and Billing Method = Per Moderator
4. Video Only - "Subscribed Service" Video = Yes, rest equal = No

Basic logic for Meeting Invites:
1. Pass in the template name: 'auto_meeting_invite' to get a list of all invite templates available for Moderator/conference subscribed services
2. From the list return select one template and make a different SP call to get the data
3. Mapping from subscribed services to templates is hardcoded for now.

Useful SQL:
Select * from EmailTemplate
Select * from vw_EmailInfo
Select * from moderator
Select * from dbo.vw_FeatureOptionsForModerators where moderatorid = 15

Examples: 
	--WS Test - all templates
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001',NULL,NULL,NULL
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','','',''

	--Template Test - existing logic 
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','welcome_mod',NULL,NULL
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','welcome_mod','',NULL -- None defined for Customers
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','welcome_mod','9900000',NULL -- Customer example if exists
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','welcome_mod',NULL,15 -- should run normal logic

	--Template Test - new logic - Subscribed Services, required ModeratorID as used to lookup Subscribed Services
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_subscribed_service',NULL,NULL -- should fail, need ModeratorID
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_subscribed_service',NULL,15 -- Normal logic based on Mod settings
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_subscribed_service','9900000',15 -- Normal logic based on Mod settings

	--Template Test - new logic - Meeting Invites, required ModeratorID as used to lookup Subscribed Services
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_meeting_invite',NULL,NULL -- should fail, need ModeratorID
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_meeting_invite',NULL,15 -- Returns list of items or none 
	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_meeting_invite','9900000',15 -- Returns list of items or none 

	EXEC [p_EmailTemplate_GetEmailTemplates] '0000000001','auto_meeting_tele_web',NULL,15 -- Normal logic based on Mod settings

*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

BEGIN
--Added here just for NetTiers to generate code, comment out rest of SP to when you need to regen
/*
	SELECT * from EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID 
	ORDER BY DisplayOrder,Description
	RETURN
*/
	--Force PriCustomerNumber to NULL if empty string
	IF(ISNULL(@PriCustomerNumber,'') = '')
		SET @PriCustomerNumber = null

	--Subscribed Service Items
	DECLARE @SubscribedServiceToken varchar(50), @MeetingInviteToken varchar(50)
	SET @SubscribedServiceToken = 'auto_subscribed_service' --this is the special token we are looking for to perform Sub. Service logic
	SET @MeetingInviteToken = 'auto_meeting_invite' --this is the special token we are looking for to perform Meeting Invite logic

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	IF (ISNULL(@WholesalerID,'') <> '') AND (ISNULL(@TemplateName,'') = '') AND (ISNULL(@PriCustomerNumber,'') = '') AND (ISNULL(@ModeratorID,'') = '')
	BEGIN
		SELECT * from EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID 
		ORDER BY DisplayOrder,Description
		RETURN 
	END

	--Existing functionality, return the template asked for and if Enabled
	IF @TemplateName <> @SubscribedServiceToken AND @TemplateName <> @MeetingInviteToken
	BEGIN
		IF EXISTS (SELECT 1 FROM EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateName
		AND (@PriCustomerNumber IS NULL OR PriCustomerNumber = @PriCustomerNumber))
		BEGIN
			SELECT TOP 1 * FROM EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateName
			AND (@PriCustomerNumber IS NULL OR PriCustomerNumber = @PriCustomerNumber)
			ORDER BY DisplayOrder,Description
		END
		ELSE
		BEGIN
			SELECT TOP 1 * from EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateName
			ORDER BY DisplayOrder,Description
		END
		RETURN
	END

	/*
	Subscribed Services Logic
	*/
	-- If we have the Auto token we need a ModeratorID
	IF @TemplateName LIKE 'auto_%' AND (ISNULL(@ModeratorID,'') = '')
	BEGIN
		RAISERROR ('Error: Can not find subscribed services without a ModeratorID. If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
		RETURN @@ERROR 
	END

/*
DEBUGGING:
Select * from dbo.vw_FeatureOptionsForModerators where moderatorid = 15
Select * from EmailTemplate where templatename like 'auto%'

DECLARE @ModeratorID int
SET @ModeratorID = 15 --Test Mod
*/
	--Get the values required to check biz rules
	SELECT 
		--Function Parms: ModeratorID, FeatureProductID, FeatureID
		(dbo.fn_GetModeratorFeatureOptionValue(@ModeratorID,16,88)) AS Teleconferencing,
		(dbo.fn_GetModeratorFeatureOptionValue(@ModeratorID,16,89)) AS Webconferencing,
		(dbo.fn_GetModeratorFeatureOptionValue(@ModeratorID,16,90)) AS Videoconferencing,
		(dbo.fn_GetModeratorFeatureOptionValue(@ModeratorID,4,87)) AS WebBillingMethod, -- 1=Per min, 2=Per Moderator
		(dbo.fn_GetModeratorFeatureOptionName(@ModeratorID,4,87)) AS WebBillingMethodName -- just here to see the name value but could be used
	INTO #tmpSubscribedServices
	-- DROP Table #tmpSubscribedServices
	-- SELECT * FROM #tmpSubscribedServices

	--Figure out the TemplateName based on rules
	DECLARE @TemplateNameNew varchar(50)
	SET @TemplateNameNew = NULL --init
	IF @TemplateName = @SubscribedServiceToken
	BEGIN
		SELECT @TemplateNameNew =
		--SELECT 
		(CASE 
			WHEN T1.Teleconferencing = 1 AND T1.Webconferencing = 1 AND T1.Videoconferencing = 1 THEN 'auto_all_services' --All Services
			WHEN T1.Teleconferencing = 1 AND T1.Webconferencing = 1 AND T1.Videoconferencing = 0 THEN 'auto_tele_web' --Tele and Web (no video)
			WHEN T1.Webconferencing = 1 AND T1.WebBillingMethod = 2 THEN 'auto_webonly' --Web Only - (OmNovia Customer) - Per Moderator billing
			WHEN T1.Teleconferencing = 0 AND T1.Webconferencing = 0 AND T1.Videoconferencing = 1 THEN 'auto_videoonly' --Video Only
			ELSE '' --case not handled
		END)
		FROM #tmpSubscribedServices T1
	END
	ELSE IF @TemplateName = @MeetingInviteToken
	BEGIN
		--Temp Table for List of Valid Email Templates
		CREATE TABLE #TempEmailList (TemplateName varchar(50) PRIMARY KEY);
		IF EXISTS (SELECT 1 FROM #tmpSubscribedServices T1 WHERE T1.Teleconferencing = 1)
			INSERT INTO #TempEmailList VALUES ('auto_meeting_teleonly');			
		IF EXISTS (SELECT 1 FROM #tmpSubscribedServices T1 WHERE T1.Teleconferencing = 1 AND T1.Webconferencing = 1)
			INSERT INTO #TempEmailList VALUES ('auto_meeting_tele_web');			
		IF EXISTS (SELECT 1 FROM #tmpSubscribedServices T1 WHERE T1.Webconferencing = 1)
			INSERT INTO #TempEmailList VALUES ('auto_meeting_webonly');			
		IF EXISTS (SELECT 1 FROM #tmpSubscribedServices T1 WHERE T1.Videoconferencing = 1)
			INSERT INTO #TempEmailList VALUES ('auto_meeting_videoonly');			
		SELECT * from EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName IN (SELECT TemplateName FROM #TempEmailList)
		ORDER BY DisplayOrder,Description
		RETURN
	END
	--Return Error for Scenario's not handled
	IF ISNULL(@TemplateNameNew,'') = ''
	BEGIN
		RAISERROR ('Error: Subscribed services scenario not defined. If this issue persists, please contact your Administrator.',16, 100) with NOWAIT
		RETURN @@ERROR 
	END

	--Return the Template
	IF ISNULL(@TemplateNameNew,'') <> ''
	BEGIN
		IF EXISTS (SELECT 1 FROM EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateNameNew
		AND (@PriCustomerNumber IS NULL OR PriCustomerNumber = @PriCustomerNumber))
		BEGIN
			SELECT TOP 1 * FROM EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateNameNew
			AND (@PriCustomerNumber IS NULL OR PriCustomerNumber = @PriCustomerNumber)
			ORDER BY DisplayOrder,Description
		END
		ELSE
		BEGIN
			SELECT TOP 1 * from EmailTemplate WHERE Enabled = 1 AND WholesalerID = @WholesalerID AND TemplateName = @TemplateNameNew
			ORDER BY DisplayOrder,Description
		END
		RETURN
	END
	
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_EmailTemplate_GetEmailInfo"  skip="true">
			<comment><![CDATA[/*
PURPOSE: Returns all the items used in different email templates.
Select * from EmailTemplate
Select * from vw_EmailInfo

Examples: 
	--Mod test
	EXEC [p_EmailTemplate_GetEmailInfo] '0000000001',NULL,10,NULL
	--Customer test
	EXEC [p_EmailTemplate_GetEmailInfo] '0000000001',20,NULL,NULL
	--Recording test
	EXEC [p_EmailTemplate_GetEmailInfo] '0000000001',NULL,5572,9853

*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerID" type="char" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RecordingID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


--No need to pass back recording information when not required.
IF @RecordingID IS NULL
BEGIN
	SELECT TOP 1 *
	FROM  vw_EmailInfo
	WHERE
		WholesalerID = @WholesalerID 
		AND (@CustomerID IS NULL OR CustomerID = @CustomerID)
		AND (@ModeratorID IS NULL OR ModeratorID = @ModeratorID)
END
ELSE
BEGIN
	-- Include Recording Info
	SELECT TOP 1 vw_EmailInfo.*
	,Recording.ID AS RecordingID,Recording.RecordingStartTime,Recording.RecordingEndTime,Recording.ReplayCode
	,CONVERT(VARCHAR(20), Recording.RecordingStartTime, 100) AS RecordingDate
	--added for hosting service and new email templates
	,HostedLinkExpiryDate, ExtendRecordingDate,	HostedLinkType,	HostedLinkURL
	FROM  vw_EmailInfo INNER JOIN
	               Recording ON vw_EmailInfo.ModeratorID = Recording.ModeratorID AND 
	               vw_EmailInfo.WholesalerID = Recording.WholesalerID
	WHERE Recording.ModeratorID = @ModeratorID AND Recording.ID = @RecordingID

END
			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pEmailNotification_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EmailNotification table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pEmailNotification_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailNotification table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [TemplateName]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [SentDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ErrorInfo]'
				SET @SQL = @SQL + ' FROM [dbo].[EmailNotification]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [TemplateName],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [SentDate],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ErrorInfo]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EmailNotification]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pEmailNotification_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EmailNotification table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ErrorInfo" type="varchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[EmailNotification]
					(
					[TemplateName]
					,[ModeratorID]
					,[Email]
					,[EmailSent]
					,[SentDate]
					,[CreatedDate]
					,[ErrorInfo]
					)
				VALUES
					(
					@TemplateName
					,@ModeratorId
					,@Email
					,@EmailSent
					,@SentDate
					,@CreatedDate
					,@ErrorInfo
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EmailNotification table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ErrorInfo" type="varchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EmailNotification]
				SET
					[TemplateName] = @TemplateName
					,[ModeratorID] = @ModeratorId
					,[Email] = @Email
					,[EmailSent] = @EmailSent
					,[SentDate] = @SentDate
					,[CreatedDate] = @CreatedDate
					,[ErrorInfo] = @ErrorInfo
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EmailNotification table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[EmailNotification] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_GetByEmail" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[Email] = @Email
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_GetByEmailSent" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[EmailSent] = @EmailSent
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_GetBySentDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[SentDate] = @SentDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_GetByTemplateNameCreatedDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[TemplateName] = @TemplateName
					AND [CreatedDate] = @CreatedDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pEmailNotification_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EmailNotification table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TemplateName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Email" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@EmailSent" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SentDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ErrorInfo" type="varchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [TemplateName]
	, [ModeratorID]
	, [Email]
	, [EmailSent]
	, [SentDate]
	, [CreatedDate]
	, [ErrorInfo]
    FROM
	[dbo].[EmailNotification]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([TemplateName] = @TemplateName OR @TemplateName IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([EmailSent] = @EmailSent OR @EmailSent IS NULL)
	AND ([SentDate] = @SentDate OR @SentDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ErrorInfo] = @ErrorInfo OR @ErrorInfo IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [TemplateName]
	, [ModeratorID]
	, [Email]
	, [EmailSent]
	, [SentDate]
	, [CreatedDate]
	, [ErrorInfo]
    FROM
	[dbo].[EmailNotification]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([TemplateName] = @TemplateName AND @TemplateName is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([EmailSent] = @EmailSent AND @EmailSent is not null)
	OR ([SentDate] = @SentDate AND @SentDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ErrorInfo] = @ErrorInfo AND @ErrorInfo is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pEmailNotification_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailNotification table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [TemplateName]
					, [ModeratorID]
					, [Email]
					, [EmailSent]
					, [SentDate]
					, [CreatedDate]
					, [ErrorInfo]
					FROM [dbo].[EmailNotification] {0}
				)
				SELECT
				       [ID],
				       [TemplateName],
				       [ModeratorID],
				       [Email],
				       [EmailSent],
				       [SentDate],
				       [CreatedDate],
				       [ErrorInfo]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[EmailNotification] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransaction_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pCustomerTransaction_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransaction table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [CustomerBalance]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [PostedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToInvoice]'
				SET @SQL = @SQL + ', [PostedToInvoiceDate]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransaction]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [CustomerBalance],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [PostedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToInvoice],'
				SET @SQL = @SQL + ' [PostedToInvoiceDate],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransaction]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pCustomerTransaction_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@CustomerBalance" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PostedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PostedToInvoice" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PostedToInvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[CustomerTransaction]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[CustomerTransactionTypeID]
					,[TransactionDescription]
					,[TransactionDate]
					,[TransactionAmount]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TransactionTotal]
					,[CustomerBalance]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[PostedDate]
					,[ModifiedBy]
					,[CreatedDate]
					,[PostedToInvoice]
					,[PostedToInvoiceDate]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@CustomerTransactionTypeId
					,@TransactionDescription
					,@TransactionDate
					,@TransactionAmount
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TransactionTotal
					,@CustomerBalance
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ReferenceNumber
					,@UniqueConferenceId
					,@PostedDate
					,@ModifiedBy
					,@CreatedDate
					,@PostedToInvoice
					,@PostedToInvoiceDate
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault=""/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault=""/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@CustomerBalance" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PostedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@PostedToInvoice" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PostedToInvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransaction]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[TransactionDescription] = @TransactionDescription
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TransactionTotal] = @TransactionTotal
					,[CustomerBalance] = @CustomerBalance
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[PostedDate] = @PostedDate
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[PostedToInvoice] = @PostedToInvoice
					,[PostedToInvoiceDate] = @PostedToInvoiceDate
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerTransaction] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByCustomerTransactionTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerTransactionTypeID] = @CustomerTransactionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByProductRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByWholesaler_ProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[Wholesaler_ProductID] = @Wholesaler_ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByCustomerIdWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerID] = @CustomerId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByPriCustomerNumberWholesalerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_GetByTransactionDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[TransactionDate] = @TransactionDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pCustomerTransaction_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransaction table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@WholesalerId" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModeratorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PriCustomerNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@SecCustomerNumber" type="varchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@CustomerTransactionTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionDescription" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@LocalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@FederalTaxRate" type="decimal" direction="Input" size="5" precision="9" scale="5" param="(9, 5)" nulldefault="null"/>
				<parameter name="@LocalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@FederalTaxAmount" type="decimal" direction="Input" size="9" precision="18" scale="7" param="(18, 7)" nulldefault="null"/>
				<parameter name="@TransactionTotal" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@CustomerBalance" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@BuyRate" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@WsTransactionAmount" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@ReferenceNumber" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UniqueConferenceId" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PostedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedBy" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@PostedToInvoice" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PostedToInvoiceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ElapsedTimeSeconds" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [CustomerBalance]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [PostedDate]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToInvoice]
	, [PostedToInvoiceDate]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransaction]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TransactionTotal] = @TransactionTotal OR @TransactionTotal IS NULL)
	AND ([CustomerBalance] = @CustomerBalance OR @CustomerBalance IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([PostedDate] = @PostedDate OR @PostedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PostedToInvoice] = @PostedToInvoice OR @PostedToInvoice IS NULL)
	AND ([PostedToInvoiceDate] = @PostedToInvoiceDate OR @PostedToInvoiceDate IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [CustomerBalance]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [PostedDate]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToInvoice]
	, [PostedToInvoiceDate]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransaction]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TransactionTotal] = @TransactionTotal AND @TransactionTotal is not null)
	OR ([CustomerBalance] = @CustomerBalance AND @CustomerBalance is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([PostedDate] = @PostedDate AND @PostedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PostedToInvoice] = @PostedToInvoice AND @PostedToInvoice is not null)
	OR ([PostedToInvoiceDate] = @PostedToInvoiceDate AND @PostedToInvoiceDate is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pCustomerTransaction_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransaction table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [CustomerTransactionTypeID]
					, [TransactionDescription]
					, [TransactionDate]
					, [TransactionAmount]
					, [LocalTaxRate]
					, [FederalTaxRate]
					, [LocalTaxAmount]
					, [FederalTaxAmount]
					, [TransactionTotal]
					, [CustomerBalance]
					, [Wholesaler_ProductID]
					, [ProductRateID]
					, [Quantity]
					, [SellRate]
					, [BuyRate]
					, [WSTransactionAmount]
					, [ReferenceNumber]
					, [UniqueConferenceID]
					, [PostedDate]
					, [ModifiedBy]
					, [CreatedDate]
					, [PostedToInvoice]
					, [PostedToInvoiceDate]
					, [ElapsedTimeSeconds]
					FROM [dbo].[CustomerTransaction] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [CustomerTransactionTypeID],
				       [TransactionDescription],
				       [TransactionDate],
				       [TransactionAmount],
				       [LocalTaxRate],
				       [FederalTaxRate],
				       [LocalTaxAmount],
				       [FederalTaxAmount],
				       [TransactionTotal],
				       [CustomerBalance],
				       [Wholesaler_ProductID],
				       [ProductRateID],
				       [Quantity],
				       [SellRate],
				       [BuyRate],
				       [WSTransactionAmount],
				       [ReferenceNumber],
				       [UniqueConferenceID],
				       [PostedDate],
				       [ModifiedBy],
				       [CreatedDate],
				       [PostedToInvoice],
				       [PostedToInvoiceDate],
				       [ElapsedTimeSeconds]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerTransaction] {0};
				
				END
			]]></body>
		</procedure>
		
				
		<procedure owner="dbo" name="p_CustomerTransaction_DeleteTransaction"  skip="true">
			<comment><![CDATA[/****************************************************************************
Purpose: To delete a record from CustomerTransaction table while still keeping 
the balance correct. 
NOTE: You can't delete transactions that are posted to an INVOICE

Select top 10 * from CustomerTransaction where customerid = 8 order by id desc

Examples:
	EXEC [p_CustomerTransaction_DeleteTransaction] 302616

*****************************************************************************/
]]></comment>
			<parameters>
				<parameter name="@ID" type="bigint" direction="Input" size="0" precision="19" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				


DECLARE @PriCustomerNumber AS varchar(10)
DECLARE @WholesalerID AS char(10)
DECLARE @TransactionTotal AS Decimal(9,2)
DECLARE @PostedToInvoice AS Bit

	SELECT @WholesalerID = WholesalerID, @PriCustomerNumber = PriCustomerNumber, @TransactionTotal = TransactionTotal,
	@PostedToInvoice = PostedToInvoice
	FROM CustomerTransaction WHERE ID = @ID
IF @PostedToInvoice = 1
BEGIN
		RAISERROR ('Error: You can not delete a transaction that has been posted to an invoice and billed. No changes to the system were made.',16, 100) with NOWAIT
		RETURN @@ERROR 
END

IF @PostedToInvoice = 0
BEGIN
	UPDATE CustomerTransaction
	SET CustomerBalance = CustomerBalance - @TransactionTotal
	WHERE ID > @ID AND PriCustomerNumber = @PriCustomerNumber AND WholesalerID = @WholesalerID
	
	DELETE CustomerTransaction WHERE ID = @ID
END

			]]></body>
					</procedure>
				
		<procedure owner="dbo" name="p_CustomerTransaction_GetByCustomer"  skip="true">
			<comment><![CDATA[/*********************************************************
Purpose: Returns the transaction by Customer for a specific
date range.

Examples:
	EXEC p_CustomerTransaction_GetByCustomer @CustomerID=8, @StartDate='dec 1 2008', @EndDate='jan 1 2009'
**********************************************************/
]]></comment>
			<parameters>
				<parameter name="@CustomerID" type="int" direction="Input" size="0" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="0" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT * 
	FROM vw_CustomerTransactionList
	WHERE
		CustomerID = @CustomerID AND TransactionDate BETWEEN @StartDate AND @EndDate
	ORDER BY ID -- This is the way the transaction run and it keep "currentbalance" inline

			]]></body>
					</procedure>
		
		<procedure owner="dbo" name="pDocumentType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DocumentType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Name],
					[ContentType]
				FROM
					[dbo].[DocumentType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pDocumentType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DocumentType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContentType]'
				SET @SQL = @SQL + ' FROM [dbo].[DocumentType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContentType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DocumentType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pDocumentType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DocumentType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[DocumentType]
					(
					[Name]
					,[ContentType]
					)
				VALUES
					(
					@Name
					,@ContentType
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDocumentType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DocumentType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DocumentType]
				SET
					[Name] = @Name
					,[ContentType] = @ContentType
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDocumentType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DocumentType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DocumentType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pDocumentType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DocumentType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Name],
					[ContentType]
				FROM
					[dbo].[DocumentType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pDocumentType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DocumentType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ContentType" type="varchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [ContentType]
    FROM
	[dbo].[DocumentType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ContentType] = @ContentType OR @ContentType IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [ContentType]
    FROM
	[dbo].[DocumentType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ContentType] = @ContentType AND @ContentType is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pDocumentType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DocumentType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Name]
					, [ContentType]
					FROM [dbo].[DocumentType] {0}
				)
				SELECT
				       [ID],
				       [Name],
				       [ContentType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DocumentType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pWholesaler_Product_Feature_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
					
				INSERT INTO [dbo].[Wholesaler_Product_Feature]
					(
					[Wholesaler_ProductID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@Wholesaler_ProductId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler_Product_Feature]
				SET
					[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Wholesaler_Product_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_GetByFeatureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[FeatureID] = @FeatureId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_GetByFeatureOptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_GetByWholesaler_ProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[Wholesaler_ProductID] = @Wholesaler_ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler_Product_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Wholesaler_ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Enabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FeatureOptionValue" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Wholesaler_ProductID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Wholesaler_Product_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Wholesaler_ProductID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Wholesaler_Product_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="pWholesaler_Product_Feature_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product_Feature table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ID]
					, [Wholesaler_ProductID]
					, [FeatureID]
					, [FeatureOptionID]
					, [Enabled]
					, [FeatureOptionValue]
					FROM [dbo].[Wholesaler_Product_Feature] {0}
				)
				SELECT
				       [ID],
				       [Wholesaler_ProductID],
				       [FeatureID],
				       [FeatureOptionID],
				       [Enabled],
				       [FeatureOptionValue]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Wholesaler_Product_Feature] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_AccessType_ProductRates_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_AccessType_ProductRates view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductRateName],
					[ProductID],
					[ProductName],
					[ProductDefaultOption],
					[ProductTypeID],
					[ProductRateTypeID],
					[ProductTypeName],
					[ProductRateTypeName],
					[ProductDisplayOrder],
					[ProductRateDisplayName],
					[ProductRateDisplayOrder],
					[ProductTypeDisplayName],
					[ProductTypeDisplayOrder],
					[ProductRateTypeDisplayName],
					[ProductRateTypeDisplayOrder],
					[DDLDescription],
					[ProductRateDescription],
					[RatingTypeID],
					[RatingTypeDisplayName],
					[AccessTypeID],
					[ProductRateID],
					[AccessTypeName],
					[AccessTypeDisplayName],
					[AccessTypeValue],
					[AccessTypeBillable],
					[AccessTypeEnabled],
					[AccessType_ProductRateID],
					[ProductRateIntervalID],
					[ProductRateTaxableID],
					[ProductRateCountryID],
					[MinimumTimeBeforeChargedSec],
					[DDLDescription2]
				FROM
					[dbo].[vw_AccessType_ProductRates]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_AccessType_ProductRates_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_AccessType_ProductRates view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductRateName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductRateName]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductDefaultOption]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductTypeName]'
				SET @SQL = @SQL + ', [ProductRateTypeName]'
				SET @SQL = @SQL + ', [ProductDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [ProductRateDisplayOrder]'
				SET @SQL = @SQL + ', [ProductTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductTypeDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayOrder]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [ProductRateDescription]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ', [RatingTypeDisplayName]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [AccessTypeName]'
				SET @SQL = @SQL + ', [AccessTypeDisplayName]'
				SET @SQL = @SQL + ', [AccessTypeValue]'
				SET @SQL = @SQL + ', [AccessTypeBillable]'
				SET @SQL = @SQL + ', [AccessTypeEnabled]'
				SET @SQL = @SQL + ', [AccessType_ProductRateID]'
				SET @SQL = @SQL + ', [ProductRateIntervalID]'
				SET @SQL = @SQL + ', [ProductRateTaxableID]'
				SET @SQL = @SQL + ', [ProductRateCountryID]'
				SET @SQL = @SQL + ', [MinimumTimeBeforeChargedSec]'
				SET @SQL = @SQL + ', [DDLDescription2]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_AccessType_ProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductRateName],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductDefaultOption],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductTypeName],'
				SET @SQL = @SQL + ' [ProductRateTypeName],'
				SET @SQL = @SQL + ' [ProductDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [ProductRateDisplayOrder],'
				SET @SQL = @SQL + ' [ProductTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductTypeDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayOrder],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [ProductRateDescription],'
				SET @SQL = @SQL + ' [RatingTypeID],'
				SET @SQL = @SQL + ' [RatingTypeDisplayName],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [AccessTypeName],'
				SET @SQL = @SQL + ' [AccessTypeDisplayName],'
				SET @SQL = @SQL + ' [AccessTypeValue],'
				SET @SQL = @SQL + ' [AccessTypeBillable],'
				SET @SQL = @SQL + ' [AccessTypeEnabled],'
				SET @SQL = @SQL + ' [AccessType_ProductRateID],'
				SET @SQL = @SQL + ' [ProductRateIntervalID],'
				SET @SQL = @SQL + ' [ProductRateTaxableID],'
				SET @SQL = @SQL + ' [ProductRateCountryID],'
				SET @SQL = @SQL + ' [MinimumTimeBeforeChargedSec],'
				SET @SQL = @SQL + ' [DDLDescription2]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_AccessType_ProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_AccessType_ProductRates_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_AccessType_ProductRates table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ProductRateName]
					, [ProductID]
					, [ProductName]
					, [ProductDefaultOption]
					, [ProductTypeID]
					, [ProductRateTypeID]
					, [ProductTypeName]
					, [ProductRateTypeName]
					, [ProductDisplayOrder]
					, [ProductRateDisplayName]
					, [ProductRateDisplayOrder]
					, [ProductTypeDisplayName]
					, [ProductTypeDisplayOrder]
					, [ProductRateTypeDisplayName]
					, [ProductRateTypeDisplayOrder]
					, [DDLDescription]
					, [ProductRateDescription]
					, [RatingTypeID]
					, [RatingTypeDisplayName]
					, [AccessTypeID]
					, [ProductRateID]
					, [AccessTypeName]
					, [AccessTypeDisplayName]
					, [AccessTypeValue]
					, [AccessTypeBillable]
					, [AccessTypeEnabled]
					, [AccessType_ProductRateID]
					, [ProductRateIntervalID]
					, [ProductRateTaxableID]
					, [ProductRateCountryID]
					, [MinimumTimeBeforeChargedSec]
					, [DDLDescription2]
					FROM [dbo].[vw_AccessType_ProductRates] {0}
				)
				SELECT
				       [ProductRateName],
				       [ProductID],
				       [ProductName],
				       [ProductDefaultOption],
				       [ProductTypeID],
				       [ProductRateTypeID],
				       [ProductTypeName],
				       [ProductRateTypeName],
				       [ProductDisplayOrder],
				       [ProductRateDisplayName],
				       [ProductRateDisplayOrder],
				       [ProductTypeDisplayName],
				       [ProductTypeDisplayOrder],
				       [ProductRateTypeDisplayName],
				       [ProductRateTypeDisplayOrder],
				       [DDLDescription],
				       [ProductRateDescription],
				       [RatingTypeID],
				       [RatingTypeDisplayName],
				       [AccessTypeID],
				       [ProductRateID],
				       [AccessTypeName],
				       [AccessTypeDisplayName],
				       [AccessTypeValue],
				       [AccessTypeBillable],
				       [AccessTypeEnabled],
				       [AccessType_ProductRateID],
				       [ProductRateIntervalID],
				       [ProductRateTaxableID],
				       [ProductRateCountryID],
				       [MinimumTimeBeforeChargedSec],
				       [DDLDescription2]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_AccessType_ProductRates] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ConferenceCallList_Unique_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ConferenceCallList_Unique view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorName],
					[ConferenceStartTime],
					[UniqueConferenceID],
					[NumberPeopleOnCall],
					[AuxiliaryConferenceID],
					[ReferenceNumber]
				FROM
					[dbo].[vw_ConferenceCallList_Unique]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ConferenceCallList_Unique_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceCallList_Unique view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ConferenceStartTime]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [NumberPeopleOnCall]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceCallList_Unique]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ConferenceStartTime],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [NumberPeopleOnCall],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [ReferenceNumber]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceCallList_Unique]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_ConferenceCallList_Unique_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceCallList_Unique table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ModeratorID]
					, [CustomerID]
					, [WholesalerID]
					, [ModeratorName]
					, [ConferenceStartTime]
					, [UniqueConferenceID]
					, [NumberPeopleOnCall]
					, [AuxiliaryConferenceID]
					, [ReferenceNumber]
					FROM [dbo].[vw_ConferenceCallList_Unique] {0}
				)
				SELECT
				       [ModeratorID],
				       [CustomerID],
				       [WholesalerID],
				       [ModeratorName],
				       [ConferenceStartTime],
				       [UniqueConferenceID],
				       [NumberPeopleOnCall],
				       [AuxiliaryConferenceID],
				       [ReferenceNumber]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_ConferenceCallList_Unique] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ConferenceList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ConferenceList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[CompanyName],
					[AdminName],
					[ModeratorName],
					[ModeratorCode],
					[PassCode],
					[SeeVoghMeetingId],
					[Enabled],
					[LastWalletCardSentdate],
					[WholesalerID],
					[CustomerID],
					[CompanyID],
					[SalesPersonID],
					[SalesPerson],
					[UserID],
					[ConferenceName]
				FROM
					[dbo].[vw_ConferenceList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ConferenceList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [AdminName]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [SeeVoghMeetingId]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [LastWalletCardSentdate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [AdminName],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [SeeVoghMeetingId],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [LastWalletCardSentdate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [ConferenceName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_ConferenceList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ID]
					, [CompanyName]
					, [AdminName]
					, [ModeratorName]
					, [ModeratorCode]
					, [PassCode]
					, [SeeVoghMeetingId]
					, [Enabled]
					, [LastWalletCardSentdate]
					, [WholesalerID]
					, [CustomerID]
					, [CompanyID]
					, [SalesPersonID]
					, [SalesPerson]
					, [UserID]
					, [ConferenceName]
					FROM [dbo].[vw_ConferenceList] {0}
				)
				SELECT
				       [ID],
				       [CompanyName],
				       [AdminName],
				       [ModeratorName],
				       [ModeratorCode],
				       [PassCode],
				       [SeeVoghMeetingId],
				       [Enabled],
				       [LastWalletCardSentdate],
				       [WholesalerID],
				       [CustomerID],
				       [CompanyID],
				       [SalesPersonID],
				       [SalesPerson],
				       [UserID],
				       [ConferenceName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_ConferenceList] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_CustomerList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_CustomerList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[CompanyName],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[UserEnabled],
					[RoleID],
					[MustChangePassword],
					[CharityID],
					[WebMemberID],
					[DDLDescription],
					[SalesPerson],
					[SalesManagerID],
					[VerticalDescription]
				FROM
					[dbo].[vw_CustomerList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_CustomerList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [PrimaryContactName]'
				SET @SQL = @SQL + ', [PrimaryContactPhoneNumber]'
				SET @SQL = @SQL + ', [PrimaryContactEmailAddress]'
				SET @SQL = @SQL + ', [PrimaryContactAddress1]'
				SET @SQL = @SQL + ', [PrimaryContactAddress2]'
				SET @SQL = @SQL + ', [PrimaryContactCity]'
				SET @SQL = @SQL + ', [PrimaryContactCountry]'
				SET @SQL = @SQL + ', [PrimaryContactRegion]'
				SET @SQL = @SQL + ', [PrimaryContactPostalCode]'
				SET @SQL = @SQL + ', [PrimaryContactFaxNumber]'
				SET @SQL = @SQL + ', [BillingContactName]'
				SET @SQL = @SQL + ', [BillingContactPhoneNumber]'
				SET @SQL = @SQL + ', [BillingContactEmailAddress]'
				SET @SQL = @SQL + ', [BillingContactAddress1]'
				SET @SQL = @SQL + ', [BillingContactAddress2]'
				SET @SQL = @SQL + ', [BillingContactCity]'
				SET @SQL = @SQL + ', [BillingContactCountry]'
				SET @SQL = @SQL + ', [BillingContactRegion]'
				SET @SQL = @SQL + ', [BillingContactPostalCode]'
				SET @SQL = @SQL + ', [BillingContactFaxNumber]'
				SET @SQL = @SQL + ', [WebsiteURL]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [VerticalID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingPeriodCutoff]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CreditCardNameOnCard]'
				SET @SQL = @SQL + ', [CreditCardNumber]'
				SET @SQL = @SQL + ', [CreditCardExp]'
				SET @SQL = @SQL + ', [CreditCardVerCode]'
				SET @SQL = @SQL + ', [CreditCardTypeName]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [UniqueCustomerID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebGroupID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [UserEnabled]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [SalesManagerID]'
				SET @SQL = @SQL + ', [VerticalDescription]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [PrimaryContactName],'
				SET @SQL = @SQL + ' [PrimaryContactPhoneNumber],'
				SET @SQL = @SQL + ' [PrimaryContactEmailAddress],'
				SET @SQL = @SQL + ' [PrimaryContactAddress1],'
				SET @SQL = @SQL + ' [PrimaryContactAddress2],'
				SET @SQL = @SQL + ' [PrimaryContactCity],'
				SET @SQL = @SQL + ' [PrimaryContactCountry],'
				SET @SQL = @SQL + ' [PrimaryContactRegion],'
				SET @SQL = @SQL + ' [PrimaryContactPostalCode],'
				SET @SQL = @SQL + ' [PrimaryContactFaxNumber],'
				SET @SQL = @SQL + ' [BillingContactName],'
				SET @SQL = @SQL + ' [BillingContactPhoneNumber],'
				SET @SQL = @SQL + ' [BillingContactEmailAddress],'
				SET @SQL = @SQL + ' [BillingContactAddress1],'
				SET @SQL = @SQL + ' [BillingContactAddress2],'
				SET @SQL = @SQL + ' [BillingContactCity],'
				SET @SQL = @SQL + ' [BillingContactCountry],'
				SET @SQL = @SQL + ' [BillingContactRegion],'
				SET @SQL = @SQL + ' [BillingContactPostalCode],'
				SET @SQL = @SQL + ' [BillingContactFaxNumber],'
				SET @SQL = @SQL + ' [WebsiteURL],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [VerticalID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingPeriodCutoff],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CreditCardNameOnCard],'
				SET @SQL = @SQL + ' [CreditCardNumber],'
				SET @SQL = @SQL + ' [CreditCardExp],'
				SET @SQL = @SQL + ' [CreditCardVerCode],'
				SET @SQL = @SQL + ' [CreditCardTypeName],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [UniqueCustomerID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebGroupID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [UserEnabled],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [SalesManagerID],'
				SET @SQL = @SQL + ' [VerticalDescription]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_CustomerList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [PriCustomerNumber]
					, [Description]
					, [ExternalCustomerNumber]
					, [PrimaryContactName]
					, [PrimaryContactPhoneNumber]
					, [PrimaryContactEmailAddress]
					, [PrimaryContactAddress1]
					, [PrimaryContactAddress2]
					, [PrimaryContactCity]
					, [PrimaryContactCountry]
					, [PrimaryContactRegion]
					, [PrimaryContactPostalCode]
					, [PrimaryContactFaxNumber]
					, [BillingContactName]
					, [BillingContactPhoneNumber]
					, [BillingContactEmailAddress]
					, [BillingContactAddress1]
					, [BillingContactAddress2]
					, [BillingContactCity]
					, [BillingContactCountry]
					, [BillingContactRegion]
					, [BillingContactPostalCode]
					, [BillingContactFaxNumber]
					, [WebsiteURL]
					, [SalesPersonID]
					, [VerticalID]
					, [CompanyID]
					, [CurrencyID]
					, [BillingPeriodCutoff]
					, [TaxableID]
					, [CreditCardNameOnCard]
					, [CreditCardNumber]
					, [CreditCardExp]
					, [CreditCardVerCode]
					, [CreditCardTypeName]
					, [CreatedDate]
					, [LastModified]
					, [UniqueCustomerID]
					, [Enabled]
					, [UserID]
					, [WebGroupID]
					, [CompanyName]
					, [Username]
					, [Password]
					, [DisplayName]
					, [Email]
					, [Telephone]
					, [UserEnabled]
					, [RoleID]
					, [MustChangePassword]
					, [CharityID]
					, [WebMemberID]
					, [DDLDescription]
					, [SalesPerson]
					, [SalesManagerID]
					, [VerticalDescription]
					FROM [dbo].[vw_CustomerList] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [PriCustomerNumber],
				       [Description],
				       [ExternalCustomerNumber],
				       [PrimaryContactName],
				       [PrimaryContactPhoneNumber],
				       [PrimaryContactEmailAddress],
				       [PrimaryContactAddress1],
				       [PrimaryContactAddress2],
				       [PrimaryContactCity],
				       [PrimaryContactCountry],
				       [PrimaryContactRegion],
				       [PrimaryContactPostalCode],
				       [PrimaryContactFaxNumber],
				       [BillingContactName],
				       [BillingContactPhoneNumber],
				       [BillingContactEmailAddress],
				       [BillingContactAddress1],
				       [BillingContactAddress2],
				       [BillingContactCity],
				       [BillingContactCountry],
				       [BillingContactRegion],
				       [BillingContactPostalCode],
				       [BillingContactFaxNumber],
				       [WebsiteURL],
				       [SalesPersonID],
				       [VerticalID],
				       [CompanyID],
				       [CurrencyID],
				       [BillingPeriodCutoff],
				       [TaxableID],
				       [CreditCardNameOnCard],
				       [CreditCardNumber],
				       [CreditCardExp],
				       [CreditCardVerCode],
				       [CreditCardTypeName],
				       [CreatedDate],
				       [LastModified],
				       [UniqueCustomerID],
				       [Enabled],
				       [UserID],
				       [WebGroupID],
				       [CompanyName],
				       [Username],
				       [Password],
				       [DisplayName],
				       [Email],
				       [Telephone],
				       [UserEnabled],
				       [RoleID],
				       [MustChangePassword],
				       [CharityID],
				       [WebMemberID],
				       [DDLDescription],
				       [SalesPerson],
				       [SalesManagerID],
				       [VerticalDescription]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_CustomerList] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_CustomerTransactionList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_CustomerTransactionList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[CustomerTransactionTypeDisplayName],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds],
					[ProductRateDisplayName],
					[Wholesaler_ProductName],
					[ModeratorName],
					[ConferenceName],
					[ModeratorConferenceName]
				FROM
					[dbo].[vw_CustomerTransactionList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_CustomerTransactionList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerTransactionList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeDisplayName]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [CustomerBalance]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [PostedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToInvoice]'
				SET @SQL = @SQL + ', [PostedToInvoiceDate]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ', [ModeratorConferenceName]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerTransactionList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeDisplayName],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [CustomerBalance],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [PostedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToInvoice],'
				SET @SQL = @SQL + ' [PostedToInvoiceDate],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ConferenceName],'
				SET @SQL = @SQL + ' [ModeratorConferenceName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerTransactionList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_CustomerTransactionList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerTransactionList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [CustomerTransactionTypeID]
					, [CustomerTransactionTypeDisplayName]
					, [TransactionDescription]
					, [TransactionDate]
					, [TransactionAmount]
					, [LocalTaxRate]
					, [FederalTaxRate]
					, [LocalTaxAmount]
					, [FederalTaxAmount]
					, [TransactionTotal]
					, [CustomerBalance]
					, [Wholesaler_ProductID]
					, [ProductRateID]
					, [Quantity]
					, [SellRate]
					, [BuyRate]
					, [WSTransactionAmount]
					, [ReferenceNumber]
					, [UniqueConferenceID]
					, [PostedDate]
					, [ModifiedBy]
					, [CreatedDate]
					, [PostedToInvoice]
					, [PostedToInvoiceDate]
					, [ElapsedTimeSeconds]
					, [ProductRateDisplayName]
					, [Wholesaler_ProductName]
					, [ModeratorName]
					, [ConferenceName]
					, [ModeratorConferenceName]
					FROM [dbo].[vw_CustomerTransactionList] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [CustomerTransactionTypeID],
				       [CustomerTransactionTypeDisplayName],
				       [TransactionDescription],
				       [TransactionDate],
				       [TransactionAmount],
				       [LocalTaxRate],
				       [FederalTaxRate],
				       [LocalTaxAmount],
				       [FederalTaxAmount],
				       [TransactionTotal],
				       [CustomerBalance],
				       [Wholesaler_ProductID],
				       [ProductRateID],
				       [Quantity],
				       [SellRate],
				       [BuyRate],
				       [WSTransactionAmount],
				       [ReferenceNumber],
				       [UniqueConferenceID],
				       [PostedDate],
				       [ModifiedBy],
				       [CreatedDate],
				       [PostedToInvoice],
				       [PostedToInvoiceDate],
				       [ElapsedTimeSeconds],
				       [ProductRateDisplayName],
				       [Wholesaler_ProductName],
				       [ModeratorName],
				       [ConferenceName],
				       [ModeratorConferenceName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_CustomerTransactionList] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_DefaultProductRates_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_DefaultProductRates view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductRateValueID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[StartDate],
					[DefaultOption],
					[ProductRateName],
					[ProductID],
					[ProductName],
					[ProductDefaultOption],
					[ProductTypeID],
					[ProductRateTypeID],
					[ProductTypeName],
					[ProductRateTypeName],
					[ProductDisplayOrder],
					[ProductRateDisplayName],
					[ProductRateDisplayOrder],
					[ProductTypeDisplayName],
					[ProductTypeDisplayOrder],
					[ProductRateTypeDisplayName],
					[ProductRateTypeDisplayOrder],
					[DDLDescription],
					[RatingTypeID],
					[DisplayName],
					[DDLDescription2]
				FROM
					[dbo].[vw_DefaultProductRates]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_DefaultProductRates_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_DefaultProductRates view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductRateValueID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductRateValueID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [SellRateCurrencyID]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [BuyRateCurrencyID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [ProductRateName]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductDefaultOption]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductTypeName]'
				SET @SQL = @SQL + ', [ProductRateTypeName]'
				SET @SQL = @SQL + ', [ProductDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [ProductRateDisplayOrder]'
				SET @SQL = @SQL + ', [ProductTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductTypeDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayOrder]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DDLDescription2]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_DefaultProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductRateValueID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [SellRateCurrencyID],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [BuyRateCurrencyID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [ProductRateName],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductDefaultOption],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductTypeName],'
				SET @SQL = @SQL + ' [ProductRateTypeName],'
				SET @SQL = @SQL + ' [ProductDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [ProductRateDisplayOrder],'
				SET @SQL = @SQL + ' [ProductTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductTypeDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayOrder],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [RatingTypeID],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DDLDescription2]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_DefaultProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_DefaultProductRates_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_DefaultProductRates table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ProductRateValueID]
					, [ProductRateID]
					, [SellRate]
					, [SellRateCurrencyID]
					, [BuyRate]
					, [BuyRateCurrencyID]
					, [StartDate]
					, [DefaultOption]
					, [ProductRateName]
					, [ProductID]
					, [ProductName]
					, [ProductDefaultOption]
					, [ProductTypeID]
					, [ProductRateTypeID]
					, [ProductTypeName]
					, [ProductRateTypeName]
					, [ProductDisplayOrder]
					, [ProductRateDisplayName]
					, [ProductRateDisplayOrder]
					, [ProductTypeDisplayName]
					, [ProductTypeDisplayOrder]
					, [ProductRateTypeDisplayName]
					, [ProductRateTypeDisplayOrder]
					, [DDLDescription]
					, [RatingTypeID]
					, [DisplayName]
					, [DDLDescription2]
					FROM [dbo].[vw_DefaultProductRates] {0}
				)
				SELECT
				       [ProductRateValueID],
				       [ProductRateID],
				       [SellRate],
				       [SellRateCurrencyID],
				       [BuyRate],
				       [BuyRateCurrencyID],
				       [StartDate],
				       [DefaultOption],
				       [ProductRateName],
				       [ProductID],
				       [ProductName],
				       [ProductDefaultOption],
				       [ProductTypeID],
				       [ProductRateTypeID],
				       [ProductTypeName],
				       [ProductRateTypeName],
				       [ProductDisplayOrder],
				       [ProductRateDisplayName],
				       [ProductRateDisplayOrder],
				       [ProductTypeDisplayName],
				       [ProductTypeDisplayOrder],
				       [ProductRateTypeDisplayName],
				       [ProductRateTypeDisplayOrder],
				       [DDLDescription],
				       [RatingTypeID],
				       [DisplayName],
				       [DDLDescription2]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_DefaultProductRates] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForCustomers_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_FeatureOptionsForCustomers view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[WholesalerID],
					[PriCustomerNumber],
					[Customer_FeatureID],
					[Customer_FeatureCustomerID],
					[Customer_FeatureFeatureID],
					[Customer_FeatureFeatureOptionID],
					[Customer_FeatureEnabled],
					[Customer_FeatureFeatureOptionValue],
					[FeatureID],
					[FeatureProductID],
					[FeatureName],
					[FeatureDisplayName],
					[FeatureDescription],
					[FeatureDisplayNameAlt],
					[FeatureDescriptionAlt],
					[FeatureDefaultOption],
					[FeatureEnabled],
					[FeatureDisplayOrder],
					[FeatureDisplayOnlyToCustomer],
					[FeatureDisplayInAMPSite],
					[FeatureDisplayToCustomer],
					[FeatureDisplayToModerator],
					[FeatureOptionID],
					[FeatureOptionFeatureID],
					[FeatureOptionName],
					[FeatureOptionDisplayName],
					[FeatureOptionDescription],
					[FeatureOptionDisplayNameAlt],
					[FeatureOptionDescriptionAlt],
					[FeatureOptionValue],
					[FeatureOptionDisplayOrder],
					[FeatureOptionDefaultOption],
					[FeatureOptionEnabled],
					[FeatureOptionFeatureOptionTypeID],
					[FeatureOptionRegularExpression],
					[FeatureOptionTypeID],
					[FeatureOptionTypeName],
					[FeatureOptionTypeDescription],
					[FeatureOptionTypeDisplayOrder],
					[Wholesaler_ProductID],
					[Wholesaler_ProductProductID],
					[Wholesaler_ProductName],
					[Wholesaler_ProductDescription],
					[Wholesaler_ProductDisplayNameAlt],
					[Wholesaler_ProductDescriptionAlt],
					[Wholesaler_ProductDisplayOrder],
					[Wholesaler_ProductEnabled]
				FROM
					[dbo].[vw_FeatureOptionsForCustomers]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForCustomers_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForCustomers view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Customer_FeatureID]'
				SET @SQL = @SQL + ', [Customer_FeatureCustomerID]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureID]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureOptionID]'
				SET @SQL = @SQL + ', [Customer_FeatureEnabled]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureProductID]'
				SET @SQL = @SQL + ', [FeatureName]'
				SET @SQL = @SQL + ', [FeatureDisplayName]'
				SET @SQL = @SQL + ', [FeatureDescription]'
				SET @SQL = @SQL + ', [FeatureDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureDefaultOption]'
				SET @SQL = @SQL + ', [FeatureEnabled]'
				SET @SQL = @SQL + ', [FeatureDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureDisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayInAMPSite]'
				SET @SQL = @SQL + ', [FeatureDisplayToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayToModerator]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionName]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayName]'
				SET @SQL = @SQL + ', [FeatureOptionDescription]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureOptionDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureOptionDefaultOption]'
				SET @SQL = @SQL + ', [FeatureOptionEnabled]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionRegularExpression]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionTypeName]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDescription]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescription]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayNameAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescriptionAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForCustomers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Customer_FeatureID],'
				SET @SQL = @SQL + ' [Customer_FeatureCustomerID],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureID],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureOptionID],'
				SET @SQL = @SQL + ' [Customer_FeatureEnabled],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureProductID],'
				SET @SQL = @SQL + ' [FeatureName],'
				SET @SQL = @SQL + ' [FeatureDisplayName],'
				SET @SQL = @SQL + ' [FeatureDescription],'
				SET @SQL = @SQL + ' [FeatureDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureDefaultOption],'
				SET @SQL = @SQL + ' [FeatureEnabled],'
				SET @SQL = @SQL + ' [FeatureDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureDisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayInAMPSite],'
				SET @SQL = @SQL + ' [FeatureDisplayToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayToModerator],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionName],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayName],'
				SET @SQL = @SQL + ' [FeatureOptionDescription],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureOptionDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureOptionDefaultOption],'
				SET @SQL = @SQL + ' [FeatureOptionEnabled],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionRegularExpression],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionTypeName],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDescription],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescription],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayNameAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescriptionAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForCustomers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForCustomers_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForCustomers table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [WholesalerID]
					, [PriCustomerNumber]
					, [Customer_FeatureID]
					, [Customer_FeatureCustomerID]
					, [Customer_FeatureFeatureID]
					, [Customer_FeatureFeatureOptionID]
					, [Customer_FeatureEnabled]
					, [Customer_FeatureFeatureOptionValue]
					, [FeatureID]
					, [FeatureProductID]
					, [FeatureName]
					, [FeatureDisplayName]
					, [FeatureDescription]
					, [FeatureDisplayNameAlt]
					, [FeatureDescriptionAlt]
					, [FeatureDefaultOption]
					, [FeatureEnabled]
					, [FeatureDisplayOrder]
					, [FeatureDisplayOnlyToCustomer]
					, [FeatureDisplayInAMPSite]
					, [FeatureDisplayToCustomer]
					, [FeatureDisplayToModerator]
					, [FeatureOptionID]
					, [FeatureOptionFeatureID]
					, [FeatureOptionName]
					, [FeatureOptionDisplayName]
					, [FeatureOptionDescription]
					, [FeatureOptionDisplayNameAlt]
					, [FeatureOptionDescriptionAlt]
					, [FeatureOptionValue]
					, [FeatureOptionDisplayOrder]
					, [FeatureOptionDefaultOption]
					, [FeatureOptionEnabled]
					, [FeatureOptionFeatureOptionTypeID]
					, [FeatureOptionRegularExpression]
					, [FeatureOptionTypeID]
					, [FeatureOptionTypeName]
					, [FeatureOptionTypeDescription]
					, [FeatureOptionTypeDisplayOrder]
					, [Wholesaler_ProductID]
					, [Wholesaler_ProductProductID]
					, [Wholesaler_ProductName]
					, [Wholesaler_ProductDescription]
					, [Wholesaler_ProductDisplayNameAlt]
					, [Wholesaler_ProductDescriptionAlt]
					, [Wholesaler_ProductDisplayOrder]
					, [Wholesaler_ProductEnabled]
					FROM [dbo].[vw_FeatureOptionsForCustomers] {0}
				)
				SELECT
				       [CustomerID],
				       [WholesalerID],
				       [PriCustomerNumber],
				       [Customer_FeatureID],
				       [Customer_FeatureCustomerID],
				       [Customer_FeatureFeatureID],
				       [Customer_FeatureFeatureOptionID],
				       [Customer_FeatureEnabled],
				       [Customer_FeatureFeatureOptionValue],
				       [FeatureID],
				       [FeatureProductID],
				       [FeatureName],
				       [FeatureDisplayName],
				       [FeatureDescription],
				       [FeatureDisplayNameAlt],
				       [FeatureDescriptionAlt],
				       [FeatureDefaultOption],
				       [FeatureEnabled],
				       [FeatureDisplayOrder],
				       [FeatureDisplayOnlyToCustomer],
				       [FeatureDisplayInAMPSite],
				       [FeatureDisplayToCustomer],
				       [FeatureDisplayToModerator],
				       [FeatureOptionID],
				       [FeatureOptionFeatureID],
				       [FeatureOptionName],
				       [FeatureOptionDisplayName],
				       [FeatureOptionDescription],
				       [FeatureOptionDisplayNameAlt],
				       [FeatureOptionDescriptionAlt],
				       [FeatureOptionValue],
				       [FeatureOptionDisplayOrder],
				       [FeatureOptionDefaultOption],
				       [FeatureOptionEnabled],
				       [FeatureOptionFeatureOptionTypeID],
				       [FeatureOptionRegularExpression],
				       [FeatureOptionTypeID],
				       [FeatureOptionTypeName],
				       [FeatureOptionTypeDescription],
				       [FeatureOptionTypeDisplayOrder],
				       [Wholesaler_ProductID],
				       [Wholesaler_ProductProductID],
				       [Wholesaler_ProductName],
				       [Wholesaler_ProductDescription],
				       [Wholesaler_ProductDisplayNameAlt],
				       [Wholesaler_ProductDescriptionAlt],
				       [Wholesaler_ProductDisplayOrder],
				       [Wholesaler_ProductEnabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_FeatureOptionsForCustomers] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForModerators_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_FeatureOptionsForModerators view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ModeratorID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[Moderator_FeatureID],
					[Moderator_FeatureFeatureID],
					[Moderator_FeatureFeatureOptionID],
					[Moderator_FeatureEnabled],
					[Moderator_FeatureFeatureOptionValue],
					[FeatureID],
					[FeatureProductID],
					[FeatureName],
					[FeatureDisplayName],
					[FeatureDescription],
					[FeatureDisplayNameAlt],
					[FeatureDescriptionAlt],
					[FeatureDefaultOption],
					[FeatureEnabled],
					[FeatureDisplayOrder],
					[FeatureDisplayOnlyToCustomer],
					[FeatureDisplayInAMPSite],
					[FeatureDisplayToCustomer],
					[FeatureDisplayToModerator],
					[FeatureOptionID],
					[FeatureOptionFeatureID],
					[FeatureOptionName],
					[FeatureOptionDisplayName],
					[FeatureOptionDescription],
					[FeatureOptionDisplayNameAlt],
					[FeatureOptionDescriptionAlt],
					[FeatureOptionValue],
					[FeatureOptionDisplayOrder],
					[FeatureOptionDefaultOption],
					[FeatureOptionEnabled],
					[FeatureOptionFeatureOptionTypeID],
					[FeatureOptionRegularExpression],
					[FeatureOptionTypeID],
					[FeatureOptionTypeName],
					[FeatureOptionTypeDescription],
					[FeatureOptionTypeDisplayOrder],
					[Wholesaler_ProductProductID],
					[Wholesaler_ProductName],
					[Wholesaler_ProductDescription],
					[Wholesaler_ProductDisplayNameAlt],
					[Wholesaler_ProductDescriptionAlt],
					[Wholesaler_ProductDisplayOrder],
					[Wholesaler_ProductEnabled]
				FROM
					[dbo].[vw_FeatureOptionsForModerators]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForModerators_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForModerators view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [Moderator_FeatureID]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureID]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureOptionID]'
				SET @SQL = @SQL + ', [Moderator_FeatureEnabled]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureProductID]'
				SET @SQL = @SQL + ', [FeatureName]'
				SET @SQL = @SQL + ', [FeatureDisplayName]'
				SET @SQL = @SQL + ', [FeatureDescription]'
				SET @SQL = @SQL + ', [FeatureDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureDefaultOption]'
				SET @SQL = @SQL + ', [FeatureEnabled]'
				SET @SQL = @SQL + ', [FeatureDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureDisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayInAMPSite]'
				SET @SQL = @SQL + ', [FeatureDisplayToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayToModerator]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionName]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayName]'
				SET @SQL = @SQL + ', [FeatureOptionDescription]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureOptionDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureOptionDefaultOption]'
				SET @SQL = @SQL + ', [FeatureOptionEnabled]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionRegularExpression]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionTypeName]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDescription]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescription]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayNameAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescriptionAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForModerators]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [Moderator_FeatureID],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureID],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureOptionID],'
				SET @SQL = @SQL + ' [Moderator_FeatureEnabled],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureProductID],'
				SET @SQL = @SQL + ' [FeatureName],'
				SET @SQL = @SQL + ' [FeatureDisplayName],'
				SET @SQL = @SQL + ' [FeatureDescription],'
				SET @SQL = @SQL + ' [FeatureDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureDefaultOption],'
				SET @SQL = @SQL + ' [FeatureEnabled],'
				SET @SQL = @SQL + ' [FeatureDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureDisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayInAMPSite],'
				SET @SQL = @SQL + ' [FeatureDisplayToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayToModerator],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionName],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayName],'
				SET @SQL = @SQL + ' [FeatureOptionDescription],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureOptionDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureOptionDefaultOption],'
				SET @SQL = @SQL + ' [FeatureOptionEnabled],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionRegularExpression],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionTypeName],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDescription],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescription],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayNameAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescriptionAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForModerators]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_FeatureOptionsForModerators_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForModerators table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ModeratorID]
					, [WholesalerID]
					, [CustomerID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [ExternalModeratorNumber]
					, [Moderator_FeatureID]
					, [Moderator_FeatureFeatureID]
					, [Moderator_FeatureFeatureOptionID]
					, [Moderator_FeatureEnabled]
					, [Moderator_FeatureFeatureOptionValue]
					, [FeatureID]
					, [FeatureProductID]
					, [FeatureName]
					, [FeatureDisplayName]
					, [FeatureDescription]
					, [FeatureDisplayNameAlt]
					, [FeatureDescriptionAlt]
					, [FeatureDefaultOption]
					, [FeatureEnabled]
					, [FeatureDisplayOrder]
					, [FeatureDisplayOnlyToCustomer]
					, [FeatureDisplayInAMPSite]
					, [FeatureDisplayToCustomer]
					, [FeatureDisplayToModerator]
					, [FeatureOptionID]
					, [FeatureOptionFeatureID]
					, [FeatureOptionName]
					, [FeatureOptionDisplayName]
					, [FeatureOptionDescription]
					, [FeatureOptionDisplayNameAlt]
					, [FeatureOptionDescriptionAlt]
					, [FeatureOptionValue]
					, [FeatureOptionDisplayOrder]
					, [FeatureOptionDefaultOption]
					, [FeatureOptionEnabled]
					, [FeatureOptionFeatureOptionTypeID]
					, [FeatureOptionRegularExpression]
					, [FeatureOptionTypeID]
					, [FeatureOptionTypeName]
					, [FeatureOptionTypeDescription]
					, [FeatureOptionTypeDisplayOrder]
					, [Wholesaler_ProductProductID]
					, [Wholesaler_ProductName]
					, [Wholesaler_ProductDescription]
					, [Wholesaler_ProductDisplayNameAlt]
					, [Wholesaler_ProductDescriptionAlt]
					, [Wholesaler_ProductDisplayOrder]
					, [Wholesaler_ProductEnabled]
					FROM [dbo].[vw_FeatureOptionsForModerators] {0}
				)
				SELECT
				       [ModeratorID],
				       [WholesalerID],
				       [CustomerID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [ExternalModeratorNumber],
				       [Moderator_FeatureID],
				       [Moderator_FeatureFeatureID],
				       [Moderator_FeatureFeatureOptionID],
				       [Moderator_FeatureEnabled],
				       [Moderator_FeatureFeatureOptionValue],
				       [FeatureID],
				       [FeatureProductID],
				       [FeatureName],
				       [FeatureDisplayName],
				       [FeatureDescription],
				       [FeatureDisplayNameAlt],
				       [FeatureDescriptionAlt],
				       [FeatureDefaultOption],
				       [FeatureEnabled],
				       [FeatureDisplayOrder],
				       [FeatureDisplayOnlyToCustomer],
				       [FeatureDisplayInAMPSite],
				       [FeatureDisplayToCustomer],
				       [FeatureDisplayToModerator],
				       [FeatureOptionID],
				       [FeatureOptionFeatureID],
				       [FeatureOptionName],
				       [FeatureOptionDisplayName],
				       [FeatureOptionDescription],
				       [FeatureOptionDisplayNameAlt],
				       [FeatureOptionDescriptionAlt],
				       [FeatureOptionValue],
				       [FeatureOptionDisplayOrder],
				       [FeatureOptionDefaultOption],
				       [FeatureOptionEnabled],
				       [FeatureOptionFeatureOptionTypeID],
				       [FeatureOptionRegularExpression],
				       [FeatureOptionTypeID],
				       [FeatureOptionTypeName],
				       [FeatureOptionTypeDescription],
				       [FeatureOptionTypeDisplayOrder],
				       [Wholesaler_ProductProductID],
				       [Wholesaler_ProductName],
				       [Wholesaler_ProductDescription],
				       [Wholesaler_ProductDisplayNameAlt],
				       [Wholesaler_ProductDescriptionAlt],
				       [Wholesaler_ProductDisplayOrder],
				       [Wholesaler_ProductEnabled]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_FeatureOptionsForModerators] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ModeratorList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ModeratorList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[SeeVoghMeetingId],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[DepartmentName],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[UserEnabled],
					[RoleID],
					[MustChangePassword],
					[CharityID],
					[WebMemberID],
					[DDLDescription]
				FROM
					[dbo].[vw_ModeratorList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ModeratorList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [SeeVoghMeetingId]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UniqueModeratorID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebMeetingID]'
				SET @SQL = @SQL + ', [DepartmentName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [UserEnabled]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [SeeVoghMeetingId],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UniqueModeratorID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebMeetingID],'
				SET @SQL = @SQL + ' [DepartmentName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [UserEnabled],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [DDLDescription]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_ModeratorList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [CustomerID]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [ExternalModeratorNumber]
					, [ModeratorCode]
					, [PassCode]
					, [SeeVoghMeetingId]
					, [Description]
					, [DepartmentID]
					, [ModifiedBy]
					, [CreatedDate]
					, [LastModified]
					, [Enabled]
					, [UniqueModeratorID]
					, [UserID]
					, [WebMeetingID]
					, [DepartmentName]
					, [Username]
					, [Password]
					, [DisplayName]
					, [Email]
					, [Telephone]
					, [UserEnabled]
					, [RoleID]
					, [MustChangePassword]
					, [CharityID]
					, [WebMemberID]
					, [DDLDescription]
					FROM [dbo].[vw_ModeratorList] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [CustomerID],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [ExternalModeratorNumber],
				       [ModeratorCode],
				       [PassCode],
				       [SeeVoghMeetingId],
				       [Description],
				       [DepartmentID],
				       [ModifiedBy],
				       [CreatedDate],
				       [LastModified],
				       [Enabled],
				       [UniqueModeratorID],
				       [UserID],
				       [WebMeetingID],
				       [DepartmentName],
				       [Username],
				       [Password],
				       [DisplayName],
				       [Email],
				       [Telephone],
				       [UserEnabled],
				       [RoleID],
				       [MustChangePassword],
				       [CharityID],
				       [WebMemberID],
				       [DDLDescription]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_ModeratorList] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ModeratorList_AdminSite_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ModeratorList_AdminSite view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[CompanyName],
					[AdminName],
					[WebLoginName],
					[WebLoginPassword],
					[ModeratorName],
					[Email],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[Telephone],
					[RoleID],
					[CharityID],
					[CharityName],
					[SalesPerson],
					[SalesPersonID],
					[WholesalerID],
					[CustomerID],
					[AccountManagerID],
					[AccountManager],
					[DateProvisioned]
				FROM
					[dbo].[vw_ModeratorList_AdminSite]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_ModeratorList_AdminSite_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList_AdminSite view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [AdminName]'
				SET @SQL = @SQL + ', [WebLoginName]'
				SET @SQL = @SQL + ', [WebLoginPassword]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [CharityName]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [AccountManagerID]'
				SET @SQL = @SQL + ', [AccountManager]'
				SET @SQL = @SQL + ', [DateProvisioned]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList_AdminSite]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [AdminName],'
				SET @SQL = @SQL + ' [WebLoginName],'
				SET @SQL = @SQL + ' [WebLoginPassword],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [CharityName],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [AccountManagerID],'
				SET @SQL = @SQL + ' [AccountManager],'
				SET @SQL = @SQL + ' [DateProvisioned]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList_AdminSite]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_ModeratorList_AdminSite_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList_AdminSite table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [UserID]
					, [CompanyName]
					, [AdminName]
					, [WebLoginName]
					, [WebLoginPassword]
					, [ModeratorName]
					, [Email]
					, [Address1]
					, [Address2]
					, [City]
					, [Country]
					, [Region]
					, [PostalCode]
					, [Telephone]
					, [RoleID]
					, [CharityID]
					, [CharityName]
					, [SalesPerson]
					, [SalesPersonID]
					, [WholesalerID]
					, [CustomerID]
					, [AccountManagerID]
					, [AccountManager]
					, [DateProvisioned]
					FROM [dbo].[vw_ModeratorList_AdminSite] {0}
				)
				SELECT
				       [UserID],
				       [CompanyName],
				       [AdminName],
				       [WebLoginName],
				       [WebLoginPassword],
				       [ModeratorName],
				       [Email],
				       [Address1],
				       [Address2],
				       [City],
				       [Country],
				       [Region],
				       [PostalCode],
				       [Telephone],
				       [RoleID],
				       [CharityID],
				       [CharityName],
				       [SalesPerson],
				       [SalesPersonID],
				       [WholesalerID],
				       [CustomerID],
				       [AccountManagerID],
				       [AccountManager],
				       [DateProvisioned]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_ModeratorList_AdminSite] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_RecordingList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_RecordingList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[ConferenceName],
					[Username],
					[DisplayName],
					[ExtendRecordingDate],
					[UserID],
					[HostedLinkType],
					[HostedLinkURL],
					[RecordingGuid]
				FROM
					[dbo].[vw_RecordingList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_RecordingList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_RecordingList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [RecordingStartTime]'
				SET @SQL = @SQL + ', [RecordingEndTime]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ReplayCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [RPFileNumber]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Mp3Flag]'
				SET @SQL = @SQL + ', [Mp3SizeInKB]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [BillingID]'
				SET @SQL = @SQL + ', [DurationSec]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [MediaType]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [ExtendRecordingDate]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [HostedLinkType]'
				SET @SQL = @SQL + ', [HostedLinkURL]'
				SET @SQL = @SQL + ', [RecordingGuid]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_RecordingList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [RecordingStartTime],'
				SET @SQL = @SQL + ' [RecordingEndTime],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ReplayCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [RPFileNumber],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Mp3Flag],'
				SET @SQL = @SQL + ' [Mp3SizeInKB],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [BillingID],'
				SET @SQL = @SQL + ' [DurationSec],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [MediaType],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [ConferenceName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [ExtendRecordingDate],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [HostedLinkType],'
				SET @SQL = @SQL + ' [HostedLinkURL],'
				SET @SQL = @SQL + ' [RecordingGuid]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_RecordingList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_RecordingList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_RecordingList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ID]
					, [WholesalerID]
					, [BridgeID]
					, [RecordingStartTime]
					, [RecordingEndTime]
					, [ModeratorCode]
					, [PassCode]
					, [PriCustomerNumber]
					, [SecCustomerNumber]
					, [RecordingDirectory]
					, [UniqueConferenceID]
					, [ReplayCode]
					, [CreatedDate]
					, [ProcessFlag]
					, [EmailSent]
					, [RPFileNumber]
					, [ModeratorID]
					, [Notes]
					, [Mp3Flag]
					, [Mp3SizeInKB]
					, [Enabled]
					, [StorageDuration]
					, [BillingDuration]
					, [BillingID]
					, [DurationSec]
					, [AuxiliaryConferenceID]
					, [MediaType]
					, [HostedLinkExpiryDate]
					, [ConferenceName]
					, [Username]
					, [DisplayName]
					, [ExtendRecordingDate]
					, [UserID]
					, [HostedLinkType]
					, [HostedLinkURL]
					, [RecordingGuid]
					FROM [dbo].[vw_RecordingList] {0}
				)
				SELECT
				       [ID],
				       [WholesalerID],
				       [BridgeID],
				       [RecordingStartTime],
				       [RecordingEndTime],
				       [ModeratorCode],
				       [PassCode],
				       [PriCustomerNumber],
				       [SecCustomerNumber],
				       [RecordingDirectory],
				       [UniqueConferenceID],
				       [ReplayCode],
				       [CreatedDate],
				       [ProcessFlag],
				       [EmailSent],
				       [RPFileNumber],
				       [ModeratorID],
				       [Notes],
				       [Mp3Flag],
				       [Mp3SizeInKB],
				       [Enabled],
				       [StorageDuration],
				       [BillingDuration],
				       [BillingID],
				       [DurationSec],
				       [AuxiliaryConferenceID],
				       [MediaType],
				       [HostedLinkExpiryDate],
				       [ConferenceName],
				       [Username],
				       [DisplayName],
				       [ExtendRecordingDate],
				       [UserID],
				       [HostedLinkType],
				       [HostedLinkURL],
				       [RecordingGuid]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_RecordingList] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_All_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_All view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[SystemExtensionID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit],
					[TableID],
					[ReferenceValue],
					[Name],
					[DisplayName],
					[CategoryName],
					[ExtensionTypeCategoryID],
					[SystemExtensionLabelID]
				FROM
					[dbo].[vw_SystemExtension_All]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_All_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_All view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SystemExtensionID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ', [TableID]'
				SET @SQL = @SQL + ', [ReferenceValue]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [CategoryName]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ', [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_All]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SystemExtensionID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit],'
				SET @SQL = @SQL + ' [TableID],'
				SET @SQL = @SQL + ' [ReferenceValue],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [CategoryName],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID],'
				SET @SQL = @SQL + ' [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_All]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_SystemExtension_All_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_All table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [SystemExtensionID]
					, [ExtensionTypeID]
					, [ExtensionTypeLabel]
					, [CustomerCanView]
					, [ModeratorCanView]
					, [CustomerCanEdit]
					, [ModeratorCanEdit]
					, [TableID]
					, [ReferenceValue]
					, [Name]
					, [DisplayName]
					, [CategoryName]
					, [ExtensionTypeCategoryID]
					, [SystemExtensionLabelID]
					FROM [dbo].[vw_SystemExtension_All] {0}
				)
				SELECT
				       [CustomerID],
				       [SystemExtensionID],
				       [ExtensionTypeID],
				       [ExtensionTypeLabel],
				       [CustomerCanView],
				       [ModeratorCanView],
				       [CustomerCanEdit],
				       [ModeratorCanEdit],
				       [TableID],
				       [ReferenceValue],
				       [Name],
				       [DisplayName],
				       [CategoryName],
				       [ExtensionTypeCategoryID],
				       [SystemExtensionLabelID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_SystemExtension_All] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_CustomerLabel_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_CustomerLabel view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[Name],
					[ExtensionTypeLabel],
					[ExtensionTypeCategoryID],
					[ExtensionTypeID],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit],
					[id]
				FROM
					[dbo].[vw_SystemExtension_CustomerLabel]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_CustomerLabel_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_CustomerLabel view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_CustomerLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit],'
				SET @SQL = @SQL + ' [id]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_CustomerLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_SystemExtension_CustomerLabel_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_CustomerLabel table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [Name]
					, [ExtensionTypeLabel]
					, [ExtensionTypeCategoryID]
					, [ExtensionTypeID]
					, [CustomerCanView]
					, [ModeratorCanView]
					, [CustomerCanEdit]
					, [ModeratorCanEdit]
					, [id]
					FROM [dbo].[vw_SystemExtension_CustomerLabel] {0}
				)
				SELECT
				       [CustomerID],
				       [Name],
				       [ExtensionTypeLabel],
				       [ExtensionTypeCategoryID],
				       [ExtensionTypeID],
				       [CustomerCanView],
				       [ModeratorCanView],
				       [CustomerCanEdit],
				       [ModeratorCanEdit],
				       [id]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_SystemExtension_CustomerLabel] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_Value_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_Value view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[ModeratorID],
					[EmployeeID],
					[CostCenter],
					[eZuceH323PIN],
					[eZuceMeetingID]
				FROM
					[dbo].[vw_SystemExtension_Value]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_SystemExtension_Value_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_Value view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [CostCenter]'
				SET @SQL = @SQL + ', [eZuceH323PIN]'
				SET @SQL = @SQL + ', [eZuceMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_Value]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [CostCenter],'
				SET @SQL = @SQL + ' [eZuceH323PIN],'
				SET @SQL = @SQL + ' [eZuceMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_Value]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_SystemExtension_Value_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_Value table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [ModeratorID]
					, [EmployeeID]
					, [CostCenter]
					, [eZuceH323PIN]
					, [eZuceMeetingID]
					FROM [dbo].[vw_SystemExtension_Value] {0}
				)
				SELECT
				       [CustomerID],
				       [ModeratorID],
				       [EmployeeID],
				       [CostCenter],
				       [eZuceH323PIN],
				       [eZuceMeetingID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_SystemExtension_Value] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_UserList_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_UserList view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[DDLDescription],
					[RoleName],
					[CustomerSalesPersonID]
				FROM
					[dbo].[vw_UserList]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="pvw_UserList_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_UserList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [RoleName]'
				SET @SQL = @SQL + ', [CustomerSalesPersonID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_UserList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [RoleName],'
				SET @SQL = @SQL + ' [CustomerSalesPersonID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_UserList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="pvw_UserList_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_UserList table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [UserID]
					, [Username]
					, [Password]
					, [DisplayName]
					, [Email]
					, [Telephone]
					, [Enabled]
					, [CompanyID]
					, [SalesPersonID]
					, [RoleID]
					, [MustChangePassword]
					, [Address1]
					, [Address2]
					, [City]
					, [Country]
					, [Region]
					, [PostalCode]
					, [CharityID]
					, [WebMemberID]
					, [WholesalerID]
					, [CustomerID]
					, [ModeratorID]
					, [DDLDescription]
					, [RoleName]
					, [CustomerSalesPersonID]
					FROM [dbo].[vw_UserList] {0}
				)
				SELECT
				       [UserID],
				       [Username],
				       [Password],
				       [DisplayName],
				       [Email],
				       [Telephone],
				       [Enabled],
				       [CompanyID],
				       [SalesPersonID],
				       [RoleID],
				       [MustChangePassword],
				       [Address1],
				       [Address2],
				       [City],
				       [Country],
				       [Region],
				       [PostalCode],
				       [CharityID],
				       [WebMemberID],
				       [WholesalerID],
				       [CustomerID],
				       [ModeratorID],
				       [DDLDescription],
				       [RoleName],
				       [CustomerSalesPersonID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3};

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_UserList] {0};
				
				END
			]]></body>
		</procedure>
		
</procedures>
</root>
