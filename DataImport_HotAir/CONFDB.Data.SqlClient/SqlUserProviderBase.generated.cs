
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlUserProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="User"/> entity.
	///</summary>
	public abstract partial class SqlUserProviderBase : UserProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlUserProviderBase"/> instance.
		/// </summary>
		public SqlUserProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlUserProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlUserProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByMarketingServiceIdFromUser_MarketingService
		/// <summary>
		///		Gets User objects from the datasource by MarketingServiceID in the
		///		User_MarketingService table. Table User is related to table MarketingService
		///		through the (M:N) relationship defined in the User_MarketingService table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_marketingServiceId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns a <c>TList</c> of User objects.</returns>
		public override TList<User> GetByMarketingServiceIdFromUser_MarketingService(TransactionManager transactionManager, System.Int32 _marketingServiceId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByMarketingServiceIdFromUser_MarketingService", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@MarketingServiceId", DbType.Int32, _marketingServiceId);
			
			IDataReader reader = null;
			//Create collection and fill
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMarketingServiceIdFromUser_MarketingService", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMarketingServiceIdFromUser_MarketingService", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByMarketingServiceIdFromUser_MarketingService
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_userId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _userId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, _userId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(User)
					,_userId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
		public override CONFDB.Entities.TList<User> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<User>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Password", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DisplayName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Telephone", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RoleId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MustChangePassword", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@City", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CharityId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebMemberId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UserUniqueId", DbType.Guid, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("userid ") || clause.Trim().StartsWith("userid="))
				{
					database.SetParameterValue(commandWrapper, "@UserId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("username ") || clause.Trim().StartsWith("username="))
				{
					database.SetParameterValue(commandWrapper, "@Username", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password ") || clause.Trim().StartsWith("password="))
				{
					database.SetParameterValue(commandWrapper, "@Password", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("displayname ") || clause.Trim().StartsWith("displayname="))
				{
					database.SetParameterValue(commandWrapper, "@DisplayName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email ") || clause.Trim().StartsWith("email="))
				{
					database.SetParameterValue(commandWrapper, "@Email", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("telephone ") || clause.Trim().StartsWith("telephone="))
				{
					database.SetParameterValue(commandWrapper, "@Telephone", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enabled ") || clause.Trim().StartsWith("enabled="))
				{
					database.SetParameterValue(commandWrapper, "@Enabled", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyid ") || clause.Trim().StartsWith("companyid="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salespersonid ") || clause.Trim().StartsWith("salespersonid="))
				{
					database.SetParameterValue(commandWrapper, "@SalesPersonId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("roleid ") || clause.Trim().StartsWith("roleid="))
				{
					database.SetParameterValue(commandWrapper, "@RoleId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mustchangepassword ") || clause.Trim().StartsWith("mustchangepassword="))
				{
					database.SetParameterValue(commandWrapper, "@MustChangePassword", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address1 ") || clause.Trim().StartsWith("address1="))
				{
					database.SetParameterValue(commandWrapper, "@Address1", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address2 ") || clause.Trim().StartsWith("address2="))
				{
					database.SetParameterValue(commandWrapper, "@Address2", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("city ") || clause.Trim().StartsWith("city="))
				{
					database.SetParameterValue(commandWrapper, "@City", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("country ") || clause.Trim().StartsWith("country="))
				{
					database.SetParameterValue(commandWrapper, "@Country", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("region ") || clause.Trim().StartsWith("region="))
				{
					database.SetParameterValue(commandWrapper, "@Region", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("postalcode ") || clause.Trim().StartsWith("postalcode="))
				{
					database.SetParameterValue(commandWrapper, "@PostalCode", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("charityid ") || clause.Trim().StartsWith("charityid="))
				{
					database.SetParameterValue(commandWrapper, "@CharityId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webmemberid ") || clause.Trim().StartsWith("webmemberid="))
				{
					database.SetParameterValue(commandWrapper, "@WebMemberId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("useruniqueid ") || clause.Trim().StartsWith("useruniqueid="))
				{
					database.SetParameterValue(commandWrapper, "@UserUniqueId", new Guid(
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
		public override CONFDB.Entities.TList<User> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Find_Dynamic", typeof(UserColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
		public override CONFDB.Entities.TList<User> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCharityId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_Charity key.
		///		FK_User_Charity Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_charityId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetByCharityId(TransactionManager transactionManager, System.Int32? _charityId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByCharityId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CharityId", DbType.Int32, _charityId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCharityId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCharityId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByCountry
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_Country key.
		///		FK_User_Country Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_country"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetByCountry(TransactionManager transactionManager, System.String _country, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByCountry", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, _country);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCountry", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCountry", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByRoleId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_Role key.
		///		FK_User_Role Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_roleId">Used to denote the role of the user.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetByRoleId(TransactionManager transactionManager, System.Int32? _roleId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByRoleId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@RoleId", DbType.Int32, _roleId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByRoleId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByRoleId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySalesPersonId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_SalesPerson key.
		///		FK_User_SalesPerson Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetBySalesPersonId(TransactionManager transactionManager, System.Int32? _salesPersonId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetBySalesPersonId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, _salesPersonId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalesPersonId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalesPersonId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByRegion
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_State key.
		///		FK_User_State Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_region"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetByRegion(TransactionManager transactionManager, System.String _region, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByRegion", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, _region);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByRegion", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByRegion", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByCompanyId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_User_Company key.
		///		FK_User_Company Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<User> GetByCompanyId(TransactionManager transactionManager, System.Int32? _companyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByCompanyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, _companyId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCompanyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCompanyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByUserId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_User index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_userId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.User"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.User GetByUserId(TransactionManager transactionManager, System.Int32 _userId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, _userId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> tmp = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUserId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUserId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByUsername
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_User_UserName index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.User"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.User GetByUsername(TransactionManager transactionManager, System.String _username, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_GetByUsername", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, _username);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<User> tmp = new CONFDB.Entities.TList<User>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUsername", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUsername", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.User object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.User> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "User";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("UserID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("Username", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("Password", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("DisplayName", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("Email", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("Telephone", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("Enabled", typeof(System.Boolean));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("CompanyID", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("SalesPersonID", typeof(System.Int32));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("RoleID", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MustChangePassword", typeof(System.Boolean));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("Address1", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("Address2", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("City", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("Country", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("Region", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("PostalCode", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("CharityID", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("WebMemberID", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("UserUniqueID", typeof(System.Guid));
			col19.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("UserID", "UserID");
			bulkCopy.ColumnMappings.Add("Username", "Username");
			bulkCopy.ColumnMappings.Add("Password", "Password");
			bulkCopy.ColumnMappings.Add("DisplayName", "DisplayName");
			bulkCopy.ColumnMappings.Add("Email", "Email");
			bulkCopy.ColumnMappings.Add("Telephone", "Telephone");
			bulkCopy.ColumnMappings.Add("Enabled", "Enabled");
			bulkCopy.ColumnMappings.Add("CompanyID", "CompanyID");
			bulkCopy.ColumnMappings.Add("SalesPersonID", "SalesPersonID");
			bulkCopy.ColumnMappings.Add("RoleID", "RoleID");
			bulkCopy.ColumnMappings.Add("MustChangePassword", "MustChangePassword");
			bulkCopy.ColumnMappings.Add("Address1", "Address1");
			bulkCopy.ColumnMappings.Add("Address2", "Address2");
			bulkCopy.ColumnMappings.Add("City", "City");
			bulkCopy.ColumnMappings.Add("Country", "Country");
			bulkCopy.ColumnMappings.Add("Region", "Region");
			bulkCopy.ColumnMappings.Add("PostalCode", "PostalCode");
			bulkCopy.ColumnMappings.Add("CharityID", "CharityID");
			bulkCopy.ColumnMappings.Add("WebMemberID", "WebMemberID");
			bulkCopy.ColumnMappings.Add("UserUniqueID", "UserUniqueID");
			
			foreach(CONFDB.Entities.User entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["UserID"] = entity.UserId;
							
				
					row["Username"] = entity.Username;
							
				
					row["Password"] = entity.Password;
							
				
					row["DisplayName"] = entity.DisplayName;
							
				
					row["Email"] = entity.Email;
							
				
					row["Telephone"] = entity.Telephone;
							
				
					row["Enabled"] = entity.Enabled;
							
				
					row["CompanyID"] = entity.CompanyId.HasValue ? (object) entity.CompanyId  : System.DBNull.Value;
							
				
					row["SalesPersonID"] = entity.SalesPersonId.HasValue ? (object) entity.SalesPersonId  : System.DBNull.Value;
							
				
					row["RoleID"] = entity.RoleId.HasValue ? (object) entity.RoleId  : System.DBNull.Value;
							
				
					row["MustChangePassword"] = entity.MustChangePassword.HasValue ? (object) entity.MustChangePassword  : System.DBNull.Value;
							
				
					row["Address1"] = entity.Address1;
							
				
					row["Address2"] = entity.Address2;
							
				
					row["City"] = entity.City;
							
				
					row["Country"] = entity.Country;
							
				
					row["Region"] = entity.Region;
							
				
					row["PostalCode"] = entity.PostalCode;
							
				
					row["CharityID"] = entity.CharityId.HasValue ? (object) entity.CharityId  : System.DBNull.Value;
							
				
					row["WebMemberID"] = entity.WebMemberId;
							
				
					row["UserUniqueID"] = entity.UserUniqueId;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.User entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.User object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.User object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.User object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.User entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@UserId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, entity.Username );
			database.AddInParameter(commandWrapper, "@Password", DbType.AnsiString, entity.Password );
			database.AddInParameter(commandWrapper, "@DisplayName", DbType.AnsiString, entity.DisplayName );
			database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
			database.AddInParameter(commandWrapper, "@Telephone", DbType.AnsiString, entity.Telephone );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, entity.Enabled );
			database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, (entity.CompanyId.HasValue ? (object) entity.CompanyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, (entity.SalesPersonId.HasValue ? (object) entity.SalesPersonId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RoleId", DbType.Int32, (entity.RoleId.HasValue ? (object) entity.RoleId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MustChangePassword", DbType.Boolean, (entity.MustChangePassword.HasValue ? (object) entity.MustChangePassword  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Address1", DbType.AnsiString, entity.Address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.AnsiString, entity.Address2 );
			database.AddInParameter(commandWrapper, "@City", DbType.AnsiString, entity.City );
			database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, entity.Country );
			database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, entity.Region );
			database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString, entity.PostalCode );
			database.AddInParameter(commandWrapper, "@CharityId", DbType.Int32, (entity.CharityId.HasValue ? (object) entity.CharityId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WebMemberId", DbType.AnsiString, entity.WebMemberId );
			database.AddInParameter(commandWrapper, "@UserUniqueId", DbType.Guid, entity.UserUniqueId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _userId = database.GetParameterValue(commandWrapper, "@UserId");
			entity.UserId = (System.Int32)_userId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.User object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.User object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.User entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUser_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, entity.UserId );
			database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, entity.Username );
			database.AddInParameter(commandWrapper, "@Password", DbType.AnsiString, entity.Password );
			database.AddInParameter(commandWrapper, "@DisplayName", DbType.AnsiString, entity.DisplayName );
			database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
			database.AddInParameter(commandWrapper, "@Telephone", DbType.AnsiString, entity.Telephone );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, entity.Enabled );
			database.AddInParameter(commandWrapper, "@CompanyId", DbType.Int32, (entity.CompanyId.HasValue ? (object) entity.CompanyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SalesPersonId", DbType.Int32, (entity.SalesPersonId.HasValue ? (object) entity.SalesPersonId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RoleId", DbType.Int32, (entity.RoleId.HasValue ? (object) entity.RoleId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MustChangePassword", DbType.Boolean, (entity.MustChangePassword.HasValue ? (object) entity.MustChangePassword : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Address1", DbType.AnsiString, entity.Address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.AnsiString, entity.Address2 );
			database.AddInParameter(commandWrapper, "@City", DbType.AnsiString, entity.City );
			database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, entity.Country );
			database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, entity.Region );
			database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString, entity.PostalCode );
			database.AddInParameter(commandWrapper, "@CharityId", DbType.Int32, (entity.CharityId.HasValue ? (object) entity.CharityId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WebMemberId", DbType.AnsiString, entity.WebMemberId );
			database.AddInParameter(commandWrapper, "@UserUniqueId", DbType.Guid, entity.UserUniqueId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_User_GetAllModeratorsByCustomerID
					
		/// <summary>
		///	This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;User&gt;"/> instance.</returns>
		public override TList<User> GetAllModeratorsByCustomerID(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_User_GetAllModeratorsByCustomerID");
			
			database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32,  customerId );
	
			
			IDataReader reader = null;
			
			//Create Collection
				CONFDB.Entities.TList<User> rows = new CONFDB.Entities.TList<User>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAllModeratorsByCustomerID", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAllModeratorsByCustomerID", rows));


				return rows;
		}
		#endregion

		#region p_User_CheckUserName
					
		/// <summary>
		///	This method wrap the 'p_User_CheckUserName' stored procedure. 
		/// </summary>	
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void CheckUserName(TransactionManager transactionManager, int start, int pageLength , System.String userName, System.Int32? userId, ref System.Boolean? userNameOk)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_User_CheckUserName");
			
			database.AddInParameter(commandWrapper, "@UserName", DbType.AnsiString,  userName );
			database.AddInParameter(commandWrapper, "@UserID", DbType.Int32,  userId );
	
			database.AddParameter(commandWrapper, "@UserNameOK", DbType.Boolean, 0, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, userNameOk);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CheckUserName", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CheckUserName", (IEntity)null));

			userNameOk =  Utility.GetParameterValue<System.Boolean?>(commandWrapper.Parameters["@UserNameOK"]);

				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
