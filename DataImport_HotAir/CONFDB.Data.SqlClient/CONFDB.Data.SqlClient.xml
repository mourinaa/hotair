<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CONFDB.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="_ticketUserId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketUserAssociations objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketUserAssociations objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketUserAssociations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketUserAssociations objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.GetByUserIdTicketUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketUserAssociations})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketUserAssociations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociations)">
            <summary>
            	Inserts a CONFDB.Entities.TicketUserAssociations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketUserAssociations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketUserAssociations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketUserAssociations object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketUserAssociations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRecordingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Recording"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRecordingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Recording"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Recording objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Recording objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Recording objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Recording objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetByReplayCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetByRecordingGuid(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingGuid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Recording})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Recording object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Recording)">
            <summary>
            	Inserts a CONFDB.Entities.Recording object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Recording object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Recording object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Recording)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Recording object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Recording object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProviderBase.GetParticipantList(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Recording_GetParticipantList' stored procedure. 
            </summary>	
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateIntervalProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateInterval"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateInterval"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateInterval objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateInterval objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateInterval objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateInterval objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ProductRateInterval})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateInterval object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateInterval)">
            <summary>
            	Inserts a CONFDB.Entities.ProductRateInterval object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateInterval object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateInterval object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateInterval)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateInterval object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ProductRateInterval object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateIntervalProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateIntervalProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateIntervalProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlParticipantProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Participant"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlParticipantProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Participant"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.GetByParticipantListId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	FK_Participant_ParticipantList Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_participantListId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Participant})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Participant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Participant)">
            <summary>
            	Inserts a CONFDB.Entities.Participant object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Participant object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Participant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Participant)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Participant object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Participant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadStageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadStage"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadStageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadStageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadStage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.LeadStage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadStage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadStage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.LeadStage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadStage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStage)">
            <summary>
            	Inserts a CONFDB.Entities.LeadStage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadStage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadStage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadStage object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.LeadStage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadStageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadProduct"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadProduct"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.LeadProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadProduct objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.LeadProduct})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProduct)">
            <summary>
            	Inserts a CONFDB.Entities.LeadProduct object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadProduct object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProduct)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadProduct object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.LeadProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Lead"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	FK_Lead_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	FK_Lead_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.GetByContactEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_contactEmail"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Lead})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Lead object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Lead)">
            <summary>
            	Inserts a CONFDB.Entities.Lead object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Lead object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Lead object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Lead)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Lead object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Lead object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlForExProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ForEx"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlForExProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlForExProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.GetByCurveId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	FK_ForEx_Curve Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_curveId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ForEx})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ForEx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ForEx)">
            <summary>
            	Inserts a CONFDB.Entities.ForEx object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ForEx object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ForEx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ForEx)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ForEx object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ForEx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlForExProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlForExProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlForExProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetByGlPostingTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	FK_CustomerTransactionType_GLPostingType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.GetByActionValue(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransactionType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransactionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionType)">
            <summary>
            	Inserts a CONFDB.Entities.CustomerTransactionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransactionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CustomerTransactionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCurrencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Currency"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCurrencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Currency"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurrencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurrencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Currency objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Currency objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Currency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Currency objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Currency})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Currency)">
            <summary>
            	Inserts a CONFDB.Entities.Currency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Currency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Currency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Currency object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurrencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurrencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurrencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyInfo"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyInfo"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	FK_CompanyInfo_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CompanyInfo})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfo)">
            <summary>
            	Inserts a CONFDB.Entities.CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyInfo object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCharityProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Charity"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCharityProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCharityProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Charity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Charity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Charity objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Charity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Charity})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Charity object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Charity)">
            <summary>
            	Inserts a CONFDB.Entities.Charity object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Charity object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Charity object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Charity)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Charity object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Charity object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCharityProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCharityProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCharityProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlActionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Action"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.GetByActionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	FK_Action_ActionType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Action})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Action object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Action)">
            <summary>
            	Inserts a CONFDB.Entities.Action object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Action object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Action object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Action)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Action object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Action object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_ModeratorList_AdminSite objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ModeratorList_AdminSite objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ModeratorList_AdminSite objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_ModeratorList_AdminSite objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTrendProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Trend"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTrendProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTrendProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.Delete(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wholesalerId">. Primary Key.</param>	
            <param name="_customerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Trend objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Trend objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Trend objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Trend objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.GetByWholesalerIdCustomerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Trend})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Trend object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Trend)">
            <summary>
            	Inserts a CONFDB.Entities.Trend object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Trend object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Trend object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Trend)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Trend object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Trend object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTrendProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTrendProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTrendProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketCategory"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketCategory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketCategory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategory)">
            <summary>
            	Inserts a CONFDB.Entities.TicketCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketCategory object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempCodeChangesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempCodeChanges"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempCodeChanges"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodeChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodeChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodeChanges objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodeChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempCodeChanges})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempCodeChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChanges)">
            <summary>
            	Inserts a CONFDB.Entities.TempCodeChanges object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempCodeChanges object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempCodeChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChanges)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempCodeChanges object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempCodeChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodeChangesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodeChangesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodeChangesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RatedCdr"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	AccessType_RatedCDR_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	Bridge_RatedCDR_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	Wholesaler_RatedCDR_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByAccessTypeIdBridgeProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetByUniqueConferenceId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_uniqueConferenceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.RatedCdr})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RatedCdr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdr)">
            <summary>
            	Inserts a CONFDB.Entities.RatedCdr object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RatedCdr object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RatedCdr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdr)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RatedCdr object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.RatedCdr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetCallSummaryForCustomer3(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer3' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetCallSummaryForCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.SetBillingCode(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_SetBillingCode' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="uniqueConferenceId"> A <c>System.String</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetCallDetailsForCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForCustomer' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetCallSummaryForCustomer2(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer2' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.GetCallDetailsForModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForModerator' stored procedure. 
            </summary>	
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatedCdrProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator_Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetByFeatureIdModeratorIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetByFeatureIdModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Moderator_Feature})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Feature)">
            <summary>
            	Inserts a CONFDB.Entities.Moderator_Feature object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator_Feature object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Feature)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator_Feature object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Moderator_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_FeatureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dnisid">. Primary Key.</param>	
            <param name="_moderatorId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	DNIS_Moderator_DNIS_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.GetByDnisidModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Moderator_Dnis})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Dnis)">
            <summary>
            	Inserts a CONFDB.Entities.Moderator_Dnis object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator_Dnis object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Dnis)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator_Dnis object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Moderator_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModerator_DnisProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadPeriodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadPeriod"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadPeriod"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadPeriod objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.LeadPeriod objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadPeriod objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadPeriod objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.LeadPeriod})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadPeriod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriod)">
            <summary>
            	Inserts a CONFDB.Entities.LeadPeriod object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadPeriod object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadPeriod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriod)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadPeriod object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.LeadPeriod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadPeriodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadPeriodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadPeriodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ExtensionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.GetByExtensionTypeCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ExtensionType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ExtensionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionType)">
            <summary>
            	Inserts a CONFDB.Entities.ExtensionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ExtensionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ExtensionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ExtensionType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ExtensionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EmailTemplate"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	CallFlow_EmailTemplates_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	FK_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	Language_EmailTemplates_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetByWholesalerIdTemplateNamePriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetByWholesalerIdTemplateName(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.EmailTemplate})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EmailTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplate)">
            <summary>
            	Inserts a CONFDB.Entities.EmailTemplate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EmailTemplate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EmailTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EmailTemplate object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.EmailTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetEmailTemplates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailTemplates' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="templateName"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.GetEmailInfo(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailInfo' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailTemplateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerReview"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerReview objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerReview objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerReview objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerReview objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CustomerReview})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReview)">
            <summary>
            	Inserts a CONFDB.Entities.CustomerReview object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerReview object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReview)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerReview object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CustomerReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerReviewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Company"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Company"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	Wholesaler_Company_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Company})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Company object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Company)">
            <summary>
            	Inserts a CONFDB.Entities.Company object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Company object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Company object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Company)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Company object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Company object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeRequest"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	Moderator_BridgeRequest_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetByBridgeRequestTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	FK_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeRequestTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.GetByModeratorIdProcessFlag(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.BridgeRequest})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequest)">
            <summary>
            	Inserts a CONFDB.Entities.BridgeRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeRequest object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.BridgeRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BillableLegs"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int16,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.BillableLegs})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BillableLegs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegs)">
            <summary>
            	Inserts a CONFDB.Entities.BillableLegs object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BillableLegs object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BillableLegs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegs)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BillableLegs object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.BillableLegs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBillableLegsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAverageRatesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AverageRates"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AverageRates"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.Delete(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usageMonth">. Primary Key.</param>	
            <param name="_productRateId">. Primary Key.</param>	
            <param name="_wholesalerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AverageRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AverageRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AverageRates objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AverageRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.GetByUsageMonthProductRateIdWholesalerId(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AverageRates})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AverageRates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRates)">
            <summary>
            	Inserts a CONFDB.Entities.AverageRates object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AverageRates object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AverageRates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRates)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AverageRates object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AverageRates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAverageRatesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAverageRatesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAverageRatesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAreaCodeNxxProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AreaCodeNxx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AreaCodeNxx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AreaCodeNxx objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AreaCodeNxx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AreaCodeNxx})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AreaCodeNxx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxx)">
            <summary>
            	Inserts a CONFDB.Entities.AreaCodeNxx object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AreaCodeNxx object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AreaCodeNxx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxx)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AreaCodeNxx object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AreaCodeNxx object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAreaCodeNxxProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAreaCodeNxxProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAreaCodeNxxProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_RecordingList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_RecordingList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_RecordingList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_RecordingList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_RecordingListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ModeratorListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_ModeratorList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ModeratorList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ModeratorList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_ModeratorList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ModeratorListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_DefaultProductRates objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_DefaultProductRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_DefaultProductRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_DefaultProductRates objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_DefaultProductRatesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,CONFDB.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:CONFDB.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:CONFDB.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:CONFDB.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:CONFDB.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:CONFDB.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id123">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempTotalDollarsSpent objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempTotalDollarsSpent objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempTotalDollarsSpent objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempTotalDollarsSpent objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.GetById123(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id123"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.GetByPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempTotalDollarsSpent})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempTotalDollarsSpent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpent)">
            <summary>
            	Inserts a CONFDB.Entities.TempTotalDollarsSpent object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempTotalDollarsSpent object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempTotalDollarsSpent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpent)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempTotalDollarsSpent object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempTotalDollarsSpent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempTotalDollarsSpentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemSettings"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_name">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemSettings objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemSettings objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemSettings objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemSettings objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.SystemSettings})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemSettings object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettings)">
            <summary>
            	Inserts a CONFDB.Entities.SystemSettings object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemSettings object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemSettings object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettings)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemSettings object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.SystemSettings object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemSettingsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlParticipantListProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ParticipantList"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantListProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	FK_ParticipantList_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ParticipantList})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ParticipantList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantList)">
            <summary>
            	Inserts a CONFDB.Entities.ParticipantList object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ParticipantList object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ParticipantList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantList)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ParticipantList object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ParticipantList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlParticipantListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadStageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadStage"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadStageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadStageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceCharges"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceCharges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceCharges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceCharges objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceCharges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.InvoiceCharges})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceCharges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceCharges)">
            <summary>
            	Inserts a CONFDB.Entities.InvoiceCharges object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceCharges object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceCharges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceCharges)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceCharges object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.InvoiceCharges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceChargesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlForExProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ForEx"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlForExProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlForExProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEventManagerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EventManager"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEventManagerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEventManagerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	FK_EventManager_User Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	FK_EventManager_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.EventManager})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EventManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManager)">
            <summary>
            	Inserts a CONFDB.Entities.EventManager object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EventManager object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EventManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManager)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EventManager object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.EventManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEventManagerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionImport objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionImport objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionImport objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionImport objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransactionImport})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransactionImport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImport)">
            <summary>
            	Inserts a CONFDB.Entities.CustomerTransactionImport object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionImport object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransactionImport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImport)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionImport object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CustomerTransactionImport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.PostCustomerTransactionCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransactionImport_PostCustomerTransactionCharges' stored procedure. 
            </summary>	
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="customerTransactionImportId"> A <c>System.Int64?</c> instance.</param>
            <param name="customerTransactionTypeId2"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransaction"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransaction"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByCustomerTransactionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	CustomerTransactionType_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerTransactionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	FK_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	FK_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	Wholesaler_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	Customer_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByCustomerIdWholesalerId(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByTransactionDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_transactionDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransaction})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransaction)">
            <summary>
            	Inserts a CONFDB.Entities.CustomerTransaction object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransaction object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransaction)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerTransaction object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.DeleteTransaction(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
            </summary>	
            <param name="id"> A <c>System.Int64?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.GetByCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerTransactionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByDnisidFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	Currency_Customer_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByAccountManagerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	FK_Customer_AccountManager Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accountManagerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByBillingContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	FK_Customer_BillingContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByBillingContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	FK_Customer_BillingContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactRegion"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByPrimaryContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	FK_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByPrimaryContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	FK_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactRegion"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	Taxable_Customer_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByVerticalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	Verticals_Customer_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_verticalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByWholesalerIdPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByCompanyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByLastModified(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_lastModified"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Customer})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer)">
            <summary>
            	Inserts a CONFDB.Entities.Customer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>	
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
            </summary>	
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductRates' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetSeeVoghOverageCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.UpdateDNIS(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Omnovia_addArchiveDetails(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
            </summary>	
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieTitle"> A <c>System.String</c> instance.</param>
            <param name="roomId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
            <param name="roomName"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetSeeVoghMonthlySummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
            </summary>	
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.DisableCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetRecordingRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetBalanceInfoDataSet(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.CreateUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_CreateUser' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetBalanceInfo(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@,System.String@,System.Nullable{System.Decimal}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetProductRatesByProductRateTypeDisplayName(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetWebconferenceRecordingRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.Omnovia_RequestMP4(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
            </summary>	
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="extraInfo"> A <c>System.String</c> instance.</param>
            <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
            <param name="message"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.UpdateFeature(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetNextCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.DeleteCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProviderBase.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCountryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Country"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCountryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Country"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCountryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCountryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Country objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Country objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Country objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Country objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.GetByCountryAreaCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryAreaCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Country})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Country)">
            <summary>
            	Inserts a CONFDB.Entities.Country object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Country object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Country)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Country object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCountryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCountryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCountryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCountryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCountryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.GetByCompanyLeadTrackingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	FK_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyLeadTrackingId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CompanyLeadTrackingNotes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyLeadTrackingNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotes)">
            <summary>
            	Inserts a CONFDB.Entities.CompanyLeadTrackingNotes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTrackingNotes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyLeadTrackingNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTrackingNotes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CompanyLeadTrackingNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeType"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.BridgeType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeType)">
            <summary>
            	Inserts a CONFDB.Entities.BridgeType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.BridgeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.GetByAdminSiteNotesId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	FK_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_adminSiteNotesId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AdminSiteNotesHistory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AdminSiteNotesHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistory)">
            <summary>
            	Inserts a CONFDB.Entities.AdminSiteNotesHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotesHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AdminSiteNotesHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotesHistory object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AdminSiteNotesHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AdminSiteNotes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AdminSiteNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotes)">
            <summary>
            	Inserts a CONFDB.Entities.AdminSiteNotes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AdminSiteNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AdminSiteNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAdminSiteNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAdminSiteNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAdminSiteNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	Feature_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	FeatureOption_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	Wholesaler_Product_Wholesaler_Product_Features_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler_Product_Feature})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler_Product_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_Feature)">
            <summary>
            	Inserts a CONFDB.Entities.Wholesaler_Product_Feature object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product_Feature object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler_Product_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_Feature)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product_Feature object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Wholesaler_Product_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_Product_FeatureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Ticket"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Ticket"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	FK_Ticket_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	FK_Ticket_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByTicketProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	FK_Ticket_TicketProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	FK_Ticket_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByTicketPriorityId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	FK_Ticket_TicketPriority Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketPriorityId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByTicketCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	FK_Ticket_TicketCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketCategoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	FK_Ticket_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Ticket})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Ticket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Ticket)">
            <summary>
            	Inserts a CONFDB.Entities.Ticket object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Ticket object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Ticket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Ticket)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Ticket object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Ticket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ProductRateType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateType)">
            <summary>
            	Inserts a CONFDB.Entities.ProductRateType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ProductRateType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaMp4Request objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaMp4Request objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaMp4Request objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaMp4Request objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaMp4Request})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaMp4Request object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4Request)">
            <summary>
            	Inserts a CONFDB.Entities.OmnoviaMp4Request object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaMp4Request object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaMp4Request object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4Request)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaMp4Request object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.OmnoviaMp4Request object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaMp4RequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchive objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchive objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchive objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchive objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaHostedArchive})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaHostedArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchive)">
            <summary>
            	Inserts a CONFDB.Entities.OmnoviaHostedArchive object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchive object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaHostedArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchive)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchive object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.OmnoviaHostedArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.RenewHostedLink(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_RenewHostedLink' stored procedure. 
            </summary>	
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="noMonthHostingPeriod"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.checkURL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_checkURL' stored procedure. 
            </summary>	
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.getAllOmnoviaCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.addRegistration(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_addRegistration' stored procedure. 
            </summary>	
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="firstname"> A <c>System.String</c> instance.</param>
            <param name="lastname"> A <c>System.String</c> instance.</param>
            <param name="company"> A <c>System.String</c> instance.</param>
            <param name="email"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.GetCompanyLoginByURL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_GetCompanyLoginByURL' stored procedure. 
            </summary>	
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadChurnReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadChurnReason"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadChurnReason"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadChurnReason objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.LeadChurnReason objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadChurnReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadChurnReason objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.LeadChurnReason})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadChurnReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReason)">
            <summary>
            	Inserts a CONFDB.Entities.LeadChurnReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadChurnReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadChurnReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadChurnReason object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.LeadChurnReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadChurnReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadChurnReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadChurnReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlIrWholesalerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.IrWholesaler"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.IrWholesaler"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.Delete(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wholesalerId">. Primary Key.</param>	
            <param name="_languageId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	Wholesaler_IRWholesaler_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	Language_IRWholesaler_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.GetByWholesalerIdLanguageId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.IrWholesaler})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.IrWholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesaler)">
            <summary>
            	Inserts a CONFDB.Entities.IrWholesaler object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.IrWholesaler object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.IrWholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesaler)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.IrWholesaler object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.IrWholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlIrWholesalerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlIrWholesalerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlIrWholesalerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.FeatureOptionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOptionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOptionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOptionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOptionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.FeatureOptionType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.FeatureOptionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionType)">
            <summary>
            	Inserts a CONFDB.Entities.FeatureOptionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.FeatureOptionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.FeatureOptionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.FeatureOptionType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.FeatureOptionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	Product_Feature_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.GetByNameId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Feature})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Feature)">
            <summary>
            	Inserts a CONFDB.Entities.Feature object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Feature object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Feature)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Feature object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlExtensionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ExtensionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEventManagerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EventManager"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEventManagerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEventManagerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerTransactionImportProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerReviewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerReview"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerReviewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerReviewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer_Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dnisid">. Primary Key.</param>	
            <param name="_customerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.GetByDnisidCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Customer_Dnis})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Dnis)">
            <summary>
            	Inserts a CONFDB.Entities.Customer_Dnis object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer_Dnis object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Dnis)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer_Dnis object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Customer_Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_DnisProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCommissionCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CommissionCustomer"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CommissionCustomer"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	Customer_CommissionCustomer_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	SalesPerson_CommissionCustomer_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	Wholesaler_CommissionCustomer_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CommissionCustomer})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CommissionCustomer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomer)">
            <summary>
            	Inserts a CONFDB.Entities.CommissionCustomer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CommissionCustomer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CommissionCustomer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CommissionCustomer object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CommissionCustomer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeQueue"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	Bridge_BridgeQueue_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	Moderator_BridgeQueue_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.BridgeQueue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeQueue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueue)">
            <summary>
            	Inserts a CONFDB.Entities.BridgeQueue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeQueue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeQueue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeQueue object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.BridgeQueue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeQueueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_SystemExtension_All objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_All objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_All objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_SystemExtension_All objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_AccessType_ProductRates objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_AccessType_ProductRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_AccessType_ProductRates objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_AccessType_ProductRates objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_AccessType_ProductRatesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.User_MarketingService"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_marketingServiceId">. Primary Key.</param>	
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	FK_User_MarketingService_User Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.GetByMarketingServiceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	FK_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.GetByMarketingServiceIdUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.User_MarketingService})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.User_MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingService)">
            <summary>
            	Inserts a CONFDB.Entities.User_MarketingService object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.User_MarketingService object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.User_MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingService)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.User_MarketingService object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.User_MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketStatus"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.GetByToStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.GetByFromStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketStatus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatus)">
            <summary>
            	Inserts a CONFDB.Entities.TicketStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketStatus object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetByExtensionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	FK_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetByCustomerIdCustomerCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.GetByCustomerIdModeratorCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.SystemExtensionLabel})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemExtensionLabel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabel)">
            <summary>
            	Inserts a CONFDB.Entities.SystemExtensionLabel object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemExtensionLabel object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemExtensionLabel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabel)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemExtensionLabel object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.SystemExtensionLabel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionLabelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SeeVoghMeetingTracker objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SeeVoghMeetingTracker objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SeeVoghMeetingTracker objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SeeVoghMeetingTracker objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.SeeVoghMeetingTracker})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SeeVoghMeetingTracker object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTracker)">
            <summary>
            	Inserts a CONFDB.Entities.SeeVoghMeetingTracker object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SeeVoghMeetingTracker object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SeeVoghMeetingTracker object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTracker)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SeeVoghMeetingTracker object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.SeeVoghMeetingTracker object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSeeVoghMeetingTrackerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.GetByRecordingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	FK_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.RecordingParticipantUsage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RecordingParticipantUsage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsage)">
            <summary>
            	Inserts a CONFDB.Entities.RecordingParticipantUsage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RecordingParticipantUsage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RecordingParticipantUsage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RecordingParticipantUsage object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.RecordingParticipantUsage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRecordingParticipantUsageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.PrevInvoices"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PrevInvoices objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.PrevInvoices objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PrevInvoices objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PrevInvoices objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.PrevInvoices})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.PrevInvoices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoices)">
            <summary>
            	Inserts a CONFDB.Entities.PrevInvoices object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.PrevInvoices object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.PrevInvoices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoices)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.PrevInvoices object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.PrevInvoices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPrevInvoicesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModeratorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModeratorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByDnisidFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByCustomerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByWholesalerIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByModeratorCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByModeratorCodePassCode(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByPassCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByDepartmentId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_departmentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Moderator})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator)">
            <summary>
            	Inserts a CONFDB.Entities.Moderator object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Moderator object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Moderator object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Moderator object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.CreateUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Moderator_CreateUser' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="displayName"> A <c>System.String</c> instance.</param>
            <param name="telephone"> A <c>System.String</c> instance.</param>
            <param name="address1"> A <c>System.String</c> instance.</param>
            <param name="address2"> A <c>System.String</c> instance.</param>
            <param name="city"> A <c>System.String</c> instance.</param>
            <param name="country"> A <c>System.String</c> instance.</param>
            <param name="region"> A <c>System.String</c> instance.</param>
            <param name="postalCode"> A <c>System.String</c> instance.</param>
            <param name="charityId"> A <c>System.Int32?</c> instance.</param>
            <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
            </summary>	
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetNextSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.DisableModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.UpdateDNIS(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.DeleteModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GenerateCodes(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@,System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProviderBase.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.GetByWholesalerIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Language objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Language})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Language)">
            <summary>
            	Inserts a CONFDB.Entities.Language object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Language object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Language)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Language object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceSummary"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	FK_InvoiceSummary_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByEndDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByInvoiceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_invoiceNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.InvoiceSummary})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummary)">
            <summary>
            	Inserts a CONFDB.Entities.InvoiceSummary object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceSummary object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummary)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceSummary object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.InvoiceSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetInvoiceSummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummary' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetInvoiceSummaryForInvoiceEmail(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetServiceSummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummary' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetServiceDetails(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceDetails' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.GetServiceSummaryTest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummaryTest' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceSummaryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlGlPostingTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.GlPostingType"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.GlPostingType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.GlPostingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.GlPostingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.GlPostingType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.GlPostingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.GlPostingType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.GlPostingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingType)">
            <summary>
            	Inserts a CONFDB.Entities.GlPostingType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.GlPostingType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.GlPostingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.GlPostingType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.GlPostingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlGlPostingTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlGlPostingTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlGlPostingTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureOptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.FeatureOption"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.FeatureOption"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetByFeatureOptionTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	FeatureOptionType_FeatureOption_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetByNameFeatureIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.FeatureOption})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.FeatureOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOption)">
            <summary>
            	Inserts a CONFDB.Entities.FeatureOption object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.FeatureOption object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.FeatureOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOption)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.FeatureOption object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.FeatureOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlFeatureOptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.DocumentType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DocumentType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.DocumentType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DocumentType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DocumentType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.DocumentType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.DocumentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentType)">
            <summary>
            	Inserts a CONFDB.Entities.DocumentType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.DocumentType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.DocumentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.DocumentType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.DocumentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDocumentTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerDocumentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerDocument"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CustomerDocument"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	Customer_CustomerDocument_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	Wholesaler_CustomerDocument_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetByDocumentTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	DocumentType_CustomerDocument_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_documentTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	Language_CustomerDocument_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CustomerDocument})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocument)">
            <summary>
            	Inserts a CONFDB.Entities.CustomerDocument object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerDocument object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CustomerDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocument)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CustomerDocument object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CustomerDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomerDocumentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerDocumentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerDocumentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeRequest"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Bridge"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Bridge"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.GetByBridgeTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	BridgeType_Bridge_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Bridge})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Bridge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Bridge)">
            <summary>
            	Inserts a CONFDB.Entities.Bridge object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Bridge object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Bridge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Bridge)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Bridge object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Bridge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccessTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccessType"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccessType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetByIdNameValue(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetByValueName(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_value"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AccessType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccessType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType)">
            <summary>
            	Inserts a CONFDB.Entities.AccessType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccessType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccessType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccessType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AccessType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_UserList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_UserList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_UserList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_UserList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_UserListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_CustomerTransactionList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_CustomerTransactionList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_CustomerTransactionList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_CustomerTransactionList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerTransactionListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ConferenceListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_ConferenceList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ConferenceList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ConferenceList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_ConferenceList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_ConferenceCallList_Unique objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ConferenceCallList_Unique objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_ConferenceCallList_Unique objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_ConferenceCallList_Unique objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ConferenceCallList_UniqueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesalerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesalerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesalerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetByLanguageIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	Currency_Wholesaler_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetByBillingCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	FK_Wholesaler_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetByBillingRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	FK_Wholesaler_State Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	FK_Wholesaler_Taxable Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler)">
            <summary>
            	Inserts a CONFDB.Entities.Wholesaler object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Wholesaler object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.Product_InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>	
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.UpdateProductFeature(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesalerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketPriority"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketPriority objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketPriority objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketPriority objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketPriority objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketPriority})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketPriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriority)">
            <summary>
            	Inserts a CONFDB.Entities.TicketPriority object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketPriority object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketPriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriority)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketPriority object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketPriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketPriorityProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempSampleRatesPerProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempSampleRatesPerProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempSampleRatesPerProduct objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempSampleRatesPerProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempSampleRatesPerProduct})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempSampleRatesPerProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProduct)">
            <summary>
            	Inserts a CONFDB.Entities.TempSampleRatesPerProduct object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempSampleRatesPerProduct object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempSampleRatesPerProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProduct)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempSampleRatesPerProduct object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempSampleRatesPerProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempReplayIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempReplayIds"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempReplayIds"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_replayId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempReplayIds objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempReplayIds objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempReplayIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempReplayIds objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.GetByReplayId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempReplayIds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempReplayIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIds)">
            <summary>
            	Inserts a CONFDB.Entities.TempReplayIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempReplayIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempReplayIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempReplayIds object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempReplayIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempReplayIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempReplayIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempReplayIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemExtensionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemExtension"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemExtension"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetBySystemExtensionLabelId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	FK_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetBySystemExtensionLabelIdTableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.SystemExtension})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemExtension object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtension)">
            <summary>
            	Inserts a CONFDB.Entities.SystemExtension object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemExtension object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SystemExtension object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtension)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SystemExtension object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.SystemExtension object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.AddSystemExtension(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_AddSystemExtension' stored procedure. 
            </summary>	
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="tableId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.EditReferenceValueByID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_SystemExtension_EditReferenceValueByID' stored procedure. 
            </summary>	
            <param name="systemExtensionId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceValue"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.GetSystemExtensionForModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_GetSystemExtensionForModerator' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSystemExtensionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemExtensionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemExtensionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlStateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.State"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlStateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlStateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	Country_State_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.GetByIdCountryId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.State})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.State)">
            <summary>
            	Inserts a CONFDB.Entities.State object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.State object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.State)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.State object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlStateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlStateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlStateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlPrevInvoicesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.PrevInvoices"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPrevInvoicesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPrevInvoicesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchiveParticipant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchiveParticipant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchiveParticipant objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.OmnoviaHostedArchiveParticipant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaHostedArchiveParticipant})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaHostedArchiveParticipant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipant)">
            <summary>
            	Inserts a CONFDB.Entities.OmnoviaHostedArchiveParticipant object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchiveParticipant object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.OmnoviaHostedArchiveParticipant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipant)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchiveParticipant object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.OmnoviaHostedArchiveParticipant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.GetListByHostedArchiveID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID' stored procedure. 
            </summary>	
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDnisProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByCustomerIdFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Dnis objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByModeratorIdFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Dnis objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	AccessType_DNIS_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	CallFlow_DNIS_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByPromptSetId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	PromptSet_DNIS_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_promptSetId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	Wholesaler_DNIS_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByDnisTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByDnisNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByDialNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dialNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Dnis})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Dnis)">
            <summary>
            	Inserts a CONFDB.Entities.Dnis object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Dnis object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Dnis)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Dnis object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Dnis object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProviderBase.GetByWholesalerIdDDL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_DNIS_GetByWholesalerIdDDL' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeQueueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeQueue"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeQueueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeQueueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_UserListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_UserList"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_UserListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_UserListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_FeatureOptionsForModerators objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_FeatureOptionsForModerators objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_FeatureOptionsForModerators objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_FeatureOptionsForModerators objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CONFDB.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:CONFDB.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:CONFDB.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AccessTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccessType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccessTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccessTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.RecordingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Recording"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRecordingProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRecordingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.RecordingParticipantUsageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRecordingParticipantUsageProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRecordingParticipantUsageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.RatingTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RatingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRatingTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRatingTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.PromptSetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.PromptSet"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlPromptSetProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlPromptSetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.RoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Role"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SeeVoghMeetingTrackerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSeeVoghMeetingTrackerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSeeVoghMeetingTrackerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CountryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Country"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCountryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCountryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CurrencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Currency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SystemExtensionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemExtension"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemExtensionProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemExtensionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.StateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.State"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlStateProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlStateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductRateTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductRateIntervalProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateInterval"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateIntervalProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateIntervalProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ModeratorXtimeUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModeratorXtimeUserProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModeratorXtimeUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadStageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadStage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadStageProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadStageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadSourceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadSource"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadSourceProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadSourceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadProductProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.OmnoviaHostedArchiveProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaHostedArchiveProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaHostedArchiveProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.OmnoviaHostedArchiveParticipantProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaHostedArchiveParticipantProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaHostedArchiveParticipantProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductRateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.PrevInvoicesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.PrevInvoices"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlPrevInvoicesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlPrevInvoicesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.OmnoviaMp4RequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaMp4RequestProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlOmnoviaMp4RequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SystemExtensionLabelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemExtensionLabelProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemExtensionLabelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.VerticalProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vertical"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVerticalProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVerticalProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SystemSettingsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemSettings"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemSettingsProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSystemSettingsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketProductProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketStatusProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketPriorityProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketPriority"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketPriorityProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketPriorityProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ValidTicketStateChangesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlValidTicketStateChangesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlValidTicketStateChangesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.User_MarketingServiceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.User_MarketingService"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUser_MarketingServiceProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUser_MarketingServiceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Moderator_FeatureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModerator_FeatureProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModerator_FeatureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.UtilProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Util"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUtilProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlUtilProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketCategoryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TaxableProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Taxable"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTaxableProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTaxableProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.WholesalerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesalerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesalerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Ticket"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.WelcomeKitRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWelcomeKitRequestProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWelcomeKitRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Wholesaler_ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesaler_ProductProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesaler_ProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SalesPersonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SalesPerson"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.MarketingServiceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.MarketingService"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlMarketingServiceProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlMarketingServiceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ModeratorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModeratorProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModeratorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ParticipantProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Participant"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlParticipantProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlParticipantProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Moderator_DnisProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModerator_DnisProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlModerator_DnisProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ParticipantListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ParticipantList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlParticipantListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlParticipantListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempReplayIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempReplayIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempReplayIdsProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempReplayIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempExistingCodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempExistingCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempExistingCodesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempExistingCodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempCodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempCodesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempCodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempCodeChangesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempCodeChanges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempCodeChangesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempCodeChangesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempSampleRatesPerProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempSampleRatesPerProductProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempSampleRatesPerProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TempTotalDollarsSpentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempTotalDollarsSpentProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTempTotalDollarsSpentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.RatedCdrProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RatedCdr"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRatedCdrProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlRatedCdrProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TrendProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Trend"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTrendProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTrendProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketUserAssociationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketUserAssociationsProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketUserAssociationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.TicketStatusHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketStatusHistoryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlTicketStatusHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ProductRateValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateValueProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlProductRateValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadPeriodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadPeriodProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadPeriodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.DnisProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDnisProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDnisProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadChurnReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadChurnReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadChurnReasonProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadChurnReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.DnisTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.DnisType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDnisTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDnisTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CompanyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Company"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ClientNotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ClientNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlClientNotesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlClientNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CharityProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Charity"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCharityProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCharityProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CallFlowProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CallFlow"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCallFlowProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCallFlowProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CommissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Commission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCommissionProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCommissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CommissionCustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CommissionCustomer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCommissionCustomerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCommissionCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CompanyInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CurveProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Curve"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCurveProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCurveProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CompanyLeadTrackingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyLeadTrackingProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyLeadTrackingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ConferencingSummaryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ConferencingSummary"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlConferencingSummaryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlConferencingSummaryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BridgeTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CompanyLeadTrackingNotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyLeadTrackingNotesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCompanyLeadTrackingNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BridgeRequestTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeRequestType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeRequestTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeRequestTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AdminSiteNotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAdminSiteNotesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAdminSiteNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ActionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ActionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlActionTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlActionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ActionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Action"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlActionProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlActionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AccountManagerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccountManager"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccountManagerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccountManagerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AccessType_ProductRateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccessType_ProductRateProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAccessType_ProductRateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AdminSiteNotesHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAdminSiteNotesHistoryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAdminSiteNotesHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AreaCodeNxxProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAreaCodeNxxProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAreaCodeNxxProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AuditLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AuditLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAuditLogProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAuditLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BridgeRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeRequestProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BridgeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Bridge"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BillableLegsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BillableLegs"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBillableLegsProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBillableLegsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.AverageRatesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AverageRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAverageRatesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlAverageRatesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.BridgeQueueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeQueue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeQueueProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlBridgeQueueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ForExProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ForEx"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlForExProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlForExProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Customer_DnisProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer_Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomer_DnisProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomer_DnisProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.FeatureOptionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.FeatureOptionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureOptionTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureOptionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.FeatureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.GlPostingTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.GlPostingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlGlPostingTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlGlPostingTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.FeatureOptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.FeatureOption"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureOptionProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlFeatureOptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.InvoiceChargesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceCharges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceChargesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceChargesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.InvoiceNotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceNotesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LeadProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Lead"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLeadProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.LanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLanguageProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.IrWholesalerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.IrWholesaler"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlIrWholesalerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlIrWholesalerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.InvoiceSummaryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceSummary"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceSummaryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlInvoiceSummaryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExtensionTypeCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlExtensionTypeCategoryProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlExtensionTypeCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ExtensionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ExtensionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlExtensionTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlExtensionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.EventManagerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EventManager"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEventManagerProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEventManagerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerTransactionImportProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionImportProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionImportProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerReviewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerReview"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerReviewProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerReviewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerDocumentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerDocument"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerDocumentProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerDocumentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Customer_FeatureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomer_FeatureProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomer_FeatureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerTransactionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.DepartmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.ErrorCodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ErrorCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlErrorCodesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlErrorCodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.EmailTemplateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EmailTemplate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEmailTemplateProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEmailTemplateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.EmailNotificationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EmailNotification"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEmailNotificationProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlEmailNotificationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.CustomerTransactionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransaction"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlCustomerTransactionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.DocumentTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.DocumentType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDocumentTypeProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlDocumentTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Wholesaler_Product_FeatureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesaler_Product_FeatureProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlWholesaler_Product_FeatureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_AccessType_ProductRatesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_AccessType_ProductRatesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_AccessType_ProductRatesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_ConferenceCallList_UniqueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ConferenceCallList_UniqueProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ConferenceCallList_UniqueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_ConferenceListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ConferenceListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ConferenceListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_CustomerListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_CustomerList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_CustomerListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_CustomerListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_CustomerTransactionListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_CustomerTransactionListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_CustomerTransactionListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_DefaultProductRatesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_DefaultProductRatesProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_DefaultProductRatesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_FeatureOptionsForCustomersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_FeatureOptionsForCustomersProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_FeatureOptionsForCustomersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_FeatureOptionsForModeratorsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_FeatureOptionsForModeratorsProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_FeatureOptionsForModeratorsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_ModeratorListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ModeratorListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ModeratorListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_ModeratorList_AdminSiteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ModeratorList_AdminSiteProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_ModeratorList_AdminSiteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_RecordingListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_RecordingList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_RecordingListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_RecordingListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_SystemExtension_AllProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_AllProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_AllProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_SystemExtension_CustomerLabelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_CustomerLabelProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_CustomerLabelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_SystemExtension_ValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_ValueProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_SystemExtension_ValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.Vw_UserListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_UserList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_UserListProvider">
            <summary>
            Gets the current <c cref="P:CONFDB.Data.SqlClient.SqlNetTiersProvider.SqlVw_UserListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesaler_ProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	Product_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	Wholesaler_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.GetByWholesalerIdProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler_Product})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler_Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product)">
            <summary>
            	Inserts a CONFDB.Entities.Wholesaler_Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Wholesaler_Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Wholesaler_Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>	
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWholesaler_ProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesaler_ProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesaler_ProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketPriorityProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketPriority"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketPriorityProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketPriorityProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Role objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Role objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Role objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Role objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Role})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Role)">
            <summary>
            	Inserts a CONFDB.Entities.Role object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Role object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Role)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Role object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEmailNotificationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EmailNotification"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EmailNotification"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailNotification objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailNotification objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailNotification objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailNotification objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetByEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetByEmailSent(CONFDB.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_emailSent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetBySentDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sentDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.GetByTemplateNameCreatedDate(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.EmailNotification})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EmailNotification object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotification)">
            <summary>
            	Inserts a CONFDB.Entities.EmailNotification object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EmailNotification object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.EmailNotification object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotification)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.EmailNotification object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.EmailNotification object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlEmailNotificationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailNotificationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailNotificationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDepartmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Department objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Department objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Department objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Department objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByParentId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByWholesalerIdCustomerIdName(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Department})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Department)">
            <summary>
            	Inserts a CONFDB.Entities.Department object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Department object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Department)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Department object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.GetByCustomerIdCustom(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Department_GetByCustomerIdCustom' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDepartmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDepartmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDepartmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDepartmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomer_DnisProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer_Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_DnisProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_DnisProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByLeadPeriodId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	FK_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadPeriodId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByCompanyInfoId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	FK_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyInfoId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByLeadSourceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	FK_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadSourceId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByLeadChurnReasonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	FK_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadChurnReasonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByLeadProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	FK_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetByLeadStageId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	FK_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadStageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CompanyLeadTracking})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyLeadTracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTracking)">
            <summary>
            	Inserts a CONFDB.Entities.CompanyLeadTracking object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTracking object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CompanyLeadTracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTracking)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTracking object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CompanyLeadTracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	AccessType_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	ProductRate_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.GetByAccessTypeIdProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AccessType_ProductRate})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccessType_ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRate)">
            <summary>
            	Inserts a CONFDB.Entities.AccessType_ProductRate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccessType_ProductRate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccessType_ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccessType_ProductRate object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AccessType_ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccessType_ProductRateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_AllProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_FeatureOptionsForCustomers objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_FeatureOptionsForCustomers objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_FeatureOptionsForCustomers objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_FeatureOptionsForCustomers objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForCustomersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWholesalerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Wholesaler"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWholesalerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWholesalerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_fromStatusId">. Primary Key.</param>	
            <param name="_toStatusId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.GetByFromStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	FK_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.GetByToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	FK_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.GetByFromStatusIdToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ValidTicketStateChanges})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ValidTicketStateChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChanges)">
            <summary>
            	Inserts a CONFDB.Entities.ValidTicketStateChanges object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ValidTicketStateChanges object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ValidTicketStateChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChanges)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ValidTicketStateChanges object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ValidTicketStateChanges object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ProductType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductType)">
            <summary>
            	Inserts a CONFDB.Entities.ProductType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRate"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	Country_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByRatingTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	FK_ProductRate_RatingType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	Product_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByProductRateIntervalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	ProductRateInterval_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateIntervalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	ProductRateType_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	Taxable_ProductRate_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByProductIdProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.GetByNameProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ProductRate})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRate)">
            <summary>
            	Inserts a CONFDB.Entities.ProductRate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRate object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ProductRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceNotes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetByEndDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.InvoiceNotes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotes)">
            <summary>
            	Inserts a CONFDB.Entities.InvoiceNotes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceNotes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.InvoiceNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.InvoiceNotes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.InvoiceNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlInvoiceNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlEmailTemplateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.EmailTemplate"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlEmailTemplateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlEmailTemplateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer_Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	Customer_Customer_Feature_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	Feature_Customer_Feature_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	FeatureOption_Customer_Feature_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetByFeatureIdCustomerIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.GetByCustomerIdFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Customer_Feature})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Feature)">
            <summary>
            	Inserts a CONFDB.Entities.Customer_Feature object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer_Feature object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Customer_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Feature)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Customer_Feature object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Customer_Feature object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCustomer_FeatureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlClientNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ClientNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlClientNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlClientNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ClientNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ClientNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ClientNotes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ClientNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ClientNotes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ClientNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotes)">
            <summary>
            	Inserts a CONFDB.Entities.ClientNotes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ClientNotes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ClientNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ClientNotes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ClientNotes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlClientNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlClientNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ClientNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlClientNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlClientNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlActionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ActionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ActionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ActionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ActionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ActionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ActionType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionType)">
            <summary>
            	Inserts a CONFDB.Entities.ActionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ActionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ActionType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlActionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlActionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ActionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_SystemExtension_Value objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_Value objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_Value objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_SystemExtension_Value objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_ValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketStatus"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketProduct"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketProduct objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketProduct objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketProduct})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProduct)">
            <summary>
            	Inserts a CONFDB.Entities.TicketProduct object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketProduct object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProduct)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketProduct object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRatingTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RatingType"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RatingType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RatingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatingType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatingType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.RatingType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RatingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingType)">
            <summary>
            	Inserts a CONFDB.Entities.RatingType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RatingType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.RatingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.RatingType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.RatingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlRatingTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatingTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatingTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRatedCdrProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.RatedCdr"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRatedCdrProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRatedCdrProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlPromptSetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.PromptSet"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlPromptSetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.PromptSet"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPromptSetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPromptSetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PromptSet objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.PromptSet objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PromptSet objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.PromptSet objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.PromptSet})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.PromptSet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSet)">
            <summary>
            	Inserts a CONFDB.Entities.PromptSet object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.PromptSet object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.PromptSet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSet)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.PromptSet object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.PromptSet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlPromptSetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlPromptSetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlPromptSetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModerator_FeatureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator_Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_FeatureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_FeatureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDnisTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.DnisType"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.DnisType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DnisType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.DnisType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DnisType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.DnisType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.DnisType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.DnisType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisType)">
            <summary>
            	Inserts a CONFDB.Entities.DnisType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.DnisType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.DnisType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.DnisType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.DnisType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlDnisTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAuditLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AuditLog"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAuditLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAuditLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Table used to stored audit log and changes for user items. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AuditLog objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AuditLog objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AuditLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AuditLog objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AuditLog})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AuditLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLog)">
            <summary>
            	Inserts a CONFDB.Entities.AuditLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AuditLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AuditLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AuditLog object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AuditLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAuditLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_RecordingListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_RecordingList"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_RecordingListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_RecordingListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_CustomerList objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_CustomerList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_CustomerList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_CustomerList objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_CustomerListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUtilProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Util"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUtilProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUtilProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Util})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Util object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Util)">
            <summary>
            	Inserts a CONFDB.Entities.Util object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Util object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Util object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Util)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Util object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Util object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.BulkEditProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
            </summary>	
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Accounting_ExportPaymentReversals(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_DoBillingRun(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GeneratePassword(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_Mark_BillableCDRSEnd(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_PostMonthlyCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.PopulateTrends(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.TestUserCodes(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@,System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
            </summary>	
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
            <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_CalculateFreeCredits(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.MGMTRPT_RevenueByModerator2(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GenerateRandomString(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int16},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
            </summary>	
            <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
            <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="charactersToUse"> A <c>System.String</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.CalculateTax(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="amount"> A <c>System.Decimal?</c> instance.</param>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateName"> A <c>System.String</c> instance.</param>
            <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
            <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_GenerateInvoices_Bak(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
            </summary>	
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.BulkEditsPreview(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
            </summary>	
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_BACKUP_INVOICING_TABLES(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.BulkEditProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
            </summary>	
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_Mark_BillableCDRSStart(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Accounting_ExportInvoicesXERO(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Accounting_ExportCreditMemos(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_GenerateInvoices(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
            </summary>	
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.PushProductRatesThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.PopulateModeratorXTimeUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.GetReportData(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_GetReportData' stored procedure. 
            </summary>	
            <param name="reportType"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.BulkEditWSProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
            </summary>	
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_GenerateCommissions(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
            </summary>	
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Accounting_ExportPayments(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.MGMTRPT_Trends(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.MGMTRPT_RevenueByModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.MGMTRPT_GrossProfit(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_EnableInvoiceEmailer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.PushFeatureThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.INV_ROLLBACK_INVOICING_TABLES(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProviderBase.Accounting_ExportInvoices(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUtilProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUtilProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUtilProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUtilProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Util"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUtilProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUtilProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_ticketId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	FK_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.GetByTicketId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TicketStatusHistory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketStatusHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistory)">
            <summary>
            	Inserts a CONFDB.Entities.TicketStatusHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketStatusHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TicketStatusHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TicketStatusHistory object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TicketStatusHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketProduct"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempCodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempCodes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempCodes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodes)">
            <summary>
            	Inserts a CONFDB.Entities.TempCodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempCodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempCodes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempCodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlStateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.State"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlStateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlStateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_moderatorId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ModeratorXtimeUser objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ModeratorXtimeUser objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ModeratorXtimeUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ModeratorXtimeUser objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.GetByFirstCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_firstCallDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.GetByThirdCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_thirdCallDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ModeratorXtimeUser})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ModeratorXtimeUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUser)">
            <summary>
            	Inserts a CONFDB.Entities.ModeratorXtimeUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ModeratorXtimeUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ModeratorXtimeUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ModeratorXtimeUser object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ModeratorXtimeUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.XTimeReport(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_ModeratorXTimeUser_XTimeReport' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="reportNumber"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Lead"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.FeatureOptionType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureOptionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCurveProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Curve"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurveProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurveProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Curve objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Curve objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Curve objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Curve objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Curve})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Curve object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Curve)">
            <summary>
            	Inserts a CONFDB.Entities.Curve object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Curve object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Curve object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Curve)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Curve object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Curve object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurveProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurveProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCurveProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the Vw_SystemExtension_CustomerLabel objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_CustomerLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vw_SystemExtension_CustomerLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Vw_SystemExtension_CustomerLabel objects.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_SystemExtension_CustomerLabelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlValidTicketStateChangesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketStatusHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTaxableProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Taxable"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTaxableProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Taxable"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTaxableProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTaxableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Taxable objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Taxable objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Taxable objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Taxable objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Taxable})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Taxable object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Taxable)">
            <summary>
            	Inserts a CONFDB.Entities.Taxable object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Taxable object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Taxable object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Taxable)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Taxable object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Taxable object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTaxableProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTaxableProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTaxableProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTaxableProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTaxableProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSalesPersonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SalesPerson"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SalesPerson"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.GetBySalesManagerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	FK_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesManagerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	Wholesaler_SalesPerson_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.SalesPerson})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPerson)">
            <summary>
            	Inserts a CONFDB.Entities.SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SalesPerson object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPerson)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.SalesPerson object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlSalesPersonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSalesPersonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSalesPersonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModerator_DnisProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModerator_DnisProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModerator_DnisProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlMarketingServiceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.MarketingService"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.MarketingService"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.GetByUserIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	FK_MarketingService_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.MarketingService})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingService)">
            <summary>
            	Inserts a CONFDB.Entities.MarketingService object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.MarketingService object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingService)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.MarketingService object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.MarketingService object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlMarketingServiceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlMarketingServiceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlMarketingServiceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadSourceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadSource"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.LeadSource"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadSource objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.LeadSource objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadSource objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.LeadSource objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.LeadSource})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadSource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSource)">
            <summary>
            	Inserts a CONFDB.Entities.LeadSource object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadSource object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.LeadSource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSource)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.LeadSource object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.LeadSource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlLeadSourceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLeadSourceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLeadSourceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceSummaryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceSummary"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceSummaryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceSummaryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceNotes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDocumentTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.DocumentType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDocumentTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDocumentTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlConferencingSummaryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ConferencingSummary"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ConferencingSummary"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.Delete(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_billedDate">. Primary Key.</param>	
            <param name="_productId">. Primary Key.</param>	
            <param name="_currency">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ConferencingSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ConferencingSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ConferencingSummary objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ConferencingSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.GetByBilledDateProductIdCurrency(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ConferencingSummary})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ConferencingSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummary)">
            <summary>
            	Inserts a CONFDB.Entities.ConferencingSummary object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ConferencingSummary object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ConferencingSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummary)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ConferencingSummary object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ConferencingSummary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlConferencingSummaryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlConferencingSummaryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlConferencingSummaryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccountManager"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	Wholesaler_AccountManager_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.AccountManager})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccountManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManager)">
            <summary>
            	Inserts a CONFDB.Entities.AccountManager object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccountManager object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.AccountManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManager)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.AccountManager object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.AccountManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlAccountManagerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.User_MarketingService"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUser_MarketingServiceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTrendProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Trend"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTrendProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTrendProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempSampleRatesPerProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlFeatureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlFeatureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlFeatureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_CustomerListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_CustomerList"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_CustomerListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_CustomerListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempExistingCodes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_codes">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempExistingCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TempExistingCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempExistingCodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TempExistingCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.GetByCodes(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_codes"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.TempExistingCodes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempExistingCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodes)">
            <summary>
            	Inserts a CONFDB.Entities.TempExistingCodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempExistingCodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.TempExistingCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.TempExistingCodes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.TempExistingCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlTempExistingCodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempExistingCodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempExistingCodes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempExistingCodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempExistingCodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlSystemSettingsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.SystemSettings"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlSystemSettingsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlSystemSettingsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlModeratorXtimeUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCurveProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Curve"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCurveProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCurveProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCommissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Commission"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	Currency_Commission_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	SalesPerson_Commission_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	Wholesaler_Commission_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	Customer_Commission_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Commission})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Commission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Commission)">
            <summary>
            	Inserts a CONFDB.Entities.Commission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Commission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Commission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Commission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Commission object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Commission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProviderBase.GetCommissionReport(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Commission_GetCommissionReport' stored procedure. 
            </summary>	
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCommissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_ModeratorList_AdminSiteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByMarketingServiceIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByCharityId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	FK_User_Charity Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_charityId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	FK_User_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_country"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByRoleId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	FK_User_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	FK_User_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	FK_User_State Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByCompanyId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	FK_User_Company Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetByUsername(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.User})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.User)">
            <summary>
            	Inserts a CONFDB.Entities.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.User object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.GetAllModeratorsByCustomerID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
            </summary>	
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProviderBase.CheckUserName(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_User_CheckUserName' stored procedure. 
            </summary>	
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.GetByProductTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	ProductType_Product_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Product})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Product)">
            <summary>
            	Inserts a CONFDB.Entities.Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Product object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionTypeCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionTypeCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionTypeCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ExtensionTypeCategory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.GetByCategoryName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ExtensionTypeCategory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ExtensionTypeCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategory)">
            <summary>
            	Inserts a CONFDB.Entities.ExtensionTypeCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ExtensionTypeCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ExtensionTypeCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ExtensionTypeCategory object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ExtensionTypeCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlErrorCodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ErrorCodes"/> entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ErrorCodes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ErrorCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ErrorCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ErrorCodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ErrorCodes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ErrorCodes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ErrorCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodes)">
            <summary>
            	Inserts a CONFDB.Entities.ErrorCodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ErrorCodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ErrorCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ErrorCodes object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ErrorCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlErrorCodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlErrorCodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlErrorCodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCustomer_FeatureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Customer_Feature"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCustomer_FeatureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCustomer_FeatureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVw_FeatureOptionsForModeratorsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	FK_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.GetByCreatedDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.WelcomeKitRequest})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.WelcomeKitRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequest)">
            <summary>
            	Inserts a CONFDB.Entities.WelcomeKitRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.WelcomeKitRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.WelcomeKitRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.WelcomeKitRequest object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.WelcomeKitRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.AddRequest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_AddRequest' stored procedure. 
            </summary>	
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="notes"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.ProcessRequest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_ProcessRequest' stored procedure. 
            </summary>	
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="requestedCompletedBy"> A <c>System.String</c> instance.</param>
            <param name="markAsProcessed"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVerticalProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vertical"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVerticalProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVerticalProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	Wholesaler_Vertical_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetByDescription(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.Vertical})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Vertical object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.Vertical)">
            <summary>
            	Inserts a CONFDB.Entities.Vertical object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Vertical object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.Vertical object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.Vertical)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.Vertical object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.Vertical object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVerticalProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVerticalProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlVerticalProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRate"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlOmnoviaHostedArchiveParticipantProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlInvoiceChargesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.InvoiceCharges"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlInvoiceChargesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlInvoiceChargesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCallFlowProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CallFlow"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCallFlowProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCallFlowProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CallFlow objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CallFlow objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CallFlow objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CallFlow objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.CallFlow})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CallFlow object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlow)">
            <summary>
            	Inserts a CONFDB.Entities.CallFlow object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CallFlow object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.CallFlow object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlow)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.CallFlow object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.CallFlow object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlCallFlowProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCallFlowProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CallFlow"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCallFlowProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCallFlowProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAuditLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AuditLog"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAuditLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAuditLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlAccountManagerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.AccountManager"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlAccountManagerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlAccountManagerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlWelcomeKitRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTicketUserAssociationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlTempCodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.TempCodes"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlTempCodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlTempCodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateValue"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	Customer_ProductRateValue_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByBuyRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	FK_ProductRateValue_BuyRateCurrencyID Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_buyRateCurrencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetBySellRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	FK_ProductRateValue_SellRateCurrencyID Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sellRateCurrencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	ProductRate_ProductRateValue_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByCustomerIdProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByProductRateIdDefaultOption(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByIdProductRateIdSellRateSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.ProductRateValue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValue)">
            <summary>
            	Inserts a CONFDB.Entities.ProductRateValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.ProductRateValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.ProductRateValue object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.ProductRateValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlProductRateValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlProductRateValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ProductRateValue"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlProductRateValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlProductRateValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlDnisProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Dnis"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlDnisProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlDnisProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCompanyLeadTrackingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCharityProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Charity"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCharityProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCharityProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeRequestType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequestType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequestType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequestType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequestType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{CONFDB.Entities.BridgeRequestType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeRequestType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestType)">
            <summary>
            	Inserts a CONFDB.Entities.BridgeRequestType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeRequestType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the CONFDB.Entities.BridgeRequestType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">CONFDB.Entities.BridgeRequestType object to update.</param>
            <remarks>
            	After updating the datasource, the CONFDB.Entities.BridgeRequestType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBillableLegsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BillableLegs"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBillableLegsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBillableLegsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlVerticalProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Vertical"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlVerticalProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlVerticalProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlParticipantListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ParticipantList"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlParticipantListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlParticipantListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlExtensionTypeCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlCommissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Commission"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlCommissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlCommissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.BridgeRequestType"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlBridgeRequestTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:CONFDB.Data.SqlClient.SqlActionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:CONFDB.Entities.Action"/> entity.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlClient.SqlActionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:CONFDB.Data.SqlClient.SqlActionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
