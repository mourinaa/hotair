
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlWholesalerProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Wholesaler"/> entity.
	///</summary>
	public abstract partial class SqlWholesalerProviderBase : WholesalerProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlWholesalerProviderBase"/> instance.
		/// </summary>
		public SqlWholesalerProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlWholesalerProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlWholesalerProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByLanguageIdFromIrWholesaler
		/// <summary>
		///		Gets Wholesaler objects from the datasource by LanguageID in the
		///		IRWholesaler table. Table Wholesaler is related to table Language
		///		through the (M:N) relationship defined in the IRWholesaler table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_languageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns a <c>TList</c> of Wholesaler objects.</returns>
		public override TList<Wholesaler> GetByLanguageIdFromIrWholesaler(TransactionManager transactionManager, System.String _languageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetByLanguageIdFromIrWholesaler", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@LanguageId", DbType.AnsiString, _languageId);
			
			IDataReader reader = null;
			//Create collection and fill
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLanguageIdFromIrWholesaler", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLanguageIdFromIrWholesaler", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByLanguageIdFromIrWholesaler
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.String _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.AnsiString, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Wholesaler)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
		public override CONFDB.Entities.TList<Wholesaler> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<Wholesaler>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyShortName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailPriCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailPriCustomerNumberLikeExp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultModCodeLength", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultPassCodeLength", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultPasswordLength", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultCapsOk", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorTxt", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ParticipantTxt", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerNumberExceptionList", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebProductProviderName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebProductProviderBranding", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebSecProductProvider", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingWholesalerId", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCustomerNumber", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebSiteUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdminSiteUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdminSiteIp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SelfServeUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SelfServeIp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebConferencingUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebConferencingIp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SupportEmail", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SupportPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DoRetailBilling", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CommissionLockDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingAddress1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingAddress2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingRegion", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyname ") || clause.Trim().StartsWith("companyname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyshortname ") || clause.Trim().StartsWith("companyshortname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyShortName", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailpricustomernumber ") || clause.Trim().StartsWith("retailpricustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@RetailPriCustomerNumber", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailpricustomernumberlikeexp ") || clause.Trim().StartsWith("retailpricustomernumberlikeexp="))
				{
					database.SetParameterValue(commandWrapper, "@RetailPriCustomerNumberLikeExp", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultmodcodelength ") || clause.Trim().StartsWith("defaultmodcodelength="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultModCodeLength", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultpasscodelength ") || clause.Trim().StartsWith("defaultpasscodelength="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultPassCodeLength", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultpasswordlength ") || clause.Trim().StartsWith("defaultpasswordlength="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultPasswordLength", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultcapsok ") || clause.Trim().StartsWith("defaultcapsok="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultCapsOk", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatortxt ") || clause.Trim().StartsWith("moderatortxt="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorTxt", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("participanttxt ") || clause.Trim().StartsWith("participanttxt="))
				{
					database.SetParameterValue(commandWrapper, "@ParticipantTxt", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enabled ") || clause.Trim().StartsWith("enabled="))
				{
					database.SetParameterValue(commandWrapper, "@Enabled", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customernumberexceptionlist ") || clause.Trim().StartsWith("customernumberexceptionlist="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerNumberExceptionList", 
						clause.Trim().Remove(0,27).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webproductprovidername ") || clause.Trim().StartsWith("webproductprovidername="))
				{
					database.SetParameterValue(commandWrapper, "@WebProductProviderName", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webproductproviderbranding ") || clause.Trim().StartsWith("webproductproviderbranding="))
				{
					database.SetParameterValue(commandWrapper, "@WebProductProviderBranding", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("websecproductprovider ") || clause.Trim().StartsWith("websecproductprovider="))
				{
					database.SetParameterValue(commandWrapper, "@WebSecProductProvider", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingwholesalerid ") || clause.Trim().StartsWith("billingwholesalerid="))
				{
					database.SetParameterValue(commandWrapper, "@BillingWholesalerId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcustomernumber ") || clause.Trim().StartsWith("billingcustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCustomerNumber", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("taxableid ") || clause.Trim().StartsWith("taxableid="))
				{
					database.SetParameterValue(commandWrapper, "@TaxableId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("websiteurl ") || clause.Trim().StartsWith("websiteurl="))
				{
					database.SetParameterValue(commandWrapper, "@WebSiteUrl", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adminsiteurl ") || clause.Trim().StartsWith("adminsiteurl="))
				{
					database.SetParameterValue(commandWrapper, "@AdminSiteUrl", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adminsiteip ") || clause.Trim().StartsWith("adminsiteip="))
				{
					database.SetParameterValue(commandWrapper, "@AdminSiteIp", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("selfserveurl ") || clause.Trim().StartsWith("selfserveurl="))
				{
					database.SetParameterValue(commandWrapper, "@SelfServeUrl", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("selfserveip ") || clause.Trim().StartsWith("selfserveip="))
				{
					database.SetParameterValue(commandWrapper, "@SelfServeIp", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webconferencingurl ") || clause.Trim().StartsWith("webconferencingurl="))
				{
					database.SetParameterValue(commandWrapper, "@WebConferencingUrl", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webconferencingip ") || clause.Trim().StartsWith("webconferencingip="))
				{
					database.SetParameterValue(commandWrapper, "@WebConferencingIp", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("supportemail ") || clause.Trim().StartsWith("supportemail="))
				{
					database.SetParameterValue(commandWrapper, "@SupportEmail", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("supportphonenumber ") || clause.Trim().StartsWith("supportphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@SupportPhoneNumber", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("doretailbilling ") || clause.Trim().StartsWith("doretailbilling="))
				{
					database.SetParameterValue(commandWrapper, "@DoRetailBilling", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("commissionlockdate ") || clause.Trim().StartsWith("commissionlockdate="))
				{
					database.SetParameterValue(commandWrapper, "@CommissionLockDate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingaddress1 ") || clause.Trim().StartsWith("billingaddress1="))
				{
					database.SetParameterValue(commandWrapper, "@BillingAddress1", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingaddress2 ") || clause.Trim().StartsWith("billingaddress2="))
				{
					database.SetParameterValue(commandWrapper, "@BillingAddress2", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcity ") || clause.Trim().StartsWith("billingcity="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCity", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcountry ") || clause.Trim().StartsWith("billingcountry="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCountry", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingregion ") || clause.Trim().StartsWith("billingregion="))
				{
					database.SetParameterValue(commandWrapper, "@BillingRegion", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingpostalcode ") || clause.Trim().StartsWith("billingpostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPostalCode", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
		public override CONFDB.Entities.TList<Wholesaler> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Find_Dynamic", typeof(WholesalerColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Wholesaler> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
		public override CONFDB.Entities.TList<Wholesaler> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCurrencyId
		/// <summary>
		/// 	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
		///		Currency_Wholesaler_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_currencyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Wholesaler> GetByCurrencyId(TransactionManager transactionManager, System.String _currencyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetByCurrencyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, _currencyId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByBillingCountry
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Wholesaler_Country key.
		///		FK_Wholesaler_Country Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billingCountry"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Wholesaler> GetByBillingCountry(TransactionManager transactionManager, System.String _billingCountry, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetByBillingCountry", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, _billingCountry);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBillingCountry", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBillingCountry", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByBillingRegion
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Wholesaler_State key.
		///		FK_Wholesaler_State Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billingRegion">State, Province, etc.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Wholesaler> GetByBillingRegion(TransactionManager transactionManager, System.String _billingRegion, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetByBillingRegion", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@BillingRegion", DbType.AnsiString, _billingRegion);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBillingRegion", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBillingRegion", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByTaxableId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
		///		FK_Wholesaler_Taxable Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_taxableId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Wholesaler> GetByTaxableId(TransactionManager transactionManager, System.Int32 _taxableId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetByTaxableId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, _taxableId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Wholesaler> rows = new CONFDB.Entities.TList<Wholesaler>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByTaxableId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByTaxableId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the Wholesaler_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Wholesaler"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Wholesaler GetById(TransactionManager transactionManager, System.String _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.AnsiString, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Wholesaler> tmp = new CONFDB.Entities.TList<Wholesaler>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Wholesaler object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.Wholesaler> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Wholesaler";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.String));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("CompanyName", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("CompanyShortName", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("RetailPriCustomerNumber", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("RetailPriCustomerNumberLIKEExp", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("DefaultModCodeLength", typeof(System.Byte));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("DefaultPassCodeLength", typeof(System.Byte));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("DefaultPasswordLength", typeof(System.Byte));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("DefaultCapsOK", typeof(System.Boolean));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ModeratorTxt", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ParticipantTxt", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("Enabled", typeof(System.Boolean));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("CustomerNumberExceptionList", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("WebProductProviderName", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("WebProductProviderBranding", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("WebSecProductProvider", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("CurrencyID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("BillingWholesalerID", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("BillingCustomerNumber", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("TaxableID", typeof(System.Int32));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("WebSiteURL", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("AdminSiteURL", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("AdminSiteIP", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("SelfServeURL", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("SelfServeIP", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("WebConferencingURL", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("WebConferencingIP", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("SupportEmail", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("SupportPhoneNumber", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("DoRetailBilling", typeof(System.Boolean));
			col29.AllowDBNull = false;		
			DataColumn col30 = dataTable.Columns.Add("CommissionLockDate", typeof(System.DateTime));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("PortalID", typeof(System.Int32));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("BillingAddress1", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("BillingAddress2", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("BillingCity", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("BillingCountry", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("BillingRegion", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("BillingPostalCode", typeof(System.String));
			col37.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			bulkCopy.ColumnMappings.Add("CompanyName", "CompanyName");
			bulkCopy.ColumnMappings.Add("CompanyShortName", "CompanyShortName");
			bulkCopy.ColumnMappings.Add("RetailPriCustomerNumber", "RetailPriCustomerNumber");
			bulkCopy.ColumnMappings.Add("RetailPriCustomerNumberLIKEExp", "RetailPriCustomerNumberLIKEExp");
			bulkCopy.ColumnMappings.Add("DefaultModCodeLength", "DefaultModCodeLength");
			bulkCopy.ColumnMappings.Add("DefaultPassCodeLength", "DefaultPassCodeLength");
			bulkCopy.ColumnMappings.Add("DefaultPasswordLength", "DefaultPasswordLength");
			bulkCopy.ColumnMappings.Add("DefaultCapsOK", "DefaultCapsOK");
			bulkCopy.ColumnMappings.Add("ModeratorTxt", "ModeratorTxt");
			bulkCopy.ColumnMappings.Add("ParticipantTxt", "ParticipantTxt");
			bulkCopy.ColumnMappings.Add("Enabled", "Enabled");
			bulkCopy.ColumnMappings.Add("CustomerNumberExceptionList", "CustomerNumberExceptionList");
			bulkCopy.ColumnMappings.Add("WebProductProviderName", "WebProductProviderName");
			bulkCopy.ColumnMappings.Add("WebProductProviderBranding", "WebProductProviderBranding");
			bulkCopy.ColumnMappings.Add("WebSecProductProvider", "WebSecProductProvider");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("BillingWholesalerID", "BillingWholesalerID");
			bulkCopy.ColumnMappings.Add("BillingCustomerNumber", "BillingCustomerNumber");
			bulkCopy.ColumnMappings.Add("TaxableID", "TaxableID");
			bulkCopy.ColumnMappings.Add("WebSiteURL", "WebSiteURL");
			bulkCopy.ColumnMappings.Add("AdminSiteURL", "AdminSiteURL");
			bulkCopy.ColumnMappings.Add("AdminSiteIP", "AdminSiteIP");
			bulkCopy.ColumnMappings.Add("SelfServeURL", "SelfServeURL");
			bulkCopy.ColumnMappings.Add("SelfServeIP", "SelfServeIP");
			bulkCopy.ColumnMappings.Add("WebConferencingURL", "WebConferencingURL");
			bulkCopy.ColumnMappings.Add("WebConferencingIP", "WebConferencingIP");
			bulkCopy.ColumnMappings.Add("SupportEmail", "SupportEmail");
			bulkCopy.ColumnMappings.Add("SupportPhoneNumber", "SupportPhoneNumber");
			bulkCopy.ColumnMappings.Add("DoRetailBilling", "DoRetailBilling");
			bulkCopy.ColumnMappings.Add("CommissionLockDate", "CommissionLockDate");
			bulkCopy.ColumnMappings.Add("PortalID", "PortalID");
			bulkCopy.ColumnMappings.Add("BillingAddress1", "BillingAddress1");
			bulkCopy.ColumnMappings.Add("BillingAddress2", "BillingAddress2");
			bulkCopy.ColumnMappings.Add("BillingCity", "BillingCity");
			bulkCopy.ColumnMappings.Add("BillingCountry", "BillingCountry");
			bulkCopy.ColumnMappings.Add("BillingRegion", "BillingRegion");
			bulkCopy.ColumnMappings.Add("BillingPostalCode", "BillingPostalCode");
			
			foreach(CONFDB.Entities.Wholesaler entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
					row["CompanyName"] = entity.CompanyName;
							
				
					row["CompanyShortName"] = entity.CompanyShortName;
							
				
					row["RetailPriCustomerNumber"] = entity.RetailPriCustomerNumber;
							
				
					row["RetailPriCustomerNumberLIKEExp"] = entity.RetailPriCustomerNumberLikeExp;
							
				
					row["DefaultModCodeLength"] = entity.DefaultModCodeLength.HasValue ? (object) entity.DefaultModCodeLength  : System.DBNull.Value;
							
				
					row["DefaultPassCodeLength"] = entity.DefaultPassCodeLength.HasValue ? (object) entity.DefaultPassCodeLength  : System.DBNull.Value;
							
				
					row["DefaultPasswordLength"] = entity.DefaultPasswordLength.HasValue ? (object) entity.DefaultPasswordLength  : System.DBNull.Value;
							
				
					row["DefaultCapsOK"] = entity.DefaultCapsOk.HasValue ? (object) entity.DefaultCapsOk  : System.DBNull.Value;
							
				
					row["ModeratorTxt"] = entity.ModeratorTxt;
							
				
					row["ParticipantTxt"] = entity.ParticipantTxt;
							
				
					row["Enabled"] = entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value;
							
				
					row["CustomerNumberExceptionList"] = entity.CustomerNumberExceptionList;
							
				
					row["WebProductProviderName"] = entity.WebProductProviderName;
							
				
					row["WebProductProviderBranding"] = entity.WebProductProviderBranding;
							
				
					row["WebSecProductProvider"] = entity.WebSecProductProvider;
							
				
					row["CurrencyID"] = entity.CurrencyId;
							
				
					row["BillingWholesalerID"] = entity.BillingWholesalerId;
							
				
					row["BillingCustomerNumber"] = entity.BillingCustomerNumber;
							
				
					row["TaxableID"] = entity.TaxableId;
							
				
					row["WebSiteURL"] = entity.WebSiteUrl;
							
				
					row["AdminSiteURL"] = entity.AdminSiteUrl;
							
				
					row["AdminSiteIP"] = entity.AdminSiteIp;
							
				
					row["SelfServeURL"] = entity.SelfServeUrl;
							
				
					row["SelfServeIP"] = entity.SelfServeIp;
							
				
					row["WebConferencingURL"] = entity.WebConferencingUrl;
							
				
					row["WebConferencingIP"] = entity.WebConferencingIp;
							
				
					row["SupportEmail"] = entity.SupportEmail;
							
				
					row["SupportPhoneNumber"] = entity.SupportPhoneNumber;
							
				
					row["DoRetailBilling"] = entity.DoRetailBilling;
							
				
					row["CommissionLockDate"] = entity.CommissionLockDate.HasValue ? (object) entity.CommissionLockDate  : System.DBNull.Value;
							
				
					row["PortalID"] = entity.PortalId.HasValue ? (object) entity.PortalId  : System.DBNull.Value;
							
				
					row["BillingAddress1"] = entity.BillingAddress1;
							
				
					row["BillingAddress2"] = entity.BillingAddress2;
							
				
					row["BillingCity"] = entity.BillingCity;
							
				
					row["BillingCountry"] = entity.BillingCountry;
							
				
					row["BillingRegion"] = entity.BillingRegion;
							
				
					row["BillingPostalCode"] = entity.BillingPostalCode;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.Wholesaler entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.Wholesaler object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Wholesaler object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Wholesaler object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.Wholesaler entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Insert", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.AnsiString, entity.Id );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@CompanyShortName", DbType.AnsiString, entity.CompanyShortName );
			database.AddInParameter(commandWrapper, "@RetailPriCustomerNumber", DbType.AnsiString, entity.RetailPriCustomerNumber );
			database.AddInParameter(commandWrapper, "@RetailPriCustomerNumberLikeExp", DbType.AnsiString, entity.RetailPriCustomerNumberLikeExp );
			database.AddInParameter(commandWrapper, "@DefaultModCodeLength", DbType.Byte, (entity.DefaultModCodeLength.HasValue ? (object) entity.DefaultModCodeLength  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DefaultPassCodeLength", DbType.Byte, (entity.DefaultPassCodeLength.HasValue ? (object) entity.DefaultPassCodeLength  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DefaultPasswordLength", DbType.Byte, (entity.DefaultPasswordLength.HasValue ? (object) entity.DefaultPasswordLength  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DefaultCapsOk", DbType.Boolean, (entity.DefaultCapsOk.HasValue ? (object) entity.DefaultCapsOk  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ModeratorTxt", DbType.AnsiString, entity.ModeratorTxt );
			database.AddInParameter(commandWrapper, "@ParticipantTxt", DbType.AnsiString, entity.ParticipantTxt );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CustomerNumberExceptionList", DbType.AnsiString, entity.CustomerNumberExceptionList );
			database.AddInParameter(commandWrapper, "@WebProductProviderName", DbType.AnsiString, entity.WebProductProviderName );
			database.AddInParameter(commandWrapper, "@WebProductProviderBranding", DbType.AnsiString, entity.WebProductProviderBranding );
			database.AddInParameter(commandWrapper, "@WebSecProductProvider", DbType.AnsiString, entity.WebSecProductProvider );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@BillingWholesalerId", DbType.AnsiStringFixedLength, entity.BillingWholesalerId );
			database.AddInParameter(commandWrapper, "@BillingCustomerNumber", DbType.AnsiStringFixedLength, entity.BillingCustomerNumber );
			database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, entity.TaxableId );
			database.AddInParameter(commandWrapper, "@WebSiteUrl", DbType.AnsiString, entity.WebSiteUrl );
			database.AddInParameter(commandWrapper, "@AdminSiteUrl", DbType.AnsiString, entity.AdminSiteUrl );
			database.AddInParameter(commandWrapper, "@AdminSiteIp", DbType.AnsiString, entity.AdminSiteIp );
			database.AddInParameter(commandWrapper, "@SelfServeUrl", DbType.AnsiString, entity.SelfServeUrl );
			database.AddInParameter(commandWrapper, "@SelfServeIp", DbType.AnsiString, entity.SelfServeIp );
			database.AddInParameter(commandWrapper, "@WebConferencingUrl", DbType.AnsiString, entity.WebConferencingUrl );
			database.AddInParameter(commandWrapper, "@WebConferencingIp", DbType.AnsiString, entity.WebConferencingIp );
			database.AddInParameter(commandWrapper, "@SupportEmail", DbType.AnsiString, entity.SupportEmail );
			database.AddInParameter(commandWrapper, "@SupportPhoneNumber", DbType.AnsiString, entity.SupportPhoneNumber );
			database.AddInParameter(commandWrapper, "@DoRetailBilling", DbType.Boolean, entity.DoRetailBilling );
			database.AddInParameter(commandWrapper, "@CommissionLockDate", DbType.DateTime, (entity.CommissionLockDate.HasValue ? (object) entity.CommissionLockDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, (entity.PortalId.HasValue ? (object) entity.PortalId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BillingAddress1", DbType.AnsiString, entity.BillingAddress1 );
			database.AddInParameter(commandWrapper, "@BillingAddress2", DbType.AnsiString, entity.BillingAddress2 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, entity.BillingCountry );
			database.AddInParameter(commandWrapper, "@BillingRegion", DbType.AnsiString, entity.BillingRegion );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Wholesaler object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.Wholesaler object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.Wholesaler entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pWholesaler_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.AnsiString, entity.Id );
			database.AddInParameter(commandWrapper, "@OriginalId", DbType.AnsiString, entity.OriginalId);
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@CompanyShortName", DbType.AnsiString, entity.CompanyShortName );
			database.AddInParameter(commandWrapper, "@RetailPriCustomerNumber", DbType.AnsiString, entity.RetailPriCustomerNumber );
			database.AddInParameter(commandWrapper, "@RetailPriCustomerNumberLikeExp", DbType.AnsiString, entity.RetailPriCustomerNumberLikeExp );
			database.AddInParameter(commandWrapper, "@DefaultModCodeLength", DbType.Byte, (entity.DefaultModCodeLength.HasValue ? (object) entity.DefaultModCodeLength : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DefaultPassCodeLength", DbType.Byte, (entity.DefaultPassCodeLength.HasValue ? (object) entity.DefaultPassCodeLength : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DefaultPasswordLength", DbType.Byte, (entity.DefaultPasswordLength.HasValue ? (object) entity.DefaultPasswordLength : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DefaultCapsOk", DbType.Boolean, (entity.DefaultCapsOk.HasValue ? (object) entity.DefaultCapsOk : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ModeratorTxt", DbType.AnsiString, entity.ModeratorTxt );
			database.AddInParameter(commandWrapper, "@ParticipantTxt", DbType.AnsiString, entity.ParticipantTxt );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CustomerNumberExceptionList", DbType.AnsiString, entity.CustomerNumberExceptionList );
			database.AddInParameter(commandWrapper, "@WebProductProviderName", DbType.AnsiString, entity.WebProductProviderName );
			database.AddInParameter(commandWrapper, "@WebProductProviderBranding", DbType.AnsiString, entity.WebProductProviderBranding );
			database.AddInParameter(commandWrapper, "@WebSecProductProvider", DbType.AnsiString, entity.WebSecProductProvider );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiStringFixedLength, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@BillingWholesalerId", DbType.AnsiStringFixedLength, entity.BillingWholesalerId );
			database.AddInParameter(commandWrapper, "@BillingCustomerNumber", DbType.AnsiStringFixedLength, entity.BillingCustomerNumber );
			database.AddInParameter(commandWrapper, "@TaxableId", DbType.Int32, entity.TaxableId );
			database.AddInParameter(commandWrapper, "@WebSiteUrl", DbType.AnsiString, entity.WebSiteUrl );
			database.AddInParameter(commandWrapper, "@AdminSiteUrl", DbType.AnsiString, entity.AdminSiteUrl );
			database.AddInParameter(commandWrapper, "@AdminSiteIp", DbType.AnsiString, entity.AdminSiteIp );
			database.AddInParameter(commandWrapper, "@SelfServeUrl", DbType.AnsiString, entity.SelfServeUrl );
			database.AddInParameter(commandWrapper, "@SelfServeIp", DbType.AnsiString, entity.SelfServeIp );
			database.AddInParameter(commandWrapper, "@WebConferencingUrl", DbType.AnsiString, entity.WebConferencingUrl );
			database.AddInParameter(commandWrapper, "@WebConferencingIp", DbType.AnsiString, entity.WebConferencingIp );
			database.AddInParameter(commandWrapper, "@SupportEmail", DbType.AnsiString, entity.SupportEmail );
			database.AddInParameter(commandWrapper, "@SupportPhoneNumber", DbType.AnsiString, entity.SupportPhoneNumber );
			database.AddInParameter(commandWrapper, "@DoRetailBilling", DbType.Boolean, entity.DoRetailBilling );
			database.AddInParameter(commandWrapper, "@CommissionLockDate", DbType.DateTime, (entity.CommissionLockDate.HasValue ? (object) entity.CommissionLockDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, (entity.PortalId.HasValue ? (object) entity.PortalId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BillingAddress1", DbType.AnsiString, entity.BillingAddress1 );
			database.AddInParameter(commandWrapper, "@BillingAddress2", DbType.AnsiString, entity.BillingAddress2 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, entity.BillingCountry );
			database.AddInParameter(commandWrapper, "@BillingRegion", DbType.AnsiString, entity.BillingRegion );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_Wholesaler_Product_InstallDefaults
					
		/// <summary>
		///	This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
		/// </summary>	
		/// <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="productId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void Product_InstallDefaults(TransactionManager transactionManager, int start, int pageLength , System.Int32? wholesaler_ProductId, System.Int32? productId, System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Wholesaler_Product_InstallDefaults");
			
			database.AddInParameter(commandWrapper, "@Wholesaler_ProductID", DbType.Int32,  wholesaler_ProductId );
			database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32,  productId );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Product_InstallDefaults", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Product_InstallDefaults", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Wholesaler_UpdateProductFeature
					
		/// <summary>
		///	This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
		/// <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void UpdateProductFeature(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Int32? wholesaler_Product_FeatureId, System.Int32? featureId, System.Int32? featureOptionId, System.String featureOptionValue, System.Boolean? updateCustomers, System.Boolean? updateModerators)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Wholesaler_UpdateProductFeature");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@Wholesaler_Product_FeatureID", DbType.Int32,  wholesaler_Product_FeatureId );
			database.AddInParameter(commandWrapper, "@FeatureID", DbType.Int32,  featureId );
			database.AddInParameter(commandWrapper, "@FeatureOptionID", DbType.Int32,  featureOptionId );
			database.AddInParameter(commandWrapper, "@FeatureOptionValue", DbType.AnsiString,  featureOptionValue );
			database.AddInParameter(commandWrapper, "@UpdateCustomers", DbType.Boolean,  updateCustomers );
			database.AddInParameter(commandWrapper, "@UpdateModerators", DbType.Boolean,  updateModerators );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdateProductFeature", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdateProductFeature", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Wholesaler_GetProductRates
					
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductRates(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Wholesaler_GetProductRates");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductRates", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductRates", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Wholesaler_GetProductFeatures
					
		/// <summary>
		///	This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductFeatures(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Wholesaler_GetProductFeatures");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace
