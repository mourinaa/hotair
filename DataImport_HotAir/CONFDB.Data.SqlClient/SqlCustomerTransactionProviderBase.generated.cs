
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlCustomerTransactionProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="CustomerTransaction"/> entity.
	///</summary>
	public abstract partial class SqlCustomerTransactionProviderBase : CustomerTransactionProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlCustomerTransactionProviderBase"/> instance.
		/// </summary>
		public SqlCustomerTransactionProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlCustomerTransactionProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlCustomerTransactionProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int64 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int64, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(CustomerTransaction)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
		public override CONFDB.Entities.TList<CustomerTransaction> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<CustomerTransaction>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerTransactionTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransactionDescription", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransactionDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransactionAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LocalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FederalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LocalTaxAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FederalTaxAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransactionTotal", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerBalance", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Wholesaler_ProductId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductRateId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Quantity", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SellRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BuyRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTransactionAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PostedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PostedToInvoice", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PostedToInvoiceDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ElapsedTimeSeconds", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesalerid ") || clause.Trim().StartsWith("wholesalerid="))
				{
					database.SetParameterValue(commandWrapper, "@WholesalerId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customerid ") || clause.Trim().StartsWith("customerid="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatorid ") || clause.Trim().StartsWith("moderatorid="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pricustomernumber ") || clause.Trim().StartsWith("pricustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@PriCustomerNumber", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seccustomernumber ") || clause.Trim().StartsWith("seccustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@SecCustomerNumber", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customertransactiontypeid ") || clause.Trim().StartsWith("customertransactiontypeid="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerTransactionTypeId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transactiondescription ") || clause.Trim().StartsWith("transactiondescription="))
				{
					database.SetParameterValue(commandWrapper, "@TransactionDescription", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transactiondate ") || clause.Trim().StartsWith("transactiondate="))
				{
					database.SetParameterValue(commandWrapper, "@TransactionDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transactionamount ") || clause.Trim().StartsWith("transactionamount="))
				{
					database.SetParameterValue(commandWrapper, "@TransactionAmount", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("localtaxrate ") || clause.Trim().StartsWith("localtaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@LocalTaxRate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("federaltaxrate ") || clause.Trim().StartsWith("federaltaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@FederalTaxRate", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("localtaxamount ") || clause.Trim().StartsWith("localtaxamount="))
				{
					database.SetParameterValue(commandWrapper, "@LocalTaxAmount", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("federaltaxamount ") || clause.Trim().StartsWith("federaltaxamount="))
				{
					database.SetParameterValue(commandWrapper, "@FederalTaxAmount", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transactiontotal ") || clause.Trim().StartsWith("transactiontotal="))
				{
					database.SetParameterValue(commandWrapper, "@TransactionTotal", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customerbalance ") || clause.Trim().StartsWith("customerbalance="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerBalance", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesaler_productid ") || clause.Trim().StartsWith("wholesaler_productid="))
				{
					database.SetParameterValue(commandWrapper, "@Wholesaler_ProductId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productrateid ") || clause.Trim().StartsWith("productrateid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductRateId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("quantity ") || clause.Trim().StartsWith("quantity="))
				{
					database.SetParameterValue(commandWrapper, "@Quantity", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sellrate ") || clause.Trim().StartsWith("sellrate="))
				{
					database.SetParameterValue(commandWrapper, "@SellRate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("buyrate ") || clause.Trim().StartsWith("buyrate="))
				{
					database.SetParameterValue(commandWrapper, "@BuyRate", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstransactionamount ") || clause.Trim().StartsWith("wstransactionamount="))
				{
					database.SetParameterValue(commandWrapper, "@WsTransactionAmount", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referencenumber ") || clause.Trim().StartsWith("referencenumber="))
				{
					database.SetParameterValue(commandWrapper, "@ReferenceNumber", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("uniqueconferenceid ") || clause.Trim().StartsWith("uniqueconferenceid="))
				{
					database.SetParameterValue(commandWrapper, "@UniqueConferenceId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("posteddate ") || clause.Trim().StartsWith("posteddate="))
				{
					database.SetParameterValue(commandWrapper, "@PostedDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("modifiedby ") || clause.Trim().StartsWith("modifiedby="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedBy", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createddate ") || clause.Trim().StartsWith("createddate="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("postedtoinvoice ") || clause.Trim().StartsWith("postedtoinvoice="))
				{
					database.SetParameterValue(commandWrapper, "@PostedToInvoice", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("postedtoinvoicedate ") || clause.Trim().StartsWith("postedtoinvoicedate="))
				{
					database.SetParameterValue(commandWrapper, "@PostedToInvoiceDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("elapsedtimeseconds ") || clause.Trim().StartsWith("elapsedtimeseconds="))
				{
					database.SetParameterValue(commandWrapper, "@ElapsedTimeSeconds", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
		public override CONFDB.Entities.TList<CustomerTransaction> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Find_Dynamic", typeof(CustomerTransactionColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
		public override CONFDB.Entities.TList<CustomerTransaction> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCustomerTransactionTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
		///		CustomerTransactionType_CustomerTransactions_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_customerTransactionTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByCustomerTransactionTypeId(TransactionManager transactionManager, System.Int32 _customerTransactionTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByCustomerTransactionTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CustomerTransactionTypeId", DbType.Int32, _customerTransactionTypeId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomerTransactionTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomerTransactionTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByProductRateId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
		///		FK_CustomerTransaction_ProductRate Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByProductRateId(TransactionManager transactionManager, System.Int32? _productRateId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByProductRateId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductRateId", DbType.Int32, _productRateId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductRateId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductRateId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByWholesaler_ProductId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
		///		FK_CustomerTransaction_Wholesaler_Product Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByWholesaler_ProductId(TransactionManager transactionManager, System.Int32? _wholesaler_ProductId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByWholesaler_ProductId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Wholesaler_ProductId", DbType.Int32, _wholesaler_ProductId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesaler_ProductId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesaler_ProductId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByWholesalerId
		/// <summary>
		/// 	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
		///		Wholesaler_CustomerTransactions_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByWholesalerId(TransactionManager transactionManager, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByCustomerId
		/// <summary>
		/// 	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
		///		Customer_CustomerTransactions_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_customerId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByCustomerId(TransactionManager transactionManager, System.Int32 _customerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByCustomerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, _customerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> rows = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomerId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomerId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the CustomerTransaction_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.CustomerTransaction"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.CustomerTransaction GetById(TransactionManager transactionManager, System.Int64 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int64, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> tmp = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByCustomerIdWholesalerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_customerId"></param>
		/// <param name="_wholesalerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;CustomerTransaction&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByCustomerIdWholesalerId(TransactionManager transactionManager, System.Int32 _customerId, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByCustomerIdWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, _customerId);
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> tmp = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomerIdWholesalerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomerIdWholesalerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByPriCustomerNumberWholesalerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_wholesalerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;CustomerTransaction&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByPriCustomerNumberWholesalerId(TransactionManager transactionManager, System.String _priCustomerNumber, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByPriCustomerNumberWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, _priCustomerNumber);
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> tmp = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPriCustomerNumberWholesalerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPriCustomerNumberWholesalerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByTransactionDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_transactionDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;CustomerTransaction&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<CustomerTransaction> GetByTransactionDate(TransactionManager transactionManager, System.DateTime _transactionDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_GetByTransactionDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@TransactionDate", DbType.DateTime, _transactionDate);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<CustomerTransaction> tmp = new CONFDB.Entities.TList<CustomerTransaction>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByTransactionDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByTransactionDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.CustomerTransaction> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "CustomerTransaction";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.Int64));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("WholesalerID", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("CustomerID", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("ModeratorID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("PriCustomerNumber", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("SecCustomerNumber", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("CustomerTransactionTypeID", typeof(System.Int32));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("TransactionDescription", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("TransactionDate", typeof(System.DateTime));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("TransactionAmount", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("LocalTaxRate", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("FederalTaxRate", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("LocalTaxAmount", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("FederalTaxAmount", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("TransactionTotal", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("CustomerBalance", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("Wholesaler_ProductID", typeof(System.Int32));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("ProductRateID", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("Quantity", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("SellRate", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("BuyRate", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("WSTransactionAmount", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ReferenceNumber", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("UniqueConferenceID", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("PostedDate", typeof(System.DateTime));
			col24.AllowDBNull = false;		
			DataColumn col25 = dataTable.Columns.Add("ModifiedBy", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("CreatedDate", typeof(System.DateTime));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("PostedToInvoice", typeof(System.Boolean));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("PostedToInvoiceDate", typeof(System.DateTime));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("ElapsedTimeSeconds", typeof(System.Int32));
			col29.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			bulkCopy.ColumnMappings.Add("WholesalerID", "WholesalerID");
			bulkCopy.ColumnMappings.Add("CustomerID", "CustomerID");
			bulkCopy.ColumnMappings.Add("ModeratorID", "ModeratorID");
			bulkCopy.ColumnMappings.Add("PriCustomerNumber", "PriCustomerNumber");
			bulkCopy.ColumnMappings.Add("SecCustomerNumber", "SecCustomerNumber");
			bulkCopy.ColumnMappings.Add("CustomerTransactionTypeID", "CustomerTransactionTypeID");
			bulkCopy.ColumnMappings.Add("TransactionDescription", "TransactionDescription");
			bulkCopy.ColumnMappings.Add("TransactionDate", "TransactionDate");
			bulkCopy.ColumnMappings.Add("TransactionAmount", "TransactionAmount");
			bulkCopy.ColumnMappings.Add("LocalTaxRate", "LocalTaxRate");
			bulkCopy.ColumnMappings.Add("FederalTaxRate", "FederalTaxRate");
			bulkCopy.ColumnMappings.Add("LocalTaxAmount", "LocalTaxAmount");
			bulkCopy.ColumnMappings.Add("FederalTaxAmount", "FederalTaxAmount");
			bulkCopy.ColumnMappings.Add("TransactionTotal", "TransactionTotal");
			bulkCopy.ColumnMappings.Add("CustomerBalance", "CustomerBalance");
			bulkCopy.ColumnMappings.Add("Wholesaler_ProductID", "Wholesaler_ProductID");
			bulkCopy.ColumnMappings.Add("ProductRateID", "ProductRateID");
			bulkCopy.ColumnMappings.Add("Quantity", "Quantity");
			bulkCopy.ColumnMappings.Add("SellRate", "SellRate");
			bulkCopy.ColumnMappings.Add("BuyRate", "BuyRate");
			bulkCopy.ColumnMappings.Add("WSTransactionAmount", "WSTransactionAmount");
			bulkCopy.ColumnMappings.Add("ReferenceNumber", "ReferenceNumber");
			bulkCopy.ColumnMappings.Add("UniqueConferenceID", "UniqueConferenceID");
			bulkCopy.ColumnMappings.Add("PostedDate", "PostedDate");
			bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
			bulkCopy.ColumnMappings.Add("CreatedDate", "CreatedDate");
			bulkCopy.ColumnMappings.Add("PostedToInvoice", "PostedToInvoice");
			bulkCopy.ColumnMappings.Add("PostedToInvoiceDate", "PostedToInvoiceDate");
			bulkCopy.ColumnMappings.Add("ElapsedTimeSeconds", "ElapsedTimeSeconds");
			
			foreach(CONFDB.Entities.CustomerTransaction entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
					row["WholesalerID"] = entity.WholesalerId;
							
				
					row["CustomerID"] = entity.CustomerId;
							
				
					row["ModeratorID"] = entity.ModeratorId.HasValue ? (object) entity.ModeratorId  : System.DBNull.Value;
							
				
					row["PriCustomerNumber"] = entity.PriCustomerNumber;
							
				
					row["SecCustomerNumber"] = entity.SecCustomerNumber;
							
				
					row["CustomerTransactionTypeID"] = entity.CustomerTransactionTypeId;
							
				
					row["TransactionDescription"] = entity.TransactionDescription;
							
				
					row["TransactionDate"] = entity.TransactionDate;
							
				
					row["TransactionAmount"] = entity.TransactionAmount.HasValue ? (object) entity.TransactionAmount  : System.DBNull.Value;
							
				
					row["LocalTaxRate"] = entity.LocalTaxRate.HasValue ? (object) entity.LocalTaxRate  : System.DBNull.Value;
							
				
					row["FederalTaxRate"] = entity.FederalTaxRate.HasValue ? (object) entity.FederalTaxRate  : System.DBNull.Value;
							
				
					row["LocalTaxAmount"] = entity.LocalTaxAmount.HasValue ? (object) entity.LocalTaxAmount  : System.DBNull.Value;
							
				
					row["FederalTaxAmount"] = entity.FederalTaxAmount.HasValue ? (object) entity.FederalTaxAmount  : System.DBNull.Value;
							
				
					row["TransactionTotal"] = entity.TransactionTotal.HasValue ? (object) entity.TransactionTotal  : System.DBNull.Value;
							
				
					row["CustomerBalance"] = entity.CustomerBalance.HasValue ? (object) entity.CustomerBalance  : System.DBNull.Value;
							
				
					row["Wholesaler_ProductID"] = entity.Wholesaler_ProductId.HasValue ? (object) entity.Wholesaler_ProductId  : System.DBNull.Value;
							
				
					row["ProductRateID"] = entity.ProductRateId.HasValue ? (object) entity.ProductRateId  : System.DBNull.Value;
							
				
					row["Quantity"] = entity.Quantity.HasValue ? (object) entity.Quantity  : System.DBNull.Value;
							
				
					row["SellRate"] = entity.SellRate.HasValue ? (object) entity.SellRate  : System.DBNull.Value;
							
				
					row["BuyRate"] = entity.BuyRate.HasValue ? (object) entity.BuyRate  : System.DBNull.Value;
							
				
					row["WSTransactionAmount"] = entity.WsTransactionAmount.HasValue ? (object) entity.WsTransactionAmount  : System.DBNull.Value;
							
				
					row["ReferenceNumber"] = entity.ReferenceNumber;
							
				
					row["UniqueConferenceID"] = entity.UniqueConferenceId;
							
				
					row["PostedDate"] = entity.PostedDate;
							
				
					row["ModifiedBy"] = entity.ModifiedBy;
							
				
					row["CreatedDate"] = entity.CreatedDate.HasValue ? (object) entity.CreatedDate  : System.DBNull.Value;
							
				
					row["PostedToInvoice"] = entity.PostedToInvoice.HasValue ? (object) entity.PostedToInvoice  : System.DBNull.Value;
							
				
					row["PostedToInvoiceDate"] = entity.PostedToInvoiceDate.HasValue ? (object) entity.PostedToInvoiceDate  : System.DBNull.Value;
							
				
					row["ElapsedTimeSeconds"] = entity.ElapsedTimeSeconds.HasValue ? (object) entity.ElapsedTimeSeconds  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.CustomerTransaction entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.CustomerTransaction object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.CustomerTransaction object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.CustomerTransaction entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int64, 8);
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, entity.CustomerId );
			database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, (entity.ModeratorId.HasValue ? (object) entity.ModeratorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, entity.SecCustomerNumber );
			database.AddInParameter(commandWrapper, "@CustomerTransactionTypeId", DbType.Int32, entity.CustomerTransactionTypeId );
			database.AddInParameter(commandWrapper, "@TransactionDescription", DbType.AnsiString, entity.TransactionDescription );
			database.AddInParameter(commandWrapper, "@TransactionDate", DbType.DateTime, entity.TransactionDate );
			database.AddInParameter(commandWrapper, "@TransactionAmount", DbType.Decimal, (entity.TransactionAmount.HasValue ? (object) entity.TransactionAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LocalTaxRate", DbType.Decimal, (entity.LocalTaxRate.HasValue ? (object) entity.LocalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FederalTaxRate", DbType.Decimal, (entity.FederalTaxRate.HasValue ? (object) entity.FederalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LocalTaxAmount", DbType.Decimal, (entity.LocalTaxAmount.HasValue ? (object) entity.LocalTaxAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FederalTaxAmount", DbType.Decimal, (entity.FederalTaxAmount.HasValue ? (object) entity.FederalTaxAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TransactionTotal", DbType.Decimal, (entity.TransactionTotal.HasValue ? (object) entity.TransactionTotal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CustomerBalance", DbType.Decimal, (entity.CustomerBalance.HasValue ? (object) entity.CustomerBalance  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Wholesaler_ProductId", DbType.Int32, (entity.Wholesaler_ProductId.HasValue ? (object) entity.Wholesaler_ProductId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProductRateId", DbType.Int32, (entity.ProductRateId.HasValue ? (object) entity.ProductRateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Quantity", DbType.Int32, (entity.Quantity.HasValue ? (object) entity.Quantity  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SellRate", DbType.Decimal, (entity.SellRate.HasValue ? (object) entity.SellRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BuyRate", DbType.Decimal, (entity.BuyRate.HasValue ? (object) entity.BuyRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsTransactionAmount", DbType.Decimal, (entity.WsTransactionAmount.HasValue ? (object) entity.WsTransactionAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, entity.ReferenceNumber );
			database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, entity.UniqueConferenceId );
			database.AddInParameter(commandWrapper, "@PostedDate", DbType.DateTime, entity.PostedDate );
			database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, (entity.CreatedDate.HasValue ? (object) entity.CreatedDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PostedToInvoice", DbType.Boolean, (entity.PostedToInvoice.HasValue ? (object) entity.PostedToInvoice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PostedToInvoiceDate", DbType.DateTime, (entity.PostedToInvoiceDate.HasValue ? (object) entity.PostedToInvoiceDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ElapsedTimeSeconds", DbType.Int32, (entity.ElapsedTimeSeconds.HasValue ? (object) entity.ElapsedTimeSeconds  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int64)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.CustomerTransaction object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.CustomerTransaction object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.CustomerTransaction entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pCustomerTransaction_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int64, entity.Id );
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, entity.CustomerId );
			database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, (entity.ModeratorId.HasValue ? (object) entity.ModeratorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, entity.SecCustomerNumber );
			database.AddInParameter(commandWrapper, "@CustomerTransactionTypeId", DbType.Int32, entity.CustomerTransactionTypeId );
			database.AddInParameter(commandWrapper, "@TransactionDescription", DbType.AnsiString, entity.TransactionDescription );
			database.AddInParameter(commandWrapper, "@TransactionDate", DbType.DateTime, entity.TransactionDate );
			database.AddInParameter(commandWrapper, "@TransactionAmount", DbType.Decimal, (entity.TransactionAmount.HasValue ? (object) entity.TransactionAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LocalTaxRate", DbType.Decimal, (entity.LocalTaxRate.HasValue ? (object) entity.LocalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FederalTaxRate", DbType.Decimal, (entity.FederalTaxRate.HasValue ? (object) entity.FederalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LocalTaxAmount", DbType.Decimal, (entity.LocalTaxAmount.HasValue ? (object) entity.LocalTaxAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FederalTaxAmount", DbType.Decimal, (entity.FederalTaxAmount.HasValue ? (object) entity.FederalTaxAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TransactionTotal", DbType.Decimal, (entity.TransactionTotal.HasValue ? (object) entity.TransactionTotal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CustomerBalance", DbType.Decimal, (entity.CustomerBalance.HasValue ? (object) entity.CustomerBalance : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Wholesaler_ProductId", DbType.Int32, (entity.Wholesaler_ProductId.HasValue ? (object) entity.Wholesaler_ProductId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProductRateId", DbType.Int32, (entity.ProductRateId.HasValue ? (object) entity.ProductRateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Quantity", DbType.Int32, (entity.Quantity.HasValue ? (object) entity.Quantity : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SellRate", DbType.Decimal, (entity.SellRate.HasValue ? (object) entity.SellRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BuyRate", DbType.Decimal, (entity.BuyRate.HasValue ? (object) entity.BuyRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsTransactionAmount", DbType.Decimal, (entity.WsTransactionAmount.HasValue ? (object) entity.WsTransactionAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, entity.ReferenceNumber );
			database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, entity.UniqueConferenceId );
			database.AddInParameter(commandWrapper, "@PostedDate", DbType.DateTime, entity.PostedDate );
			database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, (entity.CreatedDate.HasValue ? (object) entity.CreatedDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PostedToInvoice", DbType.Boolean, (entity.PostedToInvoice.HasValue ? (object) entity.PostedToInvoice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PostedToInvoiceDate", DbType.DateTime, (entity.PostedToInvoiceDate.HasValue ? (object) entity.PostedToInvoiceDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ElapsedTimeSeconds", DbType.Int32, (entity.ElapsedTimeSeconds.HasValue ? (object) entity.ElapsedTimeSeconds : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_CustomerTransaction_DeleteTransaction
					
		/// <summary>
		///	This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int64?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void DeleteTransaction(TransactionManager transactionManager, int start, int pageLength , System.Int64? id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_CustomerTransaction_DeleteTransaction");
			
			database.AddInParameter(commandWrapper, "@ID", DbType.Int64,  id );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteTransaction", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteTransaction", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_CustomerTransaction_GetByCustomer
					
		/// <summary>
		///	This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByCustomer(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.DateTime? startDate, System.DateTime? endDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_CustomerTransaction_GetByCustomer");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomer", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomer", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace
