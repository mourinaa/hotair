
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlBillableLegsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="BillableLegs"/> entity.
	///</summary>
	public abstract partial class SqlBillableLegsProviderBase : BillableLegsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlBillableLegsProviderBase"/> instance.
		/// </summary>
		public SqlBillableLegsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlBillableLegsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlBillableLegsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Guid _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Guid, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(BillableLegs)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
		public override CONFDB.Entities.TList<BillableLegs> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<BillableLegs>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConferenceId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Moderator", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StartTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EndTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ElapsedTime", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BridgeId", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuxiliaryConferenceId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Dnis", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DialNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ani", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ParticipantName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Destination", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccessTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConnectProductRateId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BridgeProductRateId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LdProductRateId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductRateTaxableValue", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerTaxableValue", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTaxableValue", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailConnectCharge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailBridgeRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailLdRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailCurrency", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailBillingInterval", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailTotalConnectCharge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailTotalBridge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailTotalLd", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailTotal", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailLocalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailFederalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailLocalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailFederalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailTotalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsConnectCharge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsBridgeRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsldRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsCurrency", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsBillingInterval", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTotalConnectCharge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTotalBridge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTotalLd", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTotal", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsLocalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsFederalTaxRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsLocalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsFederalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WsTotalTax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStatus", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProcessedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RatedToZero", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductNameAlt", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", new Guid(
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("conferenceid ") || clause.Trim().StartsWith("conferenceid="))
				{
					database.SetParameterValue(commandWrapper, "@ConferenceId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatorid ") || clause.Trim().StartsWith("moderatorid="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesalerid ") || clause.Trim().StartsWith("wholesalerid="))
				{
					database.SetParameterValue(commandWrapper, "@WholesalerId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatorcode ") || clause.Trim().StartsWith("moderatorcode="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorCode", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passcode ") || clause.Trim().StartsWith("passcode="))
				{
					database.SetParameterValue(commandWrapper, "@PassCode", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatorname ") || clause.Trim().StartsWith("moderatorname="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorName", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderator ") || clause.Trim().StartsWith("moderator="))
				{
					database.SetParameterValue(commandWrapper, "@Moderator", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalcustomernumber ") || clause.Trim().StartsWith("externalcustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalCustomerNumber", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalmoderatornumber ") || clause.Trim().StartsWith("externalmoderatornumber="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalModeratorNumber", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referencenumber ") || clause.Trim().StartsWith("referencenumber="))
				{
					database.SetParameterValue(commandWrapper, "@ReferenceNumber", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("starttime ") || clause.Trim().StartsWith("starttime="))
				{
					database.SetParameterValue(commandWrapper, "@StartTime", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("endtime ") || clause.Trim().StartsWith("endtime="))
				{
					database.SetParameterValue(commandWrapper, "@EndTime", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("elapsedtime ") || clause.Trim().StartsWith("elapsedtime="))
				{
					database.SetParameterValue(commandWrapper, "@ElapsedTime", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bridgeid ") || clause.Trim().StartsWith("bridgeid="))
				{
					database.SetParameterValue(commandWrapper, "@BridgeId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("uniqueconferenceid ") || clause.Trim().StartsWith("uniqueconferenceid="))
				{
					database.SetParameterValue(commandWrapper, "@UniqueConferenceId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auxiliaryconferenceid ") || clause.Trim().StartsWith("auxiliaryconferenceid="))
				{
					database.SetParameterValue(commandWrapper, "@AuxiliaryConferenceId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dnis ") || clause.Trim().StartsWith("dnis="))
				{
					database.SetParameterValue(commandWrapper, "@Dnis", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dialnumber ") || clause.Trim().StartsWith("dialnumber="))
				{
					database.SetParameterValue(commandWrapper, "@DialNumber", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ani ") || clause.Trim().StartsWith("ani="))
				{
					database.SetParameterValue(commandWrapper, "@Ani", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("participantname ") || clause.Trim().StartsWith("participantname="))
				{
					database.SetParameterValue(commandWrapper, "@ParticipantName", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("destination ") || clause.Trim().StartsWith("destination="))
				{
					database.SetParameterValue(commandWrapper, "@Destination", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accesstypeid ") || clause.Trim().StartsWith("accesstypeid="))
				{
					database.SetParameterValue(commandWrapper, "@AccessTypeId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("connectproductrateid ") || clause.Trim().StartsWith("connectproductrateid="))
				{
					database.SetParameterValue(commandWrapper, "@ConnectProductRateId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bridgeproductrateid ") || clause.Trim().StartsWith("bridgeproductrateid="))
				{
					database.SetParameterValue(commandWrapper, "@BridgeProductRateId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ldproductrateid ") || clause.Trim().StartsWith("ldproductrateid="))
				{
					database.SetParameterValue(commandWrapper, "@LdProductRateId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productratetaxablevalue ") || clause.Trim().StartsWith("productratetaxablevalue="))
				{
					database.SetParameterValue(commandWrapper, "@ProductRateTaxableValue", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customertaxablevalue ") || clause.Trim().StartsWith("customertaxablevalue="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerTaxableValue", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstaxablevalue ") || clause.Trim().StartsWith("wstaxablevalue="))
				{
					database.SetParameterValue(commandWrapper, "@WsTaxableValue", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailconnectcharge ") || clause.Trim().StartsWith("retailconnectcharge="))
				{
					database.SetParameterValue(commandWrapper, "@RetailConnectCharge", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailbridgerate ") || clause.Trim().StartsWith("retailbridgerate="))
				{
					database.SetParameterValue(commandWrapper, "@RetailBridgeRate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailldrate ") || clause.Trim().StartsWith("retailldrate="))
				{
					database.SetParameterValue(commandWrapper, "@RetailLdRate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailcurrency ") || clause.Trim().StartsWith("retailcurrency="))
				{
					database.SetParameterValue(commandWrapper, "@RetailCurrency", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailbillinginterval ") || clause.Trim().StartsWith("retailbillinginterval="))
				{
					database.SetParameterValue(commandWrapper, "@RetailBillingInterval", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailtotalconnectcharge ") || clause.Trim().StartsWith("retailtotalconnectcharge="))
				{
					database.SetParameterValue(commandWrapper, "@RetailTotalConnectCharge", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailtotalbridge ") || clause.Trim().StartsWith("retailtotalbridge="))
				{
					database.SetParameterValue(commandWrapper, "@RetailTotalBridge", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailtotalld ") || clause.Trim().StartsWith("retailtotalld="))
				{
					database.SetParameterValue(commandWrapper, "@RetailTotalLd", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailtotal ") || clause.Trim().StartsWith("retailtotal="))
				{
					database.SetParameterValue(commandWrapper, "@RetailTotal", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retaillocaltaxrate ") || clause.Trim().StartsWith("retaillocaltaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@RetailLocalTaxRate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailfederaltaxrate ") || clause.Trim().StartsWith("retailfederaltaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@RetailFederalTaxRate", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retaillocaltax ") || clause.Trim().StartsWith("retaillocaltax="))
				{
					database.SetParameterValue(commandWrapper, "@RetailLocalTax", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailfederaltax ") || clause.Trim().StartsWith("retailfederaltax="))
				{
					database.SetParameterValue(commandWrapper, "@RetailFederalTax", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailtotaltax ") || clause.Trim().StartsWith("retailtotaltax="))
				{
					database.SetParameterValue(commandWrapper, "@RetailTotalTax", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsconnectcharge ") || clause.Trim().StartsWith("wsconnectcharge="))
				{
					database.SetParameterValue(commandWrapper, "@WsConnectCharge", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsbridgerate ") || clause.Trim().StartsWith("wsbridgerate="))
				{
					database.SetParameterValue(commandWrapper, "@WsBridgeRate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsldrate ") || clause.Trim().StartsWith("wsldrate="))
				{
					database.SetParameterValue(commandWrapper, "@WsldRate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wscurrency ") || clause.Trim().StartsWith("wscurrency="))
				{
					database.SetParameterValue(commandWrapper, "@WsCurrency", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsbillinginterval ") || clause.Trim().StartsWith("wsbillinginterval="))
				{
					database.SetParameterValue(commandWrapper, "@WsBillingInterval", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstotalconnectcharge ") || clause.Trim().StartsWith("wstotalconnectcharge="))
				{
					database.SetParameterValue(commandWrapper, "@WsTotalConnectCharge", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstotalbridge ") || clause.Trim().StartsWith("wstotalbridge="))
				{
					database.SetParameterValue(commandWrapper, "@WsTotalBridge", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstotalld ") || clause.Trim().StartsWith("wstotalld="))
				{
					database.SetParameterValue(commandWrapper, "@WsTotalLd", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstotal ") || clause.Trim().StartsWith("wstotal="))
				{
					database.SetParameterValue(commandWrapper, "@WsTotal", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wslocaltaxrate ") || clause.Trim().StartsWith("wslocaltaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@WsLocalTaxRate", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsfederaltaxrate ") || clause.Trim().StartsWith("wsfederaltaxrate="))
				{
					database.SetParameterValue(commandWrapper, "@WsFederalTaxRate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wslocaltax ") || clause.Trim().StartsWith("wslocaltax="))
				{
					database.SetParameterValue(commandWrapper, "@WsLocalTax", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wsfederaltax ") || clause.Trim().StartsWith("wsfederaltax="))
				{
					database.SetParameterValue(commandWrapper, "@WsFederalTax", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wstotaltax ") || clause.Trim().StartsWith("wstotaltax="))
				{
					database.SetParameterValue(commandWrapper, "@WsTotalTax", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstatus ") || clause.Trim().StartsWith("billingstatus="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStatus", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billeddate ") || clause.Trim().StartsWith("billeddate="))
				{
					database.SetParameterValue(commandWrapper, "@BilledDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("processeddate ") || clause.Trim().StartsWith("processeddate="))
				{
					database.SetParameterValue(commandWrapper, "@ProcessedDate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ratedtozero ") || clause.Trim().StartsWith("ratedtozero="))
				{
					database.SetParameterValue(commandWrapper, "@RatedToZero", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productname ") || clause.Trim().StartsWith("productname="))
				{
					database.SetParameterValue(commandWrapper, "@ProductName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productnamealt ") || clause.Trim().StartsWith("productnamealt="))
				{
					database.SetParameterValue(commandWrapper, "@ProductNameAlt", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<BillableLegs> rows = new CONFDB.Entities.TList<BillableLegs>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
		public override CONFDB.Entities.TList<BillableLegs> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Find_Dynamic", typeof(BillableLegsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<BillableLegs> rows = new CONFDB.Entities.TList<BillableLegs>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<BillableLegs> rows = new CONFDB.Entities.TList<BillableLegs>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.BillableLegs objects.</returns>
		public override CONFDB.Entities.TList<BillableLegs> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<BillableLegs> rows = new CONFDB.Entities.TList<BillableLegs>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the BillableLegs_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.BillableLegs"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.BillableLegs GetById(TransactionManager transactionManager, System.Guid _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Guid, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByConferenceIdBridgeIdWholesalerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_conferenceId"></param>
		/// <param name="_bridgeId"></param>
		/// <param name="_wholesalerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByConferenceIdBridgeIdWholesalerId(TransactionManager transactionManager, System.String _conferenceId, System.Int16 _bridgeId, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByConferenceIdBridgeIdWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ConferenceId", DbType.AnsiString, _conferenceId);
				database.AddInParameter(commandWrapper, "@BridgeId", DbType.Int16, _bridgeId);
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByConferenceIdBridgeIdWholesalerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByConferenceIdBridgeIdWholesalerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerIdModeratorId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="_moderatorId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByWholesalerIdModeratorId(TransactionManager transactionManager, System.String _wholesalerId, System.Int32 _moderatorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByWholesalerIdModeratorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
				database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, _moderatorId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerIdModeratorId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerIdModeratorId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByModeratorId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_moderatorId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByModeratorId(TransactionManager transactionManager, System.Int32 _moderatorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByModeratorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, _moderatorId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByModeratorId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByModeratorId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByWholesalerId(TransactionManager transactionManager, System.String _wholesalerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByWholesalerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerIdStartTimeEndTime
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="_startTime"></param>
		/// <param name="_endTime"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByWholesalerIdStartTimeEndTime(TransactionManager transactionManager, System.String _wholesalerId, System.DateTime _startTime, System.DateTime _endTime, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByWholesalerIdStartTimeEndTime", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
				database.AddInParameter(commandWrapper, "@StartTime", DbType.DateTime, _startTime);
				database.AddInParameter(commandWrapper, "@EndTime", DbType.DateTime, _endTime);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerIdStartTimeEndTime", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerIdStartTimeEndTime", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByReferenceNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_referenceNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByReferenceNumber(TransactionManager transactionManager, System.String _referenceNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByReferenceNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, _referenceNumber);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByReferenceNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByReferenceNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByBilledDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billedDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;BillableLegs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<BillableLegs> GetByBilledDate(TransactionManager transactionManager, System.DateTime? _billedDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_GetByBilledDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime, _billedDate);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<BillableLegs> tmp = new CONFDB.Entities.TList<BillableLegs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBilledDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBilledDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.BillableLegs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.BillableLegs> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "BillableLegs";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.Guid));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ConferenceID", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("ModeratorID", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("WholesalerID", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("ModeratorCode", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("PassCode", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("ModeratorName", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("Moderator", typeof(System.Int32));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("ExternalCustomerNumber", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ExternalModeratorNumber", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ReferenceNumber", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("StartTime", typeof(System.DateTime));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("EndTime", typeof(System.DateTime));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("ElapsedTime", typeof(System.Int32));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("BridgeID", typeof(System.Int16));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("UniqueConferenceID", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("AuxiliaryConferenceID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("DNIS", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("DialNumber", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ANI", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ParticipantName", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("Destination", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("AccessTypeID", typeof(System.Int32));
			col22.AllowDBNull = false;		
			DataColumn col23 = dataTable.Columns.Add("ConnectProductRateID", typeof(System.Int32));
			col23.AllowDBNull = false;		
			DataColumn col24 = dataTable.Columns.Add("BridgeProductRateID", typeof(System.Int32));
			col24.AllowDBNull = false;		
			DataColumn col25 = dataTable.Columns.Add("LDProductRateID", typeof(System.Int32));
			col25.AllowDBNull = false;		
			DataColumn col26 = dataTable.Columns.Add("ProductRateTaxableValue", typeof(System.Int32));
			col26.AllowDBNull = false;		
			DataColumn col27 = dataTable.Columns.Add("CustomerTaxableValue", typeof(System.Int32));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("WSTaxableValue", typeof(System.Int32));
			col28.AllowDBNull = false;		
			DataColumn col29 = dataTable.Columns.Add("RetailConnectCharge", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("RetailBridgeRate", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("RetailLDRate", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("RetailCurrency", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("RetailBillingInterval", typeof(System.Int32));
			col33.AllowDBNull = false;		
			DataColumn col34 = dataTable.Columns.Add("RetailTotalConnectCharge", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("RetailTotalBridge", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("RetailTotalLD", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("RetailTotal", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("RetailLocalTaxRate", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("RetailFederalTaxRate", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("RetailLocalTax", typeof(System.Decimal));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("RetailFederalTax", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("RetailTotalTax", typeof(System.Decimal));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("WSConnectCharge", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("WSBridgeRate", typeof(System.Decimal));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("WSLDRate", typeof(System.Decimal));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("WSCurrency", typeof(System.String));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("WSBillingInterval", typeof(System.Int32));
			col47.AllowDBNull = false;		
			DataColumn col48 = dataTable.Columns.Add("WSTotalConnectCharge", typeof(System.Decimal));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("WSTotalBridge", typeof(System.Decimal));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("WSTotalLD", typeof(System.Decimal));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("WSTotal", typeof(System.Decimal));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("WSLocalTaxRate", typeof(System.Decimal));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("WSFederalTaxRate", typeof(System.Decimal));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("WSLocalTax", typeof(System.Decimal));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("WSFederalTax", typeof(System.Decimal));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("WSTotalTax", typeof(System.Decimal));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("BillingStatus", typeof(System.Int16));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("BilledDate", typeof(System.DateTime));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("ProcessedDate", typeof(System.DateTime));
			col59.AllowDBNull = true;		
			DataColumn col60 = dataTable.Columns.Add("RatedToZero", typeof(System.Boolean));
			col60.AllowDBNull = true;		
			DataColumn col61 = dataTable.Columns.Add("ProductName", typeof(System.String));
			col61.AllowDBNull = true;		
			DataColumn col62 = dataTable.Columns.Add("ProductNameAlt", typeof(System.String));
			col62.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			bulkCopy.ColumnMappings.Add("ConferenceID", "ConferenceID");
			bulkCopy.ColumnMappings.Add("ModeratorID", "ModeratorID");
			bulkCopy.ColumnMappings.Add("WholesalerID", "WholesalerID");
			bulkCopy.ColumnMappings.Add("ModeratorCode", "ModeratorCode");
			bulkCopy.ColumnMappings.Add("PassCode", "PassCode");
			bulkCopy.ColumnMappings.Add("ModeratorName", "ModeratorName");
			bulkCopy.ColumnMappings.Add("Moderator", "Moderator");
			bulkCopy.ColumnMappings.Add("ExternalCustomerNumber", "ExternalCustomerNumber");
			bulkCopy.ColumnMappings.Add("ExternalModeratorNumber", "ExternalModeratorNumber");
			bulkCopy.ColumnMappings.Add("ReferenceNumber", "ReferenceNumber");
			bulkCopy.ColumnMappings.Add("StartTime", "StartTime");
			bulkCopy.ColumnMappings.Add("EndTime", "EndTime");
			bulkCopy.ColumnMappings.Add("ElapsedTime", "ElapsedTime");
			bulkCopy.ColumnMappings.Add("BridgeID", "BridgeID");
			bulkCopy.ColumnMappings.Add("UniqueConferenceID", "UniqueConferenceID");
			bulkCopy.ColumnMappings.Add("AuxiliaryConferenceID", "AuxiliaryConferenceID");
			bulkCopy.ColumnMappings.Add("DNIS", "DNIS");
			bulkCopy.ColumnMappings.Add("DialNumber", "DialNumber");
			bulkCopy.ColumnMappings.Add("ANI", "ANI");
			bulkCopy.ColumnMappings.Add("ParticipantName", "ParticipantName");
			bulkCopy.ColumnMappings.Add("Destination", "Destination");
			bulkCopy.ColumnMappings.Add("AccessTypeID", "AccessTypeID");
			bulkCopy.ColumnMappings.Add("ConnectProductRateID", "ConnectProductRateID");
			bulkCopy.ColumnMappings.Add("BridgeProductRateID", "BridgeProductRateID");
			bulkCopy.ColumnMappings.Add("LDProductRateID", "LDProductRateID");
			bulkCopy.ColumnMappings.Add("ProductRateTaxableValue", "ProductRateTaxableValue");
			bulkCopy.ColumnMappings.Add("CustomerTaxableValue", "CustomerTaxableValue");
			bulkCopy.ColumnMappings.Add("WSTaxableValue", "WSTaxableValue");
			bulkCopy.ColumnMappings.Add("RetailConnectCharge", "RetailConnectCharge");
			bulkCopy.ColumnMappings.Add("RetailBridgeRate", "RetailBridgeRate");
			bulkCopy.ColumnMappings.Add("RetailLDRate", "RetailLDRate");
			bulkCopy.ColumnMappings.Add("RetailCurrency", "RetailCurrency");
			bulkCopy.ColumnMappings.Add("RetailBillingInterval", "RetailBillingInterval");
			bulkCopy.ColumnMappings.Add("RetailTotalConnectCharge", "RetailTotalConnectCharge");
			bulkCopy.ColumnMappings.Add("RetailTotalBridge", "RetailTotalBridge");
			bulkCopy.ColumnMappings.Add("RetailTotalLD", "RetailTotalLD");
			bulkCopy.ColumnMappings.Add("RetailTotal", "RetailTotal");
			bulkCopy.ColumnMappings.Add("RetailLocalTaxRate", "RetailLocalTaxRate");
			bulkCopy.ColumnMappings.Add("RetailFederalTaxRate", "RetailFederalTaxRate");
			bulkCopy.ColumnMappings.Add("RetailLocalTax", "RetailLocalTax");
			bulkCopy.ColumnMappings.Add("RetailFederalTax", "RetailFederalTax");
			bulkCopy.ColumnMappings.Add("RetailTotalTax", "RetailTotalTax");
			bulkCopy.ColumnMappings.Add("WSConnectCharge", "WSConnectCharge");
			bulkCopy.ColumnMappings.Add("WSBridgeRate", "WSBridgeRate");
			bulkCopy.ColumnMappings.Add("WSLDRate", "WSLDRate");
			bulkCopy.ColumnMappings.Add("WSCurrency", "WSCurrency");
			bulkCopy.ColumnMappings.Add("WSBillingInterval", "WSBillingInterval");
			bulkCopy.ColumnMappings.Add("WSTotalConnectCharge", "WSTotalConnectCharge");
			bulkCopy.ColumnMappings.Add("WSTotalBridge", "WSTotalBridge");
			bulkCopy.ColumnMappings.Add("WSTotalLD", "WSTotalLD");
			bulkCopy.ColumnMappings.Add("WSTotal", "WSTotal");
			bulkCopy.ColumnMappings.Add("WSLocalTaxRate", "WSLocalTaxRate");
			bulkCopy.ColumnMappings.Add("WSFederalTaxRate", "WSFederalTaxRate");
			bulkCopy.ColumnMappings.Add("WSLocalTax", "WSLocalTax");
			bulkCopy.ColumnMappings.Add("WSFederalTax", "WSFederalTax");
			bulkCopy.ColumnMappings.Add("WSTotalTax", "WSTotalTax");
			bulkCopy.ColumnMappings.Add("BillingStatus", "BillingStatus");
			bulkCopy.ColumnMappings.Add("BilledDate", "BilledDate");
			bulkCopy.ColumnMappings.Add("ProcessedDate", "ProcessedDate");
			bulkCopy.ColumnMappings.Add("RatedToZero", "RatedToZero");
			bulkCopy.ColumnMappings.Add("ProductName", "ProductName");
			bulkCopy.ColumnMappings.Add("ProductNameAlt", "ProductNameAlt");
			
			foreach(CONFDB.Entities.BillableLegs entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
					row["ConferenceID"] = entity.ConferenceId;
							
				
					row["ModeratorID"] = entity.ModeratorId;
							
				
					row["WholesalerID"] = entity.WholesalerId;
							
				
					row["ModeratorCode"] = entity.ModeratorCode;
							
				
					row["PassCode"] = entity.PassCode;
							
				
					row["ModeratorName"] = entity.ModeratorName;
							
				
					row["Moderator"] = entity.Moderator;
							
				
					row["ExternalCustomerNumber"] = entity.ExternalCustomerNumber;
							
				
					row["ExternalModeratorNumber"] = entity.ExternalModeratorNumber;
							
				
					row["ReferenceNumber"] = entity.ReferenceNumber;
							
				
					row["StartTime"] = entity.StartTime;
							
				
					row["EndTime"] = entity.EndTime;
							
				
					row["ElapsedTime"] = entity.ElapsedTime;
							
				
					row["BridgeID"] = entity.BridgeId;
							
				
					row["UniqueConferenceID"] = entity.UniqueConferenceId;
							
				
					row["AuxiliaryConferenceID"] = entity.AuxiliaryConferenceId;
							
				
					row["DNIS"] = entity.Dnis;
							
				
					row["DialNumber"] = entity.DialNumber;
							
				
					row["ANI"] = entity.Ani;
							
				
					row["ParticipantName"] = entity.ParticipantName;
							
				
					row["Destination"] = entity.Destination;
							
				
					row["AccessTypeID"] = entity.AccessTypeId;
							
				
					row["ConnectProductRateID"] = entity.ConnectProductRateId;
							
				
					row["BridgeProductRateID"] = entity.BridgeProductRateId;
							
				
					row["LDProductRateID"] = entity.LdProductRateId;
							
				
					row["ProductRateTaxableValue"] = entity.ProductRateTaxableValue;
							
				
					row["CustomerTaxableValue"] = entity.CustomerTaxableValue;
							
				
					row["WSTaxableValue"] = entity.WsTaxableValue;
							
				
					row["RetailConnectCharge"] = entity.RetailConnectCharge.HasValue ? (object) entity.RetailConnectCharge  : System.DBNull.Value;
							
				
					row["RetailBridgeRate"] = entity.RetailBridgeRate.HasValue ? (object) entity.RetailBridgeRate  : System.DBNull.Value;
							
				
					row["RetailLDRate"] = entity.RetailLdRate.HasValue ? (object) entity.RetailLdRate  : System.DBNull.Value;
							
				
					row["RetailCurrency"] = entity.RetailCurrency;
							
				
					row["RetailBillingInterval"] = entity.RetailBillingInterval;
							
				
					row["RetailTotalConnectCharge"] = entity.RetailTotalConnectCharge.HasValue ? (object) entity.RetailTotalConnectCharge  : System.DBNull.Value;
							
				
					row["RetailTotalBridge"] = entity.RetailTotalBridge.HasValue ? (object) entity.RetailTotalBridge  : System.DBNull.Value;
							
				
					row["RetailTotalLD"] = entity.RetailTotalLd.HasValue ? (object) entity.RetailTotalLd  : System.DBNull.Value;
							
				
					row["RetailTotal"] = entity.RetailTotal.HasValue ? (object) entity.RetailTotal  : System.DBNull.Value;
							
				
					row["RetailLocalTaxRate"] = entity.RetailLocalTaxRate.HasValue ? (object) entity.RetailLocalTaxRate  : System.DBNull.Value;
							
				
					row["RetailFederalTaxRate"] = entity.RetailFederalTaxRate.HasValue ? (object) entity.RetailFederalTaxRate  : System.DBNull.Value;
							
				
					row["RetailLocalTax"] = entity.RetailLocalTax.HasValue ? (object) entity.RetailLocalTax  : System.DBNull.Value;
							
				
					row["RetailFederalTax"] = entity.RetailFederalTax.HasValue ? (object) entity.RetailFederalTax  : System.DBNull.Value;
							
				
					row["RetailTotalTax"] = entity.RetailTotalTax.HasValue ? (object) entity.RetailTotalTax  : System.DBNull.Value;
							
				
					row["WSConnectCharge"] = entity.WsConnectCharge.HasValue ? (object) entity.WsConnectCharge  : System.DBNull.Value;
							
				
					row["WSBridgeRate"] = entity.WsBridgeRate.HasValue ? (object) entity.WsBridgeRate  : System.DBNull.Value;
							
				
					row["WSLDRate"] = entity.WsldRate.HasValue ? (object) entity.WsldRate  : System.DBNull.Value;
							
				
					row["WSCurrency"] = entity.WsCurrency;
							
				
					row["WSBillingInterval"] = entity.WsBillingInterval;
							
				
					row["WSTotalConnectCharge"] = entity.WsTotalConnectCharge.HasValue ? (object) entity.WsTotalConnectCharge  : System.DBNull.Value;
							
				
					row["WSTotalBridge"] = entity.WsTotalBridge.HasValue ? (object) entity.WsTotalBridge  : System.DBNull.Value;
							
				
					row["WSTotalLD"] = entity.WsTotalLd.HasValue ? (object) entity.WsTotalLd  : System.DBNull.Value;
							
				
					row["WSTotal"] = entity.WsTotal.HasValue ? (object) entity.WsTotal  : System.DBNull.Value;
							
				
					row["WSLocalTaxRate"] = entity.WsLocalTaxRate.HasValue ? (object) entity.WsLocalTaxRate  : System.DBNull.Value;
							
				
					row["WSFederalTaxRate"] = entity.WsFederalTaxRate.HasValue ? (object) entity.WsFederalTaxRate  : System.DBNull.Value;
							
				
					row["WSLocalTax"] = entity.WsLocalTax.HasValue ? (object) entity.WsLocalTax  : System.DBNull.Value;
							
				
					row["WSFederalTax"] = entity.WsFederalTax.HasValue ? (object) entity.WsFederalTax  : System.DBNull.Value;
							
				
					row["WSTotalTax"] = entity.WsTotalTax.HasValue ? (object) entity.WsTotalTax  : System.DBNull.Value;
							
				
					row["BillingStatus"] = entity.BillingStatus.HasValue ? (object) entity.BillingStatus  : System.DBNull.Value;
							
				
					row["BilledDate"] = entity.BilledDate.HasValue ? (object) entity.BilledDate  : System.DBNull.Value;
							
				
					row["ProcessedDate"] = entity.ProcessedDate.HasValue ? (object) entity.ProcessedDate  : System.DBNull.Value;
							
				
					row["RatedToZero"] = entity.RatedToZero.HasValue ? (object) entity.RatedToZero  : System.DBNull.Value;
							
				
					row["ProductName"] = entity.ProductName;
							
				
					row["ProductNameAlt"] = entity.ProductNameAlt;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.BillableLegs entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.BillableLegs object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.BillableLegs object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.BillableLegs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.BillableLegs entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Insert", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Guid, entity.Id );
			database.AddInParameter(commandWrapper, "@ConferenceId", DbType.AnsiString, entity.ConferenceId );
			database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, entity.ModeratorId );
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, entity.ModeratorCode );
			database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, entity.PassCode );
			database.AddInParameter(commandWrapper, "@ModeratorName", DbType.AnsiString, entity.ModeratorName );
			database.AddInParameter(commandWrapper, "@Moderator", DbType.Int32, entity.Moderator );
			database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, entity.ExternalCustomerNumber );
			database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, entity.ExternalModeratorNumber );
			database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, entity.ReferenceNumber );
			database.AddInParameter(commandWrapper, "@StartTime", DbType.DateTime, entity.StartTime );
			database.AddInParameter(commandWrapper, "@EndTime", DbType.DateTime, entity.EndTime );
			database.AddInParameter(commandWrapper, "@ElapsedTime", DbType.Int32, entity.ElapsedTime );
			database.AddInParameter(commandWrapper, "@BridgeId", DbType.Int16, entity.BridgeId );
			database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, entity.UniqueConferenceId );
			database.AddInParameter(commandWrapper, "@AuxiliaryConferenceId", DbType.AnsiString, entity.AuxiliaryConferenceId );
			database.AddInParameter(commandWrapper, "@Dnis", DbType.AnsiString, entity.Dnis );
			database.AddInParameter(commandWrapper, "@DialNumber", DbType.AnsiString, entity.DialNumber );
			database.AddInParameter(commandWrapper, "@Ani", DbType.AnsiString, entity.Ani );
			database.AddInParameter(commandWrapper, "@ParticipantName", DbType.AnsiString, entity.ParticipantName );
			database.AddInParameter(commandWrapper, "@Destination", DbType.AnsiString, entity.Destination );
			database.AddInParameter(commandWrapper, "@AccessTypeId", DbType.Int32, entity.AccessTypeId );
			database.AddInParameter(commandWrapper, "@ConnectProductRateId", DbType.Int32, entity.ConnectProductRateId );
			database.AddInParameter(commandWrapper, "@BridgeProductRateId", DbType.Int32, entity.BridgeProductRateId );
			database.AddInParameter(commandWrapper, "@LdProductRateId", DbType.Int32, entity.LdProductRateId );
			database.AddInParameter(commandWrapper, "@ProductRateTaxableValue", DbType.Int32, entity.ProductRateTaxableValue );
			database.AddInParameter(commandWrapper, "@CustomerTaxableValue", DbType.Int32, entity.CustomerTaxableValue );
			database.AddInParameter(commandWrapper, "@WsTaxableValue", DbType.Int32, entity.WsTaxableValue );
			database.AddInParameter(commandWrapper, "@RetailConnectCharge", DbType.Decimal, (entity.RetailConnectCharge.HasValue ? (object) entity.RetailConnectCharge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailBridgeRate", DbType.Decimal, (entity.RetailBridgeRate.HasValue ? (object) entity.RetailBridgeRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailLdRate", DbType.Decimal, (entity.RetailLdRate.HasValue ? (object) entity.RetailLdRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailCurrency", DbType.AnsiStringFixedLength, entity.RetailCurrency );
			database.AddInParameter(commandWrapper, "@RetailBillingInterval", DbType.Int32, entity.RetailBillingInterval );
			database.AddInParameter(commandWrapper, "@RetailTotalConnectCharge", DbType.Decimal, (entity.RetailTotalConnectCharge.HasValue ? (object) entity.RetailTotalConnectCharge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailTotalBridge", DbType.Decimal, (entity.RetailTotalBridge.HasValue ? (object) entity.RetailTotalBridge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailTotalLd", DbType.Decimal, (entity.RetailTotalLd.HasValue ? (object) entity.RetailTotalLd  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailTotal", DbType.Decimal, (entity.RetailTotal.HasValue ? (object) entity.RetailTotal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailLocalTaxRate", DbType.Decimal, (entity.RetailLocalTaxRate.HasValue ? (object) entity.RetailLocalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailFederalTaxRate", DbType.Decimal, (entity.RetailFederalTaxRate.HasValue ? (object) entity.RetailFederalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailLocalTax", DbType.Decimal, (entity.RetailLocalTax.HasValue ? (object) entity.RetailLocalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailFederalTax", DbType.Decimal, (entity.RetailFederalTax.HasValue ? (object) entity.RetailFederalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetailTotalTax", DbType.Decimal, (entity.RetailTotalTax.HasValue ? (object) entity.RetailTotalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsConnectCharge", DbType.Decimal, (entity.WsConnectCharge.HasValue ? (object) entity.WsConnectCharge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsBridgeRate", DbType.Decimal, (entity.WsBridgeRate.HasValue ? (object) entity.WsBridgeRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsldRate", DbType.Decimal, (entity.WsldRate.HasValue ? (object) entity.WsldRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsCurrency", DbType.AnsiStringFixedLength, entity.WsCurrency );
			database.AddInParameter(commandWrapper, "@WsBillingInterval", DbType.Int32, entity.WsBillingInterval );
			database.AddInParameter(commandWrapper, "@WsTotalConnectCharge", DbType.Decimal, (entity.WsTotalConnectCharge.HasValue ? (object) entity.WsTotalConnectCharge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsTotalBridge", DbType.Decimal, (entity.WsTotalBridge.HasValue ? (object) entity.WsTotalBridge  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsTotalLd", DbType.Decimal, (entity.WsTotalLd.HasValue ? (object) entity.WsTotalLd  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsTotal", DbType.Decimal, (entity.WsTotal.HasValue ? (object) entity.WsTotal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsLocalTaxRate", DbType.Decimal, (entity.WsLocalTaxRate.HasValue ? (object) entity.WsLocalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsFederalTaxRate", DbType.Decimal, (entity.WsFederalTaxRate.HasValue ? (object) entity.WsFederalTaxRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsLocalTax", DbType.Decimal, (entity.WsLocalTax.HasValue ? (object) entity.WsLocalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsFederalTax", DbType.Decimal, (entity.WsFederalTax.HasValue ? (object) entity.WsFederalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WsTotalTax", DbType.Decimal, (entity.WsTotalTax.HasValue ? (object) entity.WsTotalTax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BillingStatus", DbType.Int16, (entity.BillingStatus.HasValue ? (object) entity.BillingStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime, (entity.BilledDate.HasValue ? (object) entity.BilledDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProcessedDate", DbType.DateTime, (entity.ProcessedDate.HasValue ? (object) entity.ProcessedDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RatedToZero", DbType.Boolean, (entity.RatedToZero.HasValue ? (object) entity.RatedToZero  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProductName", DbType.AnsiString, entity.ProductName );
			database.AddInParameter(commandWrapper, "@ProductNameAlt", DbType.String, entity.ProductNameAlt );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.BillableLegs object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.BillableLegs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.BillableLegs entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pBillableLegs_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Guid, entity.Id );
			database.AddInParameter(commandWrapper, "@OriginalId", DbType.Guid, entity.OriginalId);
			database.AddInParameter(commandWrapper, "@ConferenceId", DbType.AnsiString, entity.ConferenceId );
			database.AddInParameter(commandWrapper, "@ModeratorId", DbType.Int32, entity.ModeratorId );
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, entity.ModeratorCode );
			database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, entity.PassCode );
			database.AddInParameter(commandWrapper, "@ModeratorName", DbType.AnsiString, entity.ModeratorName );
			database.AddInParameter(commandWrapper, "@Moderator", DbType.Int32, entity.Moderator );
			database.AddInParameter(commandWrapper, "@ExternalCustomerNumber", DbType.AnsiString, entity.ExternalCustomerNumber );
			database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, entity.ExternalModeratorNumber );
			database.AddInParameter(commandWrapper, "@ReferenceNumber", DbType.AnsiString, entity.ReferenceNumber );
			database.AddInParameter(commandWrapper, "@StartTime", DbType.DateTime, entity.StartTime );
			database.AddInParameter(commandWrapper, "@EndTime", DbType.DateTime, entity.EndTime );
			database.AddInParameter(commandWrapper, "@ElapsedTime", DbType.Int32, entity.ElapsedTime );
			database.AddInParameter(commandWrapper, "@BridgeId", DbType.Int16, entity.BridgeId );
			database.AddInParameter(commandWrapper, "@UniqueConferenceId", DbType.AnsiString, entity.UniqueConferenceId );
			database.AddInParameter(commandWrapper, "@AuxiliaryConferenceId", DbType.AnsiString, entity.AuxiliaryConferenceId );
			database.AddInParameter(commandWrapper, "@Dnis", DbType.AnsiString, entity.Dnis );
			database.AddInParameter(commandWrapper, "@DialNumber", DbType.AnsiString, entity.DialNumber );
			database.AddInParameter(commandWrapper, "@Ani", DbType.AnsiString, entity.Ani );
			database.AddInParameter(commandWrapper, "@ParticipantName", DbType.AnsiString, entity.ParticipantName );
			database.AddInParameter(commandWrapper, "@Destination", DbType.AnsiString, entity.Destination );
			database.AddInParameter(commandWrapper, "@AccessTypeId", DbType.Int32, entity.AccessTypeId );
			database.AddInParameter(commandWrapper, "@ConnectProductRateId", DbType.Int32, entity.ConnectProductRateId );
			database.AddInParameter(commandWrapper, "@BridgeProductRateId", DbType.Int32, entity.BridgeProductRateId );
			database.AddInParameter(commandWrapper, "@LdProductRateId", DbType.Int32, entity.LdProductRateId );
			database.AddInParameter(commandWrapper, "@ProductRateTaxableValue", DbType.Int32, entity.ProductRateTaxableValue );
			database.AddInParameter(commandWrapper, "@CustomerTaxableValue", DbType.Int32, entity.CustomerTaxableValue );
			database.AddInParameter(commandWrapper, "@WsTaxableValue", DbType.Int32, entity.WsTaxableValue );
			database.AddInParameter(commandWrapper, "@RetailConnectCharge", DbType.Decimal, (entity.RetailConnectCharge.HasValue ? (object) entity.RetailConnectCharge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailBridgeRate", DbType.Decimal, (entity.RetailBridgeRate.HasValue ? (object) entity.RetailBridgeRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailLdRate", DbType.Decimal, (entity.RetailLdRate.HasValue ? (object) entity.RetailLdRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailCurrency", DbType.AnsiStringFixedLength, entity.RetailCurrency );
			database.AddInParameter(commandWrapper, "@RetailBillingInterval", DbType.Int32, entity.RetailBillingInterval );
			database.AddInParameter(commandWrapper, "@RetailTotalConnectCharge", DbType.Decimal, (entity.RetailTotalConnectCharge.HasValue ? (object) entity.RetailTotalConnectCharge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailTotalBridge", DbType.Decimal, (entity.RetailTotalBridge.HasValue ? (object) entity.RetailTotalBridge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailTotalLd", DbType.Decimal, (entity.RetailTotalLd.HasValue ? (object) entity.RetailTotalLd : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailTotal", DbType.Decimal, (entity.RetailTotal.HasValue ? (object) entity.RetailTotal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailLocalTaxRate", DbType.Decimal, (entity.RetailLocalTaxRate.HasValue ? (object) entity.RetailLocalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailFederalTaxRate", DbType.Decimal, (entity.RetailFederalTaxRate.HasValue ? (object) entity.RetailFederalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailLocalTax", DbType.Decimal, (entity.RetailLocalTax.HasValue ? (object) entity.RetailLocalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailFederalTax", DbType.Decimal, (entity.RetailFederalTax.HasValue ? (object) entity.RetailFederalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetailTotalTax", DbType.Decimal, (entity.RetailTotalTax.HasValue ? (object) entity.RetailTotalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsConnectCharge", DbType.Decimal, (entity.WsConnectCharge.HasValue ? (object) entity.WsConnectCharge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsBridgeRate", DbType.Decimal, (entity.WsBridgeRate.HasValue ? (object) entity.WsBridgeRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsldRate", DbType.Decimal, (entity.WsldRate.HasValue ? (object) entity.WsldRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsCurrency", DbType.AnsiStringFixedLength, entity.WsCurrency );
			database.AddInParameter(commandWrapper, "@WsBillingInterval", DbType.Int32, entity.WsBillingInterval );
			database.AddInParameter(commandWrapper, "@WsTotalConnectCharge", DbType.Decimal, (entity.WsTotalConnectCharge.HasValue ? (object) entity.WsTotalConnectCharge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsTotalBridge", DbType.Decimal, (entity.WsTotalBridge.HasValue ? (object) entity.WsTotalBridge : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsTotalLd", DbType.Decimal, (entity.WsTotalLd.HasValue ? (object) entity.WsTotalLd : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsTotal", DbType.Decimal, (entity.WsTotal.HasValue ? (object) entity.WsTotal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsLocalTaxRate", DbType.Decimal, (entity.WsLocalTaxRate.HasValue ? (object) entity.WsLocalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsFederalTaxRate", DbType.Decimal, (entity.WsFederalTaxRate.HasValue ? (object) entity.WsFederalTaxRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsLocalTax", DbType.Decimal, (entity.WsLocalTax.HasValue ? (object) entity.WsLocalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsFederalTax", DbType.Decimal, (entity.WsFederalTax.HasValue ? (object) entity.WsFederalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WsTotalTax", DbType.Decimal, (entity.WsTotalTax.HasValue ? (object) entity.WsTotalTax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BillingStatus", DbType.Int16, (entity.BillingStatus.HasValue ? (object) entity.BillingStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BilledDate", DbType.DateTime, (entity.BilledDate.HasValue ? (object) entity.BilledDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProcessedDate", DbType.DateTime, (entity.ProcessedDate.HasValue ? (object) entity.ProcessedDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RatedToZero", DbType.Boolean, (entity.RatedToZero.HasValue ? (object) entity.RatedToZero : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProductName", DbType.AnsiString, entity.ProductName );
			database.AddInParameter(commandWrapper, "@ProductNameAlt", DbType.String, entity.ProductNameAlt );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
