
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlUtilProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Util"/> entity.
	///</summary>
	public abstract partial class SqlUtilProviderBase : UtilProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlUtilProviderBase"/> instance.
		/// </summary>
		public SqlUtilProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlUtilProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlUtilProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Util)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
		public override CONFDB.Entities.TList<Util> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<Util>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Util> rows = new CONFDB.Entities.TList<Util>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
		public override CONFDB.Entities.TList<Util> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Find_Dynamic", typeof(UtilColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<Util> rows = new CONFDB.Entities.TList<Util>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Util> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<Util> rows = new CONFDB.Entities.TList<Util>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Util objects.</returns>
		public override CONFDB.Entities.TList<Util> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Util> rows = new CONFDB.Entities.TList<Util>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_UTIL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Util"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Util GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Util> tmp = new CONFDB.Entities.TList<Util>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Util object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.Util> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "UTIL";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			
			foreach(CONFDB.Entities.Util entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.Util entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.Util object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Util object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Util object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.Util entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Insert", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Util object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.Util object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.Util entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pUTIL_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			database.AddInParameter(commandWrapper, "@OriginalId", DbType.Int32, entity.OriginalId);
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalId = entity.Id;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_UTIL_BulkEditProductFeatures
					
		/// <summary>
		///	This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
		/// </summary>	
		/// <param name="featureId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void BulkEditProductFeatures(TransactionManager transactionManager, int start, int pageLength , System.Int32? featureId, System.Int32? featureOptionId, System.Int32? bulkEditType, System.Int32? customerId, System.Int32? companyId, System.Int32? salesPersonId, System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_BulkEditProductFeatures");
			
			database.AddInParameter(commandWrapper, "@FeatureID", DbType.Int32,  featureId );
			database.AddInParameter(commandWrapper, "@FeatureOptionID", DbType.Int32,  featureOptionId );
			database.AddInParameter(commandWrapper, "@BulkEditType", DbType.Int32,  bulkEditType );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@CompanyID", DbType.Int32,  companyId );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BulkEditProductFeatures", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BulkEditProductFeatures", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_Accounting_ExportPaymentReversals
					
		/// <summary>
		///	This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Accounting_ExportPaymentReversals(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? invoiceDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_Accounting_ExportPaymentReversals");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Accounting_ExportPaymentReversals", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Accounting_ExportPaymentReversals", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_INV_DoBillingRun
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
		/// </summary>	
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_DoBillingRun(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startDate, System.DateTime? endDate, System.String wholesalerId, System.Int32? billingPeriodCutoff)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_DoBillingRun");
			
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32,  billingPeriodCutoff );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_DoBillingRun", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_DoBillingRun", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_GeneratePassword
					
		/// <summary>
		///	This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
			/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void GeneratePassword(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Int32? customerId, System.Int32? moderatorId, System.Int32? passwordLength, ref System.String password)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_GeneratePassword");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
			database.AddInParameter(commandWrapper, "@PasswordLength", DbType.Int32,  passwordLength );
	
			database.AddParameter(commandWrapper, "@Password", DbType.AnsiString, 50, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, password);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GeneratePassword", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GeneratePassword", (IEntity)null));

			password =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@Password"]);

				
				return;
		}
		#endregion

		#region p_UTIL_INV_Mark_BillableCDRSEnd
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_Mark_BillableCDRSEnd(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_Mark_BillableCDRSEnd");
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_Mark_BillableCDRSEnd", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_Mark_BillableCDRSEnd", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_INV_PostMonthlyCharges
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_PostMonthlyCharges(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? postedDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_PostMonthlyCharges");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@PostedDate", DbType.DateTime,  postedDate );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_PostMonthlyCharges", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_PostMonthlyCharges", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_PopulateTrends
					
		/// <summary>
		///	This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void PopulateTrends(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_PopulateTrends");
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "PopulateTrends", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "PopulateTrends", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_TestUserCodes
					
		/// <summary>
		///	This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
		/// </summary>	
		/// <param name="moderatorCode"> A <c>System.String</c> instance.</param>
		/// <param name="passCode"> A <c>System.String</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void TestUserCodes(TransactionManager transactionManager, int start, int pageLength , System.String moderatorCode, System.String passCode, System.Int32? moderatorId, ref System.Boolean? modCodeValid, ref System.Boolean? partCodeVaild)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_TestUserCodes");
			
			database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString,  moderatorCode );
			database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString,  passCode );
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			database.AddParameter(commandWrapper, "@ModCodeValid", DbType.Boolean, 0, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, modCodeValid);
			database.AddParameter(commandWrapper, "@PartCodeVaild", DbType.Boolean, 0, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, partCodeVaild);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TestUserCodes", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TestUserCodes", (IEntity)null));

			modCodeValid =  Utility.GetParameterValue<System.Boolean?>(commandWrapper.Parameters["@ModCodeValid"]);
			partCodeVaild =  Utility.GetParameterValue<System.Boolean?>(commandWrapper.Parameters["@PartCodeVaild"]);

				
				return;
		}
		#endregion

		#region p_UTIL_INV_CalculateFreeCredits
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_CalculateFreeCredits(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_CalculateFreeCredits");
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_CalculateFreeCredits", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_CalculateFreeCredits", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_MGMTRPT_RevenueByModerator2
					
		/// <summary>
		///	This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
		/// </summary>	
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet MGMTRPT_RevenueByModerator2(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startDate, System.DateTime? endDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_MGMTRPT_RevenueByModerator2");
			
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "MGMTRPT_RevenueByModerator2", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "MGMTRPT_RevenueByModerator2", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_GenerateRandomString
					
		/// <summary>
		///	This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
		/// </summary>	
		/// <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="charactersToUse"> A <c>System.String</c> instance.</param>
		/// <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
			/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void GenerateRandomString(TransactionManager transactionManager, int start, int pageLength , System.Boolean? useNumbers, System.Boolean? useLowerCase, System.Boolean? useUpperCase, System.String charactersToUse, System.Int16? passwordLength, ref System.String password)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_GenerateRandomString");
			
			database.AddInParameter(commandWrapper, "@useNumbers", DbType.Boolean,  useNumbers );
			database.AddInParameter(commandWrapper, "@useLowerCase", DbType.Boolean,  useLowerCase );
			database.AddInParameter(commandWrapper, "@useUpperCase", DbType.Boolean,  useUpperCase );
			database.AddInParameter(commandWrapper, "@charactersToUse", DbType.AnsiString,  charactersToUse );
			database.AddInParameter(commandWrapper, "@passwordLength", DbType.Int16,  passwordLength );
	
			database.AddParameter(commandWrapper, "@password", DbType.AnsiString, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, password);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GenerateRandomString", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GenerateRandomString", (IEntity)null));

			password =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@password"]);

				
				return;
		}
		#endregion

		#region p_UTIL_CalculateTax
					
		/// <summary>
		///	This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="amount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="productRateName"> A <c>System.String</c> instance.</param>
			/// <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
			/// <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
			/// <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
			/// <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
			/// <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
			/// <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void CalculateTax(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, System.String priCustomerNumber, System.String wholesalerId, System.Decimal? amount, System.Int32? productRateId, System.String productRateName, ref System.Decimal? federalTaxRate, ref System.Decimal? localTaxRate, ref System.Decimal? federalTaxAmount, ref System.Decimal? localTaxAmount, ref System.Boolean? localOnFederalTax, ref System.Int32? productRateTaxableValue, ref System.Int32? customerTaxableValue)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_CalculateTax");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString,  priCustomerNumber );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
			database.AddInParameter(commandWrapper, "@Amount", DbType.Decimal,  amount );
			database.AddInParameter(commandWrapper, "@ProductRateID", DbType.Int32,  productRateId );
			database.AddInParameter(commandWrapper, "@ProductRateName", DbType.AnsiString,  productRateName );
	
			database.AddParameter(commandWrapper, "@FederalTaxRate", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 9, 5, string.Empty, DataRowVersion.Current, federalTaxRate);
			database.AddParameter(commandWrapper, "@LocalTaxRate", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 9, 5, string.Empty, DataRowVersion.Current, localTaxRate);
			database.AddParameter(commandWrapper, "@FederalTaxAmount", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 18, 7, string.Empty, DataRowVersion.Current, federalTaxAmount);
			database.AddParameter(commandWrapper, "@LocalTaxAmount", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 18, 7, string.Empty, DataRowVersion.Current, localTaxAmount);
			database.AddParameter(commandWrapper, "@LocalOnFederalTax", DbType.Boolean, 0, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, localOnFederalTax);
			database.AddParameter(commandWrapper, "@ProductRateTaxableValue", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, productRateTaxableValue);
			database.AddParameter(commandWrapper, "@CustomerTaxableValue", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, customerTaxableValue);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CalculateTax", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CalculateTax", (IEntity)null));

			federalTaxRate =  Utility.GetParameterValue<System.Decimal?>(commandWrapper.Parameters["@FederalTaxRate"]);
			localTaxRate =  Utility.GetParameterValue<System.Decimal?>(commandWrapper.Parameters["@LocalTaxRate"]);
			federalTaxAmount =  Utility.GetParameterValue<System.Decimal?>(commandWrapper.Parameters["@FederalTaxAmount"]);
			localTaxAmount =  Utility.GetParameterValue<System.Decimal?>(commandWrapper.Parameters["@LocalTaxAmount"]);
			localOnFederalTax =  Utility.GetParameterValue<System.Boolean?>(commandWrapper.Parameters["@LocalOnFederalTax"]);
			productRateTaxableValue =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@ProductRateTaxableValue"]);
			customerTaxableValue =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@CustomerTaxableValue"]);

				
				return;
		}
		#endregion

		#region p_UTIL_INV_GenerateInvoices_Bak
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
		/// </summary>	
		/// <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_GenerateInvoices_Bak(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startdate, System.DateTime? enddate, System.String wholesalerId, System.Int32? billingPeriodCutoff)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_GenerateInvoices_Bak");
			
			database.AddInParameter(commandWrapper, "@STARTDATE", DbType.DateTime,  startdate );
			database.AddInParameter(commandWrapper, "@ENDDATE", DbType.DateTime,  enddate );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32,  billingPeriodCutoff );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_GenerateInvoices_Bak", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_GenerateInvoices_Bak", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_BulkEditsPreview
					
		/// <summary>
		///	This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
		/// </summary>	
		/// <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet BulkEditsPreview(TransactionManager transactionManager, int start, int pageLength , System.Int32? bulkEditType, System.Int32? customerId, System.Int32? companyId, System.Int32? salesPersonId, System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_BulkEditsPreview");
			
			database.AddInParameter(commandWrapper, "@BulkEditType", DbType.Int32,  bulkEditType );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@CompanyID", DbType.Int32,  companyId );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BulkEditsPreview", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BulkEditsPreview", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_INV_BACKUP_INVOICING_TABLES
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_BACKUP_INVOICING_TABLES(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_BACKUP_INVOICING_TABLES");
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_BACKUP_INVOICING_TABLES", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_BACKUP_INVOICING_TABLES", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_BulkEditProductRates
					
		/// <summary>
		///	This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
		/// </summary>	
		/// <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="currencyId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void BulkEditProductRates(TransactionManager transactionManager, int start, int pageLength , System.Int32? productRateId, System.Decimal? sellRate, System.Int32? bulkEditType, System.Int32? customerId, System.Int32? companyId, System.Int32? salesPersonId, System.String wholesalerId, System.String currencyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_BulkEditProductRates");
			
			database.AddInParameter(commandWrapper, "@ProductRateID", DbType.Int32,  productRateId );
			database.AddInParameter(commandWrapper, "@SellRate", DbType.Decimal,  sellRate );
			database.AddInParameter(commandWrapper, "@BulkEditType", DbType.Int32,  bulkEditType );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@CompanyID", DbType.Int32,  companyId );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@CurrencyID", DbType.AnsiString,  currencyId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BulkEditProductRates", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BulkEditProductRates", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_INV_Mark_BillableCDRSStart
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
		/// </summary>	
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_Mark_BillableCDRSStart(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startDate, System.DateTime? endDate, System.String wholesalerId, System.Int32? billingPeriodCutOff)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_Mark_BillableCDRSStart");
			
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutOff", DbType.Int32,  billingPeriodCutOff );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_Mark_BillableCDRSStart", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_Mark_BillableCDRSStart", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_Accounting_ExportInvoicesXERO
					
		/// <summary>
		///	This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Accounting_ExportInvoicesXERO(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? invoiceDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_Accounting_ExportInvoicesXERO");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Accounting_ExportInvoicesXERO", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Accounting_ExportInvoicesXERO", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_Accounting_ExportCreditMemos
					
		/// <summary>
		///	This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Accounting_ExportCreditMemos(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? invoiceDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_Accounting_ExportCreditMemos");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Accounting_ExportCreditMemos", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Accounting_ExportCreditMemos", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_INV_GenerateInvoices
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
		/// </summary>	
		/// <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_GenerateInvoices(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startdate, System.DateTime? enddate, System.String wholesalerId, System.Int32? billingPeriodCutoff)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_GenerateInvoices");
			
			database.AddInParameter(commandWrapper, "@STARTDATE", DbType.DateTime,  startdate );
			database.AddInParameter(commandWrapper, "@ENDDATE", DbType.DateTime,  enddate );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32,  billingPeriodCutoff );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_GenerateInvoices", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_GenerateInvoices", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll
					
		/// <summary>
		///	This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="productId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void PushProductRatesThatDontExistToWholesalerAndAll(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Boolean? updateWholesaler, System.Boolean? updateCustomer, System.Int32? productId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@UpdateWholesaler", DbType.Boolean,  updateWholesaler );
			database.AddInParameter(commandWrapper, "@UpdateCustomer", DbType.Boolean,  updateCustomer );
			database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32,  productId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "PushProductRatesThatDontExistToWholesalerAndAll", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "PushProductRatesThatDontExistToWholesalerAndAll", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_PopulateModeratorXTimeUser
					
		/// <summary>
		///	This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void PopulateModeratorXTimeUser(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_PopulateModeratorXTimeUser");
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "PopulateModeratorXTimeUser", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "PopulateModeratorXTimeUser", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_GetReportData
					
		/// <summary>
		///	This method wrap the 'p_UTIL_GetReportData' stored procedure. 
		/// </summary>	
		/// <param name="reportType"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetReportData(TransactionManager transactionManager, int start, int pageLength , System.String reportType, System.Int32? customerId, System.Int32? moderatorId, System.DateTime? startDate, System.DateTime? endDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_GetReportData");
			
			database.AddInParameter(commandWrapper, "@ReportType", DbType.AnsiString,  reportType );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetReportData", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetReportData", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_BulkEditWSProductRates
					
		/// <summary>
		///	This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
		/// </summary>	
		/// <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="currencyId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void BulkEditWSProductRates(TransactionManager transactionManager, int start, int pageLength , System.Int32? productRateId, System.Decimal? buyRate, System.Int32? bulkEditType, System.Int32? customerId, System.Int32? companyId, System.Int32? salesPersonId, System.String wholesalerId, System.String currencyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_BulkEditWSProductRates");
			
			database.AddInParameter(commandWrapper, "@ProductRateID", DbType.Int32,  productRateId );
			database.AddInParameter(commandWrapper, "@BuyRate", DbType.Decimal,  buyRate );
			database.AddInParameter(commandWrapper, "@BulkEditType", DbType.Int32,  bulkEditType );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@CompanyID", DbType.Int32,  companyId );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@CurrencyID", DbType.AnsiString,  currencyId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BulkEditWSProductRates", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BulkEditWSProductRates", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_INV_GenerateCommissions
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
		/// </summary>	
		/// <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_GenerateCommissions(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startdate, System.String wholesalerId, System.Int32? billingPeriodCutoff)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_GenerateCommissions");
			
			database.AddInParameter(commandWrapper, "@STARTDATE", DbType.DateTime,  startdate );
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@BillingPeriodCutoff", DbType.Int32,  billingPeriodCutoff );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_GenerateCommissions", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_GenerateCommissions", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_Accounting_ExportPayments
					
		/// <summary>
		///	This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Accounting_ExportPayments(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? invoiceDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_Accounting_ExportPayments");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Accounting_ExportPayments", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Accounting_ExportPayments", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_MGMTRPT_Trends
					
		/// <summary>
		///	This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet MGMTRPT_Trends(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Int32? salesPersonId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_MGMTRPT_Trends");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "MGMTRPT_Trends", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "MGMTRPT_Trends", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_MGMTRPT_RevenueByModerator
					
		/// <summary>
		///	This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
		/// </summary>	
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet MGMTRPT_RevenueByModerator(TransactionManager transactionManager, int start, int pageLength , System.DateTime? startDate, System.DateTime? endDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_MGMTRPT_RevenueByModerator");
			
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "MGMTRPT_RevenueByModerator", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "MGMTRPT_RevenueByModerator", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_MGMTRPT_GrossProfit
					
		/// <summary>
		///	This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet MGMTRPT_GrossProfit(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? startDate, System.DateTime? endDate, System.DateTime? invoiceDate, System.Int32? salesPersonId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_MGMTRPT_GrossProfit");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
			database.AddInParameter(commandWrapper, "@EndDate", DbType.DateTime,  endDate );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
			database.AddInParameter(commandWrapper, "@SalesPersonID", DbType.Int32,  salesPersonId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "MGMTRPT_GrossProfit", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "MGMTRPT_GrossProfit", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_UTIL_INV_EnableInvoiceEmailer
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_EnableInvoiceEmailer(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? startDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_EnableInvoiceEmailer");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@StartDate", DbType.DateTime,  startDate );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_EnableInvoiceEmailer", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_EnableInvoiceEmailer", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_PushFeatureThatDontExistToWholesalerAndAll
					
		/// <summary>
		///	This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void PushFeatureThatDontExistToWholesalerAndAll(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Boolean? updateWholesaler, System.Boolean? updateCustomer, System.Boolean? updateModerator)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_PushFeatureThatDontExistToWholesalerAndAll");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@UpdateWholesaler", DbType.Boolean,  updateWholesaler );
			database.AddInParameter(commandWrapper, "@UpdateCustomer", DbType.Boolean,  updateCustomer );
			database.AddInParameter(commandWrapper, "@UpdateModerator", DbType.Boolean,  updateModerator );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "PushFeatureThatDontExistToWholesalerAndAll", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "PushFeatureThatDontExistToWholesalerAndAll", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_INV_ROLLBACK_INVOICING_TABLES
					
		/// <summary>
		///	This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void INV_ROLLBACK_INVOICING_TABLES(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_INV_ROLLBACK_INVOICING_TABLES");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "INV_ROLLBACK_INVOICING_TABLES", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "INV_ROLLBACK_INVOICING_TABLES", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_UTIL_Accounting_ExportInvoices
					
		/// <summary>
		///	This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Accounting_ExportInvoices(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.DateTime? invoiceDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_UTIL_Accounting_ExportInvoices");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiString,  wholesalerId );
			database.AddInParameter(commandWrapper, "@InvoiceDate", DbType.DateTime,  invoiceDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Accounting_ExportInvoices", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Accounting_ExportInvoices", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace
