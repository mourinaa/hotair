
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlModeratorProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using CONFDB.Entities;
using CONFDB.Data;
using CONFDB.Data.Bases;

#endregion

namespace CONFDB.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Moderator"/> entity.
	///</summary>
	public abstract partial class SqlModeratorProviderBase : ModeratorProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlModeratorProviderBase"/> instance.
		/// </summary>
		public SqlModeratorProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlModeratorProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlModeratorProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByDnisidFromModerator_Dnis
		/// <summary>
		///		Gets Moderator objects from the datasource by DNISID in the
		///		Moderator_DNIS table. Table Moderator is related to table DNIS
		///		through the (M:N) relationship defined in the Moderator_DNIS table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_dnisid"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns a <c>TList</c> of Moderator objects.</returns>
		public override TList<Moderator> GetByDnisidFromModerator_Dnis(TransactionManager transactionManager, System.Int32 _dnisid, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByDnisidFromModerator_Dnis", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Dnisid", DbType.Int32, _dnisid);
			
			IDataReader reader = null;
			//Create collection and fill
			CONFDB.Entities.TList<Moderator> rows = new CONFDB.Entities.TList<Moderator>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDnisidFromModerator_Dnis", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDnisidFromModerator_Dnis", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByDnisidFromModerator_Dnis
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Moderator)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
		public override CONFDB.Entities.TList<Moderator> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new CONFDB.Entities.TList<Moderator>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DepartmentId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UniqueModeratorId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebMeetingId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Omnovia_Room_Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Seevogh_Meeting_Url", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeeVoghMeetingId", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesalerid ") || clause.Trim().StartsWith("wholesalerid="))
				{
					database.SetParameterValue(commandWrapper, "@WholesalerId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customerid ") || clause.Trim().StartsWith("customerid="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pricustomernumber ") || clause.Trim().StartsWith("pricustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@PriCustomerNumber", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seccustomernumber ") || clause.Trim().StartsWith("seccustomernumber="))
				{
					database.SetParameterValue(commandWrapper, "@SecCustomerNumber", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalmoderatornumber ") || clause.Trim().StartsWith("externalmoderatornumber="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalModeratorNumber", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("moderatorcode ") || clause.Trim().StartsWith("moderatorcode="))
				{
					database.SetParameterValue(commandWrapper, "@ModeratorCode", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passcode ") || clause.Trim().StartsWith("passcode="))
				{
					database.SetParameterValue(commandWrapper, "@PassCode", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("departmentid ") || clause.Trim().StartsWith("departmentid="))
				{
					database.SetParameterValue(commandWrapper, "@DepartmentId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("modifiedby ") || clause.Trim().StartsWith("modifiedby="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedBy", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createddate ") || clause.Trim().StartsWith("createddate="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enabled ") || clause.Trim().StartsWith("enabled="))
				{
					database.SetParameterValue(commandWrapper, "@Enabled", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("uniquemoderatorid ") || clause.Trim().StartsWith("uniquemoderatorid="))
				{
					database.SetParameterValue(commandWrapper, "@UniqueModeratorId", new Guid(
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("userid ") || clause.Trim().StartsWith("userid="))
				{
					database.SetParameterValue(commandWrapper, "@UserId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webmeetingid ") || clause.Trim().StartsWith("webmeetingid="))
				{
					database.SetParameterValue(commandWrapper, "@WebMeetingId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("omnovia_room_id ") || clause.Trim().StartsWith("omnovia_room_id="))
				{
					database.SetParameterValue(commandWrapper, "@Omnovia_Room_Id", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seevogh_meeting_url ") || clause.Trim().StartsWith("seevogh_meeting_url="))
				{
					database.SetParameterValue(commandWrapper, "@Seevogh_Meeting_Url", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seevoghmeetingid ") || clause.Trim().StartsWith("seevoghmeetingid="))
				{
					database.SetParameterValue(commandWrapper, "@SeeVoghMeetingId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Moderator> rows = new CONFDB.Entities.TList<Moderator>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
		public override CONFDB.Entities.TList<Moderator> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Find_Dynamic", typeof(ModeratorColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			CONFDB.Entities.TList<Moderator> rows = new CONFDB.Entities.TList<Moderator>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			CONFDB.Entities.TList<Moderator> rows = new CONFDB.Entities.TList<Moderator>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of CONFDB.Entities.Moderator objects.</returns>
		public override CONFDB.Entities.TList<Moderator> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			CONFDB.Entities.TList<Moderator> rows = new CONFDB.Entities.TList<Moderator>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the Moderator_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Moderator"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Moderator GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByCustomerIdPriCustomerNumberSecCustomerNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_customerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByCustomerIdPriCustomerNumberSecCustomerNumber(TransactionManager transactionManager, System.Int32 _customerId, System.String _priCustomerNumber, System.String _secCustomerNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, _customerId);
				database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, _priCustomerNumber);
				database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, _secCustomerNumber);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomerIdPriCustomerNumberSecCustomerNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomerIdPriCustomerNumberSecCustomerNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerIdPriCustomerNumberSecCustomerNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="_priCustomerNumber"></param>
		/// <param name="_secCustomerNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Moderator"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Moderator GetByWholesalerIdPriCustomerNumberSecCustomerNumber(TransactionManager transactionManager, System.String _wholesalerId, System.String _priCustomerNumber, System.String _secCustomerNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
				database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, _priCustomerNumber);
				database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, _secCustomerNumber);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerIdPriCustomerNumberSecCustomerNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerIdPriCustomerNumberSecCustomerNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByCustomerId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_customerId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByCustomerId(TransactionManager transactionManager, System.Int32 _customerId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByCustomerId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, _customerId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCustomerId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCustomerId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWholesalerIdId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wholesalerId"></param>
		/// <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByWholesalerIdId(TransactionManager transactionManager, System.String _wholesalerId, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByWholesalerIdId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, _wholesalerId);
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWholesalerIdId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWholesalerIdId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByModeratorCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_moderatorCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Moderator"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Moderator GetByModeratorCode(TransactionManager transactionManager, System.String _moderatorCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByModeratorCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, _moderatorCode);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByModeratorCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByModeratorCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByModeratorCodePassCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_moderatorCode"></param>
		/// <param name="_passCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByModeratorCodePassCode(TransactionManager transactionManager, System.String _moderatorCode, System.String _passCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByModeratorCodePassCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, _moderatorCode);
				database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, _passCode);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByModeratorCodePassCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByModeratorCodePassCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByPassCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_PassCode index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_passCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.Moderator"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.Moderator GetByPassCode(TransactionManager transactionManager, System.String _passCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByPassCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, _passCode);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPassCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPassCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByDepartmentId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_departmentId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByDepartmentId(TransactionManager transactionManager, System.Int32 _departmentId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByDepartmentId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@DepartmentId", DbType.Int32, _departmentId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDepartmentId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDepartmentId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByUserId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Moderator_UserID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_userId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="CONFDB.Entities.TList&lt;Moderator&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override CONFDB.Entities.TList<Moderator> GetByUserId(TransactionManager transactionManager, System.Int32? _userId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_GetByUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, _userId);
			
			IDataReader reader = null;
			CONFDB.Entities.TList<Moderator> tmp = new CONFDB.Entities.TList<Moderator>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUserId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUserId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Moderator object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<CONFDB.Entities.Moderator> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Moderator";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("WholesalerID", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("CustomerID", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("PriCustomerNumber", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("SecCustomerNumber", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("ExternalModeratorNumber", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ModeratorCode", typeof(System.String));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("PassCode", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("Description", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("DepartmentID", typeof(System.Int32));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("ModifiedBy", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("CreatedDate", typeof(System.DateTime));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("Enabled", typeof(System.Boolean));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("UniqueModeratorID", typeof(System.Guid));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("UserID", typeof(System.Int32));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("WebMeetingID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("omnovia_room_id", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("seevogh_meeting_url", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("SeeVoghMeetingID", typeof(System.String));
			col19.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ID", "ID");
			bulkCopy.ColumnMappings.Add("WholesalerID", "WholesalerID");
			bulkCopy.ColumnMappings.Add("CustomerID", "CustomerID");
			bulkCopy.ColumnMappings.Add("PriCustomerNumber", "PriCustomerNumber");
			bulkCopy.ColumnMappings.Add("SecCustomerNumber", "SecCustomerNumber");
			bulkCopy.ColumnMappings.Add("ExternalModeratorNumber", "ExternalModeratorNumber");
			bulkCopy.ColumnMappings.Add("ModeratorCode", "ModeratorCode");
			bulkCopy.ColumnMappings.Add("PassCode", "PassCode");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("DepartmentID", "DepartmentID");
			bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");
			bulkCopy.ColumnMappings.Add("CreatedDate", "CreatedDate");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("Enabled", "Enabled");
			bulkCopy.ColumnMappings.Add("UniqueModeratorID", "UniqueModeratorID");
			bulkCopy.ColumnMappings.Add("UserID", "UserID");
			bulkCopy.ColumnMappings.Add("WebMeetingID", "WebMeetingID");
			bulkCopy.ColumnMappings.Add("omnovia_room_id", "omnovia_room_id");
			bulkCopy.ColumnMappings.Add("seevogh_meeting_url", "seevogh_meeting_url");
			bulkCopy.ColumnMappings.Add("SeeVoghMeetingID", "SeeVoghMeetingID");
			
			foreach(CONFDB.Entities.Moderator entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID"] = entity.Id;
							
				
					row["WholesalerID"] = entity.WholesalerId;
							
				
					row["CustomerID"] = entity.CustomerId;
							
				
					row["PriCustomerNumber"] = entity.PriCustomerNumber;
							
				
					row["SecCustomerNumber"] = entity.SecCustomerNumber;
							
				
					row["ExternalModeratorNumber"] = entity.ExternalModeratorNumber;
							
				
					row["ModeratorCode"] = entity.ModeratorCode;
							
				
					row["PassCode"] = entity.PassCode;
							
				
					row["Description"] = entity.Description;
							
				
					row["DepartmentID"] = entity.DepartmentId;
							
				
					row["ModifiedBy"] = entity.ModifiedBy;
							
				
					row["CreatedDate"] = entity.CreatedDate;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["Enabled"] = entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value;
							
				
					row["UniqueModeratorID"] = entity.UniqueModeratorId;
							
				
					row["UserID"] = entity.UserId.HasValue ? (object) entity.UserId  : System.DBNull.Value;
							
				
					row["WebMeetingID"] = entity.WebMeetingId;
							
				
					row["omnovia_room_id"] = entity.Omnovia_Room_Id.HasValue ? (object) entity.Omnovia_Room_Id  : System.DBNull.Value;
							
				
					row["seevogh_meeting_url"] = entity.Seevogh_Meeting_Url;
							
				
					row["SeeVoghMeetingID"] = entity.SeeVoghMeetingId;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(CONFDB.Entities.Moderator entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a CONFDB.Entities.Moderator object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Moderator object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the CONFDB.Entities.Moderator object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, CONFDB.Entities.Moderator entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, entity.CustomerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, entity.SecCustomerNumber );
			database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, entity.ExternalModeratorNumber );
			database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, entity.ModeratorCode );
			database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, entity.PassCode );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@DepartmentId", DbType.Int32, entity.DepartmentId );
			database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UniqueModeratorId", DbType.Guid, entity.UniqueModeratorId );
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, (entity.UserId.HasValue ? (object) entity.UserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WebMeetingId", DbType.AnsiString, entity.WebMeetingId );
			database.AddInParameter(commandWrapper, "@Omnovia_Room_Id", DbType.Int32, (entity.Omnovia_Room_Id.HasValue ? (object) entity.Omnovia_Room_Id  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Seevogh_Meeting_Url", DbType.AnsiString, entity.Seevogh_Meeting_Url );
			database.AddInParameter(commandWrapper, "@SeeVoghMeetingId", DbType.AnsiString, entity.SeeVoghMeetingId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">CONFDB.Entities.Moderator object to update.</param>
		/// <remarks>
		///		After updating the datasource, the CONFDB.Entities.Moderator object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, CONFDB.Entities.Moderator entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.pModerator_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			database.AddInParameter(commandWrapper, "@WholesalerId", DbType.AnsiString, entity.WholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerId", DbType.Int32, entity.CustomerId );
			database.AddInParameter(commandWrapper, "@PriCustomerNumber", DbType.AnsiString, entity.PriCustomerNumber );
			database.AddInParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, entity.SecCustomerNumber );
			database.AddInParameter(commandWrapper, "@ExternalModeratorNumber", DbType.AnsiString, entity.ExternalModeratorNumber );
			database.AddInParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, entity.ModeratorCode );
			database.AddInParameter(commandWrapper, "@PassCode", DbType.AnsiString, entity.PassCode );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@DepartmentId", DbType.Int32, entity.DepartmentId );
			database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.AnsiString, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean, (entity.Enabled.HasValue ? (object) entity.Enabled : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UniqueModeratorId", DbType.Guid, entity.UniqueModeratorId );
			database.AddInParameter(commandWrapper, "@UserId", DbType.Int32, (entity.UserId.HasValue ? (object) entity.UserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WebMeetingId", DbType.AnsiString, entity.WebMeetingId );
			database.AddInParameter(commandWrapper, "@Omnovia_Room_Id", DbType.Int32, (entity.Omnovia_Room_Id.HasValue ? (object) entity.Omnovia_Room_Id : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Seevogh_Meeting_Url", DbType.AnsiString, entity.Seevogh_Meeting_Url );
			database.AddInParameter(commandWrapper, "@SeeVoghMeetingId", DbType.AnsiString, entity.SeeVoghMeetingId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region p_Moderator_CreateUser
					
		/// <summary>
		///	This method wrap the 'p_Moderator_CreateUser' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="displayName"> A <c>System.String</c> instance.</param>
		/// <param name="telephone"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="city"> A <c>System.String</c> instance.</param>
		/// <param name="country"> A <c>System.String</c> instance.</param>
		/// <param name="region"> A <c>System.String</c> instance.</param>
		/// <param name="postalCode"> A <c>System.String</c> instance.</param>
		/// <param name="charityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="userId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void CreateUser(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId, System.String userName, System.String password, System.String displayName, System.String telephone, System.String address1, System.String address2, System.String city, System.String country, System.String region, System.String postalCode, System.Int32? charityId, System.Boolean? enabled, System.Boolean? mustChangePassword, ref System.Int32? userId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_CreateUser");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
			database.AddInParameter(commandWrapper, "@UserName", DbType.AnsiString,  userName );
			database.AddInParameter(commandWrapper, "@Password", DbType.AnsiString,  password );
			database.AddInParameter(commandWrapper, "@DisplayName", DbType.AnsiString,  displayName );
			database.AddInParameter(commandWrapper, "@Telephone", DbType.AnsiString,  telephone );
			database.AddInParameter(commandWrapper, "@Address1", DbType.AnsiString,  address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.AnsiString,  address2 );
			database.AddInParameter(commandWrapper, "@City", DbType.AnsiString,  city );
			database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString,  country );
			database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString,  region );
			database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString,  postalCode );
			database.AddInParameter(commandWrapper, "@CharityID", DbType.Int32,  charityId );
			database.AddInParameter(commandWrapper, "@Enabled", DbType.Boolean,  enabled );
			database.AddInParameter(commandWrapper, "@MustChangePassword", DbType.Boolean,  mustChangePassword );
	
			database.AddParameter(commandWrapper, "@UserID", DbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, userId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CreateUser", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CreateUser", (IEntity)null));

			userId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@UserID"]);

				
				return;
		}
		#endregion

		#region p_Moderator_InstallDefaults
					
		/// <summary>
		///	This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void InstallDefaults(TransactionManager transactionManager, int start, int pageLength , System.Int32? id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_InstallDefaults");
			
			database.AddInParameter(commandWrapper, "@ID", DbType.Int32,  id );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "InstallDefaults", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "InstallDefaults", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Moderator_GetNextSecCustomerNumber
					
		/// <summary>
		///	This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
		/// </summary>	
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void GetNextSecCustomerNumber(TransactionManager transactionManager, int start, int pageLength , System.Int32? customerId, ref System.String secCustomerNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_GetNextSecCustomerNumber");
			
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
	
			database.AddParameter(commandWrapper, "@SecCustomerNumber", DbType.AnsiString, 6, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, secCustomerNumber);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNextSecCustomerNumber", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNextSecCustomerNumber", (IEntity)null));

			secCustomerNumber =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@SecCustomerNumber"]);

				
				return;
		}
		#endregion

		#region p_Moderator_DisableModerator
					
		/// <summary>
		///	This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void DisableModerator(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_DisableModerator");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DisableModerator", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DisableModerator", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Moderator_Omnovia_GetRecordings
					
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Omnovia_GetRecordings(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_Omnovia_GetRecordings");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_GetRecordings", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_GetRecordings", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Moderator_Omnovia_GetCompanyLogin
					
		/// <summary>
		///	This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Omnovia_GetCompanyLogin(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_Omnovia_GetCompanyLogin");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Omnovia_GetCompanyLogin", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Omnovia_GetCompanyLogin", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region p_Moderator_UpdateDNIS
					
		/// <summary>
		///	This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void UpdateDNIS(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId, System.Int32? dnisid, System.Int32? dnisTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_UpdateDNIS");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
			database.AddInParameter(commandWrapper, "@DNISID", DbType.Int32,  dnisid );
			database.AddInParameter(commandWrapper, "@DNISTypeID", DbType.Int32,  dnisTypeId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdateDNIS", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdateDNIS", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Moderator_DeleteModerator
					
		/// <summary>
		///	This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void DeleteModerator(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_DeleteModerator");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteModerator", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteModerator", (IEntity)null));


				
				return;
		}
		#endregion

		#region p_Moderator_GenerateCodes
					
		/// <summary>
		///	This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
		/// </summary>	
		/// <param name="wholesalerId"> A <c>System.String</c> instance.</param>
		/// <param name="customerId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
		/// <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
			/// <param name="moderatorCode"> A <c>System.String</c> instance.</param>
			/// <param name="passCode"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public override void GenerateCodes(TransactionManager transactionManager, int start, int pageLength , System.String wholesalerId, System.Int32? customerId, System.Int32? moderatorId, System.Int32? modCodeLength, System.Int32? passCodeLength, ref System.String moderatorCode, ref System.String passCode)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_GenerateCodes");
			
			database.AddInParameter(commandWrapper, "@WholesalerID", DbType.AnsiStringFixedLength,  wholesalerId );
			database.AddInParameter(commandWrapper, "@CustomerID", DbType.Int32,  customerId );
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
			database.AddInParameter(commandWrapper, "@ModCodeLength", DbType.Int32,  modCodeLength );
			database.AddInParameter(commandWrapper, "@PassCodeLength", DbType.Int32,  passCodeLength );
	
			database.AddParameter(commandWrapper, "@ModeratorCode", DbType.AnsiString, 16, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, moderatorCode);
			database.AddParameter(commandWrapper, "@PassCode", DbType.AnsiString, 16, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, passCode);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GenerateCodes", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GenerateCodes", (IEntity)null));

			moderatorCode =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@ModeratorCode"]);
			passCode =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@PassCode"]);

				
				return;
		}
		#endregion

		#region p_Moderator_GetProductFeatures
					
		/// <summary>
		///	This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
		/// </summary>	
		/// <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetProductFeatures(TransactionManager transactionManager, int start, int pageLength , System.Int32? moderatorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = database.GetStoredProcCommand("dbo.p_Moderator_GetProductFeatures");
			
			database.AddInParameter(commandWrapper, "@ModeratorID", DbType.Int32,  moderatorId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetProductFeatures", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace
