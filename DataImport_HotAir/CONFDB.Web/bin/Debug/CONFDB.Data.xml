<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CONFDB.Data</name>
    </assembly>
    <members>
        <member name="T:CONFDB.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:CONFDB.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.WholesalerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.WholesalerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:CONFDB.Data.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.IEntityProvider`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Get(CONFDB.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Get(CONFDB.Data.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll(CONFDB.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(CONFDB.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(CONFDB.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> or <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Insert(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Insert(CONFDB.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Insert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.BulkInsert(CONFDB.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.BulkInsert(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Update(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Update(CONFDB.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Update(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Save(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Save(CONFDB.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Save(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(CONFDB.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(CONFDB.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,`0,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,`0,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0},System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Entities.TList{`0},System.Boolean,CONFDB.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0},System.Boolean,CONFDB.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0,CONFDB.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,`0,CONFDB.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,`0,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>DeepSession</c> of child types for easy access.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Entities.TList{`0},CONFDB.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0},CONFDB.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TList{`0},CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(CONFDB.Entities.IEntity,System.String,CONFDB.Data.DeepLoadType,CONFDB.Data.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,CONFDB.Data.DeepSaveType,CONFDB.Data.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            	<c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(CONFDB.Data.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.OnDataRequesting(CONFDB.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.OnDataRequested(CONFDB.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.OnDeepLoading(CONFDB.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityProviderBaseCore`2.OnDeepSaving(CONFDB.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="E:CONFDB.Data.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:CONFDB.Data.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(System.String)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByLanguageIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Wholesaler objects from the datasource by LanguageID in the
            	IRWholesaler table. Table Wholesaler is related to table Language
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.WholesalerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	Currency_Wholesaler_FK1 Description: 
            </summary>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	Currency_Wholesaler_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	Currency_Wholesaler_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	currency_Wholesaler_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	currency_Wholesaler_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Wholesaler_FK1 key.
            	Currency_Wholesaler_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	FK_Wholesaler_Country Description: 
            </summary>
            <param name="_billingCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	FK_Wholesaler_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	FK_Wholesaler_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	fk_Wholesaler_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingCountry"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	fk_Wholesaler_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Country key.
            	FK_Wholesaler_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	FK_Wholesaler_State Description: 
            </summary>
            <param name="_billingRegion">State, Province, etc.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	FK_Wholesaler_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	FK_Wholesaler_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	fk_Wholesaler_State Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	fk_Wholesaler_State Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByBillingRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_State key.
            	FK_Wholesaler_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingRegion">State, Province, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	FK_Wholesaler_Taxable Description: 
            </summary>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	FK_Wholesaler_Taxable Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	FK_Wholesaler_Taxable Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	fk_Wholesaler_Taxable Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	fk_Wholesaler_Taxable Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Wholesaler_Taxable key.
            	FK_Wholesaler_Taxable Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.WholesalerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Wholesaler_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Product_InstallDefaults(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Product_InstallDefaults(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Product_InstallDefaults(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Product_InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.UpdateProductFeature(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.UpdateProductFeature(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.UpdateProductFeature(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.UpdateProductFeature(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Wholesaler_UpdateProductFeature' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="wholesaler_Product_FeatureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateCustomers"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductRates(System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductRates(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductRates(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductRates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductFeatures(System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductFeatures(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_GetProductFeatures' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Wholesaler&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Wholesaler)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Wholesaler)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Wholesaler object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Wholesaler instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.WholesalerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Wholesaler</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.Currency">
            <summary>
             Composite Property for <c>Currency</c> at CurrencyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at BillingCountrySource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.State">
            <summary>
             Composite Property for <c>State</c> at BillingRegionSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.Taxable">
            <summary>
             Composite Property for <c>Taxable</c> at TaxableIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.VerticalCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for VerticalCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.LanguageIdLanguageCollection_From_IrWholesaler">
            <summary>
             Collection of <c>Wholesaler</c> as ManyToMany for LanguageCollection_From_IrWholesaler
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CustomerTransactionCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CustomerTransactionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CustomerDocumentCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CustomerDocumentCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CommissionCustomerCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CommissionCustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CommissionCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CommissionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.EmailTemplateCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for EmailTemplateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.RatedCdrCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for RatedCdrCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.Wholesaler_ProductCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for Wholesaler_ProductCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.AccountManagerCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for AccountManagerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.ProductRateValueCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for ProductRateValueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.DnisCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.IrWholesalerCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for IrWholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.LeadCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for LeadCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.SalesPersonCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for SalesPersonCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.DepartmentCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for DepartmentCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.CompanyCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for CompanyCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WholesalerChildEntityTypes.MarketingServiceCollection">
            <summary>
             Collection of <c>Wholesaler</c> as OneToMany for MarketingServiceCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.WholesalerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:CONFDB.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendStartsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendEndsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WholesalerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.WholesalerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:CONFDB.Data.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:CONFDB.Data.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:CONFDB.Data.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:CONFDB.Data.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:CONFDB.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlFilterBuilder`1.CONFDB#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WholesalerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WholesalerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.WelcomeKitRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	FK_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	FK_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	FK_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	fk_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	fk_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WelcomeKitRequest_Moderator key.
            	FK_WelcomeKitRequest_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.WelcomeKitRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequestKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key WelcomeKitRequest_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the WelcomeKitRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="_createdDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_createdDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.GetByCreatedDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WelcomeKitRequest_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.AddRequest(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_AddRequest' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="notes"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.AddRequest(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_AddRequest' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="notes"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.AddRequest(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_AddRequest' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="notes"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.AddRequest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_AddRequest' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="notes"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.ProcessRequest(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_ProcessRequest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="requestedCompletedBy"> A <c>System.String</c> instance.</param>
            <param name="markAsProcessed"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.ProcessRequest(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_ProcessRequest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="requestedCompletedBy"> A <c>System.String</c> instance.</param>
            <param name="markAsProcessed"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.ProcessRequest(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_ProcessRequest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="requestedCompletedBy"> A <c>System.String</c> instance.</param>
            <param name="markAsProcessed"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.ProcessRequest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_WelcomeKitRequest_ProcessRequest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="requestedCompletedBy"> A <c>System.String</c> instance.</param>
            <param name="markAsProcessed"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.WelcomeKitRequest},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;WelcomeKitRequest&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.WelcomeKitRequest)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.WelcomeKitRequest)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequest,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.WelcomeKitRequest Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.WelcomeKitRequest,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.WelcomeKitRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.WelcomeKitRequest instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.WelcomeKitRequest Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.WelcomeKitRequestChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.WelcomeKitRequest</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.WelcomeKitRequestChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.WelcomeKitRequestFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.WelcomeKitRequestParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WelcomeKitRequestParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.WelcomeKitRequestParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.VerticalProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.VerticalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.VerticalKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	Wholesaler_Vertical_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	Wholesaler_Vertical_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	Wholesaler_Vertical_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	wholesaler_Vertical_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	wholesaler_Vertical_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Vertical_FK1 key.
            	Wholesaler_Vertical_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Vertical objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.VerticalKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Vertical_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Vertical_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Vertical"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Vertical_Description index.
            </summary>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByDescription(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Vertical_WholesalerID_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Vertical},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Vertical&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vertical)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vertical"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vertical"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Vertical)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vertical"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vertical"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Vertical,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vertical"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Vertical Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Vertical,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Vertical object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Vertical instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Vertical Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.VerticalChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Vertical</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.VerticalChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.VerticalChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>Vertical</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.VerticalFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vertical"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the VerticalFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.VerticalParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vertical"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the VerticalParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.VerticalParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.StateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.StateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.StateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	Country_State_FK1 Description: 
            </summary>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	Country_State_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	Country_State_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	country_State_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	country_State_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_State_FK1 key.
            	Country_State_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.State objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.StateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_State index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_State index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_State_CountryID index.
            </summary>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.GetByIdCountryId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_State_CountryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.State"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.State},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;State&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.State)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.State"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.State"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.State)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.State"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.State"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.State,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.State"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.State Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.StateProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.State,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.State object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.State instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.State Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.StateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.State</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.StateChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at CountryIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.StateChildEntityTypes.CustomerCollectionGetByPrimaryContactRegion">
            <summary>
             Collection of <c>State</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.StateChildEntityTypes.WholesalerCollection">
            <summary>
             Collection of <c>State</c> as OneToMany for WholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.StateChildEntityTypes.CustomerCollectionGetByBillingContactRegion">
            <summary>
             Collection of <c>State</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.StateChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>State</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.StateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.StateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.StateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.StateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.StateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.StateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.StateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.StateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RecordingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TCRecordings_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TCRecordings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Recording"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="_replayCode"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="_replayCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="_replayCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByReplayCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecordings_ReplayCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="_recordingGuid"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="_recordingGuid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingGuid"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingGuid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="_recordingGuid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetByRecordingGuid(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TCRecording_RecordingGuid index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingGuid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetParticipantList(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Recording_GetParticipantList' stored procedure. 
            </summary>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetParticipantList(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Recording_GetParticipantList' stored procedure. 
            </summary>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetParticipantList(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Recording_GetParticipantList' stored procedure. 
            </summary>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.GetParticipantList(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Recording_GetParticipantList' stored procedure. 
            </summary>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Recording},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Recording&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Recording)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Recording"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Recording"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Recording)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Recording"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Recording"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Recording,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Recording"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Recording Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Recording,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Recording object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Recording instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Recording Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Recording</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RecordingChildEntityTypes.RecordingParticipantUsageCollection">
            <summary>
             Collection of <c>Recording</c> as OneToMany for RecordingParticipantUsageCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Recording"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RecordingFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Recording"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RecordingParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_FeatureProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Moderator_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Moderator_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_FeatureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_FeatureKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Moderator_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_Features_ALL index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ALL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureIdModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeaturesID_SubAcctID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="_featureOptionId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_Features_FeatureOptionsID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Moderator_Feature},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Moderator_Feature&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Moderator_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator_Feature"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Feature"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Moderator_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator_Feature"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Feature"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Feature,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Feature"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Moderator_Feature Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Feature,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Moderator_Feature object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Moderator_Feature instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Moderator_Feature Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key LeadProduct_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.LeadProduct},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;LeadProduct&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.LeadProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadProduct"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadProduct"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.LeadProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadProduct"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadProduct"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProduct,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadProduct"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.LeadProduct Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadProduct,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.LeadProduct object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.LeadProduct instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.LeadProduct Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadPeriodProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadPeriodProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadPeriodProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadPeriodProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriodKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriodKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key LeadPeriod_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadPeriod_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadPeriod"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.LeadPeriod},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;LeadPeriod&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.LeadPeriod)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadPeriod"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadPeriod"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.LeadPeriod)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadPeriod"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadPeriod"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriod,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadPeriod"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.LeadPeriod Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadPeriod,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.LeadPeriod object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.LeadPeriod instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.LeadPeriod Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EventManagerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EventManagerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManagerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	FK_EventManager_User Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	FK_EventManager_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	FK_EventManager_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	fk_EventManager_User Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	fk_EventManager_User Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_User key.
            	FK_EventManager_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	FK_EventManager_Customer Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	FK_EventManager_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	FK_EventManager_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	fk_EventManager_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	fk_EventManager_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EventManager_Customer key.
            	FK_EventManager_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EventManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManagerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_EventManager index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EventManager index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EventManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.EventManager},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;EventManager&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.EventManager)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EventManager"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EventManager"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.EventManager)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EventManager"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EventManager"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManager,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EventManager"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.EventManager Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.EventManager,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.EventManager object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.EventManager instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.EventManager Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EventManagerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.EventManager</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.EventManagerChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at UserIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.EventManagerChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EventManagerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EventManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EventManagerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EventManagerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EventManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EventManagerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EventManagerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DnisTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DnisTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key DNISType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNISType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DnisType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.DnisType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;DnisType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.DnisType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.DnisType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DnisType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.DnisType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.DnisType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DnisType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DnisType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.DnisType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.DnisType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.DnisType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.DnisType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	FK_CustomerTransactionType_GLPostingType Description: 
            </summary>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	FK_CustomerTransactionType_GLPostingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	FK_CustomerTransactionType_GLPostingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	fk_CustomerTransactionType_GlPostingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	fk_CustomerTransactionType_GlPostingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByGlPostingTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransactionType_GLPostingType key.
            	FK_CustomerTransactionType_GLPostingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransactionType objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerTransactionType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_CustomerTransactionType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.GetByActionValue(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactionType_ActionValue index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransactionType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CustomerTransactionType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CustomerTransactionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CustomerTransactionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransactionType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CustomerTransactionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransactionType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CountryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CountryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CountryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CountryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CountryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CountryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Country_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Country"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Country_AreaCode index.
            </summary>
            <param name="_countryAreaCode"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="_countryAreaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryAreaCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryAreaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="_countryAreaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.GetByCountryAreaCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Country_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryAreaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Country},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Country&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Country)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Country"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Country"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Country)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Country"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Country"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Country,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Country"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Country Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Country,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Country object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Country instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Country Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ConferencingSummaryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ConferencingSummaryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ConferencingSummaryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummaryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.Delete(System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_billedDate">. Primary Key.</param>
            <param name="_productId">. Primary Key.</param>
            <param name="_currency">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate">. Primary Key.</param>
            <param name="_productId">. Primary Key.</param>
            <param name="_currency">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummaryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(System.DateTime,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key EnunciateSummary_PK index.
            </summary>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(System.DateTime,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.GetByBilledDateProductIdCurrency(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EnunciateSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="_productId"></param>
            <param name="_currency"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ConferencingSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ConferencingSummary},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ConferencingSummary&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ConferencingSummary)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ConferencingSummary"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ConferencingSummary"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ConferencingSummary)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ConferencingSummary"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ConferencingSummary"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummary,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ConferencingSummary"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ConferencingSummary Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ConferencingSummary,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ConferencingSummary object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ConferencingSummary instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ConferencingSummary Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	Moderator_BridgeRequest_FK Description: 
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	Moderator_BridgeRequest_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	Moderator_BridgeRequest_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	moderator_BridgeRequest_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	moderator_BridgeRequest_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeRequest_FK key.
            	Moderator_BridgeRequest_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	FK_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="_bridgeRequestTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	FK_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeRequestTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	FK_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeRequestTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	fk_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeRequestTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	fk_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeRequestTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByBridgeRequestTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BridgeRequest_BridgeRequestType key.
            	FK_BridgeRequest_BridgeRequestType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeRequestTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeRequest objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(System.Guid)">
            <summary>
            	Gets rows from the datasource based on the primary key BridgeRequest_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeRequest_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequest"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(CONFDB.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.GetByModeratorIdProcessFlag(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_BridgeRequest_ProcessFlag_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="_processFlag"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.BridgeRequest},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;BridgeRequest&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.BridgeRequest)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeRequest"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequest"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.BridgeRequest)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeRequest"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequest"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequest,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.BridgeRequest Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequest,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.BridgeRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.BridgeRequest instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.BridgeRequest Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.BridgeRequest</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeRequestChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeRequestChildEntityTypes.BridgeRequestType">
            <summary>
             Composite Property for <c>BridgeRequestType</c> at BridgeRequestTypeIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeQueueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeQueueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeQueueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeQueueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	Bridge_BridgeQueue_FK Description: 
            </summary>
            <param name="_bridgeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	Bridge_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	Bridge_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	bridge_BridgeQueue_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	bridge_BridgeQueue_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_BridgeQueue_FK key.
            	Bridge_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	Moderator_BridgeQueue_FK Description: 
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	Moderator_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	Moderator_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	moderator_BridgeQueue_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	moderator_BridgeQueue_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_BridgeQueue_FK key.
            	Moderator_BridgeQueue_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.BridgeQueue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueueKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(System.Guid)">
            <summary>
            	Gets rows from the datasource based on the primary key BridgeQueue_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeQueue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeQueue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.BridgeQueue},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;BridgeQueue&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.BridgeQueue)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeQueue"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeQueue"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.BridgeQueue)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeQueue"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeQueue"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueue,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeQueue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.BridgeQueue Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeQueue,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.BridgeQueue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.BridgeQueue instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.BridgeQueue Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AuditLogProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AuditLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AuditLogProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AuditLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Table used to stored audit log and changes for user items. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table used to stored audit log and changes for user items. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLogKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AuditLog index.
            </summary>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuditLog index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table used to stored audit log and changes for user items</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AuditLog"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AuditLog},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AuditLog&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AuditLog)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AuditLog"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AuditLog"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AuditLog)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AuditLog"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AuditLog"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLog,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AuditLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AuditLog Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AuditLog,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AuditLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AuditLog instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AuditLog Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:CONFDB.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="T:CONFDB.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:CONFDB.Data.IEntityViewProvider`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityViewProvider`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityViewProvider`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.IEntityViewProvider`1.Find(CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll(CONFDB.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Get(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(CONFDB.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(CONFDB.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EntityViewProviderBaseCore`1.Find(CONFDB.Data.TransactionManager,CONFDB.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_SystemExtension_Value},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_SystemExtension_Value)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_FeatureOptionsForCustomers},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_FeatureOptionsForCustomers)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:CONFDB.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:CONFDB.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:CONFDB.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:CONFDB.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:CONFDB.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:CONFDB.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:CONFDB.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:CONFDB.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:CONFDB.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:CONFDB.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:CONFDB.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:CONFDB.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteReader(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteDataSet(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteScalar(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:CONFDB.Data.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:CONFDB.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:CONFDB.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteNonQuery(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteReader(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteDataSet(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProvider.ExecuteScalar(CONFDB.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <c cref="T:CONFDB.Data.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:CONFDB.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AccessTypeProvider">
            <summary>
             Current AccessTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.RecordingProvider">
            <summary>
             Current RecordingProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.RecordingParticipantUsageProvider">
            <summary>
             Current RecordingParticipantUsageProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.RatingTypeProvider">
            <summary>
             Current RatingTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.PromptSetProvider">
            <summary>
             Current PromptSetProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.RoleProvider">
            <summary>
             Current RoleProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.SeeVoghMeetingTrackerProvider">
            <summary>
             Current SeeVoghMeetingTrackerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CountryProvider">
            <summary>
             Current CountryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CurrencyProvider">
            <summary>
             Current CurrencyProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.SystemExtensionProvider">
            <summary>
             Current SystemExtensionProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.StateProvider">
            <summary>
             Current StateProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductTypeProvider">
            <summary>
             Current ProductTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductRateTypeProvider">
            <summary>
             Current ProductRateTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductRateIntervalProvider">
            <summary>
             Current ProductRateIntervalProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ModeratorXtimeUserProvider">
            <summary>
             Current ModeratorXtimeUserProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadStageProvider">
            <summary>
             Current LeadStageProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadSourceProvider">
            <summary>
             Current LeadSourceProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadProductProvider">
            <summary>
             Current LeadProductProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.OmnoviaHostedArchiveProvider">
            <summary>
             Current OmnoviaHostedArchiveProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.OmnoviaHostedArchiveParticipantProvider">
            <summary>
             Current OmnoviaHostedArchiveParticipantProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductProvider">
            <summary>
             Current ProductProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductRateProvider">
            <summary>
             Current ProductRateProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.PrevInvoicesProvider">
            <summary>
             Current PrevInvoicesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.OmnoviaMp4RequestProvider">
            <summary>
             Current OmnoviaMp4RequestProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.SystemExtensionLabelProvider">
            <summary>
             Current SystemExtensionLabelProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.VerticalProvider">
            <summary>
             Current VerticalProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.SystemSettingsProvider">
            <summary>
             Current SystemSettingsProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketProductProvider">
            <summary>
             Current TicketProductProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketStatusProvider">
            <summary>
             Current TicketStatusProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketPriorityProvider">
            <summary>
             Current TicketPriorityProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.UserProvider">
            <summary>
             Current UserProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ValidTicketStateChangesProvider">
            <summary>
             Current ValidTicketStateChangesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.User_MarketingServiceProvider">
            <summary>
             Current User_MarketingServiceProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Moderator_FeatureProvider">
            <summary>
             Current Moderator_FeatureProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.UtilProvider">
            <summary>
             Current UtilProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketCategoryProvider">
            <summary>
             Current TicketCategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TaxableProvider">
            <summary>
             Current TaxableProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.WholesalerProvider">
            <summary>
             Current WholesalerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketProvider">
            <summary>
             Current TicketProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.WelcomeKitRequestProvider">
            <summary>
             Current WelcomeKitRequestProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Wholesaler_ProductProvider">
            <summary>
             Current Wholesaler_ProductProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.SalesPersonProvider">
            <summary>
             Current SalesPersonProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.MarketingServiceProvider">
            <summary>
             Current MarketingServiceProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ModeratorProvider">
            <summary>
             Current ModeratorProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ParticipantProvider">
            <summary>
             Current ParticipantProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Moderator_DnisProvider">
            <summary>
             Current Moderator_DnisProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ParticipantListProvider">
            <summary>
             Current ParticipantListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempReplayIdsProvider">
            <summary>
             Current TempReplayIdsProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempExistingCodesProvider">
            <summary>
             Current TempExistingCodesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempCodesProvider">
            <summary>
             Current TempCodesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempCodeChangesProvider">
            <summary>
             Current TempCodeChangesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempSampleRatesPerProductProvider">
            <summary>
             Current TempSampleRatesPerProductProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TempTotalDollarsSpentProvider">
            <summary>
             Current TempTotalDollarsSpentProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.RatedCdrProvider">
            <summary>
             Current RatedCdrProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TrendProvider">
            <summary>
             Current TrendProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketUserAssociationsProvider">
            <summary>
             Current TicketUserAssociationsProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.TicketStatusHistoryProvider">
            <summary>
             Current TicketStatusHistoryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ProductRateValueProvider">
            <summary>
             Current ProductRateValueProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadPeriodProvider">
            <summary>
             Current LeadPeriodProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.DnisProvider">
            <summary>
             Current DnisProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadChurnReasonProvider">
            <summary>
             Current LeadChurnReasonProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.DnisTypeProvider">
            <summary>
             Current DnisTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CompanyProvider">
            <summary>
             Current CompanyProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ClientNotesProvider">
            <summary>
             Current ClientNotesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CharityProvider">
            <summary>
             Current CharityProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CallFlowProvider">
            <summary>
             Current CallFlowProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CommissionProvider">
            <summary>
             Current CommissionProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CommissionCustomerProvider">
            <summary>
             Current CommissionCustomerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CompanyInfoProvider">
            <summary>
             Current CompanyInfoProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CurveProvider">
            <summary>
             Current CurveProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CompanyLeadTrackingProvider">
            <summary>
             Current CompanyLeadTrackingProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ConferencingSummaryProvider">
            <summary>
             Current ConferencingSummaryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BridgeTypeProvider">
            <summary>
             Current BridgeTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CompanyLeadTrackingNotesProvider">
            <summary>
             Current CompanyLeadTrackingNotesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BridgeRequestTypeProvider">
            <summary>
             Current BridgeRequestTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AdminSiteNotesProvider">
            <summary>
             Current AdminSiteNotesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ActionTypeProvider">
            <summary>
             Current ActionTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ActionProvider">
            <summary>
             Current ActionProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AccountManagerProvider">
            <summary>
             Current AccountManagerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AccessType_ProductRateProvider">
            <summary>
             Current AccessType_ProductRateProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AdminSiteNotesHistoryProvider">
            <summary>
             Current AdminSiteNotesHistoryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AreaCodeNxxProvider">
            <summary>
             Current AreaCodeNxxProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AuditLogProvider">
            <summary>
             Current AuditLogProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BridgeRequestProvider">
            <summary>
             Current BridgeRequestProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BridgeProvider">
            <summary>
             Current BridgeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BillableLegsProvider">
            <summary>
             Current BillableLegsProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerProvider">
            <summary>
             Current CustomerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.AverageRatesProvider">
            <summary>
             Current AverageRatesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.BridgeQueueProvider">
            <summary>
             Current BridgeQueueProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ForExProvider">
            <summary>
             Current ForExProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Customer_DnisProvider">
            <summary>
             Current Customer_DnisProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.FeatureOptionTypeProvider">
            <summary>
             Current FeatureOptionTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.FeatureProvider">
            <summary>
             Current FeatureProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.GlPostingTypeProvider">
            <summary>
             Current GlPostingTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.FeatureOptionProvider">
            <summary>
             Current FeatureOptionProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.InvoiceChargesProvider">
            <summary>
             Current InvoiceChargesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.InvoiceNotesProvider">
            <summary>
             Current InvoiceNotesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LeadProvider">
            <summary>
             Current LeadProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.LanguageProvider">
            <summary>
             Current LanguageProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.IrWholesalerProvider">
            <summary>
             Current IrWholesalerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.InvoiceSummaryProvider">
            <summary>
             Current InvoiceSummaryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ExtensionTypeCategoryProvider">
            <summary>
             Current ExtensionTypeCategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ExtensionTypeProvider">
            <summary>
             Current ExtensionTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EventManagerProvider">
            <summary>
             Current EventManagerProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerTransactionImportProvider">
            <summary>
             Current CustomerTransactionImportProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerReviewProvider">
            <summary>
             Current CustomerReviewProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerDocumentProvider">
            <summary>
             Current CustomerDocumentProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Customer_FeatureProvider">
            <summary>
             Current Customer_FeatureProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerTransactionTypeProvider">
            <summary>
             Current CustomerTransactionTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.DepartmentProvider">
            <summary>
             Current DepartmentProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.ErrorCodesProvider">
            <summary>
             Current ErrorCodesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EmailTemplateProvider">
            <summary>
             Current EmailTemplateProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.EmailNotificationProvider">
            <summary>
             Current EmailNotificationProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.CustomerTransactionProvider">
            <summary>
             Current CustomerTransactionProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.DocumentTypeProvider">
            <summary>
             Current DocumentTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Wholesaler_Product_FeatureProvider">
            <summary>
             Current Wholesaler_Product_FeatureProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_AccessType_ProductRatesProvider">
            <summary>
             Current Vw_AccessType_ProductRatesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_ConferenceCallList_UniqueProvider">
            <summary>
             Current Vw_ConferenceCallList_UniqueProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_ConferenceListProvider">
            <summary>
             Current Vw_ConferenceListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_CustomerListProvider">
            <summary>
             Current Vw_CustomerListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_CustomerTransactionListProvider">
            <summary>
             Current Vw_CustomerTransactionListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_DefaultProductRatesProvider">
            <summary>
             Current Vw_DefaultProductRatesProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_FeatureOptionsForCustomersProvider">
            <summary>
             Current Vw_FeatureOptionsForCustomersProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_FeatureOptionsForModeratorsProvider">
            <summary>
             Current Vw_FeatureOptionsForModeratorsProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_ModeratorListProvider">
            <summary>
             Current Vw_ModeratorListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_ModeratorList_AdminSiteProvider">
            <summary>
             Current Vw_ModeratorList_AdminSiteProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_RecordingListProvider">
            <summary>
             Current Vw_RecordingListProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_SystemExtension_AllProvider">
            <summary>
             Current Vw_SystemExtension_AllProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_SystemExtension_CustomerLabelProvider">
            <summary>
             Current Vw_SystemExtension_CustomerLabelProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_SystemExtension_ValueProvider">
            <summary>
             Current Vw_SystemExtension_ValueProviderBase instance.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProvider.Vw_UserListProvider">
            <summary>
             Current Vw_UserListProviderBase instance.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodeChangesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempCodeChangesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempCodeChangesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChangesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChangesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key tempCodeChanges_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the tempCodeChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodeChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempCodeChanges},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempCodeChanges&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempCodeChanges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempCodeChanges"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodeChanges"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempCodeChanges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempCodeChanges"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodeChanges"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChanges,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodeChanges"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempCodeChanges Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodeChanges,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempCodeChanges object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempCodeChanges instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempCodeChanges Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TaxableProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TaxableProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TaxableKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TaxableKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Taxable_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Taxable"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Taxable},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Taxable&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Taxable)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Taxable"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Taxable"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Taxable)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Taxable"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Taxable"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Taxable,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Taxable"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Taxable Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Taxable,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Taxable object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Taxable instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Taxable Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TaxableChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Taxable</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TaxableChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>Taxable</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TaxableChildEntityTypes.WholesalerCollection">
            <summary>
             Collection of <c>Taxable</c> as OneToMany for WholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TaxableChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>Taxable</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TaxableFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Taxable"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxableFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TaxableParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Taxable"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxableParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TaxableParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PromptSetProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.PromptSetProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.PromptSetProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.PromptSetProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSetKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PromptSet_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PromptSet"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.PromptSet},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;PromptSet&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.PromptSet)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.PromptSet"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PromptSet"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.PromptSet)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.PromptSet"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PromptSet"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSet,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PromptSet"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.PromptSet Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.PromptSet,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.PromptSet object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.PromptSet instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.PromptSet Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4RequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4RequestKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_OmnoviaMP4Request index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaMP4Request index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaMp4Request},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;OmnoviaMp4Request&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.OmnoviaMp4Request)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.OmnoviaMp4Request)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4Request,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaMp4Request Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaMp4Request,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.OmnoviaMp4Request object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.OmnoviaMp4Request instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaMp4Request Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaMp4RequestChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.OmnoviaMp4Request</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaMp4RequestFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaMp4RequestParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaMp4RequestParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipantKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipantKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchiveParticipant_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetListByHostedArchiveID(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetListByHostedArchiveID(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetListByHostedArchiveID(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.GetListByHostedArchiveID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchiveParticipant_GetListByHostedArchiveID' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaHostedArchiveParticipant},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;OmnoviaHostedArchiveParticipant&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.OmnoviaHostedArchiveParticipant)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.OmnoviaHostedArchiveParticipant)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipant,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaHostedArchiveParticipant Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveParticipant,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.OmnoviaHostedArchiveParticipant object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchiveParticipant instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaHostedArchiveParticipant Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Moderator_DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_DnisKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dnisid">. Primary Key.</param>
            <param name="_moderatorId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid">. Primary Key.</param>
            <param name="_moderatorId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	DNIS_Moderator_DNIS_FK1 Description: 
            </summary>
            <param name="_dnisid"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	DNIS_Moderator_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	DNIS_Moderator_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	dnis_Moderator_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	dnis_Moderator_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_dnisid"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_Moderator_DNIS_FK1 key.
            	DNIS_Moderator_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Moderator_Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_DnisKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Moderator_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByDnisidModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DNIS_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Moderator_Dnis},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Moderator_Dnis&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Moderator_Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Moderator_Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Dnis,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Moderator_Dnis Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator_Dnis,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Moderator_Dnis object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Moderator_Dnis instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Moderator_Dnis Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_DnisChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Moderator_Dnis</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Moderator_DnisChildEntityTypes.Dnis">
            <summary>
             Composite Property for <c>Dnis</c> at DnisidSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Moderator_DnisChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_DnisFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Moderator_DnisFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_DnisParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Moderator_DnisParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_DnisParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceSummaryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceSummaryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceSummaryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummaryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	FK_InvoiceSummary_Customer Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	FK_InvoiceSummary_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	FK_InvoiceSummary_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	fk_InvoiceSummary_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	fk_InvoiceSummary_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_InvoiceSummary_Customer key.
            	FK_InvoiceSummary_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.InvoiceSummary objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummaryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoicesSummary_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceSummary"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_PriCustomerNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="_invoiceNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="_invoiceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_invoiceNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_invoiceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="_invoiceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByInvoiceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_InvoiceNum index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_invoiceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoicesSummary_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummary(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummary(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummary(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummaryForInvoiceEmail(System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummaryForInvoiceEmail(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummaryForInvoiceEmail(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetInvoiceSummaryForInvoiceEmail(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetInvoiceSummaryForInvoiceEmail' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummary(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummary(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummary(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummary' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceDetails(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceDetails' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceDetails(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceDetails' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceDetails(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceDetails' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceDetails(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceDetails' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummaryTest(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummaryTest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummaryTest(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummaryTest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummaryTest(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummaryTest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.GetServiceSummaryTest(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_InvoiceSummary_GetServiceSummaryTest' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.InvoiceSummary},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;InvoiceSummary&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.InvoiceSummary)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceSummary"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceSummary"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.InvoiceSummary)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceSummary"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceSummary"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummary,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceSummary"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceSummary Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceSummary,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.InvoiceSummary object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.InvoiceSummary instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceSummary Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailTemplateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EmailTemplateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	CallFlow_EmailTemplates_FK Description: 
            </summary>
            <param name="_callFlowId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	CallFlow_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	CallFlow_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	callFlow_EmailTemplates_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_callFlowId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	callFlow_EmailTemplates_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_callFlowId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_EmailTemplates_FK key.
            	CallFlow_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	FK_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	FK_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	FK_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	fk_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	fk_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmailTemplates_Wholesaler key.
            	FK_EmailTemplates_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	Language_EmailTemplates_FK Description: 
            </summary>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	Language_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	Language_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	language_EmailTemplates_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	language_EmailTemplates_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_EmailTemplates_FK key.
            	Language_EmailTemplates_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.EmailTemplate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key EmailTemplates_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key EmailTemplates_UC1 index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateNamePriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmailTemplates_UC1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailTemplate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetByWholesalerIdTemplateName(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailTemplate_WholesalerID_TemplateName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_templateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailTemplates(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailTemplates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="templateName"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailTemplates(System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailTemplates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="templateName"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailTemplates(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailTemplates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="templateName"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailTemplates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailTemplates' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="templateName"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailInfo(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailInfo(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailInfo(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.GetEmailInfo(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_EmailTemplate_GetEmailInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="recordingId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.EmailTemplate},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;EmailTemplate&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.EmailTemplate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EmailTemplate"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailTemplate"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.EmailTemplate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EmailTemplate"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailTemplate"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplate,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailTemplate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.EmailTemplate Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailTemplate,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.EmailTemplate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.EmailTemplate instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.EmailTemplate Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailTemplateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.EmailTemplate</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.EmailTemplateChildEntityTypes.CallFlow">
            <summary>
             Composite Property for <c>CallFlow</c> at CallFlowIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.EmailTemplateChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.EmailTemplateChildEntityTypes.Language">
            <summary>
             Composite Property for <c>Language</c> at LanguageIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailTemplateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailTemplate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmailTemplateFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailTemplateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailTemplate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmailTemplateParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailTemplateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AverageRatesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AverageRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AverageRatesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AverageRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRatesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.Delete(System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usageMonth">. Primary Key.</param>
            <param name="_productRateId">. Primary Key.</param>
            <param name="_wholesalerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_usageMonth">. Primary Key.</param>
            <param name="_productRateId">. Primary Key.</param>
            <param name="_wholesalerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRatesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(System.DateTime,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key AverageRates_PK index.
            </summary>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(System.DateTime,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.GetByUsageMonthProductRateIdWholesalerId(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AverageRates_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_usageMonth"></param>
            <param name="_productRateId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AverageRates"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AverageRates},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AverageRates&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AverageRates)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AverageRates"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AverageRates"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AverageRates)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AverageRates"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AverageRates"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRates,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AverageRates"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AverageRates Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AverageRates,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AverageRates object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AverageRates instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AverageRates Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ModeratorListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_ModeratorList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_ModeratorList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_DefaultProductRates},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_DefaultProductRates)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_DefaultProductRatesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_DefaultProductRatesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_DefaultProductRatesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:CONFDB.Data.Bases.WholesalerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.WholesalerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TrendProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TrendProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TrendKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.Delete(System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wholesalerId">. Primary Key.</param>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId">. Primary Key.</param>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TrendKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Trend index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.GetByWholesalerIdCustomerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Trend index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Trend"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Trend},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Trend&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Trend)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Trend"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Trend"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Trend)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Trend"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Trend"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Trend,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Trend"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Trend Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Trend,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Trend object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Trend instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Trend Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TrendChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Trend</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TrendFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Trend"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrendFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrendFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrendFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TrendParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Trend"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrendParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrendParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TrendParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrendParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id123">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id123">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TempTotalDollarsSpent_PK index.
            </summary>
            <param name="_id123"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="_id123"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id123"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id123"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="_id123"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetById123(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempTotalDollarsSpent_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id123"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.GetByPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TempTotalDollarsSpent_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempTotalDollarsSpent},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempTotalDollarsSpent&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempTotalDollarsSpent)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempTotalDollarsSpent)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpent,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempTotalDollarsSpent Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempTotalDollarsSpent,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempTotalDollarsSpent object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempTotalDollarsSpent instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempTotalDollarsSpent Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempTotalDollarsSpentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempTotalDollarsSpent</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempTotalDollarsSpentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempTotalDollarsSpentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempTotalDollarsSpentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempReplayIdsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempReplayIdsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempReplayIdsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIdsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_replayId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIdsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TempReplayIDs_PK index.
            </summary>
            <param name="_replayId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="_replayId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="_replayId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.GetByReplayId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempReplayIDs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_replayId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempReplayIds"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempReplayIds},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempReplayIds&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempReplayIds)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempReplayIds"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempReplayIds"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempReplayIds)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempReplayIds"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempReplayIds"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIds,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempReplayIds"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempReplayIds Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempReplayIds,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempReplayIds object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempReplayIds instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempReplayIds Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PromptSetChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.PromptSet</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.PromptSetChildEntityTypes.DnisCollection">
            <summary>
             Collection of <c>PromptSet</c> as OneToMany for DnisCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.PromptSetFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PromptSet"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PromptSetFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PromptSetParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PromptSet"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PromptSetParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PromptSetParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ParticipantProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	FK_Participant_ParticipantList Description: 
            </summary>
            <param name="_participantListId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	FK_Participant_ParticipantList Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_participantListId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	FK_Participant_ParticipantList Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_participantListId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	fk_Participant_ParticipantList Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_participantListId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	fk_Participant_ParticipantList Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_participantListId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetByParticipantListId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Participant_ParticipantList key.
            	FK_Participant_ParticipantList Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_participantListId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Participant objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Participant_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Participant_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Participant"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Participant},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Participant&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Participant)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Participant"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Participant"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Participant)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Participant"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Participant"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Participant,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Participant"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Participant Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Participant,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Participant object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Participant instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Participant Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Participant</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ParticipantChildEntityTypes.ParticipantList">
            <summary>
             Composite Property for <c>ParticipantList</c> at ParticipantListIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Participant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ParticipantFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Participant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ParticipantParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	Product_Feature_FK1 Description: 
            </summary>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	Product_Feature_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	Product_Feature_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	product_Feature_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	product_Feature_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Feature_FK1 key.
            	Product_Feature_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Feature_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Features_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.GetByNameId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Features_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Feature},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Feature&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Feature"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Feature"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Feature"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Feature"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Feature,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Feature"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Feature Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Feature,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Feature object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Feature instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Feature Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Feature</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureChildEntityTypes.Wholesaler_Product_FeatureCollection">
            <summary>
             Collection of <c>Feature</c> as OneToMany for Wholesaler_Product_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureChildEntityTypes.Moderator_FeatureCollection">
            <summary>
             Collection of <c>Feature</c> as OneToMany for Moderator_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureChildEntityTypes.Customer_FeatureCollection">
            <summary>
             Collection of <c>Feature</c> as OneToMany for Customer_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureChildEntityTypes.FeatureOptionCollection">
            <summary>
             Collection of <c>Feature</c> as OneToMany for FeatureOptionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ExtensionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ExtensionType_1 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionType_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ExtensionType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ExtensionType_CategoryID index.
            </summary>
            <param name="_extensionTypeCategoryId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="_extensionTypeCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeCategoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="_extensionTypeCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.GetByExtensionTypeCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionType_CategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ExtensionType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ExtensionType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ExtensionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ExtensionType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ExtensionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ExtensionType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ExtensionType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ExtensionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ExtensionType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ExtensionType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ExtensionType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ExtensionTypeChildEntityTypes.ExtensionTypeCategory">
            <summary>
             Composite Property for <c>ExtensionTypeCategory</c> at ExtensionTypeCategoryIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ExtensionTypeChildEntityTypes.SystemExtensionLabelCollection">
            <summary>
             Collection of <c>ExtensionType</c> as OneToMany for SystemExtensionLabelCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DepartmentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DepartmentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.DepartmentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.DepartmentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Department_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Department_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Departments_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Departments_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Departments_Department index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Departments_Department index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Department_ParentID index.
            </summary>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByParentId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Department_ParentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_parentId">Used to point to a Parent Department record. This can be used to model Levels such as Regions with sub items or Cost Centers.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IU_Department_Unique_Name index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByWholesalerIdCustomerIdName(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IU_Department_Unique_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Department"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerIdCustom(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Department_GetByCustomerIdCustom' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerIdCustom(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Department_GetByCustomerIdCustom' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerIdCustom(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Department_GetByCustomerIdCustom' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.GetByCustomerIdCustom(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Department_GetByCustomerIdCustom' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Department},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Department&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Department)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Department"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Department"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Department)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Department"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Department"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Department,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Department"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Department Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Department,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Department object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Department instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Department Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DepartmentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Department</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DepartmentChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DepartmentChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DepartmentChildEntityTypes.ModeratorCollection">
            <summary>
             Collection of <c>Department</c> as OneToMany for ModeratorCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DepartmentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DepartmentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DepartmentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CharityProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CharityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CharityKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CharityKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Charity index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Charity index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Charity"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Charity},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Charity&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Charity)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Charity"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Charity"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Charity)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Charity"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Charity"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Charity,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Charity"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Charity Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Charity,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Charity object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Charity instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Charity Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CharityChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Charity</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CharityChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>Charity</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CharityFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Charity"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CharityFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CharityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CharityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CharityParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Charity"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CharityParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CharityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CharityParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CharityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccessTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccessTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key AccessType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(System.Int32,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_AccessType_Value_ID index.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByIdNameValue(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_value"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_AccessType_Value index.
            </summary>
            <param name="_value"></param>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="_value"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(CONFDB.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_value"></param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_value"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="_value"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByValueName(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_Value index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_value"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key UX_AccessType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_AccessType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AccessType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AccessType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AccessType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccessType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AccessType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccessType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AccessType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AccessType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AccessType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AccessType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_RecordingListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_RecordingListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_RecordingListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_RecordingListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_RecordingList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_RecordingList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_ModeratorList_AdminSite},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_ModeratorList_AdminSite)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_ProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Wholesaler_ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Wholesaler_ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	Product_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	Product_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	Product_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	product_Wholesaler_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	product_Wholesaler_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_Wholesaler_Product_FK1 key.
            	Product_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	Wholesaler_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	Wholesaler_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	Wholesaler_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	wholesaler_Wholesaler_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	wholesaler_Wholesaler_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Wholesaler_Product_FK1 key.
            	Wholesaler_Wholesaler_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_ProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Wholesaler_Product_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.GetByWholesalerIdProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Product_CusotmerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.InstallDefaults(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.InstallDefaults(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Wholesaler_Product_InstallDefaults' stored procedure. 
            </summary>
            <param name="wholesaler_ProductId"> A <c>System.Int32?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler_Product},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Wholesaler_Product&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Wholesaler_Product)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Wholesaler_Product)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler_Product Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Wholesaler_Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler_Product Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.UtilProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.UtilProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.UtilKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.UtilKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_UTIL index.
            </summary>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UTIL index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">NOT A REAL TABLE. Just Used to Gen. UTIL SP's that can be called from NTier Objects.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Util"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductFeatures(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
            </summary>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductFeatures(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
            </summary>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductFeatures(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
            </summary>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductFeatures' stored procedure. 
            </summary>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPaymentReversals(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPaymentReversals(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPaymentReversals(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPaymentReversals(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPaymentReversals' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_DoBillingRun(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_DoBillingRun(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_DoBillingRun(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_DoBillingRun(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_DoBillingRun' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GeneratePassword(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GeneratePassword(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GeneratePassword(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GeneratePassword(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GeneratePassword' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int32?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSEnd">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSEnd(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSEnd(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSEnd(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSEnd' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_PostMonthlyCharges(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_PostMonthlyCharges(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_PostMonthlyCharges(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_PostMonthlyCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_PostMonthlyCharges' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="postedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateTrends">
            <summary>
            This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateTrends(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateTrends(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateTrends(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateTrends' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.TestUserCodes(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@,System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
            </summary>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
            <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.TestUserCodes(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@,System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
            </summary>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
            <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.TestUserCodes(CONFDB.Data.TransactionManager,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@,System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
            </summary>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
            <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.TestUserCodes(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@,System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_UTIL_TestUserCodes' stored procedure. 
            </summary>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeValid"> A <c>System.Boolean?</c> instance.</param>
            <param name="partCodeVaild"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_CalculateFreeCredits">
            <summary>
            This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_CalculateFreeCredits(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_CalculateFreeCredits(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_CalculateFreeCredits(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_CalculateFreeCredits' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator2(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator2(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator2(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator2(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator2' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GenerateRandomString(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int16},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
            </summary>
            <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
            <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="charactersToUse"> A <c>System.String</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GenerateRandomString(System.Int32,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int16},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
            </summary>
            <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
            <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="charactersToUse"> A <c>System.String</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GenerateRandomString(CONFDB.Data.TransactionManager,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int16},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
            </summary>
            <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
            <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="charactersToUse"> A <c>System.String</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GenerateRandomString(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int16},System.String@)">
            <summary>
            This method wrap the 'p_UTIL_GenerateRandomString' stored procedure. 
            </summary>
            <param name="useNumbers"> A <c>System.Boolean?</c> instance.</param>
            <param name="useLowerCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="useUpperCase"> A <c>System.Boolean?</c> instance.</param>
            <param name="charactersToUse"> A <c>System.String</c> instance.</param>
            <param name="passwordLength"> A <c>System.Int16?</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.CalculateTax(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="amount"> A <c>System.Decimal?</c> instance.</param>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateName"> A <c>System.String</c> instance.</param>
            <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
            <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.CalculateTax(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="amount"> A <c>System.Decimal?</c> instance.</param>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateName"> A <c>System.String</c> instance.</param>
            <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
            <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.CalculateTax(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="amount"> A <c>System.Decimal?</c> instance.</param>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateName"> A <c>System.String</c> instance.</param>
            <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
            <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.CalculateTax(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_UTIL_CalculateTax' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="amount"> A <c>System.Decimal?</c> instance.</param>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateName"> A <c>System.String</c> instance.</param>
            <param name="federalTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="federalTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localTaxAmount"> A <c>System.Decimal?</c> instance.</param>
            <param name="localOnFederalTax"> A <c>System.Boolean?</c> instance.</param>
            <param name="productRateTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="customerTaxableValue"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices_Bak(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices_Bak(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices_Bak(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices_Bak(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices_Bak' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditsPreview(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
            </summary>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditsPreview(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
            </summary>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditsPreview(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
            </summary>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditsPreview(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditsPreview' stored procedure. 
            </summary>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_BACKUP_INVOICING_TABLES">
            <summary>
            This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_BACKUP_INVOICING_TABLES(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_BACKUP_INVOICING_TABLES(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_BACKUP_INVOICING_TABLES(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_INV_BACKUP_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductRates(System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductRates(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductRates(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="sellRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSStart(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSStart(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSStart(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_Mark_BillableCDRSStart(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_Mark_BillableCDRSStart' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutOff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoicesXERO(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoicesXERO(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoicesXERO(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoicesXERO(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoicesXERO' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportCreditMemos(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportCreditMemos(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportCreditMemos(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportCreditMemos(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportCreditMemos' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateInvoices(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateInvoices' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="enddate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushProductRatesThatDontExistToWholesalerAndAll(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushProductRatesThatDontExistToWholesalerAndAll(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushProductRatesThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushProductRatesThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_PushProductRatesThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="productId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateModeratorXTimeUser">
            <summary>
            This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateModeratorXTimeUser(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateModeratorXTimeUser(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PopulateModeratorXTimeUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_UTIL_PopulateModeratorXTimeUser' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetReportData(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_GetReportData' stored procedure. 
            </summary>
            <param name="reportType"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetReportData(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_GetReportData' stored procedure. 
            </summary>
            <param name="reportType"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetReportData(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_GetReportData' stored procedure. 
            </summary>
            <param name="reportType"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.GetReportData(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_GetReportData' stored procedure. 
            </summary>
            <param name="reportType"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditWSProductRates(System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditWSProductRates(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditWSProductRates(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.BulkEditWSProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_UTIL_BulkEditWSProductRates' stored procedure. 
            </summary>
            <param name="productRateId"> A <c>System.Int32?</c> instance.</param>
            <param name="buyRate"> A <c>System.Decimal?</c> instance.</param>
            <param name="bulkEditType"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="companyId"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateCommissions(System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateCommissions(System.Int32,System.Int32,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateCommissions(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_GenerateCommissions(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_INV_GenerateCommissions' stored procedure. 
            </summary>
            <param name="startdate"> A <c>System.DateTime?</c> instance.</param>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="billingPeriodCutoff"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPayments(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPayments(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPayments(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportPayments(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportPayments' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_Trends(System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_Trends(System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_Trends(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_Trends(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_Trends' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_RevenueByModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_RevenueByModerator' stored procedure. 
            </summary>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_REPOST_TRANSACTIONS_AFTER_ROLLBACK' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_GrossProfit(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_GrossProfit(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_GrossProfit(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.MGMTRPT_GrossProfit(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_UTIL_MGMTRPT_GrossProfit' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_EnableInvoiceEmailer(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_EnableInvoiceEmailer(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_EnableInvoiceEmailer(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_EnableInvoiceEmailer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_INV_EnableInvoiceEmailer' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushFeatureThatDontExistToWholesalerAndAll(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushFeatureThatDontExistToWholesalerAndAll(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushFeatureThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.PushFeatureThatDontExistToWholesalerAndAll(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_UTIL_PushFeatureThatDontExistToWholesalerAndAll' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="updateWholesaler"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateCustomer"> A <c>System.Boolean?</c> instance.</param>
            <param name="updateModerator"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_ROLLBACK_INVOICING_TABLES(System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_ROLLBACK_INVOICING_TABLES(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_ROLLBACK_INVOICING_TABLES(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.INV_ROLLBACK_INVOICING_TABLES(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_UTIL_INV_ROLLBACK_INVOICING_TABLES' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoices(System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoices(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoices(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Accounting_ExportInvoices(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_UTIL_Accounting_ExportInvoices' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Util},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Util&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Util)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Util"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Util"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Util)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Util"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Util"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Util,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Util"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Util Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Util,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Util object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Util instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Util Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.UtilChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Util</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.UtilFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Util"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UtilFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.UtilParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Util"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UtilParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UtilParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.User_MarketingServiceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingServiceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_marketingServiceId">. Primary Key.</param>
            <param name="_userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId">. Primary Key.</param>
            <param name="_userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	FK_User_MarketingService_User Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	FK_User_MarketingService_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	FK_User_MarketingService_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	fk_User_MarketingService_User Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	fk_User_MarketingService_User Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_User key.
            	FK_User_MarketingService_User Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	FK_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="_marketingServiceId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	FK_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	FK_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	fk_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_marketingServiceId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	fk_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_marketingServiceId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_MarketingService_MarketingService key.
            	FK_User_MarketingService_MarketingService Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User_MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingServiceKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_User_MarketingService index.
            </summary>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.GetByMarketingServiceIdUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User_MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.User_MarketingService},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;User_MarketingService&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.User_MarketingService)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.User_MarketingService"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User_MarketingService"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.User_MarketingService)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.User_MarketingService"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User_MarketingService"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingService,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User_MarketingService"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.User_MarketingService Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.User_MarketingService,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.User_MarketingService object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.User_MarketingService instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.User_MarketingService Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.User_MarketingServiceChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.User_MarketingService</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.User_MarketingServiceChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at UserIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.User_MarketingServiceChildEntityTypes.MarketingService">
            <summary>
             Composite Property for <c>MarketingService</c> at MarketingServiceIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.User_MarketingServiceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User_MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.User_MarketingServiceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User_MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the User_MarketingServiceParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.User_MarketingServiceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketPriorityProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketPriorityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriorityKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriorityKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketPriority_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketPriority_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketPriority"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketPriority},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketPriority&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketPriority)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketPriority"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketPriority"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketPriority)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketPriority"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketPriority"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriority,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketPriority"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketPriority Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketPriority,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketPriority object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketPriority instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketPriority Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketPriorityChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketPriority</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketPriorityChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>TicketPriority</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketPriorityFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketPriority"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketPriorityFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketPriorityParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketPriority"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketPriorityParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketPriorityParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempSampleRatesPerProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempSampleRatesPerProduct},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempSampleRatesPerProduct&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempSampleRatesPerProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempSampleRatesPerProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProduct,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempSampleRatesPerProduct Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempSampleRatesPerProduct,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempSampleRatesPerProduct object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempSampleRatesPerProduct instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempSampleRatesPerProduct Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempSampleRatesPerProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempSampleRatesPerProduct</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempSampleRatesPerProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempSampleRatesPerProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempSampleRatesPerProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemExtensionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	FK_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="_systemExtensionLabelId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	FK_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	FK_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	fk_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_systemExtensionLabelId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	fk_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_SystemExtensionLabel key.
            	FK_SystemExtension_SystemExtensionLabel Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtension objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ModeratorExtension index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ModeratorExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SystemExtension index.
            </summary>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetBySystemExtensionLabelIdTableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_systemExtensionLabelId"></param>
            <param name="_tableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtension"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.AddSystemExtension(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_AddSystemExtension' stored procedure. 
            </summary>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="tableId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.AddSystemExtension(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_AddSystemExtension' stored procedure. 
            </summary>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="tableId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.AddSystemExtension(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_AddSystemExtension' stored procedure. 
            </summary>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="tableId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.AddSystemExtension(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_AddSystemExtension' stored procedure. 
            </summary>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="tableId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.EditReferenceValueByID(System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_SystemExtension_EditReferenceValueByID' stored procedure. 
            </summary>
            <param name="systemExtensionId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceValue"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.EditReferenceValueByID(System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_SystemExtension_EditReferenceValueByID' stored procedure. 
            </summary>
            <param name="systemExtensionId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceValue"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.EditReferenceValueByID(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_SystemExtension_EditReferenceValueByID' stored procedure. 
            </summary>
            <param name="systemExtensionId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceValue"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.EditReferenceValueByID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_SystemExtension_EditReferenceValueByID' stored procedure. 
            </summary>
            <param name="systemExtensionId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceValue"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetSystemExtensionForModerator(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_GetSystemExtensionForModerator' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetSystemExtensionForModerator(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_GetSystemExtensionForModerator' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetSystemExtensionForModerator(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_GetSystemExtensionForModerator' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.GetSystemExtensionForModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_SystemExtension_GetSystemExtensionForModerator' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="extensionTypeCategoryId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.SystemExtension},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;SystemExtension&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.SystemExtension)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemExtension"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtension"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.SystemExtension)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemExtension"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtension"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtension,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtension"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.SystemExtension Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtension,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.SystemExtension object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.SystemExtension instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.SystemExtension Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.SystemExtension</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SystemExtensionChildEntityTypes.SystemExtensionLabel">
            <summary>
             Composite Property for <c>SystemExtensionLabel</c> at SystemExtensionLabelIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtension"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtension"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatedCdrProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RatedCdrProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdrKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	AccessType_RatedCDR_FK Description: 
            </summary>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	AccessType_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	AccessType_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	accessType_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	accessType_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_RatedCDR_FK key.
            	AccessType_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	Bridge_RatedCDR_FK Description: 
            </summary>
            <param name="_bridgeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	Bridge_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	Bridge_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	bridge_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	bridge_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBridgeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_RatedCDR_FK key.
            	Bridge_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	Wholesaler_RatedCDR_FK Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	Wholesaler_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	Wholesaler_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	wholesaler_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	wholesaler_RatedCdr_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_RatedCDR_FK key.
            	Wholesaler_RatedCDR_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RatedCdr objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdrKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(System.Guid)">
            <summary>
            	Gets rows from the datasource based on the primary key RatedCDR_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the RatedCDR_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatedCdr"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByAccessTypeIdBridgeProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_AccessTypeID_BridgeProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_bridgeProductRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_MatterNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="_uniqueConferenceId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="_uniqueConferenceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_uniqueConferenceId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_uniqueConferenceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="_uniqueConferenceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetByUniqueConferenceId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_UniqueConferenceID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_uniqueConferenceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer3(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer3' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer3(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer3' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer3(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer3' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer3(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer3' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.SetBillingCode(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_SetBillingCode' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="uniqueConferenceId"> A <c>System.String</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.SetBillingCode(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_SetBillingCode' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="uniqueConferenceId"> A <c>System.String</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.SetBillingCode(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_SetBillingCode' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="uniqueConferenceId"> A <c>System.String</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.SetBillingCode(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_SetBillingCode' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="uniqueConferenceId"> A <c>System.String</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForCustomer(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForCustomer(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForCustomer(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer2(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer2' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer2(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer2' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer2(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer2' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallSummaryForCustomer2(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallSummaryForCustomer2' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="departmentId"> A <c>System.Int32?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="referenceNumber"> A <c>System.String</c> instance.</param>
            <param name="meetingName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForModerator(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForModerator' stored procedure. 
            </summary>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForModerator(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForModerator' stored procedure. 
            </summary>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForModerator(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForModerator' stored procedure. 
            </summary>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.GetCallDetailsForModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_RatedCDR_GetCallDetailsForModerator' stored procedure. 
            </summary>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="startTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="endTime"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.RatedCdr},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;RatedCdr&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.RatedCdr)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RatedCdr"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatedCdr"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.RatedCdr)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RatedCdr"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatedCdr"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdr,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatedCdr"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.RatedCdr Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.RatedCdr,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.RatedCdr object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.RatedCdr instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.RatedCdr Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatedCdrChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.RatedCdr</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RatedCdrChildEntityTypes.AccessType">
            <summary>
             Composite Property for <c>AccessType</c> at AccessTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RatedCdrChildEntityTypes.Bridge">
            <summary>
             Composite Property for <c>Bridge</c> at BridgeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RatedCdrChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RatedCdrChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RatedCdrFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatedCdr"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RatedCdrFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatedCdrParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatedCdr"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RatedCdrParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatedCdrParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorXtimeUserProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ModeratorXtimeUserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ModeratorXtimeUserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_moderatorId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUserKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ModeratorXTimeUser_PK index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ModeratorXTimeUser_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="_firstCallDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="_firstCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_firstCallDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_firstCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="_firstCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByFirstCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_FirstCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_firstCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="_thirdCallDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="_thirdCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_thirdCallDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_thirdCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="_thirdCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.GetByThirdCallDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ModeratorXTimeUser_ThirdCallDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_thirdCallDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.XTimeReport(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_ModeratorXTimeUser_XTimeReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="reportNumber"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.XTimeReport(System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_ModeratorXTimeUser_XTimeReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="reportNumber"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.XTimeReport(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_ModeratorXTimeUser_XTimeReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="reportNumber"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.XTimeReport(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_ModeratorXTimeUser_XTimeReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="reportNumber"> A <c>System.Int32?</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ModeratorXtimeUser},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ModeratorXtimeUser&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ModeratorXtimeUser)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ModeratorXtimeUser)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUser,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ModeratorXtimeUser Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorXtimeUser,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ModeratorXtimeUser object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ModeratorXtimeUser instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ModeratorXtimeUser Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadStageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadStageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadStageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadStageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key LeadStage_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadStage_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadStage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.LeadStage},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;LeadStage&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.LeadStage)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadStage"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadStage"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.LeadStage)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadStage"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadStage"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStage,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadStage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.LeadStage Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadStage,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.LeadStage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.LeadStage instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.LeadStage Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LanguageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LanguageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LanguageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LanguageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(System.String)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetByWholesalerIdFromIrWholesaler(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Language objects from the datasource by WholesalerID in the
            	IRWholesaler table. Table Language is related to table Wholesaler
            	through the (M:N) relationship defined in the IRWholesaler table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Language objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LanguageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Language_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Language"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Language},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Language&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Language)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Language"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Language"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Language)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Language"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Language"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Language,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Language Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Language,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Language instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Language Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceNotesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyInvoiceNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByStartDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodStart index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_startDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByEndDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_PeriodEnd index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_endDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_MonthlyInvoiceNotes_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.InvoiceNotes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;InvoiceNotes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.InvoiceNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceNotes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceNotes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.InvoiceNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceNotes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceNotes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceNotes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceNotes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceNotes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.InvoiceNotes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.InvoiceNotes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceNotes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ExtensionTypeCategory index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExtensionTypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="_categoryName"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.GetByCategoryName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ExtensionTypeCategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ExtensionTypeCategory},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ExtensionTypeCategory&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ExtensionTypeCategory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ExtensionTypeCategory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategory,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ExtensionTypeCategory Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ExtensionTypeCategory,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ExtensionTypeCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ExtensionTypeCategory instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ExtensionTypeCategory Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeCategoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ExtensionTypeCategory</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ExtensionTypeCategoryChildEntityTypes.ExtensionTypeCollection">
            <summary>
             Collection of <c>ExtensionTypeCategory</c> as OneToMany for ExtensionTypeCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeCategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeCategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ExtensionTypeCategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	FK_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="_leadPeriodId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	FK_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadPeriodId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	FK_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadPeriodId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	fk_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadPeriodId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	fk_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadPeriodId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadPeriodId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadPeriod key.
            	FK_CompanyLeadTracking_LeadPeriod Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadPeriodId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	FK_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="_companyInfoId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	FK_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyInfoId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	FK_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyInfoId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	fk_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyInfoId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	fk_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyInfoId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByCompanyInfoId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_CompanyInfo key.
            	FK_CompanyLeadTracking_CompanyInfo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyInfoId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	FK_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="_leadSourceId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	FK_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadSourceId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	FK_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadSourceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	fk_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadSourceId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	fk_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadSourceId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadSourceId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadSource key.
            	FK_CompanyLeadTracking_LeadSource Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadSourceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	FK_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="_leadChurnReasonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	FK_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadChurnReasonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	FK_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadChurnReasonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	fk_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadChurnReasonId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	fk_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadChurnReasonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadChurnReasonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadChurnReason key.
            	FK_CompanyLeadTracking_LeadChurnReason Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadChurnReasonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	FK_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="_leadProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	FK_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	FK_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	fk_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadProductId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	fk_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadProduct key.
            	FK_CompanyLeadTracking_LeadProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	FK_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="_leadStageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	FK_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadStageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	FK_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadStageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	fk_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadStageId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	fk_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_leadStageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetByLeadStageId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTracking_LeadStage key.
            	FK_CompanyLeadTracking_LeadStage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_leadStageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTracking objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CompanyLeadTracking_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTracking_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CompanyLeadTracking},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CompanyLeadTracking&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CompanyLeadTracking)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CompanyLeadTracking)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTracking,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CompanyLeadTracking Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTracking,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CompanyLeadTracking object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTracking instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CompanyLeadTracking Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CompanyLeadTracking</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.LeadPeriod">
            <summary>
             Composite Property for <c>LeadPeriod</c> at LeadPeriodIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.CompanyInfo">
            <summary>
             Composite Property for <c>CompanyInfo</c> at CompanyInfoIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.LeadSource">
            <summary>
             Composite Property for <c>LeadSource</c> at LeadSourceIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.LeadChurnReason">
            <summary>
             Composite Property for <c>LeadChurnReason</c> at LeadChurnReasonIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.LeadProduct">
            <summary>
             Composite Property for <c>LeadProduct</c> at LeadProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.LeadStage">
            <summary>
             Composite Property for <c>LeadStage</c> at LeadStageIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingChildEntityTypes.CompanyLeadTrackingNotesCollection">
            <summary>
             Collection of <c>CompanyLeadTracking</c> as OneToMany for CompanyLeadTrackingNotesCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyInfoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyInfoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	FK_CompanyInfo_Country Description: 
            </summary>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	FK_CompanyInfo_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	FK_CompanyInfo_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	fk_CompanyInfo_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	fk_CompanyInfo_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyInfo_Country key.
            	FK_CompanyInfo_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CompanyInfo_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyInfo_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CompanyInfo},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CompanyInfo&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CompanyInfo)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyInfo"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyInfo"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CompanyInfo)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyInfo"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyInfo"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfo,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CompanyInfo Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyInfo,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CompanyInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CompanyInfo instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CompanyInfo Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ClientNotesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ClientNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ClientNotesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ClientNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ClientNotes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ClientNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ClientNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ClientNotes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ClientNotes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ClientNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ClientNotes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ClientNotes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ClientNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ClientNotes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ClientNotes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ClientNotes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ClientNotes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ClientNotes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ClientNotes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ClientNotes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ClientNotes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CallFlowProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CallFlowProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlowKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlowKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CallFlow_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CallFlow"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CallFlow},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CallFlow&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CallFlow)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CallFlow"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CallFlow"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CallFlow)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CallFlow"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CallFlow"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlow,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CallFlow"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CallFlow Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CallFlow,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CallFlow object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CallFlow instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CallFlow Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CallFlowChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CallFlow</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CallFlowChildEntityTypes.DnisCollection">
            <summary>
             Collection of <c>CallFlow</c> as OneToMany for DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CallFlowChildEntityTypes.EmailTemplateCollection">
            <summary>
             Collection of <c>CallFlow</c> as OneToMany for EmailTemplateCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CallFlowFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CallFlow"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CallFlowFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CallFlowParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CallFlow"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CallFlowParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CallFlowParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BillableLegsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BillableLegsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(System.Guid)">
            <summary>
            	Gets rows from the datasource based on the primary key BillableLegs_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BillableLegs_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BillableLegs"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int16,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int16,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int16,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int16,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(System.String,System.Int16,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByConferenceIdBridgeIdWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int16,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ConfLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_conferenceId"></param>
            <param name="_bridgeId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdModeratorId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_CKSUM index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_CKSUM index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByWholesalerIdStartTimeEndTime(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_StartandEndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_startTime"></param>
            <param name="_endTime"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByReferenceNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_ReferenceNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_referenceNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.GetByBilledDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RatedCDR_BilledDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.BillableLegs},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;BillableLegs&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.BillableLegs)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BillableLegs"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BillableLegs"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.BillableLegs)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BillableLegs"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BillableLegs"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegs,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BillableLegs"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.BillableLegs Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.BillableLegs,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.BillableLegs object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.BillableLegs instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.BillableLegs Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BillableLegsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.BillableLegs</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BillableLegsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BillableLegs"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BillableLegsFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BillableLegsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BillableLegs"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BillableLegsParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BillableLegsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AverageRatesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AverageRates</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AverageRatesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AverageRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AverageRatesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AverageRatesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AverageRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AverageRatesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AverageRatesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AdminSiteNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key AdminSiteNotes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AdminSiteNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AdminSiteNotes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AdminSiteNotes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AdminSiteNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AdminSiteNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AdminSiteNotes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AdminSiteNotes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AdminSiteNotes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AdminSiteNotes</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AdminSiteNotesChildEntityTypes.AdminSiteNotesHistoryCollection">
            <summary>
             Collection of <c>AdminSiteNotes</c> as OneToMany for AdminSiteNotesHistoryCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ActionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	FK_Action_ActionType Description: 
            </summary>
            <param name="_actionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	FK_Action_ActionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	FK_Action_ActionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	fk_Action_ActionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_actionTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	fk_Action_ActionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_actionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetByActionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Action_ActionType key.
            	FK_Action_ActionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_actionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Action objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Action index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Action index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Action"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Action},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Action&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Action)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Action"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Action"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Action)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Action"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Action"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Action,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Action"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Action Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Action,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Action object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Action instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Action Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Action</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ActionChildEntityTypes.ActionType">
            <summary>
             Composite Property for <c>ActionType</c> at ActionTypeIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Action"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActionFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Action"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActionParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_SystemExtension_All},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_SystemExtension_All)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_FeatureOptionsForModerators},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_FeatureOptionsForModerators)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_CustomerListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_CustomerListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_CustomerList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_CustomerList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ConferenceListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ConferenceListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_ConferenceList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_ConferenceList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ValidTicketStateChangesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ValidTicketStateChangesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ValidTicketStateChangesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChangesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_fromStatusId">. Primary Key.</param>
            <param name="_toStatusId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId">. Primary Key.</param>
            <param name="_toStatusId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	FK_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="_fromStatusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	FK_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	FK_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	fk_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_fromStatusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	fk_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_fromStatusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus key.
            	FK_ValidTicketStateChanges_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	FK_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="_toStatusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	FK_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	FK_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	fk_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_toStatusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	fk_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_toStatusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ValidTicketStateChanges_TicketStatus1 key.
            	FK_ValidTicketStateChanges_TicketStatus1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ValidTicketStateChanges objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChangesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ValidTicketStateChanges_PK index.
            </summary>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.GetByFromStatusIdToStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ValidTicketStateChanges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ValidTicketStateChanges},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ValidTicketStateChanges&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ValidTicketStateChanges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ValidTicketStateChanges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChanges,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ValidTicketStateChanges Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ValidTicketStateChanges,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ValidTicketStateChanges object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ValidTicketStateChanges instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ValidTicketStateChanges Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketCategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketCategory_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketCategory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketCategory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketCategory},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketCategory&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketCategory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketCategory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketCategory"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketCategory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketCategory"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketCategory"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategory,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketCategory Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketCategory,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketCategory instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketCategory Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketCategoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketCategory</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketCategoryChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>TicketCategory</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketCategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketCategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketCategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketCategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketCategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketCategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParticipantUsageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RecordingParticipantUsageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RecordingParticipantUsageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	FK_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="_recordingId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	FK_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	FK_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	fk_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_recordingId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	fk_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_recordingId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetByRecordingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RecordingParticipantList_Recording1 key.
            	FK_RecordingParticipantList_Recording1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_recordingId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.RecordingParticipantUsage objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_RecordingParticipantList index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RecordingParticipantList index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.RecordingParticipantUsage},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;RecordingParticipantUsage&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.RecordingParticipantUsage)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.RecordingParticipantUsage)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsage,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.RecordingParticipantUsage Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.RecordingParticipantUsage,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.RecordingParticipantUsage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.RecordingParticipantUsage instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.RecordingParticipantUsage Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.PrevInvoicesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoicesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoicesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PrevInvoices_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PrevInvoices_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.PrevInvoices"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.PrevInvoices},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;PrevInvoices&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.PrevInvoices)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.PrevInvoices"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PrevInvoices"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.PrevInvoices)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.PrevInvoices"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PrevInvoices"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoices,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.PrevInvoices"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.PrevInvoices Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.PrevInvoices,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.PrevInvoices object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.PrevInvoices instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.PrevInvoices Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PrevInvoicesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.PrevInvoices</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.PrevInvoicesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PrevInvoices"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PrevInvoicesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.PrevInvoicesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PrevInvoices"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PrevInvoicesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.PrevInvoicesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadSourceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadSourceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSourceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSourceKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key LeadSource_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadSource_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadSource"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.LeadSource},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;LeadSource&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.LeadSource)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadSource"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadSource"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.LeadSource)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadSource"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadSource"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSource,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadSource"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.LeadSource Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadSource,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.LeadSource object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.LeadSource instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.LeadSource Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadSourceChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.LeadSource</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadSourceChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>LeadSource</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadSourceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadSource"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadSourceFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadSourceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadSource"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadSourceParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadSourceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChurnReasonProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadChurnReasonProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadChurnReasonProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReasonKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key LeadChurnReason_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadChurnReason_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.LeadChurnReason"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.LeadChurnReason},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;LeadChurnReason&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.LeadChurnReason)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadChurnReason"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadChurnReason"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.LeadChurnReason)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.LeadChurnReason"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadChurnReason"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReason,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.LeadChurnReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.LeadChurnReason Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadChurnReason,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.LeadChurnReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.LeadChurnReason instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.LeadChurnReason Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceChargesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceChargesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceChargesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key MonthlyCharges_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the MonthlyCharges_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.InvoiceCharges"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.InvoiceCharges},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;InvoiceCharges&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.InvoiceCharges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceCharges"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceCharges"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.InvoiceCharges)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.InvoiceCharges"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceCharges"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceCharges,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.InvoiceCharges"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceCharges Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.InvoiceCharges,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.InvoiceCharges object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.InvoiceCharges instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.InvoiceCharges Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceChargesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.InvoiceCharges</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceChargesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceCharges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceChargesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceChargesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceCharges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceChargesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceChargesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.GlPostingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_GLPostingType index.
            </summary>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GLPostingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">GLPostingType is used to store the types of different General Ledger posting types and thus used to group together their rules.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.GlPostingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_GLPostingType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_GLPostingType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.GlPostingType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;GlPostingType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.GlPostingType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.GlPostingType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.GlPostingType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.GlPostingType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.GlPostingType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.GlPostingType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.GlPostingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.GlPostingType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.GlPostingType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.GlPostingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.GlPostingType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.GlPostingType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.GlPostingTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.GlPostingType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.GlPostingTypeChildEntityTypes.CustomerTransactionTypeCollection">
            <summary>
             Collection of <c>GlPostingType</c> as OneToMany for CustomerTransactionTypeCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.GlPostingTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.GlPostingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GlPostingTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.GlPostingTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.GlPostingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GlPostingTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.GlPostingTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.DnisType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisTypeChildEntityTypes.DnisCollection">
            <summary>
             Collection of <c>DnisType</c> as OneToMany for DnisCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DnisType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DnisTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DnisType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DnisTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerDocumentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocumentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	Customer_CustomerDocument_FK Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	Customer_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	Customer_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	customer_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	customer_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerDocument_FK key.
            	Customer_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	Wholesaler_CustomerDocument_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	Wholesaler_CustomerDocument_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	Wholesaler_CustomerDocument_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	wholesaler_CustomerDocument_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	wholesaler_CustomerDocument_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerDocument_FK1 key.
            	Wholesaler_CustomerDocument_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	DocumentType_CustomerDocument_FK Description: 
            </summary>
            <param name="_documentTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	DocumentType_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_documentTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	DocumentType_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_documentTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	documentType_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_documentTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	documentType_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_documentTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByDocumentTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_CustomerDocument_FK key.
            	DocumentType_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_documentTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	Language_CustomerDocument_FK Description: 
            </summary>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	Language_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	Language_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	language_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	language_CustomerDocument_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_CustomerDocument_FK key.
            	Language_CustomerDocument_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerDocument objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocumentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerDocument_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerDocument_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerDocument"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CustomerDocument},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CustomerDocument&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CustomerDocument)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerDocument"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerDocument"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CustomerDocument)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerDocument"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerDocument"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocument,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerDocument"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CustomerDocument Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerDocument,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CustomerDocument object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CustomerDocument instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CustomerDocument Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerDocumentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CustomerDocument</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerDocumentChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerDocumentChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerDocumentChildEntityTypes.DocumentType">
            <summary>
             Composite Property for <c>DocumentType</c> at DocumentTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerDocumentChildEntityTypes.Language">
            <summary>
             Composite Property for <c>Language</c> at LanguageIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerDocumentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerDocument"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerDocumentFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerDocumentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerDocument"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerDocumentParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerDocumentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CurveProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CurveProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurveProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CurveProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CurveKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CurveKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Curve_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Curve_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Curve"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Curve},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Curve&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Curve)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Curve"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Curve"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Curve)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Curve"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Curve"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Curve,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Curve"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Curve Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Curve,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Curve object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Curve instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Curve Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	BridgeType_Bridge_FK Description: 
            </summary>
            <param name="_bridgeTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	BridgeType_Bridge_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	BridgeType_Bridge_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	bridgeType_Bridge_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	bridgeType_Bridge_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_bridgeTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetByBridgeTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_Bridge_FK key.
            	BridgeType_Bridge_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_bridgeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Bridge objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Bridge_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Bridge_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Bridge"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Bridge},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Bridge&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Bridge)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Bridge"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Bridge"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Bridge)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Bridge"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Bridge"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Bridge,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Bridge"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Bridge Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Bridge,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Bridge object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Bridge instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Bridge Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Bridge</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeChildEntityTypes.BridgeType">
            <summary>
             Composite Property for <c>BridgeType</c> at BridgeTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeChildEntityTypes.BridgeQueueCollection">
            <summary>
             Collection of <c>Bridge</c> as OneToMany for BridgeQueueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeChildEntityTypes.RatedCdrCollection">
            <summary>
             Collection of <c>Bridge</c> as OneToMany for RatedCdrCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Bridge"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Bridge"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AdminSiteNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ActionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ActionType index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ActionType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key UX_ActionType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ActionType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ActionType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ActionType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ActionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ActionType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ActionType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ActionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ActionType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ActionType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ActionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ActionType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ActionType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ActionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ActionType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ActionType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ActionType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ActionTypeChildEntityTypes.ActionCollection">
            <summary>
             Collection of <c>ActionType</c> as OneToMany for ActionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ActionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActionTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ActionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActionTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ActionTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessType_ProductRateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccessType_ProductRateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccessType_ProductRateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	AccessType_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	AccessType_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	AccessType_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	accessType_AccessType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	accessType_AccessType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_AccessType_ProductRate_FK1 key.
            	AccessType_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	ProductRate_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="_productRateId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	ProductRate_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	ProductRate_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	productRate_AccessType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	productRate_AccessType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_AccessType_ProductRate_FK1 key.
            	ProductRate_AccessType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccessType_ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AccessType_ProductRate index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_AccessType_ProductRate index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.GetByAccessTypeIdProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AccessType_ProductRate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AccessType_ProductRate},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AccessType_ProductRate&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AccessType_ProductRate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AccessType_ProductRate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRate,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AccessType_ProductRate Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AccessType_ProductRate,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AccessType_ProductRate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AccessType_ProductRate instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AccessType_ProductRate Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AccessType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccessTypeChildEntityTypes.DnisCollection">
            <summary>
             Collection of <c>AccessType</c> as OneToMany for DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccessTypeChildEntityTypes.AccessType_ProductRateCollection">
            <summary>
             Collection of <c>AccessType</c> as OneToMany for AccessType_ProductRateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccessTypeChildEntityTypes.RatedCdrCollection">
            <summary>
             Collection of <c>AccessType</c> as OneToMany for RatedCdrCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccessTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccessTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_ConferenceCallList_Unique},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_ConferenceCallList_Unique)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSessionEventArgs.#ctor(CONFDB.Data.Bases.DeepSession,System.String,System.Enum,CONFDB.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSessionEventArgs.#ctor(CONFDB.Data.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSessionEventArgs.#ctor(CONFDB.Data.Bases.DeepSession,System.String,System.Enum,CONFDB.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:CONFDB.Data.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,CONFDB.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,CONFDB.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:CONFDB.Data.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:CONFDB.Data.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:CONFDB.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.WelcomeKitRequestProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.WelcomeKitRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketPriorityProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketPriorityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempTotalDollarsSpentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TempCodes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempCodes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempCodes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempCodes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempCodes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempCodes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempCodes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempCodes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempCodes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempCodes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempCodes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SalesPersonProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SalesPersonProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SalesPersonProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SalesPersonProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPersonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	FK_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="_salesManagerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	FK_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesManagerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	FK_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesManagerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	fk_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesManagerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	fk_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesManagerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetBySalesManagerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesManager key.
            	FK_SalesPerson_SalesManager Description: Sales Manager for the Sales Person
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesManagerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	Wholesaler_SalesPerson_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	Wholesaler_SalesPerson_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	Wholesaler_SalesPerson_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	wholesaler_SalesPerson_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	wholesaler_SalesPerson_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_SalesPerson_FK1 key.
            	Wholesaler_SalesPerson_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPersonKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SalesPerson_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.SalesPerson},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;SalesPerson&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.SalesPerson)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SalesPerson"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SalesPerson"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.SalesPerson)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SalesPerson"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SalesPerson"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPerson,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SalesPerson"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.SalesPerson Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.SalesPerson,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.SalesPerson object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.SalesPerson instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.SalesPerson Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RoleProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RoleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.RoleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.RoleKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Role index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Role index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Role"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Role},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Role&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Role)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Role"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Role"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Role)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Role"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Role"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Role,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Role"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Role Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Role,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Role object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Role instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Role Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RoleChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Role</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RoleChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>Role</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RoleFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RoleParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RoleParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatingTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RatingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_RatingType index.
            </summary>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RatingType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">Table is used to store the types of how things are rated. This simplifies the Rating Engine (RE) code by allow items to be grouped together. The RE will sum together the same type so if there are 2 bridge rates they will be summed together and placed in the BridgeRate column of the RatedCDR table.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.RatingType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.RatingType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;RatingType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.RatingType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RatingType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatingType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.RatingType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.RatingType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatingType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.RatingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.RatingType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.RatingType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.RatingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.RatingType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.RatingType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatingTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.RatingType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RatingTypeChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>RatingType</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RatingTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RatingTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatingTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RatingTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RatingTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RatedCdrProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RatedCdrProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductType_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ProductType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ProductType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ProductType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ProductType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ProductType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ProductType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ProductType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ProductType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ProductType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductTypeChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>ProductType</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceChargesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.InvoiceChargesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureOptionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureOptionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key FeatureOptionType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOptionType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.FeatureOptionType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;FeatureOptionType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.FeatureOptionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.FeatureOptionType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOptionType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.FeatureOptionType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.FeatureOptionType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOptionType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOptionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.FeatureOptionType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.FeatureOptionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.FeatureOptionType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.FeatureOptionType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureOptionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	FeatureOptionType_FeatureOption_FK Description: 
            </summary>
            <param name="_featureOptionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	FeatureOptionType_FeatureOption_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	FeatureOptionType_FeatureOption_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	featureOptionType_FeatureOption_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	featureOptionType_FeatureOption_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureOptionTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOptionType_FeatureOption_FK key.
            	FeatureOptionType_FeatureOption_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.FeatureOption objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOptionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key FeatureOption_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.FeatureOption"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_FeatureOptions_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByNameFeatureIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_featureId"></param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_FeatureOptions_FeaturesID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.FeatureOption},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;FeatureOption&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.FeatureOption)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.FeatureOption"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOption"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.FeatureOption)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.FeatureOption"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOption"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOption,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.FeatureOption"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.FeatureOption Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.FeatureOption,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.FeatureOption object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.FeatureOption instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.FeatureOption Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.FeatureOption</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionChildEntityTypes.Feature">
            <summary>
             Composite Property for <c>Feature</c> at FeatureIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionChildEntityTypes.FeatureOptionType">
            <summary>
             Composite Property for <c>FeatureOptionType</c> at FeatureOptionTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionChildEntityTypes.Wholesaler_Product_FeatureCollection">
            <summary>
             Collection of <c>FeatureOption</c> as OneToMany for Wholesaler_Product_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionChildEntityTypes.Moderator_FeatureCollection">
            <summary>
             Collection of <c>FeatureOption</c> as OneToMany for Moderator_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionChildEntityTypes.Customer_FeatureCollection">
            <summary>
             Collection of <c>FeatureOption</c> as OneToMany for Customer_FeatureCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOption"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOption"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	CustomerTransactionType_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="_customerTransactionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	CustomerTransactionType_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerTransactionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	CustomerTransactionType_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerTransactionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	customerTransactionType_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerTransactionTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	customerTransactionType_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerTransactionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerTransactionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionType_CustomerTransactions_FK1 key.
            	CustomerTransactionType_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerTransactionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	FK_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	FK_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	FK_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	fk_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	fk_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_ProductRate key.
            	FK_CustomerTransaction_ProductRate Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	FK_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	FK_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	FK_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	fk_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	fk_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerTransaction_Wholesaler_Product key.
            	FK_CustomerTransaction_Wholesaler_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	Wholesaler_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	Wholesaler_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	Wholesaler_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	wholesaler_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	wholesaler_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CustomerTransactions_FK1 key.
            	Wholesaler_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	Customer_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	Customer_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	Customer_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	customer_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	customer_CustomerTransactions_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CustomerTransactions_FK1 key.
            	Customer_CustomerTransactions_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CustomerTransaction objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerTransaction_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransaction_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransaction"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(CONFDB.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomerIdWholesalerId(CONFDB.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByPriCustomerNumberWholesalerId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_priCustomerNumber"></param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="_transactionDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="_transactionDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_transactionDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_transactionDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="_transactionDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByTransactionDate(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CustomerTransactions_TransactionDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_transactionDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeleteTransaction(System.Nullable{System.Int64})">
            <summary>
            This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int64?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeleteTransaction(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int64?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeleteTransaction(CONFDB.Data.TransactionManager,System.Nullable{System.Int64})">
            <summary>
            This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int64?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeleteTransaction(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This method wrap the 'p_CustomerTransaction_DeleteTransaction' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int64?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomer(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomer(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomer(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.GetByCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransaction_GetByCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransaction},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CustomerTransaction&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CustomerTransaction)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransaction"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransaction"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CustomerTransaction)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransaction"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransaction"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransaction,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransaction"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransaction Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransaction,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CustomerTransaction object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CustomerTransaction instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransaction Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CustomerTransaction</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes.CustomerTransactionType">
            <summary>
             Composite Property for <c>CustomerTransactionType</c> at CustomerTransactionTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes.ProductRate">
            <summary>
             Composite Property for <c>ProductRate</c> at ProductRateIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes.Wholesaler_Product">
            <summary>
             Composite Property for <c>Wholesaler_Product</c> at Wholesaler_ProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransaction"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransaction"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ConferencingSummaryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ConferencingSummary</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ConferencingSummaryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ConferencingSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ConferencingSummaryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ConferencingSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ConferencingSummaryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ConferencingSummaryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	FK_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="_companyLeadTrackingId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	FK_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyLeadTrackingId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	FK_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyLeadTrackingId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	fk_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyLeadTrackingId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	fk_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyLeadTrackingId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetByCompanyLeadTrackingId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyLeadTrackingNotes_CompanyLeadTracking key.
            	FK_CompanyLeadTrackingNotes_CompanyLeadTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyLeadTrackingId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CompanyLeadTrackingNotes objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyLeadTrackingNotes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CompanyLeadTrackingNotes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CompanyLeadTrackingNotes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CompanyLeadTrackingNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CompanyLeadTrackingNotes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CompanyLeadTrackingNotes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyLeadTrackingNotes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CompanyLeadTrackingNotes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CompanyLeadTrackingNotes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CompanyLeadTrackingNotes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyInfoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CompanyInfo</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyInfoChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at CountryIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyInfoChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>CompanyInfo</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyInfoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyInfo"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyInfoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyInfo"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyInfoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key BridgeType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BridgeType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.BridgeType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;BridgeType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.BridgeType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.BridgeType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.BridgeType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.BridgeType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.BridgeType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.BridgeType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.BridgeType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeTypeChildEntityTypes.BridgeCollection">
            <summary>
             Collection of <c>BridgeType</c> as OneToMany for BridgeCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	FK_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="_adminSiteNotesId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	FK_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_adminSiteNotesId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	FK_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_adminSiteNotesId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	fk_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_adminSiteNotesId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	fk_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_adminSiteNotesId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetByAdminSiteNotesId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AdminSiteNotesHistory_AdminSiteNotes key.
            	FK_AdminSiteNotesHistory_AdminSiteNotes Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_adminSiteNotesId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AdminSiteNotesHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AdminSiteNotesHistory index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AdminSiteNotesHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AdminSiteNotesHistory},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AdminSiteNotesHistory&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AdminSiteNotesHistory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AdminSiteNotesHistory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistory,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AdminSiteNotesHistory Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AdminSiteNotesHistory,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AdminSiteNotesHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AdminSiteNotesHistory instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AdminSiteNotesHistory Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesHistoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AdminSiteNotesHistory</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AdminSiteNotesHistoryChildEntityTypes.AdminSiteNotes">
            <summary>
             Composite Property for <c>AdminSiteNotes</c> at AdminSiteNotesIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesHistoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesHistoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AdminSiteNotesHistoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AccountManagerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccountManagerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccountManagerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AccountManagerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManagerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	Wholesaler_AccountManager_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	Wholesaler_AccountManager_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	Wholesaler_AccountManager_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	wholesaler_AccountManager_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	wholesaler_AccountManager_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_AccountManager_FK1 key.
            	Wholesaler_AccountManager_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.AccountManager objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManagerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key AccountManager_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccountManager_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AccountManager"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AccountManager},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AccountManager&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AccountManager)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccountManager"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccountManager"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AccountManager)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AccountManager"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccountManager"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManager,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AccountManager"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AccountManager Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AccountManager,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AccountManager object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AccountManager instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AccountManager Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_ModeratorListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_FeatureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	Feature_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="_featureId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	Feature_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	Feature_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	feature_Wholesaler_Product_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	feature_Wholesaler_Product_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Wholesaler_Product_Feature_FK key.
            	Feature_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	FeatureOption_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="_featureOptionId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	FeatureOption_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	FeatureOption_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	featureOption_Wholesaler_Product_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	featureOption_Wholesaler_Product_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Wholesaler_Product_Feature_FK key.
            	FeatureOption_Wholesaler_Product_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	Wholesaler_Product_Wholesaler_Product_Features_FK1 Description: 
            </summary>
            <param name="_wholesaler_ProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	Wholesaler_Product_Wholesaler_Product_Features_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	Wholesaler_Product_Wholesaler_Product_Features_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	wholesaler_Product_Wholesaler_Product_Features_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesaler_ProductId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	wholesaler_Product_Wholesaler_Product_Features_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesaler_ProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetByWholesaler_ProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Wholesaler_Product_Features_FK1 key.
            	Wholesaler_Product_Wholesaler_Product_Features_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesaler_ProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Wholesaler_Product_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_FeatureKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Product_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Wholesaler_Product_Feature},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Wholesaler_Product_Feature&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Wholesaler_Product_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Wholesaler_Product_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_Feature,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler_Product_Feature Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Wholesaler_Product_Feature,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Wholesaler_Product_Feature object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Wholesaler_Product_Feature instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Wholesaler_Product_Feature Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Wholesaler_Product_Feature</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_Product_FeatureChildEntityTypes.Feature">
            <summary>
             Composite Property for <c>Feature</c> at FeatureIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_Product_FeatureChildEntityTypes.FeatureOption">
            <summary>
             Composite Property for <c>FeatureOption</c> at FeatureOptionIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_Product_FeatureChildEntityTypes.Wholesaler_Product">
            <summary>
             Composite Property for <c>Wholesaler_Product</c> at Wholesaler_ProductIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_Product_FeatureParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.UtilProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.UtilProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketUserAssociationsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketUserAssociationsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketUserAssociationsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>
            <param name="_ticketUserId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId">. Primary Key.</param>
            <param name="_ticketUserId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociationsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketUserAssociations_PK index.
            </summary>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.GetByUserIdTicketUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketUserAssociations_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_ticketUserId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketUserAssociations},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketUserAssociations&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketUserAssociations)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketUserAssociations)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociations,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketUserAssociations Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketUserAssociations,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketUserAssociations object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketUserAssociations instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketUserAssociations Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketProduct_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketProduct_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketProduct"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketProduct},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketProduct&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketProduct"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketProduct"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketProduct)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketProduct"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketProduct"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProduct,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketProduct"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketProduct Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketProduct,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketProduct object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketProduct instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketProduct Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketProduct</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketProductChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>TicketProduct</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SalesPersonChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.SalesPerson</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesManagerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.CommissionCustomerCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for CommissionCustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.CommissionCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for CommissionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.SalesPersonCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for SalesPersonCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.LeadCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for LeadCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SalesPersonChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>SalesPerson</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SalesPersonFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SalesPerson"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SalesPersonParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SalesPerson"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SalesPersonParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	Country_ProductRate_FK1 Description: 
            </summary>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	Country_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	Country_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	country_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	country_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_countryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByCountryId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Country_ProductRate_FK1 key.
            	Country_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_countryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	FK_ProductRate_RatingType Description: 
            </summary>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	FK_ProductRate_RatingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	FK_ProductRate_RatingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	fk_ProductRate_RatingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	fk_ProductRate_RatingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByRatingTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRate_RatingType key.
            	FK_ProductRate_RatingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	Product_ProductRate_FK1 Description: 
            </summary>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	Product_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	Product_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	product_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	product_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_ProductRate_FK1 key.
            	Product_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	ProductRateInterval_ProductRate_FK1 Description: 
            </summary>
            <param name="_productRateIntervalId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	ProductRateInterval_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateIntervalId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	ProductRateInterval_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateIntervalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	productRateInterval_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateIntervalId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	productRateInterval_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateIntervalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateIntervalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_ProductRate_FK1 key.
            	ProductRateInterval_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateIntervalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	ProductRateType_ProductRate_FK1 Description: 
            </summary>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	ProductRateType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	ProductRateType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	productRateType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	productRateType_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_ProductRate_FK1 key.
            	ProductRateType_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	Taxable_ProductRate_FK1 Description: 
            </summary>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	Taxable_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	Taxable_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	taxable_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	taxable_ProductRate_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_ProductRate_FK1 key.
            	Taxable_ProductRate_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRate objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductRate_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductRate_ProductID index.
            </summary>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByProductIdProductRateTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductRate_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="_name"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.GetByNameProductId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRate_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRate"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ProductRate},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ProductRate&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ProductRate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRate"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRate"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ProductRate)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRate"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRate"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRate,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ProductRate Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRate,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ProductRate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ProductRate instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ProductRate Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ProductRate</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at CountryIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.RatingType">
            <summary>
             Composite Property for <c>RatingType</c> at RatingTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.ProductRateInterval">
            <summary>
             Composite Property for <c>ProductRateInterval</c> at ProductRateIntervalIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.ProductRateType">
            <summary>
             Composite Property for <c>ProductRateType</c> at ProductRateTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.Taxable">
            <summary>
             Composite Property for <c>Taxable</c> at TaxableIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.ProductRateValueCollection">
            <summary>
             Collection of <c>ProductRate</c> as OneToMany for ProductRateValueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.AccessType_ProductRateCollection">
            <summary>
             Collection of <c>ProductRate</c> as OneToMany for AccessType_ProductRateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateChildEntityTypes.CustomerTransactionCollection">
            <summary>
             Collection of <c>ProductRate</c> as OneToMany for CustomerTransactionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LanguageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Language</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LanguageChildEntityTypes.CustomerDocumentCollection">
            <summary>
             Collection of <c>Language</c> as OneToMany for CustomerDocumentCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LanguageChildEntityTypes.WholesalerIdWholesalerCollection_From_IrWholesaler">
            <summary>
             Collection of <c>Language</c> as ManyToMany for WholesalerCollection_From_IrWholesaler
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LanguageChildEntityTypes.IrWholesalerCollection">
            <summary>
             Collection of <c>Language</c> as OneToMany for IrWholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LanguageChildEntityTypes.EmailTemplateCollection">
            <summary>
             Collection of <c>Language</c> as OneToMany for EmailTemplateCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LanguageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Language"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LanguageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Language"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LanguageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ExtensionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ErrorCodesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ErrorCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ErrorCodes_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ErrorCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ErrorCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ErrorCodes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ErrorCodes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ErrorCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ErrorCodes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ErrorCodes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ErrorCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ErrorCodes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ErrorCodes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ErrorCodes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ErrorCodes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ErrorCodes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ErrorCodes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ErrorCodes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ErrorCodes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ErrorCodesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ErrorCodes</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ErrorCodesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ErrorCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ErrorCodesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ErrorCodesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ErrorCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ErrorCodesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ErrorCodesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CommissionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CommissionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	Currency_Commission_FK Description: 
            </summary>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	Currency_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	Currency_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	currency_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	currency_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Commission_FK key.
            	Currency_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	SalesPerson_Commission_FK Description: 
            </summary>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	SalesPerson_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	SalesPerson_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	salesPerson_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	salesPerson_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_Commission_FK key.
            	SalesPerson_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	Wholesaler_Commission_FK Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	Wholesaler_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	Wholesaler_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	wholesaler_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	wholesaler_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Commission_FK key.
            	Wholesaler_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	Customer_Commission_FK Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	Customer_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	Customer_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	customer_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	customer_Commission_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Commission_FK key.
            	Customer_Commission_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Commission objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Commission_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Commission_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Commission"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetCommissionReport(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Commission_GetCommissionReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetCommissionReport(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Commission_GetCommissionReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetCommissionReport(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Commission_GetCommissionReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.GetCommissionReport(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Commission_GetCommissionReport' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="salesPersonId"> A <c>System.Int32?</c> instance.</param>
            <param name="invoiceDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Commission},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Commission&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Commission)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Commission"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Commission"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Commission)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Commission"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Commission"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Commission,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Commission"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Commission Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Commission,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Commission object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Commission instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Commission Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_UserListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_UserListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_UserListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_UserListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_UserList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_UserList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_UserList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_UserList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_AllFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_AllParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_AllParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_AccessType_ProductRates},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_AccessType_ProductRates)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_AccessType_ProductRatesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DataRepository.LoadProvider(CONFDB.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:CONFDB.Data.DataRepository.LoadProvider(CONFDB.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:CONFDB.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <c cref="T:CONFDB.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:CONFDB.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Configuration">
            <summary>
            Gets a reference to the application configuration object.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AccessTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccessType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.RecordingProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Recording"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.RecordingParticipantUsageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.RatingTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RatingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.PromptSetProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.PromptSet"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.RoleProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Role"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.SeeVoghMeetingTrackerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CountryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Country"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CurrencyProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Currency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.SystemExtensionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemExtension"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.StateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.State"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductRateTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductRateIntervalProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateInterval"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ModeratorXtimeUserProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadStageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadStage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadSourceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadSource"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.OmnoviaHostedArchiveProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.OmnoviaHostedArchiveParticipantProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductRateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.PrevInvoicesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.PrevInvoices"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.OmnoviaMp4RequestProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.SystemExtensionLabelProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.VerticalProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vertical"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.SystemSettingsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SystemSettings"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketStatusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketPriorityProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketPriority"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.UserProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ValidTicketStateChangesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.User_MarketingServiceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.User_MarketingService"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Moderator_FeatureProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.UtilProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Util"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketCategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TaxableProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Taxable"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.WholesalerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Ticket"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.WelcomeKitRequestProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Wholesaler_ProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler_Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.SalesPersonProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.SalesPerson"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.MarketingServiceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.MarketingService"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ModeratorProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ParticipantProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Participant"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Moderator_DnisProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Moderator_Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ParticipantListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ParticipantList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempReplayIdsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempReplayIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempExistingCodesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempExistingCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempCodesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempCodeChangesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempCodeChanges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempSampleRatesPerProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TempTotalDollarsSpentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.RatedCdrProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.RatedCdr"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TrendProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Trend"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketUserAssociationsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketUserAssociations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.TicketStatusHistoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ProductRateValueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ProductRateValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadPeriodProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.DnisProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadChurnReasonProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.LeadChurnReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.DnisTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.DnisType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CompanyProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Company"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ClientNotesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ClientNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CharityProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Charity"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CallFlowProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CallFlow"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CommissionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Commission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CommissionCustomerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CommissionCustomer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CompanyInfoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CurveProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Curve"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CompanyLeadTrackingProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ConferencingSummaryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ConferencingSummary"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BridgeTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CompanyLeadTrackingNotesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BridgeRequestTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeRequestType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AdminSiteNotesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AdminSiteNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ActionTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ActionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ActionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Action"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AccountManagerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccountManager"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AccessType_ProductRateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AdminSiteNotesHistoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AreaCodeNxxProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AuditLogProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AuditLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BridgeRequestProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BridgeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Bridge"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BillableLegsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BillableLegs"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.AverageRatesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.AverageRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.BridgeQueueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.BridgeQueue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ForExProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ForEx"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Customer_DnisProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer_Dnis"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.FeatureOptionTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.FeatureOptionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.FeatureProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.GlPostingTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.GlPostingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.FeatureOptionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.FeatureOption"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.InvoiceChargesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceCharges"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.InvoiceNotesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceNotes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LeadProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Lead"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.LanguageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.IrWholesalerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.IrWholesaler"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.InvoiceSummaryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.InvoiceSummary"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ExtensionTypeCategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ExtensionTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ExtensionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.EventManagerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EventManager"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerTransactionImportProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerReviewProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerReview"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerDocumentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerDocument"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Customer_FeatureProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Customer_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerTransactionTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransactionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.DepartmentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ErrorCodesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.ErrorCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.EmailTemplateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EmailTemplate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.EmailNotificationProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.EmailNotification"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.CustomerTransactionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.CustomerTransaction"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.DocumentTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.DocumentType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Wholesaler_Product_FeatureProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_AccessType_ProductRatesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_ConferenceCallList_UniqueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_ConferenceListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_CustomerListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_CustomerList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_CustomerTransactionListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_DefaultProductRatesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_FeatureOptionsForCustomersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_FeatureOptionsForModeratorsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_ModeratorListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_ModeratorList_AdminSiteProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_RecordingListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_RecordingList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_SystemExtension_AllProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_SystemExtension_CustomerLabelProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_SystemExtension_ValueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.Vw_UserListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:CONFDB.Entities.Vw_UserList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DataRepository.ConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
        </member>
        <member name="M:CONFDB.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:CONFDB.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:CONFDB.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:CONFDB.Data.AccessTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the AccessTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccessTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AccessTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AccessTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the AccessTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccessTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RecordingFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Recording"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingFilters.#ctor">
            <summary>
            Initializes a new instance of the RecordingFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RecordingQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.RecordingParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Recording"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingQuery.#ctor">
            <summary>
            Initializes a new instance of the RecordingQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RecordingParticipantUsageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParticipantUsageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageFilters.#ctor">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RecordingParticipantUsageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.RecordingParticipantUsageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParticipantUsageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RecordingParticipantUsage"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.RecordingParticipantUsageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageQuery.#ctor">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RecordingParticipantUsageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordingParticipantUsageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RatingTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatingTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the RatingTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatingTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RatingTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RatingTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.RatingTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatingTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the RatingTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatingTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RatingTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.PromptSetFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PromptSet"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PromptSetFilters.#ctor">
            <summary>
            Initializes a new instance of the PromptSetFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PromptSetFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.PromptSetFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.PromptSetQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.PromptSetParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PromptSet"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PromptSetQuery.#ctor">
            <summary>
            Initializes a new instance of the PromptSetQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PromptSetQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.PromptSetQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromptSetQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RoleFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RoleFilters.#ctor">
            <summary>
            Initializes a new instance of the RoleFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RoleFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RoleFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RoleQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.RoleParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Role"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RoleQuery.#ctor">
            <summary>
            Initializes a new instance of the RoleQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RoleQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RoleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RoleQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RoleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SeeVoghMeetingTrackerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerFilters.#ctor">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SeeVoghMeetingTrackerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerQuery.#ctor">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SeeVoghMeetingTrackerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SeeVoghMeetingTrackerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CountryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Country"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CountryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Country"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CountryFilters.#ctor">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CountryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CountryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CountryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CountryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Country"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CountryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Country"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CountryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CountryQuery.#ctor">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CountryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CountryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CurrencyFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Currency"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurrencyFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Currency"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CurrencyFilters.#ctor">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CurrencyFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CurrencyFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CurrencyQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CurrencyParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Currency"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurrencyParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Currency"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CurrencyQuery.#ctor">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CurrencyQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CurrencyQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemExtensionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtension"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionFilters.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemExtensionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.SystemExtensionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtension"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionQuery.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.StateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.StateFilters.#ctor">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.StateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.StateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.StateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.StateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.StateQuery.#ctor">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.StateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.StateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductRateTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductRateTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductRateTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateIntervalFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateInterval"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateIntervalFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateInterval"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateIntervalQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductRateIntervalParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateInterval"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateIntervalParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateInterval"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateIntervalParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductRateIntervalQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateIntervalQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateIntervalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ModeratorXtimeUserFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorXtimeUserFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserFilters.#ctor">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ModeratorXtimeUserQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ModeratorXtimeUserParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorXtimeUserParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ModeratorXtimeUser"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorXtimeUserParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserQuery.#ctor">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorXtimeUserQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorXtimeUserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadStageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadStage"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadStageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadStage"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadStageFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadStageFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadStageFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadStageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadStageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadStageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadStageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadStage"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadStageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadStage"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadStageParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadStageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadStageQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadStageQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadStageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadStageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadStageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadSourceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadSource"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadSourceFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadSourceFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadSourceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadSourceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadSourceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadSourceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadSource"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadSourceQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadSourceQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadSourceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadSourceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadSourceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadProduct"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadProductFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadProductFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadProduct"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadProductQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadProductQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaHostedArchiveFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveFilters.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaHostedArchiveQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveQuery.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaHostedArchiveParticipantFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantFilters.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaHostedArchiveParticipantQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaHostedArchiveParticipant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantQuery.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaHostedArchiveParticipantQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaHostedArchiveParticipantQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Product"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Product"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Product"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Product"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductRateFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductRateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductRateQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.PrevInvoicesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PrevInvoices"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesFilters.#ctor">
            <summary>
            Initializes a new instance of the PrevInvoicesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.PrevInvoicesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.PrevInvoicesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.PrevInvoices"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesQuery.#ctor">
            <summary>
            Initializes a new instance of the PrevInvoicesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.PrevInvoicesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PrevInvoicesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaMp4RequestFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestFilters.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.OmnoviaMp4RequestQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.OmnoviaMp4RequestParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.OmnoviaMp4Request"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestQuery.#ctor">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.OmnoviaMp4RequestQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OmnoviaMp4RequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemExtensionLabelFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionLabelFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelFilters.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemExtensionLabelQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.SystemExtensionLabelParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionLabelParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionLabelParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelQuery.#ctor">
            <summary>
            Initializes a new instance of the SystemExtensionLabelQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemExtensionLabelQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemExtensionLabelQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.VerticalFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vertical"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.VerticalFilters.#ctor">
            <summary>
            Initializes a new instance of the VerticalFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.VerticalFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.VerticalFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.VerticalQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.VerticalParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vertical"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.VerticalQuery.#ctor">
            <summary>
            Initializes a new instance of the VerticalQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.VerticalQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.VerticalQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the VerticalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemSettingsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemSettings"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemSettingsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemSettings"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemSettingsFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsFilters.#ctor">
            <summary>
            Initializes a new instance of the SystemSettingsFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SystemSettingsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.SystemSettingsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemSettings"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemSettingsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SystemSettings"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SystemSettingsParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsQuery.#ctor">
            <summary>
            Initializes a new instance of the SystemSettingsQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SystemSettingsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SystemSettingsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketProductFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketProductFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketProductQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketProductQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketStatusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatus"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatus"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketStatusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketStatusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketStatusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatus"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatus"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketStatusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketPriorityFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketPriority"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketPriorityFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketPriorityQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketPriorityParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketPriority"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketPriorityQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketPriorityQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketPriorityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.UserFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.UserFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UserFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UserFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UserFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.UserFilters.#ctor">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UserFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.UserFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.UserQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.UserParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.UserParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UserParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UserParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UserParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.UserQuery.#ctor">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UserQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.UserQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ValidTicketStateChangesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ValidTicketStateChangesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesFilters.#ctor">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ValidTicketStateChangesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ValidTicketStateChangesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ValidTicketStateChangesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ValidTicketStateChanges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ValidTicketStateChangesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesQuery.#ctor">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ValidTicketStateChangesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ValidTicketStateChangesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.User_MarketingServiceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User_MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceFilters.#ctor">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.User_MarketingServiceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.User_MarketingServiceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.User_MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceQuery.#ctor">
            <summary>
            Initializes a new instance of the User_MarketingServiceQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.User_MarketingServiceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the User_MarketingServiceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Moderator_FeatureFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Feature"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_FeatureFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureFilters.#ctor">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Moderator_FeatureQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Moderator_FeatureParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Feature"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_FeatureParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Moderator_FeatureParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Moderator_FeatureParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureQuery.#ctor">
            <summary>
            Initializes a new instance of the Moderator_FeatureQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_FeatureQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.UtilFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Util"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UtilFilters.#ctor">
            <summary>
            Initializes a new instance of the UtilFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UtilFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.UtilFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.UtilQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.UtilParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Util"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UtilQuery.#ctor">
            <summary>
            Initializes a new instance of the UtilQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.UtilQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.UtilQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketCategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketCategoryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketCategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketCategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketCategoryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketCategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TaxableFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Taxable"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TaxableFilters.#ctor">
            <summary>
            Initializes a new instance of the TaxableFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TaxableFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TaxableFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TaxableQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TaxableParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Taxable"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TaxableQuery.#ctor">
            <summary>
            Initializes a new instance of the TaxableQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TaxableQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TaxableQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxableQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.WholesalerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WholesalerFilters.#ctor">
            <summary>
            Initializes a new instance of the WholesalerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WholesalerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.WholesalerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.WholesalerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.WholesalerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WholesalerQuery.#ctor">
            <summary>
            Initializes a new instance of the WholesalerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WholesalerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.WholesalerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WholesalerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Ticket"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Ticket"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Ticket"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Ticket"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.WelcomeKitRequestFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestFilters.#ctor">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.WelcomeKitRequestQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.WelcomeKitRequestParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.WelcomeKitRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestQuery.#ctor">
            <summary>
            Initializes a new instance of the WelcomeKitRequestQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.WelcomeKitRequestQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WelcomeKitRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Wholesaler_ProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_ProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductFilters.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Wholesaler_ProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Wholesaler_ProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_ProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_ProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Wholesaler_ProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductQuery.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_ProductQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_ProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SalesPersonFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SalesPerson"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SalesPersonFilters.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SalesPersonFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SalesPersonFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.SalesPersonQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.SalesPersonParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.SalesPerson"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SalesPersonQuery.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SalesPersonQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.SalesPersonQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesPersonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.MarketingServiceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.MarketingService"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.MarketingServiceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MarketingServiceFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceFilters.#ctor">
            <summary>
            Initializes a new instance of the MarketingServiceFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.MarketingServiceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.MarketingServiceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.MarketingService"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.MarketingServiceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.MarketingService"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MarketingServiceParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceQuery.#ctor">
            <summary>
            Initializes a new instance of the MarketingServiceQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.MarketingServiceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MarketingServiceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ModeratorFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModeratorFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorFilters.#ctor">
            <summary>
            Initializes a new instance of the ModeratorFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ModeratorFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ModeratorQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ModeratorParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModeratorParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorQuery.#ctor">
            <summary>
            Initializes a new instance of the ModeratorQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ModeratorQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ModeratorQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModeratorQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ParticipantFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Participant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantFilters.#ctor">
            <summary>
            Initializes a new instance of the ParticipantFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ParticipantQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ParticipantParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Participant"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantQuery.#ctor">
            <summary>
            Initializes a new instance of the ParticipantQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Moderator_DnisFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisFilters.#ctor">
            <summary>
            Initializes a new instance of the Moderator_DnisFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Moderator_DnisQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Moderator_DnisParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Moderator_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisQuery.#ctor">
            <summary>
            Initializes a new instance of the Moderator_DnisQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Moderator_DnisQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Moderator_DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ParticipantListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ParticipantList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ParticipantList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ParticipantListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantListFilters.#ctor">
            <summary>
            Initializes a new instance of the ParticipantListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ParticipantListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ParticipantListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ParticipantList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ParticipantList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ParticipantListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantListQuery.#ctor">
            <summary>
            Initializes a new instance of the ParticipantListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParticipantListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ParticipantListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticipantListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempReplayIdsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempReplayIds"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempReplayIdsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempReplayIds"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempReplayIdsFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsFilters.#ctor">
            <summary>
            Initializes a new instance of the TempReplayIdsFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempReplayIdsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempReplayIdsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempReplayIds"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempReplayIdsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempReplayIds"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempReplayIdsParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempReplayIdsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsQuery.#ctor">
            <summary>
            Initializes a new instance of the TempReplayIdsQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempReplayIdsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempReplayIdsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempExistingCodesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempExistingCodes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempExistingCodesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempExistingCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempExistingCodesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesFilters.#ctor">
            <summary>
            Initializes a new instance of the TempExistingCodesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempExistingCodesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempExistingCodesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempExistingCodes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempExistingCodesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempExistingCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempExistingCodesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesQuery.#ctor">
            <summary>
            Initializes a new instance of the TempExistingCodesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempExistingCodesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempExistingCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempCodesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempCodesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodesFilters.#ctor">
            <summary>
            Initializes a new instance of the TempCodesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempCodesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempCodesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempCodesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempCodesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodesQuery.#ctor">
            <summary>
            Initializes a new instance of the TempCodesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempCodesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempCodeChangesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodeChanges"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodeChangesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodeChanges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempCodeChangesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesFilters.#ctor">
            <summary>
            Initializes a new instance of the TempCodeChangesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempCodeChangesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempCodeChangesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodeChanges"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodeChangesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempCodeChanges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempCodeChangesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempCodeChangesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesQuery.#ctor">
            <summary>
            Initializes a new instance of the TempCodeChangesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempCodeChangesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempCodeChangesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempSampleRatesPerProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductFilters.#ctor">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempSampleRatesPerProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempSampleRatesPerProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempSampleRatesPerProduct"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductQuery.#ctor">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempSampleRatesPerProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempSampleRatesPerProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempTotalDollarsSpentFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentFilters.#ctor">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TempTotalDollarsSpentQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TempTotalDollarsSpentParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TempTotalDollarsSpent"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentQuery.#ctor">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TempTotalDollarsSpentQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TempTotalDollarsSpentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RatedCdrFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatedCdr"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatedCdrFilters.#ctor">
            <summary>
            Initializes a new instance of the RatedCdrFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatedCdrFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RatedCdrFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.RatedCdrQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.RatedCdrParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.RatedCdr"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatedCdrQuery.#ctor">
            <summary>
            Initializes a new instance of the RatedCdrQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.RatedCdrQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.RatedCdrQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RatedCdrQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TrendFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Trend"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TrendFilters.#ctor">
            <summary>
            Initializes a new instance of the TrendFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TrendFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrendFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TrendFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrendFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TrendQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TrendParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Trend"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TrendQuery.#ctor">
            <summary>
            Initializes a new instance of the TrendQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TrendQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrendQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TrendQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrendQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketUserAssociationsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketUserAssociationsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketUserAssociationsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketUserAssociationsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketUserAssociationsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketUserAssociations"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketUserAssociationsParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketUserAssociationsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketUserAssociationsQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketUserAssociationsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketUserAssociationsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketStatusHistoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusHistoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryFilters.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.TicketStatusHistoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.TicketStatusHistoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusHistoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusHistoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryQuery.#ctor">
            <summary>
            Initializes a new instance of the TicketStatusHistoryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.TicketStatusHistoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TicketStatusHistoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateValueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateValue"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateValueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateValue"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateValueFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductRateValueFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ProductRateValueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ProductRateValueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateValue"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateValueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ProductRateValue"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductRateValueParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductRateValueQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ProductRateValueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductRateValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadPeriodFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadPeriod"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadPeriodFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadPeriod"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadPeriodFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadPeriodFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadPeriodQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadPeriodParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadPeriod"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadPeriodParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadPeriod"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadPeriodParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadPeriodParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadPeriodQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadPeriodQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadPeriodQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DnisFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Dnis"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DnisFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.DnisFilters.#ctor">
            <summary>
            Initializes a new instance of the DnisFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DnisFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DnisQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.DnisParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Dnis"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DnisParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.DnisQuery.#ctor">
            <summary>
            Initializes a new instance of the DnisQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DnisQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadChurnReasonFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadChurnReason"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChurnReasonFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadChurnReason"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadChurnReasonQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadChurnReasonParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadChurnReason"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChurnReasonParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.LeadChurnReason"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadChurnReasonParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadChurnReasonParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadChurnReasonQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadChurnReasonQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadChurnReasonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DnisTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DnisType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the DnisTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DnisTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DnisTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.DnisTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DnisType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the DnisTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DnisTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DnisTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DnisTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Company"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Company"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyFilters.#ctor">
            <summary>
            Initializes a new instance of the CompanyFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CompanyParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Company"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Company"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyQuery.#ctor">
            <summary>
            Initializes a new instance of the CompanyQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ClientNotesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ClientNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ClientNotesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ClientNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ClientNotesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ClientNotesFilters.#ctor">
            <summary>
            Initializes a new instance of the ClientNotesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ClientNotesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ClientNotesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ClientNotesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ClientNotesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ClientNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ClientNotesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ClientNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ClientNotesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ClientNotesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ClientNotesQuery.#ctor">
            <summary>
            Initializes a new instance of the ClientNotesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ClientNotesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ClientNotesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClientNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CharityFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Charity"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CharityFilters.#ctor">
            <summary>
            Initializes a new instance of the CharityFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CharityFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CharityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CharityFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CharityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CharityQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CharityParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Charity"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CharityQuery.#ctor">
            <summary>
            Initializes a new instance of the CharityQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CharityQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CharityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CharityQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CharityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CallFlowFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CallFlow"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CallFlowFilters.#ctor">
            <summary>
            Initializes a new instance of the CallFlowFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CallFlowFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CallFlowFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CallFlowQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CallFlowParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CallFlow"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CallFlowQuery.#ctor">
            <summary>
            Initializes a new instance of the CallFlowQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CallFlowQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CallFlowQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CallFlowQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CommissionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Commission"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Commission"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CommissionFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionFilters.#ctor">
            <summary>
            Initializes a new instance of the CommissionFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CommissionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CommissionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CommissionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Commission"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Commission"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CommissionParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionQuery.#ctor">
            <summary>
            Initializes a new instance of the CommissionQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CommissionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CommissionCustomerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CommissionCustomer"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionCustomerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CommissionCustomer"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CommissionCustomerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerFilters.#ctor">
            <summary>
            Initializes a new instance of the CommissionCustomerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CommissionCustomerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CommissionCustomerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CommissionCustomer"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionCustomerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CommissionCustomer"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CommissionCustomerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerQuery.#ctor">
            <summary>
            Initializes a new instance of the CommissionCustomerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CommissionCustomerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommissionCustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyInfoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyInfo"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoFilters.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyInfoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CompanyInfoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyInfo"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoQuery.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyInfoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CurveFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Curve"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurveFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Curve"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurveFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurveFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CurveFilters.#ctor">
            <summary>
            Initializes a new instance of the CurveFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CurveFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurveFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CurveFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CurveQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CurveParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Curve"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurveParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Curve"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurveParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurveParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurveParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CurveQuery.#ctor">
            <summary>
            Initializes a new instance of the CurveQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CurveQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurveQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CurveQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyLeadTrackingFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingFilters.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyLeadTrackingQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTracking"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingQuery.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ConferencingSummaryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ConferencingSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryFilters.#ctor">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ConferencingSummaryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ConferencingSummaryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ConferencingSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryQuery.#ctor">
            <summary>
            Initializes a new instance of the ConferencingSummaryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ConferencingSummaryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ConferencingSummaryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the BridgeTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BridgeTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the BridgeTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyLeadTrackingNotesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesFilters.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CompanyLeadTrackingNotesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CompanyLeadTrackingNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyLeadTrackingNotesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesQuery.#ctor">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CompanyLeadTrackingNotesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CompanyLeadTrackingNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeRequestTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequestType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequestType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeRequestTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BridgeRequestTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequestType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequestType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AdminSiteNotesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AdminSiteNotesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AdminSiteNotesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ActionTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ActionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ActionTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ActionTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ActionTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ActionTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ActionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ActionTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ActionTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ActionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Action"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionFilters.#ctor">
            <summary>
            Initializes a new instance of the ActionFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ActionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ActionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ActionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Action"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionQuery.#ctor">
            <summary>
            Initializes a new instance of the ActionQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ActionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ActionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AccountManagerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccountManager"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccountManagerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccountManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountManagerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AccountManagerFilters.#ctor">
            <summary>
            Initializes a new instance of the AccountManagerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccountManagerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccountManagerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AccountManagerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AccountManagerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccountManager"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccountManagerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccountManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountManagerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccountManagerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AccountManagerQuery.#ctor">
            <summary>
            Initializes a new instance of the AccountManagerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccountManagerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccountManagerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountManagerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AccessType_ProductRateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessType_ProductRateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateFilters.#ctor">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AccessType_ProductRateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AccessType_ProductRateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessType_ProductRateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AccessType_ProductRate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccessType_ProductRateParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AccessType_ProductRateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateQuery.#ctor">
            <summary>
            Initializes a new instance of the AccessType_ProductRateQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AccessType_ProductRateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccessType_ProductRateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AdminSiteNotesHistoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AdminSiteNotesHistoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AdminSiteNotesHistoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AdminSiteNotesHistory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AdminSiteNotesHistoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminSiteNotesHistoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AreaCodeNxxFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AreaCodeNxxFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxFilters.#ctor">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AreaCodeNxxQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AreaCodeNxxParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AreaCodeNxxParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AreaCodeNxxParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxQuery.#ctor">
            <summary>
            Initializes a new instance of the AreaCodeNxxQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AreaCodeNxxQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AreaCodeNxxQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AuditLogFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AuditLog"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AuditLogFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AuditLog"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AuditLogFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AuditLogFilters.#ctor">
            <summary>
            Initializes a new instance of the AuditLogFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AuditLogFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AuditLogFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AuditLogQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AuditLogParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AuditLog"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AuditLogParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AuditLog"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AuditLogParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AuditLogParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.AuditLogQuery.#ctor">
            <summary>
            Initializes a new instance of the AuditLogQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AuditLogQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AuditLogQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AuditLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeRequestFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestFilters.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeRequestQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BridgeRequestParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeRequest"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestQuery.#ctor">
            <summary>
            Initializes a new instance of the BridgeRequestQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeRequestQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Bridge"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeFilters.#ctor">
            <summary>
            Initializes a new instance of the BridgeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BridgeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Bridge"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeQuery.#ctor">
            <summary>
            Initializes a new instance of the BridgeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BillableLegsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BillableLegs"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BillableLegsFilters.#ctor">
            <summary>
            Initializes a new instance of the BillableLegsFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BillableLegsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BillableLegsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BillableLegsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BillableLegsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BillableLegs"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BillableLegsQuery.#ctor">
            <summary>
            Initializes a new instance of the BillableLegsQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BillableLegsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BillableLegsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BillableLegsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AverageRatesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AverageRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AverageRatesFilters.#ctor">
            <summary>
            Initializes a new instance of the AverageRatesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AverageRatesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AverageRatesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.AverageRatesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.AverageRatesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.AverageRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AverageRatesQuery.#ctor">
            <summary>
            Initializes a new instance of the AverageRatesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.AverageRatesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.AverageRatesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AverageRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeQueueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeQueue"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeQueueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeQueue"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeQueueFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueFilters.#ctor">
            <summary>
            Initializes a new instance of the BridgeQueueFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.BridgeQueueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.BridgeQueueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeQueue"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeQueueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.BridgeQueue"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BridgeQueueParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeQueueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueQuery.#ctor">
            <summary>
            Initializes a new instance of the BridgeQueueQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.BridgeQueueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BridgeQueueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ForExFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ForEx"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ForExFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ForEx"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ForExFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ForExFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ForExFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ForExFilters.#ctor">
            <summary>
            Initializes a new instance of the ForExFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ForExFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ForExFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ForExFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ForExFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ForExQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ForExParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ForEx"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ForExParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ForEx"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ForExParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ForExParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ForExParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.ForExQuery.#ctor">
            <summary>
            Initializes a new instance of the ForExQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ForExQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ForExQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ForExQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ForExQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Customer_DnisFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Dnis"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_DnisFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Customer_DnisFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisFilters.#ctor">
            <summary>
            Initializes a new instance of the Customer_DnisFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Customer_DnisQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Customer_DnisParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Dnis"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_DnisParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Dnis"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Customer_DnisParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisQuery.#ctor">
            <summary>
            Initializes a new instance of the Customer_DnisQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_DnisQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_DnisQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureOptionTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOptionType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOptionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureOptionTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.FeatureOptionTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOptionType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOptionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.FeatureOptionTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureFilters.#ctor">
            <summary>
            Initializes a new instance of the FeatureFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.FeatureParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureQuery.#ctor">
            <summary>
            Initializes a new instance of the FeatureQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.GlPostingTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.GlPostingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the GlPostingTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.GlPostingTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.GlPostingTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.GlPostingType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the GlPostingTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.GlPostingTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GlPostingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureOptionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOption"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionFilters.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.FeatureOptionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.FeatureOptionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.FeatureOption"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionQuery.#ctor">
            <summary>
            Initializes a new instance of the FeatureOptionQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.FeatureOptionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FeatureOptionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceChargesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceCharges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesFilters.#ctor">
            <summary>
            Initializes a new instance of the InvoiceChargesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceChargesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.InvoiceChargesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceCharges"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesQuery.#ctor">
            <summary>
            Initializes a new instance of the InvoiceChargesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceChargesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceChargesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceNotesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceNotesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceNotesFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesFilters.#ctor">
            <summary>
            Initializes a new instance of the InvoiceNotesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceNotesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.InvoiceNotesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceNotes"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceNotesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceNotes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceNotesParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceNotesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesQuery.#ctor">
            <summary>
            Initializes a new instance of the InvoiceNotesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceNotesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceNotesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Lead"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Lead"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadFilters.#ctor">
            <summary>
            Initializes a new instance of the LeadFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LeadQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LeadParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Lead"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Lead"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LeadParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.LeadQuery.#ctor">
            <summary>
            Initializes a new instance of the LeadQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LeadQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LeadQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LeadQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LeadQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LanguageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Language"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LanguageFilters.#ctor">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LanguageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LanguageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.LanguageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.LanguageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Language"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LanguageQuery.#ctor">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.LanguageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.LanguageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.IrWholesalerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.IrWholesaler"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.IrWholesalerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.IrWholesaler"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the IrWholesalerFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerFilters.#ctor">
            <summary>
            Initializes a new instance of the IrWholesalerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.IrWholesalerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.IrWholesalerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.IrWholesaler"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.IrWholesalerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.IrWholesaler"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the IrWholesalerParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerQuery.#ctor">
            <summary>
            Initializes a new instance of the IrWholesalerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.IrWholesalerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IrWholesalerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceSummaryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceSummary"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceSummaryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryFilters.#ctor">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.InvoiceSummaryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.InvoiceSummaryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceSummary"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceSummaryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.InvoiceSummary"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoiceSummaryParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.InvoiceSummaryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryQuery.#ctor">
            <summary>
            Initializes a new instance of the InvoiceSummaryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.InvoiceSummaryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoiceSummaryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ExtensionTypeCategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ExtensionTypeCategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ExtensionTypeCategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionTypeCategory"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeCategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ExtensionTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ExtensionTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ExtensionTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ExtensionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ExtensionTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ExtensionTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExtensionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EventManagerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EventManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EventManagerFilters.#ctor">
            <summary>
            Initializes a new instance of the EventManagerFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EventManagerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EventManagerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EventManagerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.EventManagerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EventManager"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EventManagerQuery.#ctor">
            <summary>
            Initializes a new instance of the EventManagerQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EventManagerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EventManagerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EventManagerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionImportFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionImportFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionImportQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerTransactionImportParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionImportParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionImportParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionImportQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionImportQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionImportQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerReviewFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerReview"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerReviewFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerReview"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerReviewFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerReviewFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerReviewQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerReviewParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerReview"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerReviewParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerReview"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerReviewParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerReviewQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerReviewQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerReviewQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerDocumentFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerDocument"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerDocumentFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerDocumentQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerDocumentParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerDocument"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerDocumentQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerDocumentQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDocumentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Customer_FeatureFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Feature"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_FeatureFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Customer_FeatureFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureFilters.#ctor">
            <summary>
            Initializes a new instance of the Customer_FeatureFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Customer_FeatureQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Customer_FeatureParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Feature"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_FeatureParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Customer_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Customer_FeatureParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureQuery.#ctor">
            <summary>
            Initializes a new instance of the Customer_FeatureQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Customer_FeatureQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Customer_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerTransactionTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransactionType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DepartmentFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DepartmentFilters.#ctor">
            <summary>
            Initializes a new instance of the DepartmentFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DepartmentFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DepartmentFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DepartmentQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.DepartmentParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Department"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DepartmentQuery.#ctor">
            <summary>
            Initializes a new instance of the DepartmentQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DepartmentQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DepartmentQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DepartmentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ErrorCodesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ErrorCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesFilters.#ctor">
            <summary>
            Initializes a new instance of the ErrorCodesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.ErrorCodesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.ErrorCodesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.ErrorCodes"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesQuery.#ctor">
            <summary>
            Initializes a new instance of the ErrorCodesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.ErrorCodesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ErrorCodesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EmailTemplateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailTemplate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateFilters.#ctor">
            <summary>
            Initializes a new instance of the EmailTemplateFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EmailTemplateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.EmailTemplateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailTemplate"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateQuery.#ctor">
            <summary>
            Initializes a new instance of the EmailTemplateQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EmailTemplateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailTemplateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EmailNotificationFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailNotification"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailNotificationFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailNotification"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmailNotificationFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationFilters.#ctor">
            <summary>
            Initializes a new instance of the EmailNotificationFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.EmailNotificationQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.EmailNotificationParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailNotification"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailNotificationParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.EmailNotification"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmailNotificationParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationQuery.#ctor">
            <summary>
            Initializes a new instance of the EmailNotificationQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.EmailNotificationQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmailNotificationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransaction"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.CustomerTransactionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.CustomerTransactionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.CustomerTransaction"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerTransactionQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.CustomerTransactionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerTransactionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DocumentTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DocumentType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DocumentTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DocumentType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DocumentTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the DocumentTypeFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.DocumentTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.DocumentTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DocumentType"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DocumentTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.DocumentType"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DocumentTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the DocumentTypeQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.DocumentTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Wholesaler_Product_FeatureFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureFilters.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Wholesaler_Product_FeatureQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Wholesaler_Product_Feature"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureQuery.#ctor">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Wholesaler_Product_FeatureQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Wholesaler_Product_FeatureQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_AccessType_ProductRatesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_AccessType_ProductRatesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_AccessType_ProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_AccessType_ProductRatesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_AccessType_ProductRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ConferenceCallList_UniqueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ConferenceCallList_UniqueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceCallList_Unique"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceCallList_UniqueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceCallList_UniqueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceCallList_UniqueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ConferenceListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ConferenceListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_ConferenceListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_ConferenceListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ConferenceList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_ConferenceListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_ConferenceListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ConferenceListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ConferenceListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_CustomerListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_CustomerListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_CustomerListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_CustomerTransactionListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerTransactionListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_CustomerTransactionListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_CustomerTransactionListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerTransactionListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_CustomerTransactionListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_CustomerTransactionListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_DefaultProductRatesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_DefaultProductRatesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_DefaultProductRatesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_DefaultProductRates"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_DefaultProductRatesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_DefaultProductRatesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_FeatureOptionsForCustomersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_FeatureOptionsForCustomersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForCustomersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForCustomers"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForCustomersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForCustomersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_FeatureOptionsForModeratorsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_FeatureOptionsForModeratorsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_FeatureOptionsForModerators"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_FeatureOptionsForModeratorsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_FeatureOptionsForModeratorsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_FeatureOptionsForModeratorsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ModeratorListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ModeratorListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_ModeratorListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ModeratorList_AdminSiteFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_ModeratorList_AdminSiteQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_ModeratorList_AdminSiteParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_ModeratorList_AdminSite"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_ModeratorList_AdminSiteQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_ModeratorList_AdminSiteQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_RecordingListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_RecordingListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_RecordingListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_RecordingListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_RecordingListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_RecordingList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_RecordingListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_RecordingListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_RecordingListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_RecordingListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_RecordingListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_AllFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_AllQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_AllParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_All"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_AllQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_AllQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_CustomerLabelFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_CustomerLabelQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_CustomerLabelQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_CustomerLabelQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_ValueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_SystemExtension_ValueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_ValueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_SystemExtension_Value"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_ValueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_SystemExtension_ValueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_SystemExtension_ValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_UserListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_UserList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_UserListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_UserList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_UserListFilterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListFilters.#ctor">
            <summary>
            Initializes a new instance of the Vw_UserListFilters class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Vw_UserListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.Bases.Vw_UserListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_UserList"/> object.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_UserListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:CONFDB.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:CONFDB.Entities.Vw_UserList"/> object.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the Vw_UserListParameterBuilder class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_UserListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListQuery.#ctor">
            <summary>
            Initializes a new instance of the Vw_UserListQuery class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:CONFDB.Data.Vw_UserListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Vw_UserListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="_toStatusId"></param>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_toStatusId"></param>
            <remarks></remarks>
            <returns>Returns a TList of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="_toStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByToStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by ToStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_toStatusId"></param>
            <remarks></remarks>
            <returns>Returns a TList of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="_fromStatusId"></param>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_fromStatusId"></param>
            <remarks></remarks>
            <returns>Returns a TList of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_fromStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="_fromStatusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetByFromStatusIdFromValidTicketStateChanges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TicketStatus objects from the datasource by FromStatusID in the
            	ValidTicketStateChanges table. Table TicketStatus is related to table TicketStatus
            	through the (M:N) relationship defined in the ValidTicketStateChanges table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_fromStatusId"></param>
            <remarks></remarks>
            <returns>Returns a TList of TicketStatus objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketStatus_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatus_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatus"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketStatus},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketStatus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketStatus)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketStatus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatus"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketStatus)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketStatus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatus"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatus,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketStatus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatus,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketStatus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketStatus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketStatus</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.TicketStatusHistoryCollection">
            <summary>
             Collection of <c>TicketStatus</c> as OneToMany for TicketStatusHistoryCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.FromStatusIdTicketStatusCollection_From_ValidTicketStateChanges">
            <summary>
             Collection of <c>TicketStatus</c> as ManyToMany for TicketStatusCollection_From_ValidTicketStateChanges
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.ValidTicketStateChangesCollectionGetByToStatusId">
            <summary>
             Collection of <c>TicketStatus</c> as OneToMany for ValidTicketStateChangesCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>TicketStatus</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.ValidTicketStateChangesCollectionGetByFromStatusId">
            <summary>
             Collection of <c>TicketStatus</c> as OneToMany for ValidTicketStateChangesCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusChildEntityTypes.ToStatusIdTicketStatusCollection_From_ValidTicketStateChanges">
            <summary>
             Collection of <c>TicketStatus</c> as ManyToMany for TicketStatusCollection_From_ValidTicketStateChanges
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	FK_Ticket_Customer Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	FK_Ticket_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	FK_Ticket_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	fk_Ticket_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	fk_Ticket_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Customer key.
            	FK_Ticket_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	FK_Ticket_Wholesaler Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	FK_Ticket_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	FK_Ticket_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	fk_Ticket_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	fk_Ticket_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Wholesaler key.
            	FK_Ticket_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	FK_Ticket_TicketProduct Description: 
            </summary>
            <param name="_ticketProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	FK_Ticket_TicketProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketProductId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	FK_Ticket_TicketProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	fk_Ticket_TicketProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketProductId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	fk_Ticket_TicketProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketProductId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketProductId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketProduct key.
            	FK_Ticket_TicketProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketProductId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	FK_Ticket_TicketStatus Description: 
            </summary>
            <param name="_statusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	FK_Ticket_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	FK_Ticket_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	fk_Ticket_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_statusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	fk_Ticket_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_statusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketStatus key.
            	FK_Ticket_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	FK_Ticket_TicketPriority Description: 
            </summary>
            <param name="_ticketPriorityId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	FK_Ticket_TicketPriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketPriorityId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	FK_Ticket_TicketPriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketPriorityId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	fk_Ticket_TicketPriority Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketPriorityId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	fk_Ticket_TicketPriority Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketPriorityId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketPriorityId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketPriority key.
            	FK_Ticket_TicketPriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketPriorityId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	FK_Ticket_TicketCategory Description: 
            </summary>
            <param name="_ticketCategoryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	FK_Ticket_TicketCategory Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketCategoryId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	FK_Ticket_TicketCategory Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	fk_Ticket_TicketCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketCategoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	fk_Ticket_TicketCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_ticketCategoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByTicketCategoryId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_TicketCategory key.
            	FK_Ticket_TicketCategory Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketCategoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	FK_Ticket_Moderator Description: 
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	FK_Ticket_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	FK_Ticket_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	fk_Ticket_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	fk_Ticket_Moderator Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetByModeratorId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Ticket_Moderator key.
            	FK_Ticket_Moderator Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Ticket objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Ticket_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Ticket_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Ticket"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Ticket},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Ticket&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Ticket)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Ticket"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Ticket"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Ticket)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Ticket"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Ticket"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Ticket,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Ticket"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Ticket Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Ticket,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Ticket object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Ticket instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Ticket Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.StateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.StateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.IrWholesalerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.IrWholesalerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesalerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wholesalerId">. Primary Key.</param>
            <param name="_languageId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId">. Primary Key.</param>
            <param name="_languageId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	Wholesaler_IRWholesaler_FK Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	Wholesaler_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	Wholesaler_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	wholesaler_IrWholesaler_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	wholesaler_IrWholesaler_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_IRWholesaler_FK key.
            	Wholesaler_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	Language_IRWholesaler_FK Description: 
            </summary>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	Language_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	Language_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	language_IrWholesaler_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	language_IrWholesaler_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_languageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByLanguageId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Language_IRWholesaler_FK key.
            	Language_IRWholesaler_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.IrWholesaler objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesalerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IRWholesaler_PK index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.GetByWholesalerIdLanguageId(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IRWholesaler_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.IrWholesaler"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.IrWholesaler},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;IrWholesaler&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.IrWholesaler)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.IrWholesaler"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.IrWholesaler"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.IrWholesaler)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.IrWholesaler"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.IrWholesaler"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesaler,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.IrWholesaler"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.IrWholesaler Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.IrWholesalerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.IrWholesaler,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.IrWholesaler object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.IrWholesaler instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.IrWholesaler Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.IrWholesalerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.IrWholesaler</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.IrWholesalerChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.IrWholesalerChildEntityTypes.Language">
            <summary>
             Composite Property for <c>Language</c> at LanguageIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailNotificationProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EmailNotificationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotificationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotificationKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_EmailNotification index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmailNotification index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.EmailNotification"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_EmailNotification_Email index.
            </summary>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_EmailNotification_EmailSent index.
            </summary>
            <param name="_emailSent"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="_emailSent"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(CONFDB.Data.TransactionManager,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_emailSent"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(CONFDB.Data.TransactionManager,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_emailSent"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="_emailSent"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByEmailSent(CONFDB.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_EmailSent index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_emailSent"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_EmailNotification_SentDate index.
            </summary>
            <param name="_sentDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="_sentDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sentDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sentDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="_sentDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetBySentDate(CONFDB.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_SentDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sentDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(System.String,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(System.String,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(CONFDB.Data.TransactionManager,System.String,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.GetByTemplateNameCreatedDate(CONFDB.Data.TransactionManager,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmailNotification_TemplateName_CreatedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_templateName">Name of the email template to use for sending notifications</param>
            <param name="_createdDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.EmailNotification},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;EmailNotification&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.EmailNotification)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EmailNotification"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailNotification"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.EmailNotification)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.EmailNotification"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailNotification"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotification,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.EmailNotification"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.EmailNotification Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.EmailNotificationProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.EmailNotification,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.EmailNotification object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.EmailNotification instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.EmailNotification Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailNotificationChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.EmailNotification</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailNotificationProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EmailNotificationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(System.Int32)">
            <summary>
            	Gets DNIS objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Dnis objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Dnis objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Dnis objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Dnis objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCustomerIdFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets DNIS objects from the datasource by CustomerID in the
            	Customer_DNIS table. Table DNIS is related to table Customer
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(System.Int32)">
            <summary>
            	Gets DNIS objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="_moderatorId"></param>
            <returns>Returns a typed collection of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Dnis objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Dnis objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Dnis objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Dnis objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="_moderatorId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of DNIS objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByModeratorIdFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets DNIS objects from the datasource by ModeratorID in the
            	Moderator_DNIS table. Table DNIS is related to table Moderator
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_moderatorId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	AccessType_DNIS_FK1 Description: 
            </summary>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	AccessType_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	AccessType_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	accessType_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	accessType_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accessTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByAccessTypeId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AccessType_DNIS_FK1 key.
            	AccessType_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accessTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	CallFlow_DNIS_FK Description: 
            </summary>
            <param name="_callFlowId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	CallFlow_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	CallFlow_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	callFlow_Dnis_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_callFlowId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	callFlow_Dnis_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_callFlowId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByCallFlowId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CallFlow_DNIS_FK key.
            	CallFlow_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_callFlowId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	PromptSet_DNIS_FK Description: 
            </summary>
            <param name="_promptSetId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	PromptSet_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_promptSetId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	PromptSet_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_promptSetId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	promptSet_Dnis_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_promptSetId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	promptSet_Dnis_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_promptSetId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByPromptSetId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PromptSet_DNIS_FK key.
            	PromptSet_DNIS_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_promptSetId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	Wholesaler_DNIS_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	Wholesaler_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	Wholesaler_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	wholesaler_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	wholesaler_Dnis_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_DNIS_FK1 key.
            	Wholesaler_DNIS_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Dnis objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.DnisKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key DNIS_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_DNIS_DNISTypeID index.
            </summary>
            <param name="_dnisTypeId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="_dnisTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="_dnisTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_DNIS_DNISNumber index.
            </summary>
            <param name="_dnisNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="_dnisNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="_dnisNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDnisNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DNISNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_DNIS_DialNumber index.
            </summary>
            <param name="_dialNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="_dialNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dialNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dialNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="_dialNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByDialNumber(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DNIS_DialNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dialNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerIdDDL(System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_DNIS_GetByWholesalerIdDDL' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerIdDDL(System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_DNIS_GetByWholesalerIdDDL' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerIdDDL(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_DNIS_GetByWholesalerIdDDL' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.GetByWholesalerIdDDL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_DNIS_GetByWholesalerIdDDL' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Dnis},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Dnis&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Dnis"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Dnis"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Dnis"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Dnis"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Dnis,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Dnis"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Dnis Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.DnisProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Dnis,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Dnis object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Dnis instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Dnis Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Dnis</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.AccessType">
            <summary>
             Composite Property for <c>AccessType</c> at AccessTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.CallFlow">
            <summary>
             Composite Property for <c>CallFlow</c> at CallFlowIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.DnisType">
            <summary>
             Composite Property for <c>DnisType</c> at DnisTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.PromptSet">
            <summary>
             Composite Property for <c>PromptSet</c> at PromptSetIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.CustomerIdCustomerCollection_From_Customer_Dnis">
            <summary>
             Collection of <c>Dnis</c> as ManyToMany for CustomerCollection_From_Customer_Dnis
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.Moderator_DnisCollection">
            <summary>
             Collection of <c>Dnis</c> as OneToMany for Moderator_DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.ModeratorIdModeratorCollection_From_Moderator_Dnis">
            <summary>
             Collection of <c>Dnis</c> as ManyToMany for ModeratorCollection_From_Moderator_Dnis
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DnisChildEntityTypes.Customer_DnisCollection">
            <summary>
             Collection of <c>Dnis</c> as OneToMany for Customer_DnisCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerReviewProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerReviewProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReviewKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReviewKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerReview_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerReview_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerReview"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CustomerReview},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CustomerReview&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CustomerReview)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerReview"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerReview"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CustomerReview)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerReview"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerReview"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReview,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerReview"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CustomerReview Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerReviewProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerReview,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CustomerReview object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CustomerReview instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CustomerReview Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerReviewChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CustomerReview</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurrencyProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CurrencyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurrencyProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CurrencyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CurrencyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CurrencyKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Currency_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Currency},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Currency&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Currency)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Currency"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Currency"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Currency)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Currency"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Currency"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Currency,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Currency"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Currency Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CurrencyProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Currency,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Currency object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Currency instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Currency Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_DefaultProductRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:CONFDB.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:CONFDB.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:CONFDB.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:CONFDB.Data.Bases.VerticalProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.VerticalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.User_MarketingServiceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.User_MarketingServiceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.UserProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(System.Int32)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="_marketingServiceId"></param>
            <returns>Returns a typed collection of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_marketingServiceId"></param>
            <remarks></remarks>
            <returns>Returns a TList of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_marketingServiceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="_marketingServiceId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByMarketingServiceIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets User objects from the datasource by MarketingServiceID in the
            	User_MarketingService table. Table User is related to table MarketingService
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_marketingServiceId"></param>
            <remarks></remarks>
            <returns>Returns a TList of User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	FK_User_Charity Description: 
            </summary>
            <param name="_charityId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	FK_User_Charity Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_charityId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	FK_User_Charity Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_charityId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	fk_User_Charity Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_charityId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	fk_User_Charity Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_charityId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCharityId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Charity key.
            	FK_User_Charity Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_charityId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	FK_User_Country Description: 
            </summary>
            <param name="_country"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	FK_User_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_country"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	FK_User_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_country"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	fk_User_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_country"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	fk_User_Country Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_country"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Country key.
            	FK_User_Country Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_country"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	FK_User_Role Description: 
            </summary>
            <param name="_roleId">Used to denote the role of the user.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	FK_User_Role Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	FK_User_Role Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	fk_User_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	fk_User_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRoleId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Role key.
            	FK_User_Role Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_roleId">Used to denote the role of the user.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	FK_User_SalesPerson Description: 
            </summary>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	FK_User_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	FK_User_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	fk_User_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	fk_User_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_SalesPerson key.
            	FK_User_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	FK_User_State Description: 
            </summary>
            <param name="_region"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	FK_User_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	FK_User_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	fk_User_State Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_region"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	fk_User_State Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_region"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_State key.
            	FK_User_State Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	FK_User_Company Description: 
            </summary>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	FK_User_Company Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	FK_User_Company Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	fk_User_Company Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	fk_User_Company Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_User_Company key.
            	FK_User_Company Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.User objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.UserKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_User index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_User index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_User_UserName index.
            </summary>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetByUsername(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_User_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.User"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetAllModeratorsByCustomerID(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetAllModeratorsByCustomerID(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetAllModeratorsByCustomerID(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.GetAllModeratorsByCustomerID(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_User_GetAllModeratorsByCustomerID' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:CONFDB.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.CheckUserName(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_User_CheckUserName' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.CheckUserName(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_User_CheckUserName' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.CheckUserName(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_User_CheckUserName' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.CheckUserName(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            This method wrap the 'p_User_CheckUserName' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="userNameOk"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.User},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;User&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.User)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.User"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.User)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.User"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.User,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.User Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.UserProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.User,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.User instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.User Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.UserChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.User</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.Charity">
            <summary>
             Composite Property for <c>Charity</c> at CharityIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at CountrySource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.Role">
            <summary>
             Composite Property for <c>Role</c> at RoleIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesPersonIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.State">
            <summary>
             Composite Property for <c>State</c> at RegionSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.Company">
            <summary>
             Composite Property for <c>Company</c> at CompanyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService">
            <summary>
             Collection of <c>User</c> as ManyToMany for MarketingServiceCollection_From_User_MarketingService
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.ModeratorCollection">
            <summary>
             Collection of <c>User</c> as OneToMany for ModeratorCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.User_MarketingServiceCollection">
            <summary>
             Collection of <c>User</c> as OneToMany for User_MarketingServiceCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>User</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.UserChildEntityTypes.EventManagerCollection">
            <summary>
             Collection of <c>User</c> as OneToMany for EventManagerCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemExtensionLabelProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabelKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	FK_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="_extensionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	FK_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	FK_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	fk_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_extensionTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	fk_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_extensionTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByExtensionTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SystemExtension_ExtensionType key.
            	FK_SystemExtension_ExtensionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_extensionTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.SystemExtensionLabel objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabelKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SystemExtension index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SystemExtension index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdCustomerCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_CustomerCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.GetByCustomerIdModeratorCanView(CONFDB.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SystemExtensionLabel_ModeratorCanView index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_moderatorCanView"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.SystemExtensionLabel},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;SystemExtensionLabel&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.SystemExtensionLabel)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.SystemExtensionLabel)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabel,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemExtensionLabel"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.SystemExtensionLabel Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemExtensionLabelProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemExtensionLabel,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.SystemExtensionLabel object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.SystemExtensionLabel instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.SystemExtensionLabel Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionLabelChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.SystemExtensionLabel</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SystemExtensionLabelChildEntityTypes.ExtensionType">
            <summary>
             Composite Property for <c>ExtensionType</c> at ExtensionTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.SystemExtensionLabelChildEntityTypes.SystemExtensionCollection">
            <summary>
             Collection of <c>SystemExtensionLabel</c> as OneToMany for SystemExtensionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateValueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateValueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	Customer_ProductRateValue_FK1 Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	Customer_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	Customer_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	customer_ProductRateValue_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	customer_ProductRateValue_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_ProductRateValue_FK1 key.
            	Customer_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	FK_ProductRateValue_BuyRateCurrencyID Description: 
            </summary>
            <param name="_buyRateCurrencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	FK_ProductRateValue_BuyRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_buyRateCurrencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	FK_ProductRateValue_BuyRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_buyRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	fk_ProductRateValue_BuyRateCurrencyId Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_buyRateCurrencyId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	fk_ProductRateValue_BuyRateCurrencyId Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_buyRateCurrencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByBuyRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_BuyRateCurrencyID key.
            	FK_ProductRateValue_BuyRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_buyRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	FK_ProductRateValue_SellRateCurrencyID Description: 
            </summary>
            <param name="_sellRateCurrencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	FK_ProductRateValue_SellRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sellRateCurrencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	FK_ProductRateValue_SellRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	fk_ProductRateValue_SellRateCurrencyId Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_sellRateCurrencyId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	fk_ProductRateValue_SellRateCurrencyId Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_sellRateCurrencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetBySellRateCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductRateValue_SellRateCurrencyID key.
            	FK_ProductRateValue_SellRateCurrencyID Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	ProductRate_ProductRateValue_FK1 Description: 
            </summary>
            <param name="_productRateId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	ProductRate_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	ProductRate_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	productRate_ProductRateValue_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	productRate_ProductRateValue_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productRateId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRate_ProductRateValue_FK1 key.
            	ProductRate_ProductRateValue_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ProductRateValue objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValueKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductRateValue_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByCustomerIdProductRateId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_CustomerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_productRateId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(System.Int32,System.Byte)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(System.Int32,System.Byte,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(CONFDB.Data.TransactionManager,System.Int32,System.Byte)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(System.Int32,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOption(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_ProductRateID_DefaultOption index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductRateValue_WholesalerID_ProductRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(System.Int32,System.Int32,System.Decimal,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(System.Int32,System.Int32,System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Decimal,System.String)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(System.Int32,System.Int32,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByIdProductRateIdSellRateSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateValue_SellRateCurrencyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_productRateId"></param>
            <param name="_sellRate"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId(CONFDB.Data.TransactionManager,System.Int32,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UX_ProductRateValue_Unique_Rates_Rule index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productRateId"></param>
            <param name="_defaultOption"></param>
            <param name="_wholesalerId"></param>
            <param name="_customerId"></param>
            <param name="_sellRateCurrencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateValue"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ProductRateValue},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ProductRateValue&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ProductRateValue)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateValue"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateValue"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ProductRateValue)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateValue"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateValue"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValue,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateValue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateValue Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateValueProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateValue,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ProductRateValue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ProductRateValue instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateValue Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateIntervalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateIntervalKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateIntervalKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductRateInterval_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateInterval_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateInterval"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ProductRateInterval},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ProductRateInterval&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ProductRateInterval)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateInterval"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateInterval"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ProductRateInterval)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateInterval"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateInterval"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateInterval,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateInterval"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateInterval Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateIntervalProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateInterval,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ProductRateInterval object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ProductRateInterval instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateInterval Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateIntervalChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ProductRateInterval</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateIntervalChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>ProductRateInterval</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaMp4RequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ModeratorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ModeratorProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(System.Int32)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="_dnisid"></param>
            <returns>Returns a typed collection of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a TList of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDnisidFromModerator_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Moderator objects from the datasource by DNISID in the
            	Moderator_DNIS table. Table Moderator is related to table DNIS
            	through the (M:N) relationship defined in the Moderator_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a TList of Moderator objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ModeratorKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Moderator_PK index.
            </summary>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Moderator_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_Moderator_AcctID_PriAcct_SecAcct index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdPriCustomerNumberSecCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_PriCustomerNumber_SecCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="_secCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(CONFDB.Data.TransactionManager,System.String,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByWholesalerIdId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_WholesalerID_ModeratorID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_id">This table is changing to be used to house serveral different sets of codes/conferences per User.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_ModeratorCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByModeratorCodePassCode(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_ModeratorCode_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_moderatorCode"></param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_PassCode index.
            </summary>
            <param name="_passCode"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_passCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByPassCode(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_PassCode index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_passCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Moderator"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_DepartmentID index.
            </summary>
            <param name="_departmentId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="_departmentId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_departmentId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_departmentId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="_departmentId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByDepartmentId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_departmentId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Moderator_UserID index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Moderator_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.CreateUser(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Moderator_CreateUser' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="displayName"> A <c>System.String</c> instance.</param>
            <param name="telephone"> A <c>System.String</c> instance.</param>
            <param name="address1"> A <c>System.String</c> instance.</param>
            <param name="address2"> A <c>System.String</c> instance.</param>
            <param name="city"> A <c>System.String</c> instance.</param>
            <param name="country"> A <c>System.String</c> instance.</param>
            <param name="region"> A <c>System.String</c> instance.</param>
            <param name="postalCode"> A <c>System.String</c> instance.</param>
            <param name="charityId"> A <c>System.Int32?</c> instance.</param>
            <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.CreateUser(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Moderator_CreateUser' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="displayName"> A <c>System.String</c> instance.</param>
            <param name="telephone"> A <c>System.String</c> instance.</param>
            <param name="address1"> A <c>System.String</c> instance.</param>
            <param name="address2"> A <c>System.String</c> instance.</param>
            <param name="city"> A <c>System.String</c> instance.</param>
            <param name="country"> A <c>System.String</c> instance.</param>
            <param name="region"> A <c>System.String</c> instance.</param>
            <param name="postalCode"> A <c>System.String</c> instance.</param>
            <param name="charityId"> A <c>System.Int32?</c> instance.</param>
            <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.CreateUser(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Moderator_CreateUser' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="displayName"> A <c>System.String</c> instance.</param>
            <param name="telephone"> A <c>System.String</c> instance.</param>
            <param name="address1"> A <c>System.String</c> instance.</param>
            <param name="address2"> A <c>System.String</c> instance.</param>
            <param name="city"> A <c>System.String</c> instance.</param>
            <param name="country"> A <c>System.String</c> instance.</param>
            <param name="region"> A <c>System.String</c> instance.</param>
            <param name="postalCode"> A <c>System.String</c> instance.</param>
            <param name="charityId"> A <c>System.Int32?</c> instance.</param>
            <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.CreateUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Moderator_CreateUser' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="displayName"> A <c>System.String</c> instance.</param>
            <param name="telephone"> A <c>System.String</c> instance.</param>
            <param name="address1"> A <c>System.String</c> instance.</param>
            <param name="address2"> A <c>System.String</c> instance.</param>
            <param name="city"> A <c>System.String</c> instance.</param>
            <param name="country"> A <c>System.String</c> instance.</param>
            <param name="region"> A <c>System.String</c> instance.</param>
            <param name="postalCode"> A <c>System.String</c> instance.</param>
            <param name="charityId"> A <c>System.Int32?</c> instance.</param>
            <param name="enabled"> A <c>System.Boolean?</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.InstallDefaults(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.InstallDefaults(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetNextSecCustomerNumber(System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetNextSecCustomerNumber(System.Int32,System.Int32,System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetNextSecCustomerNumber(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetNextSecCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GetNextSecCustomerNumber' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="secCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DisableModerator(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DisableModerator(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DisableModerator(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DisableModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DisableModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetRecordings(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetRecordings(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetCompanyLogin(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetCompanyLogin(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.UpdateDNIS(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.UpdateDNIS(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.UpdateDNIS(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.UpdateDNIS(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_UpdateDNIS' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeleteModerator(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeleteModerator(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeleteModerator(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeleteModerator(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_DeleteModerator' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GenerateCodes(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@,System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GenerateCodes(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@,System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GenerateCodes(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@,System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GenerateCodes(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String@,System.String@)">
            <summary>
            This method wrap the 'p_Moderator_GenerateCodes' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="modCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="passCodeLength"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorCode"> A <c>System.String</c> instance.</param>
            <param name="passCode"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetProductFeatures(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetProductFeatures(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Moderator_GetProductFeatures' stored procedure. 
            </summary>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Moderator},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Moderator&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Moderator)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Moderator)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Moderator"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Moderator"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Moderator Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ModeratorProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Moderator,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Moderator object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Moderator instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Moderator Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ForExProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ForExProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ForExProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ForExProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ForExKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	FK_ForEx_Curve Description: 
            </summary>
            <param name="_curveId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	FK_ForEx_Curve Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_curveId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	FK_ForEx_Curve Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_curveId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	fk_ForEx_Curve Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_curveId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	fk_ForEx_Curve Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_curveId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetByCurveId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ForEx_Curve key.
            	FK_ForEx_Curve Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_curveId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ForEx objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ForExKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ForEx_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ForEx_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ForEx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ForEx},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ForEx&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ForEx)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ForEx"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ForEx"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ForEx)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ForEx"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ForEx"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ForEx,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ForEx"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ForEx Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ForExProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ForEx,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ForEx object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ForEx instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ForEx Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CustomerTransactionType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionTypeChildEntityTypes.GlPostingType">
            <summary>
             Composite Property for <c>GlPostingType</c> at GlPostingTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerTransactionTypeChildEntityTypes.CustomerTransactionCollection">
            <summary>
             Collection of <c>CustomerTransactionType</c> as OneToMany for CustomerTransactionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionImportProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImportKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImportKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerTransactionImport_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerTransactionImport_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.PostCustomerTransactionCharges(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransactionImport_PostCustomerTransactionCharges' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="customerTransactionImportId"> A <c>System.Int64?</c> instance.</param>
            <param name="customerTransactionTypeId2"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.PostCustomerTransactionCharges(System.Int32,System.Int32,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransactionImport_PostCustomerTransactionCharges' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="customerTransactionImportId"> A <c>System.Int64?</c> instance.</param>
            <param name="customerTransactionTypeId2"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.PostCustomerTransactionCharges(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransactionImport_PostCustomerTransactionCharges' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="customerTransactionImportId"> A <c>System.Int64?</c> instance.</param>
            <param name="customerTransactionTypeId2"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.PostCustomerTransactionCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_CustomerTransactionImport_PostCustomerTransactionCharges' stored procedure. 
            </summary>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="customerTransactionImportId"> A <c>System.Int64?</c> instance.</param>
            <param name="customerTransactionTypeId2"> A <c>System.Int32?</c> instance.</param>
            <param name="startDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="endDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CustomerTransactionImport},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CustomerTransactionImport&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CustomerTransactionImport)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CustomerTransactionImport)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImport,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CustomerTransactionImport"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransactionImport Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerTransactionImportProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerTransactionImport,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CustomerTransactionImport object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CustomerTransactionImport instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CustomerTransactionImport Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionImportChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CustomerTransactionImport</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerDocumentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerDocumentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	Wholesaler_Company_FK1 Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	Wholesaler_Company_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	Wholesaler_Company_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	wholesaler_Company_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	wholesaler_Company_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_Company_FK1 key.
            	Wholesaler_Company_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Company objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CompanyKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Company_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Company_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Wholesaler_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.GetByWholesalerIdDescription(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Wholesaler_Description index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Company"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Company},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Company&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Company)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Company"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Company"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Company)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Company"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Company"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Company,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Company"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Company Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CompanyProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Company,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Company object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Company instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Company Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Company</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>Company</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>Company</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AreaCodeNxxProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxxKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxxKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key AreaCodeNXX_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AreaCodeNXX_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.AreaCodeNxx},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;AreaCodeNxx&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.AreaCodeNxx)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.AreaCodeNxx)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxx,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.AreaCodeNxx"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.AreaCodeNxx Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.AreaCodeNxxProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.AreaCodeNxx,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.AreaCodeNxx object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.AreaCodeNxx instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.AreaCodeNxx Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AreaCodeNxxChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AreaCodeNxx</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_CustomerTransactionList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_CustomerTransactionListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_CustomerTransactionList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_CustomerTransactionList"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="T:CONFDB.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.#ctor(System.String,CONFDB.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:CONFDB.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:CONFDB.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.#ctor(System.String,CONFDB.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.#ctor(System.String,CONFDB.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:CONFDB.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.#ctor(System.String,CONFDB.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.#ctor(System.String,CONFDB.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CONFDB.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:CONFDB.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:CONFDB.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:CONFDB.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusHistoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketStatusHistoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketStatusHistoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_ticketId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	FK_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="_statusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	FK_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	FK_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	fk_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_statusId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	fk_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_statusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByStatusId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_TicketStatusHistory_TicketStatus key.
            	FK_TicketStatusHistory_TicketStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.TicketStatusHistory objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key TicketStatusHistory_PK index.
            </summary>
            <param name="_ticketId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="_ticketId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="_ticketId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.GetByTicketId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TicketStatusHistory_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_ticketId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TicketStatusHistory},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TicketStatusHistory&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TicketStatusHistory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TicketStatusHistory)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistory,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TicketStatusHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TicketStatusHistory Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TicketStatusHistoryProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TicketStatusHistory,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TicketStatusHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TicketStatusHistory instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TicketStatusHistory Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempCodes</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemSettingsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemSettingsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettingsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_name">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettingsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key SystemSettings_PK index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SystemSettings_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SystemSettings"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.SystemSettings},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;SystemSettings&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.SystemSettings)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemSettings"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemSettings"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.SystemSettings)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SystemSettings"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemSettings"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettings,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SystemSettings"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.SystemSettings Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.SystemSettingsProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.SystemSettings,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.SystemSettings object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.SystemSettings instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.SystemSettings Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemSettingsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.SystemSettings</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTrackerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTrackerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeeVoghMeetingTracker index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.SeeVoghMeetingTracker},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;SeeVoghMeetingTracker&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.SeeVoghMeetingTracker)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.SeeVoghMeetingTracker)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTracker,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.SeeVoghMeetingTracker"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.SeeVoghMeetingTracker Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.SeeVoghMeetingTrackerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.SeeVoghMeetingTracker,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.SeeVoghMeetingTracker object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.SeeVoghMeetingTracker instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.SeeVoghMeetingTracker Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingParticipantUsageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.RecordingParticipantUsage</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.RecordingParticipantUsageChildEntityTypes.Recording">
            <summary>
             Composite Property for <c>Recording</c> at RecordingIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveParticipantChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.OmnoviaHostedArchiveParticipant</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorXtimeUserChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ModeratorXtimeUser</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadSourceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadSourceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	FK_Lead_Wholesaler Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	FK_Lead_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	FK_Lead_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	fk_Lead_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	fk_Lead_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_Wholesaler key.
            	FK_Lead_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	FK_Lead_SalesPerson Description: 
            </summary>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	FK_Lead_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	FK_Lead_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	fk_Lead_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	fk_Lead_SalesPerson Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Lead_SalesPerson key.
            	FK_Lead_SalesPerson Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Lead objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.LeadKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Lead_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Lead_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Lead"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Statistic_ContactEmail index.
            </summary>
            <param name="_contactEmail"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="_contactEmail"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_contactEmail"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_contactEmail"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="_contactEmail"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.GetByContactEmail(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Statistic_ContactEmail index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_contactEmail"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Lead},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Lead&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Lead)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Lead"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Lead"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Lead)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Lead"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Lead"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Lead,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Lead"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Lead Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.LeadProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Lead,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Lead object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Lead instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Lead Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Lead</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesPersonIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.IrWholesalerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.IrWholesalerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeQueueChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.BridgeQueue</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeQueueChildEntityTypes.Bridge">
            <summary>
             Composite Property for <c>Bridge</c> at BridgeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeQueueChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ActionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ActionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ActionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TrendProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TrendProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempSampleRatesPerProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RatingTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RatingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductRateType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductRateType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ProductRateType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ProductRateType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ProductRateType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ProductRateType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ProductRateType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ProductRateType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ProductRateType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductRateTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductRateType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ProductRateType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ProductRateType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ProductRateType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ProductRateType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateTypeChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>ProductRateType</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.PrevInvoicesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.PrevInvoicesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_FeatureChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Moderator_Feature</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Moderator_FeatureChildEntityTypes.Feature">
            <summary>
             Composite Property for <c>Feature</c> at FeatureIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Moderator_FeatureChildEntityTypes.FeatureOption">
            <summary>
             Composite Property for <c>FeatureOption</c> at FeatureOptionIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Moderator_FeatureChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ModeratorChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Moderator</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at UserIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.Department">
            <summary>
             Composite Property for <c>Department</c> at DepartmentIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.Moderator_FeatureCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for Moderator_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.WelcomeKitRequestCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for WelcomeKitRequestCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.BridgeRequestCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for BridgeRequestCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.Moderator_DnisCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for Moderator_DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.BridgeQueueCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for BridgeQueueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.RatedCdrCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for RatedCdrCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>Moderator</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ModeratorChildEntityTypes.DnisidDnisCollection_From_Moderator_Dnis">
            <summary>
             Collection of <c>Moderator</c> as ManyToMany for DnisCollection_From_Moderator_Dnis
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadPeriodChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.LeadPeriod</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadPeriodChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>LeadPeriod</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.FeatureOptionType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.FeatureOptionTypeChildEntityTypes.FeatureOptionCollection">
            <summary>
             Collection of <c>FeatureOptionType</c> as OneToMany for FeatureOptionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EventManagerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EventManagerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ErrorCodesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ErrorCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DocumentTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DocumentTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DocumentTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DocumentTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key DocumentType_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the DocumentType_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.DocumentType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.DocumentType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;DocumentType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.DocumentType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.DocumentType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DocumentType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.DocumentType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.DocumentType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DocumentType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.DocumentType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.DocumentType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.DocumentTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.DocumentType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.DocumentType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.DocumentType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.DocumentType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.DnisProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionImportProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionImportProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerTransactionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerTransactionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_FeatureProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Customer_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Customer_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_FeatureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	Customer_Customer_Feature_FK Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	Customer_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	Customer_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	customer_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	customer_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Customer_Feature_FK key.
            	Customer_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	Feature_Customer_Feature_FK Description: 
            </summary>
            <param name="_featureId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	Feature_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	Feature_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	feature_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	feature_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Feature_Customer_Feature_FK key.
            	Feature_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	FeatureOption_Customer_Feature_FK Description: 
            </summary>
            <param name="_featureOptionId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	FeatureOption_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	FeatureOption_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	featureOption_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	featureOption_Customer_Feature_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_featureOptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FeatureOption_Customer_Feature_FK key.
            	FeatureOption_Customer_Feature_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer_Feature objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_FeatureKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Customer_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_Feature_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Feature"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_Feature_All index.
            </summary>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByFeatureIdCustomerIdFeatureOptionId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_All index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_featureId"></param>
            <param name="_customerId"></param>
            <param name="_featureOptionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.GetByCustomerIdFeatureId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Feature_CustomerIDFeatureID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_featureId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Customer_Feature},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Customer_Feature&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Customer_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer_Feature"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Feature"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Customer_Feature)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer_Feature"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Feature"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Feature,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Feature"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Customer_Feature Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_FeatureProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Feature,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Customer_Feature object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Customer_Feature instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Customer_Feature Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeRequestTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeRequestTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_BridgeRequestType index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BridgeRequestType index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.BridgeRequestType"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.BridgeRequestType},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;BridgeRequestType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.BridgeRequestType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeRequestType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequestType"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.BridgeRequestType)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.BridgeRequestType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequestType"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestType,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.BridgeRequestType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.BridgeRequestType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.BridgeRequestTypeProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.BridgeRequestType,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.BridgeRequestType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.BridgeRequestType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.BridgeRequestType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.BillableLegsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BillableLegsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccessType_ProductRateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AccessType_ProductRate</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccessType_ProductRateChildEntityTypes.AccessType">
            <summary>
             Composite Property for <c>AccessType</c> at AccessTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccessType_ProductRateChildEntityTypes.ProductRate">
            <summary>
             Composite Property for <c>ProductRate</c> at ProductRateIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_AccessType_ProductRatesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:CONFDB.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:CONFDB.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:CONFDB.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.BeginTransaction">
            <summary>
            	Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            	Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.Commit">
            <summary>
            	Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:CONFDB.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:CONFDB.Data.TransactionManager.ConnectionString">
            <summary>
            	Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:CONFDB.Data.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:CONFDB.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:CONFDB.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CONFDB.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:CONFDB.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempExistingCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_codes">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_codes">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key TempExistingCodes_PK index.
            </summary>
            <param name="_codes"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="_codes"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_codes"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_codes"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="_codes"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.GetByCodes(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the TempExistingCodes_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_codes"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TempExistingCodes"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.TempExistingCodes},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;TempExistingCodes&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.TempExistingCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempExistingCodes"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempExistingCodes"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.TempExistingCodes)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.TempExistingCodes"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempExistingCodes"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodes,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.TempExistingCodes"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.TempExistingCodes Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.TempExistingCodesProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.TempExistingCodes,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.TempExistingCodes object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.TempExistingCodes instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.TempExistingCodes Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.TempExistingCodesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempExistingCodes</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TaxableProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TaxableProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionLabelProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemExtensionLabelProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemExtensionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemExtensionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SeeVoghMeetingTrackerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.SeeVoghMeetingTracker</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Moderator_DnisProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Moderator_DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.MarketingServiceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.MarketingServiceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.MarketingServiceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.MarketingServiceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(System.Int32)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns a TList of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByUserIdFromUser_MarketingService(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets MarketingService objects from the datasource by UserID in the
            	User_MarketingService table. Table MarketingService is related to table User
            	through the (M:N) relationship defined in the User_MarketingService table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns a TList of MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingServiceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	FK_MarketingService_Wholesaler Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	FK_MarketingService_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	FK_MarketingService_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	fk_MarketingService_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	fk_MarketingService_Wholesaler Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_MarketingService_Wholesaler key.
            	FK_MarketingService_Wholesaler Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.MarketingService objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingServiceKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_MarketingService index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MarketingService index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.MarketingService"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.MarketingService},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;MarketingService&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.MarketingService)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.MarketingService"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.MarketingService"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.MarketingService)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.MarketingService"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.MarketingService"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingService,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.MarketingService"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.MarketingService Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.MarketingServiceProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.MarketingService,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.MarketingService object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.MarketingService instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.MarketingService Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.GlPostingTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.GlPostingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ExtensionTypeCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_DnisProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Customer_DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_DnisProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Customer_DnisProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_DnisKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dnisid">. Primary Key.</param>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid">. Primary Key.</param>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_DnisKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Customer_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisidCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_DNIS_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer_Dnis"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="_dnisid"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.GetByDnisid(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_DNIS_DNISID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Customer_Dnis},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Customer_Dnis&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Customer_Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer_Dnis"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Dnis"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Customer_Dnis)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer_Dnis"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Dnis"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Dnis,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer_Dnis"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Customer_Dnis Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.Customer_DnisProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer_Dnis,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Customer_Dnis object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Customer_Dnis instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Customer_Dnis Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(System.Int32)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="_dnisid"></param>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets CONFDB.Entities.Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a TList of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="_dnisid"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByDnisidFromCustomer_Dnis(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customer objects from the datasource by DNISID in the
            	Customer_DNIS table. Table Customer is related to table DNIS
            	through the (M:N) relationship defined in the Customer_DNIS table.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_dnisid"></param>
            <remarks></remarks>
            <returns>Returns a TList of Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	Currency_Customer_FK1 Description: 
            </summary>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	Currency_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	Currency_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	currency_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	currency_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_currencyId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCurrencyId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Currency_Customer_FK1 key.
            	Currency_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_currencyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	FK_Customer_AccountManager Description: 
            </summary>
            <param name="_accountManagerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	FK_Customer_AccountManager Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accountManagerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	FK_Customer_AccountManager Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accountManagerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	fk_Customer_AccountManager Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accountManagerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	fk_Customer_AccountManager Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_accountManagerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByAccountManagerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_AccountManager key.
            	FK_Customer_AccountManager Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_accountManagerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	FK_Customer_BillingContactCountry Description: 
            </summary>
            <param name="_billingContactCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	FK_Customer_BillingContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	FK_Customer_BillingContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	fk_Customer_BillingContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingContactCountry"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	fk_Customer_BillingContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingContactCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactCountry key.
            	FK_Customer_BillingContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	FK_Customer_BillingContactRegion Description: 
            </summary>
            <param name="_billingContactRegion"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	FK_Customer_BillingContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactRegion"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	FK_Customer_BillingContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactRegion"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	fk_Customer_BillingContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingContactRegion"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	fk_Customer_BillingContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_billingContactRegion"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByBillingContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_BillingContactRegion key.
            	FK_Customer_BillingContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_billingContactRegion"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	FK_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="_primaryContactCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	FK_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactCountry"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	FK_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	fk_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_primaryContactCountry"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	fk_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_primaryContactCountry"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactCountry(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactCountry key.
            	FK_Customer_PrimaryContactCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactCountry"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	FK_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="_primaryContactRegion"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	FK_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactRegion"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	FK_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactRegion"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	fk_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_primaryContactRegion"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	fk_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_primaryContactRegion"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByPrimaryContactRegion(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Customer_PrimaryContactRegion key.
            	FK_Customer_PrimaryContactRegion Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_primaryContactRegion"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	Taxable_Customer_FK1 Description: 
            </summary>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	Taxable_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	Taxable_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	taxable_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	taxable_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_taxableId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByTaxableId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Taxable_Customer_FK1 key.
            	Taxable_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_taxableId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	Verticals_Customer_FK1 Description: 
            </summary>
            <param name="_verticalId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	Verticals_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_verticalId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	Verticals_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_verticalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	verticals_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_verticalId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	verticals_Customer_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_verticalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByVerticalId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Verticals_Customer_FK1 key.
            	Verticals_Customer_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_verticalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Customer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CustomerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Customer_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerIdPriCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UI_WholesalerID_PriCustomerNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="_priCustomerNumber"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_WholesalerID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_SalesPersonID index.
            </summary>
            <param name="_salesPersonId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_CompanyID index.
            </summary>
            <param name="_companyId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByCompanyId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_CompanyID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_LastModifiedDate index.
            </summary>
            <param name="_lastModified"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="_lastModified"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(CONFDB.Data.TransactionManager,System.DateTime)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_lastModified"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_lastModified"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="_lastModified"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByLastModified(CONFDB.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_LastModifiedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_lastModified"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Customer_UserID index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetByUserId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetCompanyLogin(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetCompanyLogin(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetCompanyLogin' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.InstallDefaults(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.InstallDefaults(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.InstallDefaults(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_InstallDefaults' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRates(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRates(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRates(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghOverageCharges(System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghOverageCharges(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghOverageCharges(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghOverageCharges(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghOverageCharges' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateDNIS(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateDNIS(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateDNIS(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateDNIS(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateDNIS' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisid"> A <c>System.Int32?</c> instance.</param>
            <param name="dnisTypeId"> A <c>System.Int32?</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_addArchiveDetails(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
            </summary>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieTitle"> A <c>System.String</c> instance.</param>
            <param name="roomId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
            <param name="roomName"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_addArchiveDetails(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
            </summary>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieTitle"> A <c>System.String</c> instance.</param>
            <param name="roomId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
            <param name="roomName"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_addArchiveDetails(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
            </summary>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieTitle"> A <c>System.String</c> instance.</param>
            <param name="roomId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
            <param name="roomName"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_addArchiveDetails(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_addArchiveDetails' stored procedure. 
            </summary>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieTitle"> A <c>System.String</c> instance.</param>
            <param name="roomId"> A <c>System.Int32?</c> instance.</param>
            <param name="movieDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieDateAdded"> A <c>System.DateTime?</c> instance.</param>
            <param name="movieLength"> A <c>System.Int32?</c> instance.</param>
            <param name="roomName"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="archiveHostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghMonthlySummary(System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghMonthlySummary(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghMonthlySummary(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetSeeVoghMonthlySummary(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            This method wrap the 'p_Customer_GetSeeVoghMonthlySummary' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="billedDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetRecordings(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetRecordings(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_GetRecordings(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_Omnovia_GetRecordings' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DisableCustomer(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DisableCustomer(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DisableCustomer(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DisableCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DisableCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetRecordingRates(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetRecordingRates(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetRecordingRates(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetRecordingRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfoDataSet(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfoDataSet(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfoDataSet(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfoDataSet(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfoDataSet' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.CreateUser(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_CreateUser' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.CreateUser(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_CreateUser' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.CreateUser(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_CreateUser' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.CreateUser(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_Customer_CreateUser' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="userName"> A <c>System.String</c> instance.</param>
            <param name="password"> A <c>System.String</c> instance.</param>
            <param name="mustChangePassword"> A <c>System.Boolean?</c> instance.</param>
            <param name="userId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfo(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@,System.String@,System.Nullable{System.Decimal}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfo(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@,System.String@,System.Nullable{System.Decimal}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfo(CONFDB.Data.TransactionManager,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@,System.String@,System.Nullable{System.Decimal}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetBalanceInfo(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32}@,System.String@,System.Nullable{System.Decimal}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetBalanceInfo' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="returnRowSet"> A <c>System.Boolean?</c> instance.</param>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="currentBalance"> A <c>System.Decimal?</c> instance.</param>
            <param name="currencyId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRatesByProductRateTypeDisplayName(System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRatesByProductRateTypeDisplayName(System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRatesByProductRateTypeDisplayName(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductRatesByProductRateTypeDisplayName(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method wrap the 'p_Customer_GetProductRatesByProductRateTypeDisplayName' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="productRateTypeDisplayName"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetWebconferenceRecordingRates(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetWebconferenceRecordingRates(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetWebconferenceRecordingRates(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetWebconferenceRecordingRates(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetWebconferenceRecordingRates' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_RequestMP4(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="extraInfo"> A <c>System.String</c> instance.</param>
            <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
            <param name="message"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_RequestMP4(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="extraInfo"> A <c>System.String</c> instance.</param>
            <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
            <param name="message"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_RequestMP4(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="extraInfo"> A <c>System.String</c> instance.</param>
            <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
            <param name="message"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Omnovia_RequestMP4(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32}@,System.String@)">
            <summary>
            This method wrap the 'p_Customer_Omnovia_RequestMP4' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedId"> A <c>System.Int32?</c> instance.</param>
            <param name="requestedBy"> A <c>System.String</c> instance.</param>
            <param name="extraInfo"> A <c>System.String</c> instance.</param>
            <param name="mp4RequestId"> A <c>System.Int32?</c> instance.</param>
            <param name="message"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateFeature(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateFeature(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateFeature(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.UpdateFeature(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'p_Customer_UpdateFeature' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionId"> A <c>System.Int32?</c> instance.</param>
            <param name="featureOptionValue"> A <c>System.String</c> instance.</param>
            <param name="updateModerators"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetNextCustomerNumber(System.String,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetNextCustomerNumber(System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetNextCustomerNumber(CONFDB.Data.TransactionManager,System.String,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetNextCustomerNumber(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            This method wrap the 'p_Customer_GetNextCustomerNumber' stored procedure. 
            </summary>
            <param name="wholesalerId"> A <c>System.String</c> instance.</param>
            <param name="priCustomerNumber"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeleteCustomer(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeleteCustomer(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeleteCustomer(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeleteCustomer(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_DeleteCustomer' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductFeatures(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductFeatures(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.GetProductFeatures(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_Customer_GetProductFeatures' stored procedure. 
            </summary>
            <param name="customerId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Customer},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Customer&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Customer)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Customer)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Customer"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Customer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Customer Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CustomerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Customer,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Customer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Customer instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Customer Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.CountryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Country</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.CustomerCollectionGetByPrimaryContactCountry">
            <summary>
             Collection of <c>Country</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.WholesalerCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for WholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.StateCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for StateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.CompanyInfoCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for CompanyInfoCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.CustomerCollectionGetByBillingContactCountry">
            <summary>
             Collection of <c>Country</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CountryChildEntityTypes.UserCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for UserCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionCustomerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CommissionCustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CommissionCustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	Customer_CommissionCustomer_FK Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	Customer_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	Customer_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	customer_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	customer_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Customer_CommissionCustomer_FK key.
            	Customer_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	SalesPerson_CommissionCustomer_FK Description: 
            </summary>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	SalesPerson_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	SalesPerson_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	salesPerson_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	salesPerson_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_salesPersonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetBySalesPersonId(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SalesPerson_CommissionCustomer_FK key.
            	SalesPerson_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	Wholesaler_CommissionCustomer_FK Description: 
            </summary>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	Wholesaler_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	Wholesaler_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	wholesaler_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	wholesaler_CommissionCustomer_Fk Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_wholesalerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetByWholesalerId(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Wholesaler_CommissionCustomer_FK key.
            	Wholesaler_CommissionCustomer_FK Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_wholesalerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.CommissionCustomer objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key CommissionCustomer_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CommissionCustomer_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.CommissionCustomer"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.CommissionCustomer},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;CommissionCustomer&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.CommissionCustomer)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CommissionCustomer"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CommissionCustomer"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.CommissionCustomer)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.CommissionCustomer"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CommissionCustomer"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomer,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.CommissionCustomer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.CommissionCustomer Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.CommissionCustomerProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.CommissionCustomer,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.CommissionCustomer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.CommissionCustomer instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.CommissionCustomer Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.AreaCodeNxxProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AreaCodeNxxProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.AdminSiteNotesHistoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Ticket</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.TicketProduct">
            <summary>
             Composite Property for <c>TicketProduct</c> at TicketProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.TicketStatus">
            <summary>
             Composite Property for <c>TicketStatus</c> at StatusIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.TicketPriority">
            <summary>
             Composite Property for <c>TicketPriority</c> at TicketPriorityIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.TicketCategory">
            <summary>
             Composite Property for <c>TicketCategory</c> at TicketCategoryIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.Moderator">
            <summary>
             Composite Property for <c>Moderator</c> at ModeratorIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketChildEntityTypes.TicketStatusHistory">
            <summary>
             Entity <c>TicketStatusHistory</c> as OneToOne for TicketStatusHistory
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempExistingCodesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TempExistingCodesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempCodeChangesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempCodeChanges</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.SystemSettingsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.SystemSettingsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	ProductType_Product_FK1 Description: 
            </summary>
            <param name="_productTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	ProductType_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productTypeId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	ProductType_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	productType_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	productType_Product_Fk1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByProductTypeId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductType_Product_FK1 key.
            	ProductType_Product_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.Product objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key Product_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.Product"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Product_Name index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.GetByName(CONFDB.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.Product},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;Product&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Product)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Product"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Product"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.Product)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Product"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Product"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.Product,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.Product Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ProductProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.Product,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.Product instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.Product Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ParticipantListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ParticipantListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantListKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	FK_ParticipantList_Customer Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	FK_ParticipantList_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	FK_ParticipantList_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	fk_ParticipantList_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	fk_ParticipantList_Customer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetByCustomerId(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ParticipantList_Customer key.
            	FK_ParticipantList_Customer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of CONFDB.Entities.ParticipantList objects.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantListKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ParticipantList_PK index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ParticipantList_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.ParticipantList"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.ParticipantList},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;ParticipantList&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.ParticipantList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ParticipantList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ParticipantList"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.ParticipantList)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.ParticipantList"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ParticipantList"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantList,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.ParticipantList"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.ParticipantList Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.ParticipantListProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.ParticipantList,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.ParticipantList object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.ParticipantList instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.ParticipantList Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.Delete(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.Delete(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.Get(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchiveKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:CONFDB.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_OmnoviaHostedArchive index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetById(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OmnoviaHostedArchive index.
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> class.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RenewHostedLink(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_RenewHostedLink' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="noMonthHostingPeriod"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RenewHostedLink(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_RenewHostedLink' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="noMonthHostingPeriod"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RenewHostedLink(CONFDB.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_RenewHostedLink' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="noMonthHostingPeriod"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RenewHostedLink(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_RenewHostedLink' stored procedure. 
            </summary>
            <param name="omnoviaCustomerId"> A <c>System.Int32?</c> instance.</param>
            <param name="moderatorId"> A <c>System.Int32?</c> instance.</param>
            <param name="hostedArchiveId"> A <c>System.Int32?</c> instance.</param>
            <param name="noMonthHostingPeriod"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.checkURL(System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_checkURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.checkURL(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_checkURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.checkURL(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_checkURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.checkURL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_checkURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.getAllOmnoviaCompanyLogin">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.getAllOmnoviaCompanyLogin(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.getAllOmnoviaCompanyLogin(CONFDB.Data.TransactionManager)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.getAllOmnoviaCompanyLogin(CONFDB.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_getAllOmnoviaCompanyLogin' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.addRegistration(System.String,System.String,System.String,System.String,System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_addRegistration' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="firstname"> A <c>System.String</c> instance.</param>
            <param name="lastname"> A <c>System.String</c> instance.</param>
            <param name="company"> A <c>System.String</c> instance.</param>
            <param name="email"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.addRegistration(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_addRegistration' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="firstname"> A <c>System.String</c> instance.</param>
            <param name="lastname"> A <c>System.String</c> instance.</param>
            <param name="company"> A <c>System.String</c> instance.</param>
            <param name="email"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.addRegistration(CONFDB.Data.TransactionManager,System.String,System.String,System.String,System.String,System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_addRegistration' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="firstname"> A <c>System.String</c> instance.</param>
            <param name="lastname"> A <c>System.String</c> instance.</param>
            <param name="company"> A <c>System.String</c> instance.</param>
            <param name="email"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.addRegistration(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_addRegistration' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="firstname"> A <c>System.String</c> instance.</param>
            <param name="lastname"> A <c>System.String</c> instance.</param>
            <param name="company"> A <c>System.String</c> instance.</param>
            <param name="email"> A <c>System.String</c> instance.</param>
            <param name="companyShortLink"> A <c>System.String</c> instance.</param>
            <param name="movieId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetCompanyLoginByURL(System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_GetCompanyLoginByURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetCompanyLoginByURL(System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_GetCompanyLoginByURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetCompanyLoginByURL(CONFDB.Data.TransactionManager,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_GetCompanyLoginByURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.GetCompanyLoginByURL(CONFDB.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'p_OmnoviaHostedArchive_GetCompanyLoginByURL' stored procedure. 
            </summary>
            <param name="url"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.TList{CONFDB.Entities.OmnoviaHostedArchive},System.Int32,System.Int32)">
            <summary>
            Fill a CONFDB.Entities.TList&lt;OmnoviaHostedArchive&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:CONFDB.Entities.TList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.OmnoviaHostedArchive)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object to refresh.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.RefreshEntity(System.Data.DataSet,CONFDB.Entities.OmnoviaHostedArchive)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object.</param>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.DeepLoad(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchive,System.Boolean,CONFDB.Data.DeepLoadType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:CONFDB.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:CONFDB.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:CONFDB.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.OmnoviaHostedArchive"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaHostedArchive Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBaseCore.DeepSave(CONFDB.Data.TransactionManager,CONFDB.Entities.OmnoviaHostedArchive,CONFDB.Data.DeepSaveType,System.Type[],CONFDB.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the CONFDB.Entities.OmnoviaHostedArchive object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">CONFDB.Entities.OmnoviaHostedArchive instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CONFDB.Entities.OmnoviaHostedArchive Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.OmnoviaHostedArchive</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadStageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.LeadStage</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadStageChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>LeadStage</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadChurnReasonChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.LeadChurnReason</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadChurnReasonChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>LeadChurnReason</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ForExChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ForEx</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ForExChildEntityTypes.Curve">
            <summary>
             Composite Property for <c>Curve</c> at CurveIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerReviewProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CustomerReviewProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_FeatureChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Customer_Feature</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Customer_FeatureChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Customer_FeatureChildEntityTypes.Feature">
            <summary>
             Composite Property for <c>Feature</c> at FeatureIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Customer_FeatureChildEntityTypes.FeatureOption">
            <summary>
             Composite Property for <c>FeatureOption</c> at FeatureOptionIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingNotesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CompanyLeadTrackingNotes</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CompanyLeadTrackingNotesChildEntityTypes.CompanyLeadTracking">
            <summary>
             Composite Property for <c>CompanyLeadTracking</c> at CompanyLeadTrackingIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CompanyLeadTrackingProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CompanyLeadTrackingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendIsNotNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendStartsWith">
            <summary>
            AppendStartsWith
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendEndsWith">
            <summary>
            AppendEndsWith
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendContains">
            <summary>
            AppendContains
            </summary>
        </member>
        <member name="F:CONFDB.Data.StringBuilderExpression.AppendLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:CONFDB.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:CONFDB.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:CONFDB.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlFilterParameterCollection.CONFDB#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:CONFDB.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:CONFDB.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:CONFDB.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="M:CONFDB.Data.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:CONFDB.Data.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.NetTiersProviderCollection.Add(CONFDB.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:CONFDB.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:CONFDB.Data.Bases.ValidTicketStateChangesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ValidTicketStateChanges</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ValidTicketStateChangesChildEntityTypes.TicketStatus">
            <summary>
             Composite Property for <c>TicketStatus</c> at FromStatusIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketUserAssociationsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketUserAssociations</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusHistoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TicketStatusHistory</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusHistoryChildEntityTypes.TicketStatus">
            <summary>
             Composite Property for <c>TicketStatus</c> at StatusIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.TicketStatusHistoryChildEntityTypes.Ticket">
            <summary>
             Composite Property for <c>Ticket</c> at TicketIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.LeadProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceNotesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.InvoiceNotes</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DocumentTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.DocumentType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.DocumentTypeChildEntityTypes.CustomerDocumentCollection">
            <summary>
             Collection of <c>DocumentType</c> as OneToMany for CustomerDocumentCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurveChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Curve</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurveChildEntityTypes.ForExCollection">
            <summary>
             Collection of <c>Curve</c> as OneToMany for ForExCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ClientNotesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ClientNotes</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CharityProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CharityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CallFlowProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.CallFlowProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TempReplayIdsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.TempReplayIds</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.LeadProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.LeadProduct</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.LeadProductChildEntityTypes.CompanyLeadTrackingCollection">
            <summary>
             Collection of <c>LeadProduct</c> as OneToMany for CompanyLeadTrackingCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.FeatureOptionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.FeatureOptionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CustomerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Customer</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.User">
            <summary>
             Composite Property for <c>User</c> at UserIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Company">
            <summary>
             Composite Property for <c>Company</c> at CompanyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Currency">
            <summary>
             Composite Property for <c>Currency</c> at CurrencyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.AccountManager">
            <summary>
             Composite Property for <c>AccountManager</c> at AccountManagerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at BillingContactCountrySource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.State">
            <summary>
             Composite Property for <c>State</c> at BillingContactRegionSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesPersonIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Taxable">
            <summary>
             Composite Property for <c>Taxable</c> at TaxableIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Vertical">
            <summary>
             Composite Property for <c>Vertical</c> at VerticalIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.CustomerDocumentCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for CustomerDocumentCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.ProductRateValueCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for ProductRateValueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Customer_FeatureCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for Customer_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.CommissionCustomerCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for CommissionCustomerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.CustomerTransactionCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for CustomerTransactionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.ParticipantListCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for ParticipantListCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.DepartmentCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for DepartmentCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.Customer_DnisCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for Customer_DnisCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.InvoiceSummaryCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for InvoiceSummaryCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.DnisidDnisCollection_From_Customer_Dnis">
            <summary>
             Collection of <c>Customer</c> as ManyToMany for DnisCollection_From_Customer_Dnis
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.TicketCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for TicketCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.CommissionCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for CommissionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.EventManagerCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for EventManagerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CustomerChildEntityTypes.ModeratorCollection">
            <summary>
             Collection of <c>Customer</c> as OneToMany for ModeratorCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionCustomerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.CommissionCustomer</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionCustomerChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionCustomerChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesPersonIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionCustomerChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeRequestTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.BridgeRequestType</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.BridgeRequestTypeChildEntityTypes.BridgeRequestCollection">
            <summary>
             Collection of <c>BridgeRequestType</c> as OneToMany for BridgeRequestCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AuditLogChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AuditLog</c>
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Wholesaler_Product_FeatureProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Wholesaler_ProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Wholesaler_Product</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_ProductChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_ProductChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_ProductChildEntityTypes.Wholesaler_Product_FeatureCollection">
            <summary>
             Collection of <c>Wholesaler_Product</c> as OneToMany for Wholesaler_Product_FeatureCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Wholesaler_ProductChildEntityTypes.CustomerTransactionCollection">
            <summary>
             Collection of <c>Wholesaler_Product</c> as OneToMany for CustomerTransactionCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.UserProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.TicketStatusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.TicketStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateValueChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ProductRateValue</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateValueChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateValueChildEntityTypes.Currency">
            <summary>
             Composite Property for <c>Currency</c> at BuyRateCurrencyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateValueChildEntityTypes.ProductRate">
            <summary>
             Composite Property for <c>ProductRate</c> at ProductRateIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductRateValueChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductRateIntervalProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ProductRateIntervalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.ParticipantProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.OmnoviaHostedArchiveProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.MarketingServiceChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.MarketingService</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.MarketingServiceChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.MarketingServiceChildEntityTypes.User_MarketingServiceCollection">
            <summary>
             Collection of <c>MarketingService</c> as OneToMany for User_MarketingServiceCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.MarketingServiceChildEntityTypes.UserIdUserCollection_From_User_MarketingService">
            <summary>
             Collection of <c>MarketingService</c> as ManyToMany for UserCollection_From_User_MarketingService
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.DepartmentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.DepartmentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Customer_DnisChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Customer_Dnis</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Customer_DnisChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.Customer_DnisChildEntityTypes.Dnis">
            <summary>
             Composite Property for <c>Dnis</c> at DnisidSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CurrencyChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Currency</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurrencyChildEntityTypes.CommissionCollection">
            <summary>
             Collection of <c>Currency</c> as OneToMany for CommissionCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurrencyChildEntityTypes.WholesalerCollection">
            <summary>
             Collection of <c>Currency</c> as OneToMany for WholesalerCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurrencyChildEntityTypes.ProductRateValueCollectionGetByBuyRateCurrencyId">
            <summary>
             Collection of <c>Currency</c> as OneToMany for ProductRateValueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurrencyChildEntityTypes.ProductRateValueCollectionGetBySellRateCurrencyId">
            <summary>
             Collection of <c>Currency</c> as OneToMany for ProductRateValueCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CurrencyChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>Currency</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.CommissionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Commission</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionChildEntityTypes.Currency">
            <summary>
             Composite Property for <c>Currency</c> at CurrencyIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionChildEntityTypes.SalesPerson">
            <summary>
             Composite Property for <c>SalesPerson</c> at SalesPersonIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.CommissionChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.AccountManagerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.AccountManager</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccountManagerChildEntityTypes.Wholesaler">
            <summary>
             Composite Property for <c>Wholesaler</c> at WholesalerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.AccountManagerChildEntityTypes.CustomerCollection">
            <summary>
             Collection of <c>AccountManager</c> as OneToMany for CustomerCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBaseCore.Fill(System.Data.IDataReader,CONFDB.Entities.VList{CONFDB.Entities.Vw_SystemExtension_CustomerLabel},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:CONFDB.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:CONFDB.Entities.VList`1"/></returns>
        </member>
        <member name="M:CONFDB.Data.Bases.Vw_SystemExtension_CustomerLabelProviderBaseCore.RefreshEntity(System.Data.IDataReader,CONFDB.Entities.Vw_SystemExtension_CustomerLabel)">
            <summary>
            Refreshes the <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:CONFDB.Entities.Vw_SystemExtension_CustomerLabel"/> object to refresh.</param>
        </member>
        <member name="T:CONFDB.Data.Bases.RoleProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RoleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.RecordingProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.RecordingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.Product</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductChildEntityTypes.ProductType">
            <summary>
             Composite Property for <c>ProductType</c> at ProductTypeIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductChildEntityTypes.Wholesaler_ProductCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for Wholesaler_ProductCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductChildEntityTypes.ProductRateCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductRateCollection
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ProductChildEntityTypes.FeatureCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for FeatureCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.ParticipantListChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.ParticipantList</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ParticipantListChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.ParticipantListChildEntityTypes.ParticipantCollection">
            <summary>
             Collection of <c>ParticipantList</c> as OneToMany for ParticipantCollection
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.InvoiceSummaryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>CONFDB.Entities.InvoiceSummary</c>
            </summary>
        </member>
        <member name="F:CONFDB.Data.Bases.InvoiceSummaryChildEntityTypes.Customer">
            <summary>
             Composite Property for <c>Customer</c> at CustomerIdSource
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.EmailTemplateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.EmailTemplateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:CONFDB.Data.Bases.BridgeTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:CONFDB.Data.Bases.BridgeTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
    </members>
</doc>
